   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE4readERc,"axG",%progbits,_
  18              		.align	1
  19              		.weak	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE4readERc
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE4readERc:
  27              	.LVL0:
  28              	.LFB670:
  29              		.file 1 "../../..\\hal\\include/usart.h"
   1:../../..\hal\include/usart.h **** #pragma once
   2:../../..\hal\include/usart.h **** 
   3:../../..\hal\include/usart.h **** #include <gpio.h>
   4:../../..\hal\include/usart.h **** #include <fifo.h>
   5:../../..\hal\include/usart.h **** 
   6:../../..\hal\include/usart.h **** namespace hal
   7:../../..\hal\include/usart.h **** {
   8:../../..\hal\include/usart.h **** 
   9:../../..\hal\include/usart.h **** namespace usart
  10:../../..\hal\include/usart.h **** {
  11:../../..\hal\include/usart.h **** 
  12:../../..\hal\include/usart.h **** using namespace device;
  13:../../..\hal\include/usart.h **** using namespace gpio;
  14:../../..\hal\include/usart.h **** 
  15:../../..\hal\include/usart.h **** template<int NO> struct usart_traits {};
  16:../../..\hal\include/usart.h **** 
  17:../../..\hal\include/usart.h **** template<> struct usart_traits<1>
  18:../../..\hal\include/usart.h **** {
  19:../../..\hal\include/usart.h ****     typedef usart1_t T;
  20:../../..\hal\include/usart.h ****     static inline T& USART() { return USART1; }
  21:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART1_TX;
  22:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t rx = gpio::internal::USART1_RX;
  23:../../..\hal\include/usart.h **** };
  24:../../..\hal\include/usart.h **** 
  25:../../..\hal\include/usart.h **** template<> struct usart_traits<2>
  26:../../..\hal\include/usart.h **** {
  27:../../..\hal\include/usart.h ****     typedef usart2_t T;
  28:../../..\hal\include/usart.h ****     static inline T& USART() { return USART2; }
  29:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
  30:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t rx = gpio::internal::USART2_RX;
  31:../../..\hal\include/usart.h **** };
  32:../../..\hal\include/usart.h **** 
  33:../../..\hal\include/usart.h **** #if defined(HAVE_PERIPHERAL_USART3)
  34:../../..\hal\include/usart.h **** template<> struct usart_traits<3>
  35:../../..\hal\include/usart.h **** {
  36:../../..\hal\include/usart.h ****     typedef usart3_t T;
  37:../../..\hal\include/usart.h ****     static inline T& USART() { return USART3; }
  38:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART3_TX;
  39:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t rx = gpio::internal::USART3_RX;
  40:../../..\hal\include/usart.h **** };
  41:../../..\hal\include/usart.h **** #endif
  42:../../..\hal\include/usart.h **** 
  43:../../..\hal\include/usart.h **** #if defined(HAVE_PERIPHERAL_USART4)
  44:../../..\hal\include/usart.h **** template<> struct usart_traits<4>
  45:../../..\hal\include/usart.h **** {
  46:../../..\hal\include/usart.h ****     typedef usart4_t T;
  47:../../..\hal\include/usart.h ****     static inline T& USART() { return USART4; }
  48:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART4_TX;
  49:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t rx = gpio::internal::USART4_RX;
  50:../../..\hal\include/usart.h **** };
  51:../../..\hal\include/usart.h **** #endif
  52:../../..\hal\include/usart.h **** 
  53:../../..\hal\include/usart.h **** template<int NO, gpio_pin_t TX, gpio_pin_t RX> struct usart_t
  54:../../..\hal\include/usart.h **** {
  55:../../..\hal\include/usart.h **** private:
  56:../../..\hal\include/usart.h ****     typedef typename usart_traits<NO>::T _;
  57:../../..\hal\include/usart.h ****     typedef fifo_t<char, NO, 16> fifo;
  58:../../..\hal\include/usart.h **** 
  59:../../..\hal\include/usart.h **** public:
  60:../../..\hal\include/usart.h ****     template
  61:../../..\hal\include/usart.h ****         < uint32_t              baud_rate = 9600
  62:../../..\hal\include/usart.h ****         , uint8_t               data_bits = 8
  63:../../..\hal\include/usart.h ****         , uint8_t               stop_bits = 1
  64:../../..\hal\include/usart.h ****         , bool                  parity = false
  65:../../..\hal\include/usart.h ****         , output_speed_t        speed = high_speed
  66:../../..\hal\include/usart.h ****         >
  67:../../..\hal\include/usart.h ****     static inline void setup()
  68:../../..\hal\include/usart.h ****     {
  69:../../..\hal\include/usart.h ****         using namespace gpio::internal;
  70:../../..\hal\include/usart.h **** 
  71:../../..\hal\include/usart.h ****         alternate_t<TX, usart_traits<NO>::tx>::template setup<speed>();
  72:../../..\hal\include/usart.h ****         alternate_t<RX, usart_traits<NO>::rx>::template setup<pull_up>();
  73:../../..\hal\include/usart.h **** 
  74:../../..\hal\include/usart.h ****         peripheral_traits<_>::enable();                 // enable usart peripheral clock
  75:../../..\hal\include/usart.h ****         USART().BRR = sys_clock::freq() / baud_rate;    // set baud-rate FIXME: need clock referenc
  76:../../..\hal\include/usart.h ****         USART().CR1 |= _::CR1_RESET_VALUE               // reset control register 1
  77:../../..\hal\include/usart.h ****                     | _::CR1_TE                         // enable transmitter
  78:../../..\hal\include/usart.h ****                     | _::CR1_RE                         // enable receiver
  79:../../..\hal\include/usart.h ****                     | _::CR1_RXNEIE                     // interrupt on rx buffer not empty
  80:../../..\hal\include/usart.h ****                     | _::CR1_UE                         // enable usart itself
  81:../../..\hal\include/usart.h ****                     ;
  82:../../..\hal\include/usart.h ****         USART().CR2 |= _::CR2_RESET_VALUE;              // reset control register 2
  83:../../..\hal\include/usart.h ****         USART().CR3 |= _::CR3_RESET_VALUE;              // reset control register 3
  84:../../..\hal\include/usart.h ****     }
  85:../../..\hal\include/usart.h **** 
  86:../../..\hal\include/usart.h ****     __attribute__((always_inline))
  87:../../..\hal\include/usart.h ****     static inline void write(uint8_t x)
  88:../../..\hal\include/usart.h ****     {
  89:../../..\hal\include/usart.h ****         while (!tx_empty());
  90:../../..\hal\include/usart.h ****         USART2.TDR = x;
  91:../../..\hal\include/usart.h ****     }
  92:../../..\hal\include/usart.h **** 
  93:../../..\hal\include/usart.h ****     static inline void write(const char *s)
  94:../../..\hal\include/usart.h ****     {
  95:../../..\hal\include/usart.h ****         while (*s)
  96:../../..\hal\include/usart.h ****             write(*s++);
  97:../../..\hal\include/usart.h ****     }
  98:../../..\hal\include/usart.h **** 
  99:../../..\hal\include/usart.h ****     static uint32_t write(const char *buf, uint32_t len)
 100:../../..\hal\include/usart.h ****     {
 101:../../..\hal\include/usart.h ****         for (uint32_t i = 0; i < len; ++i)
 102:../../..\hal\include/usart.h ****             write(*buf++);
 103:../../..\hal\include/usart.h ****         return len;
 104:../../..\hal\include/usart.h ****     }
 105:../../..\hal\include/usart.h **** 
 106:../../..\hal\include/usart.h ****     // call isr in relevant handler
 107:../../..\hal\include/usart.h ****     __attribute__((always_inline))
 108:../../..\hal\include/usart.h ****     static inline void isr()
 109:../../..\hal\include/usart.h ****     {
 110:../../..\hal\include/usart.h ****         fifo::put(USART2.RDR);
 111:../../..\hal\include/usart.h ****     }
 112:../../..\hal\include/usart.h **** 
 113:../../..\hal\include/usart.h ****     __attribute__((always_inline))
 114:../../..\hal\include/usart.h ****     static inline bool read(char &c)
  30              		.loc 1 114 24 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              	.LBB100:
  35              	.LBI100:
  36              		.file 2 "../../..\\hal\\include/fifo.h"
   1:../../..\hal\include/fifo.h **** #pragma once
   2:../../..\hal\include/fifo.h **** 
   3:../../..\hal\include/fifo.h **** #include "hal.h"
   4:../../..\hal\include/fifo.h **** 
   5:../../..\hal\include/fifo.h **** template<class T, uint8_t IDENT, uint8_t BUFSIZE>
   6:../../..\hal\include/fifo.h **** class fifo_t
   7:../../..\hal\include/fifo.h **** {
   8:../../..\hal\include/fifo.h **** public:
   9:../../..\hal\include/fifo.h ****     static bool get(T& x)
  37              		.loc 2 9 17 view .LVU1
  38              	.LBB101:
  39              	.LBB102:
  40              	.LBI102:
  41              		.file 3 "../../..\\hal\\include/hal.h"
   1:../../..\hal\include/hal.h **** #pragma once
   2:../../..\hal\include/hal.h **** 
   3:../../..\hal\include/hal.h **** #include <cstddef>
   4:../../..\hal\include/hal.h **** 
   5:../../..\hal\include/hal.h **** #if defined(STM32F051)
   6:../../..\hal\include/hal.h ****     #include <device/stm32f0x1.h>
   7:../../..\hal\include/hal.h **** //    #undef HAVE_PERIPHERAL_GPIOE    // should not be present
   8:../../..\hal\include/hal.h ****     namespace device = stm32f0x1;
   9:../../..\hal\include/hal.h **** #elif defined(STM32F103)
  10:../../..\hal\include/hal.h ****     #include <device/stm32f103.h>
  11:../../..\hal\include/hal.h ****     namespace device = stm32f103;
  12:../../..\hal\include/hal.h **** #elif defined(STM32F411)
  13:../../..\hal\include/hal.h ****     #include <device/stm32f411.h>
  14:../../..\hal\include/hal.h ****     namespace device = stm32f411;
  15:../../..\hal\include/hal.h **** #elif defined(STM32G070)
  16:../../..\hal\include/hal.h ****     #include <device/stm32g07x.h>
  17:../../..\hal\include/hal.h ****     namespace device = stm32g07x;
  18:../../..\hal\include/hal.h **** #elif defined(STM32G431)
  19:../../..\hal\include/hal.h ****     #include <device/stm32g431.h>
  20:../../..\hal\include/hal.h ****     namespace device = stm32g431xx;
  21:../../..\hal\include/hal.h **** #else
  22:../../..\hal\include/hal.h ****     static_assert(false, "mcu not recognized");
  23:../../..\hal\include/hal.h **** #endif
  24:../../..\hal\include/hal.h **** 
  25:../../..\hal\include/hal.h **** namespace hal
  26:../../..\hal\include/hal.h **** {
  27:../../..\hal\include/hal.h **** 
  28:../../..\hal\include/hal.h **** class sys_tick
  29:../../..\hal\include/hal.h **** {
  30:../../..\hal\include/hal.h **** public:
  31:../../..\hal\include/hal.h ****     static void delay_ms(uint32_t ms);
  32:../../..\hal\include/hal.h ****     static inline uint32_t count() { return ms_counter; }
  33:../../..\hal\include/hal.h **** 
  34:../../..\hal\include/hal.h **** private:
  35:../../..\hal\include/hal.h ****     friend inline void sys_tick_init(uint32_t n);
  36:../../..\hal\include/hal.h ****     friend inline void sys_tick_update();
  37:../../..\hal\include/hal.h **** 
  38:../../..\hal\include/hal.h ****     static void init(uint32_t reload);
  39:../../..\hal\include/hal.h ****     static inline void update();
  40:../../..\hal\include/hal.h **** 
  41:../../..\hal\include/hal.h ****     static volatile uint32_t ms_counter;
  42:../../..\hal\include/hal.h **** };
  43:../../..\hal\include/hal.h **** 
  44:../../..\hal\include/hal.h **** class sys_clock
  45:../../..\hal\include/hal.h **** {
  46:../../..\hal\include/hal.h **** public:
  47:../../..\hal\include/hal.h ****     static void init();
  48:../../..\hal\include/hal.h ****     static uint32_t freq() { return m_freq; }
  49:../../..\hal\include/hal.h **** 
  50:../../..\hal\include/hal.h **** private:
  51:../../..\hal\include/hal.h ****     static uint32_t m_freq;
  52:../../..\hal\include/hal.h **** };
  53:../../..\hal\include/hal.h **** 
  54:../../..\hal\include/hal.h **** template<bool> struct is_in_range;
  55:../../..\hal\include/hal.h **** 
  56:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS, typename = is_in_range<true> >
  57:../../..\hal\include/hal.h **** struct nvic {};
  58:../../..\hal\include/hal.h **** 
  59:../../..\hal\include/hal.h **** #if defined(STM32F051) || defined(STM32G070)
  60:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS>
  61:../../..\hal\include/hal.h **** struct nvic<POS, is_in_range<(0 <= POS && POS < 32)> >
  62:../../..\hal\include/hal.h **** {
  63:../../..\hal\include/hal.h ****     static void enable() { device::NVIC.ISER |= 1 << POS; }
  64:../../..\hal\include/hal.h **** };
  65:../../..\hal\include/hal.h **** 
  66:../../..\hal\include/hal.h **** #elif defined(STM32F411) || defined(STM32G431)
  67:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS>
  68:../../..\hal\include/hal.h **** struct nvic<POS, is_in_range<(0 <= POS && POS < 32)> >
  69:../../..\hal\include/hal.h **** {
  70:../../..\hal\include/hal.h ****     static void enable() { device::NVIC.ISER0 |= 1 << POS; }
  71:../../..\hal\include/hal.h **** };
  72:../../..\hal\include/hal.h **** 
  73:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS>
  74:../../..\hal\include/hal.h **** struct nvic<POS, is_in_range<(32 <= POS && POS < 64)> >
  75:../../..\hal\include/hal.h **** {
  76:../../..\hal\include/hal.h ****     static void enable() { device::NVIC.ISER1 |= 1 << (POS - 32); }
  77:../../..\hal\include/hal.h **** };
  78:../../..\hal\include/hal.h **** 
  79:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS>
  80:../../..\hal\include/hal.h **** struct nvic<POS, is_in_range<(64 <= POS && POS < 96)> >
  81:../../..\hal\include/hal.h **** {
  82:../../..\hal\include/hal.h ****     static void enable() { device::NVIC.ISER2 |= 1 << (POS - 64); }
  83:../../..\hal\include/hal.h **** };
  84:../../..\hal\include/hal.h **** #endif
  85:../../..\hal\include/hal.h **** 
  86:../../..\hal\include/hal.h **** #if defined(STM32G431)
  87:../../..\hal\include/hal.h **** template<interrupt::interrupt_t POS>
  88:../../..\hal\include/hal.h **** struct nvic<POS, is_in_range<(96 <= POS && POS < 128)> >
  89:../../..\hal\include/hal.h **** {
  90:../../..\hal\include/hal.h ****     static void enable() { device::NVIC.ISER3 |= 1 << (POS - 96); }
  91:../../..\hal\include/hal.h **** };
  92:../../..\hal\include/hal.h **** #endif
  93:../../..\hal\include/hal.h **** 
  94:../../..\hal\include/hal.h **** struct critical_section_t
  95:../../..\hal\include/hal.h **** {
  96:../../..\hal\include/hal.h ****     critical_section_t() { interrupt::disable(); }
  42              		.loc 3 96 5 view .LVU2
  43              	.LBE102:
  44              	.LBE101:
  45              	.LBE100:
  46              		.loc 3 96 28 view .LVU3
  47              	.LBB116:
  48              	.LBB113:
  49              	.LBB107:
  50              	.LBB103:
  51              	.LBI103:
  52              		.file 4 "../../..\\hal\\include/device/stm32g431.h"
   1:../../..\hal\include/device/stm32g431.h **** #pragma once
   2:../../..\hal\include/device/stm32g431.h **** 
   3:../../..\hal\include/device/stm32g431.h **** #include <stdint.h>
   4:../../..\hal\include/device/stm32g431.h **** 
   5:../../..\hal\include/device/stm32g431.h **** ////
   6:../../..\hal\include/device/stm32g431.h **** //
   7:../../..\hal\include/device/stm32g431.h **** //    STM32G431xx
   8:../../..\hal\include/device/stm32g431.h **** //
   9:../../..\hal\include/device/stm32g431.h **** //       schema-version : 1.1
  10:../../..\hal\include/device/stm32g431.h **** //       vendor         : 
  11:../../..\hal\include/device/stm32g431.h **** //       series         : 
  12:../../..\hal\include/device/stm32g431.h **** //       device-version : 1.0
  13:../../..\hal\include/device/stm32g431.h **** //       address-unit   : 8 bits
  14:../../..\hal\include/device/stm32g431.h **** //       device-width   : 32
  15:../../..\hal\include/device/stm32g431.h **** //       device-size    : 32
  16:../../..\hal\include/device/stm32g431.h **** //
  17:../../..\hal\include/device/stm32g431.h **** ////
  18:../../..\hal\include/device/stm32g431.h **** 
  19:../../..\hal\include/device/stm32g431.h **** namespace stm32g431xx
  20:../../..\hal\include/device/stm32g431.h **** {
  21:../../..\hal\include/device/stm32g431.h **** 
  22:../../..\hal\include/device/stm32g431.h **** template<int N> class reserved_t { private: uint32_t m_pad[N]; };
  23:../../..\hal\include/device/stm32g431.h **** 
  24:../../..\hal\include/device/stm32g431.h **** template<uint8_t POS, uint32_t MASK>
  25:../../..\hal\include/device/stm32g431.h **** struct bit_field_t
  26:../../..\hal\include/device/stm32g431.h **** {
  27:../../..\hal\include/device/stm32g431.h ****     template <uint32_t X>
  28:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t value()
  29:../../..\hal\include/device/stm32g431.h ****     {
  30:../../..\hal\include/device/stm32g431.h ****         static_assert((X & ~MASK) == 0, "field value too large");
  31:../../..\hal\include/device/stm32g431.h ****         return X << POS;
  32:../../..\hal\include/device/stm32g431.h ****     }
  33:../../..\hal\include/device/stm32g431.h **** };
  34:../../..\hal\include/device/stm32g431.h **** 
  35:../../..\hal\include/device/stm32g431.h **** ////
  36:../../..\hal\include/device/stm32g431.h **** //
  37:../../..\hal\include/device/stm32g431.h **** //    Cyclic redundancy check calculation unit
  38:../../..\hal\include/device/stm32g431.h **** //
  39:../../..\hal\include/device/stm32g431.h **** ////
  40:../../..\hal\include/device/stm32g431.h **** 
  41:../../..\hal\include/device/stm32g431.h **** struct crc_t
  42:../../..\hal\include/device/stm32g431.h **** {
  43:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-write] Data register
  44:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-write] Independent data register
  45:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // Control register
  46:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
  47:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    INIT;                 // [Read-write] Initial CRC value
  48:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    POL;                  // [Read-write] polynomial
  49:../../..\hal\include/device/stm32g431.h **** 
  50:../../..\hal\include/device/stm32g431.h **** 
  51:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0xffffffff;
  52:../../..\hal\include/device/stm32g431.h **** 
  53:../../..\hal\include/device/stm32g431.h **** 
  54:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
  55:../../..\hal\include/device/stm32g431.h **** 
  56:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_REV_OUT = 0x80;       // Reverse output data, Read-write
  57:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
  58:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_REV_IN =              // Reverse input data (2 bits), Read-write
  59:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
  60:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
  61:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_POLYSIZE =            // Polynomial size (2 bits), Read-write
  62:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
  63:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RESET = 0x1;          // RESET bit, Write-only
  64:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
  65:../../..\hal\include/device/stm32g431.h **** 
  66:../../..\hal\include/device/stm32g431.h **** 
  67:../../..\hal\include/device/stm32g431.h ****     static const uint32_t INIT_RESET_VALUE = 0xffffffff;
  68:../../..\hal\include/device/stm32g431.h **** 
  69:../../..\hal\include/device/stm32g431.h **** 
  70:../../..\hal\include/device/stm32g431.h ****     static const uint32_t POL_RESET_VALUE = 0x4c11db7;
  71:../../..\hal\include/device/stm32g431.h **** };
  72:../../..\hal\include/device/stm32g431.h **** 
  73:../../..\hal\include/device/stm32g431.h **** static crc_t& CRC = *reinterpret_cast<crc_t*>(0x40023000);
  74:../../..\hal\include/device/stm32g431.h **** 
  75:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_CRC
  76:../../..\hal\include/device/stm32g431.h **** 
  77:../../..\hal\include/device/stm32g431.h **** 
  78:../../..\hal\include/device/stm32g431.h **** ////
  79:../../..\hal\include/device/stm32g431.h **** //
  80:../../..\hal\include/device/stm32g431.h **** //    WinWATCHDOG
  81:../../..\hal\include/device/stm32g431.h **** //
  82:../../..\hal\include/device/stm32g431.h **** ////
  83:../../..\hal\include/device/stm32g431.h **** 
  84:../../..\hal\include/device/stm32g431.h **** struct wwdg_t
  85:../../..\hal\include/device/stm32g431.h **** {
  86:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KR;                   // [Write-only] Key register
  87:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PR;                   // [Read-write] Prescaler register
  88:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RLR;                  // [Read-write] Reload register
  89:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-only] Status register
  90:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WINR;                 // [Read-write] Window register
  91:../../..\hal\include/device/stm32g431.h **** 
  92:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
  93:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t KR_KEY =                 // Key value (write only, read 0x0000) (16 b
  94:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
  95:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KR_RESET_VALUE = 0x0;
  96:../../..\hal\include/device/stm32g431.h **** 
  97:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
  98:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR_PR =                  // Prescaler divider (3 bits)
  99:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
 100:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PR_RESET_VALUE = 0x0;
 101:../../..\hal\include/device/stm32g431.h **** 
 102:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RLR_RL =                  // Watchdog counter reload value (12 bits)
 104:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
 105:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RLR_RESET_VALUE = 0xfff;
 106:../../..\hal\include/device/stm32g431.h **** 
 107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_WVU = 0x4;            // Watchdog counter window value update
 108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RVU = 0x2;            // Watchdog counter reload value update
 109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_PVU = 0x1;            // Watchdog prescaler value update
 110:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
 111:../../..\hal\include/device/stm32g431.h **** 
 112:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WINR_WIN =                 // Watchdog counter window value (12 bits)
 114:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
 115:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WINR_RESET_VALUE = 0xfff;
 116:../../..\hal\include/device/stm32g431.h **** };
 117:../../..\hal\include/device/stm32g431.h **** 
 118:../../..\hal\include/device/stm32g431.h **** static wwdg_t& WWDG = *reinterpret_cast<wwdg_t*>(0x40002c00);
 119:../../..\hal\include/device/stm32g431.h **** 
 120:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_WWDG
 121:../../..\hal\include/device/stm32g431.h **** 
 122:../../..\hal\include/device/stm32g431.h **** 
 123:../../..\hal\include/device/stm32g431.h **** ////
 124:../../..\hal\include/device/stm32g431.h **** //
 125:../../..\hal\include/device/stm32g431.h **** //    System window watchdog
 126:../../..\hal\include/device/stm32g431.h **** //
 127:../../..\hal\include/device/stm32g431.h **** ////
 128:../../..\hal\include/device/stm32g431.h **** 
 129:../../..\hal\include/device/stm32g431.h **** struct iwdg_t
 130:../../..\hal\include/device/stm32g431.h **** {
 131:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] Control register
 132:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFR;                  // [Read-write] Configuration register
 133:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] Status register
 134:../../..\hal\include/device/stm32g431.h **** 
 135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_WDGA = 0x80;          // Activation bit
 136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_T =                   // 7-bit counter (MSB to LSB) (7 bits)
 138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
 139:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x7f;
 140:../../..\hal\include/device/stm32g431.h **** 
 141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFR_WDGTB =               // Timer base (3 bits)
 143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x7>::value<X>();
 144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFR_EWI = 0x200;          // Early wakeup interrupt
 145:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFR_W =                   // 7-bit window value (7 bits)
 147:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
 148:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFR_RESET_VALUE = 0x7f;
 149:../../..\hal\include/device/stm32g431.h **** 
 150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_EWIF = 0x1;           // Early wakeup interrupt flag
 151:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
 152:../../..\hal\include/device/stm32g431.h **** };
 153:../../..\hal\include/device/stm32g431.h **** 
 154:../../..\hal\include/device/stm32g431.h **** static iwdg_t& IWDG = *reinterpret_cast<iwdg_t*>(0x40003000);
 155:../../..\hal\include/device/stm32g431.h **** 
 156:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_IWDG
 157:../../..\hal\include/device/stm32g431.h **** 
 158:../../..\hal\include/device/stm32g431.h **** 
 159:../../..\hal\include/device/stm32g431.h **** ////
 160:../../..\hal\include/device/stm32g431.h **** //
 161:../../..\hal\include/device/stm32g431.h **** //    Inter-integrated circuit
 162:../../..\hal\include/device/stm32g431.h **** //
 163:../../..\hal\include/device/stm32g431.h **** ////
 164:../../..\hal\include/device/stm32g431.h **** 
 165:../../..\hal\include/device/stm32g431.h **** struct i2c1_t
 166:../../..\hal\include/device/stm32g431.h **** {
 167:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
 168:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
 169:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR1;                 // [Read-write] Own address register 1
 170:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR2;                 // [Read-write] Own address register 2
 171:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMINGR;              // [Read-write] Timing register
 172:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMEOUTR;             // [Read-write] Status register 1
 173:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // Interrupt and Status register
 174:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt clear register
 175:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PECR;                 // [Read-only] PEC register
 176:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXDR;                 // [Read-only] Receive data register
 177:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXDR;                 // [Read-write] Transmit data register
 178:../../..\hal\include/device/stm32g431.h **** 
 179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PE = 0x1;             // Peripheral enable
 180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXIE = 0x2;           // TX Interrupt enable
 181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXIE = 0x4;           // RX Interrupt enable
 182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ADDRIE = 0x8;         // Address match interrupt enable (slave on
 183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NACKIE = 0x10;        // Not acknowledge received interrupt enabl
 184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_STOPIE = 0x20;        // STOP detection Interrupt enable
 185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transfer Complete interrupt enable
 186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ERRIE = 0x80;         // Error interrupts enable
 187:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DNF =                 // Digital noise filter (4 bits)
 189:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
 190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ANFOFF = 0x1000;      // Analog noise filter OFF
 191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXDMAEN = 0x4000;     // DMA transmission requests enable
 192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXDMAEN = 0x8000;     // DMA reception requests enable
 193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SBC = 0x10000;        // Slave byte control
 194:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NOSTRETCH = 0x20000;  // Clock stretching disable
 195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WUPEN = 0x40000;      // Wakeup from STOP enable
 196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_GCEN = 0x80000;       // General call enable
 197:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBHEN = 0x100000;    // SMBus Host address enable
 198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBDEN = 0x200000;    // SMBus Device Default address enable
 199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ALERTEN = 0x400000;   // SMBUS alert enable
 200:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PECEN = 0x800000;     // PEC enable
 201:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
 202:../../..\hal\include/device/stm32g431.h **** 
 203:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PECBYTE = 0x4000000;  // Packet error checking byte
 204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_AUTOEND = 0x2000000;  // Automatic end mode (master mode)
 205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RELOAD = 0x1000000;   // NBYTES reload mode
 206:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NBYTES =              // Number of bytes (8 bits)
 208:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
 209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NACK = 0x8000;        // NACK generation (slave mode)
 210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP = 0x4000;        // Stop generation (master mode)
 211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_START = 0x2000;       // Start generation
 212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_HEAD10R = 0x1000;     // 10-bit address header only read directio
 213:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD10 = 0x800;        // 10-bit addressing mode (master mode)
 214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RD_WRN = 0x400;       // Transfer direction (master mode)
 215:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SADD =                // Slave address bit (master mode) (10 bits
 217:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 218:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
 219:../../..\hal\include/device/stm32g431.h **** 
 220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1 =                 // Interface address (10 bits)
 222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1MODE = 0x400;      // Own Address 1 10-bit mode
 224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1EN = 0x8000;       // Own Address 1 enable
 225:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR1_RESET_VALUE = 0x0;
 226:../../..\hal\include/device/stm32g431.h **** 
 227:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 228:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2 =                 // Interface address (7 bits)
 229:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x7f>::value<X>();
 230:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2MSK =              // Own Address 2 masks (3 bits)
 232:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
 233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2EN = 0x8000;       // Own Address 2 enable
 234:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR2_RESET_VALUE = 0x0;
 235:../../..\hal\include/device/stm32g431.h **** 
 236:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLL =                // SCL low period (master mode) (8 bits
 238:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 239:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLH =                // SCL high period (master mode) (8 bit
 241:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
 242:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SDADEL =              // Data hold time (4 bits)
 244:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
 245:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLDEL =              // Data setup time (4 bits)
 247:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
 248:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_PRESC =               // Timing prescaler (4 bits)
 250:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
 251:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMINGR_RESET_VALUE = 0x0;
 252:../../..\hal\include/device/stm32g431.h **** 
 253:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTA =            // Bus timeout A (12 bits)
 255:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
 256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIDLE = 0x1000;       // Idle clock timeout detection
 257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMOUTEN = 0x8000;    // Clock timeout enable
 258:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTB =            // Bus timeout B (12 bits)
 260:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
 261:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TEXTEN = 0x80000000;  // Extended clock timeout enable
 262:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMEOUTR_RESET_VALUE = 0x0;
 263:../../..\hal\include/device/stm32g431.h **** 
 264:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 265:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDCODE =             // Address match code (Slave mode) (7 bits)
 266:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7f>::value<X>();
 267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_DIR = 0x10000;        // Transfer direction (Slave mode), Read-on
 268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x8000;        // Bus busy, Read-only
 269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ALERT = 0x2000;       // SMBus alert, Read-only
 270:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TIMEOUT = 0x1000;     // Timeout or t_low detection flag, Read-on
 271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PECERR = 0x800;       // PEC Error in reception, Read-only
 272:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_OVR = 0x400;          // Overrun/Underrun (slave mode), Read-only
 273:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ARLO = 0x200;         // Arbitration lost, Read-only
 274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BERR = 0x100;         // Bus error, Read-only
 275:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCR = 0x80;           // Transfer Complete Reload, Read-only
 276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // Transfer Complete (master mode), Read-on
 277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_STOPF = 0x20;         // Stop detection flag, Read-only
 278:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NACKF = 0x10;         // Not acknowledge received flag, Read-only
 279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDR = 0x8;           // Address matched (slave mode), Read-only
 280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x4;           // Receive data register not empty (receive
 281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXIS = 0x2;           // Transmit interrupt status (transmitters)
 282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x1;            // Transmit data register empty (transmitte
 283:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x1;
 284:../../..\hal\include/device/stm32g431.h **** 
 285:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ALERTCF = 0x2000;     // Alert flag clear
 286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TIMOUTCF = 0x1000;    // Timeout detection flag clear
 287:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECCF = 0x800;        // PEC Error flag clear
 288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_OVRCF = 0x400;        // Overrun/Underrun flag clear
 289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ARLOCF = 0x200;       // Arbitration lost flag clear
 290:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_BERRCF = 0x100;       // Bus error flag clear
 291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_STOPCF = 0x20;        // Stop detection flag clear
 292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NACKCF = 0x10;        // Not Acknowledge flag clear
 293:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ADDRCF = 0x8;         // Address Matched flag clear
 294:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
 295:../../..\hal\include/device/stm32g431.h **** 
 296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PECR_PEC =                 // Packet error checking register (8 bits)
 298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 299:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PECR_RESET_VALUE = 0x0;
 300:../../..\hal\include/device/stm32g431.h **** 
 301:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXDR_RXDATA =              // 8-bit receive data (8 bits)
 303:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 304:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXDR_RESET_VALUE = 0x0;
 305:../../..\hal\include/device/stm32g431.h **** 
 306:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXDR_TXDATA =              // 8-bit transmit data (8 bits)
 308:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 309:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXDR_RESET_VALUE = 0x0;
 310:../../..\hal\include/device/stm32g431.h **** 
 311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C1_ER = 32; // I2C1_ER
 312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C1_EV = 31; // I2C1_EV
 313:../../..\hal\include/device/stm32g431.h **** };
 314:../../..\hal\include/device/stm32g431.h **** 
 315:../../..\hal\include/device/stm32g431.h **** static i2c1_t& I2C1 = *reinterpret_cast<i2c1_t*>(0x40005400);
 316:../../..\hal\include/device/stm32g431.h **** 
 317:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_I2C1
 318:../../..\hal\include/device/stm32g431.h **** 
 319:../../..\hal\include/device/stm32g431.h **** 
 320:../../..\hal\include/device/stm32g431.h **** ////
 321:../../..\hal\include/device/stm32g431.h **** //
 322:../../..\hal\include/device/stm32g431.h **** //    Inter-integrated circuit
 323:../../..\hal\include/device/stm32g431.h **** //
 324:../../..\hal\include/device/stm32g431.h **** ////
 325:../../..\hal\include/device/stm32g431.h **** 
 326:../../..\hal\include/device/stm32g431.h **** struct i2c2_t
 327:../../..\hal\include/device/stm32g431.h **** {
 328:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
 329:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
 330:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR1;                 // [Read-write] Own address register 1
 331:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR2;                 // [Read-write] Own address register 2
 332:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMINGR;              // [Read-write] Timing register
 333:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMEOUTR;             // [Read-write] Status register 1
 334:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // Interrupt and Status register
 335:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt clear register
 336:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PECR;                 // [Read-only] PEC register
 337:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXDR;                 // [Read-only] Receive data register
 338:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXDR;                 // [Read-write] Transmit data register
 339:../../..\hal\include/device/stm32g431.h **** 
 340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PE = 0x1;             // Peripheral enable
 341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXIE = 0x2;           // TX Interrupt enable
 342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXIE = 0x4;           // RX Interrupt enable
 343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ADDRIE = 0x8;         // Address match interrupt enable (slave on
 344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NACKIE = 0x10;        // Not acknowledge received interrupt enabl
 345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_STOPIE = 0x20;        // STOP detection Interrupt enable
 346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transfer Complete interrupt enable
 347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ERRIE = 0x80;         // Error interrupts enable
 348:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DNF =                 // Digital noise filter (4 bits)
 350:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
 351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ANFOFF = 0x1000;      // Analog noise filter OFF
 352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXDMAEN = 0x4000;     // DMA transmission requests enable
 353:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXDMAEN = 0x8000;     // DMA reception requests enable
 354:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SBC = 0x10000;        // Slave byte control
 355:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NOSTRETCH = 0x20000;  // Clock stretching disable
 356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WUPEN = 0x40000;      // Wakeup from STOP enable
 357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_GCEN = 0x80000;       // General call enable
 358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBHEN = 0x100000;    // SMBus Host address enable
 359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBDEN = 0x200000;    // SMBus Device Default address enable
 360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ALERTEN = 0x400000;   // SMBUS alert enable
 361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PECEN = 0x800000;     // PEC enable
 362:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
 363:../../..\hal\include/device/stm32g431.h **** 
 364:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PECBYTE = 0x4000000;  // Packet error checking byte
 365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_AUTOEND = 0x2000000;  // Automatic end mode (master mode)
 366:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RELOAD = 0x1000000;   // NBYTES reload mode
 367:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NBYTES =              // Number of bytes (8 bits)
 369:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
 370:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NACK = 0x8000;        // NACK generation (slave mode)
 371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP = 0x4000;        // Stop generation (master mode)
 372:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_START = 0x2000;       // Start generation
 373:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_HEAD10R = 0x1000;     // 10-bit address header only read directio
 374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD10 = 0x800;        // 10-bit addressing mode (master mode)
 375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RD_WRN = 0x400;       // Transfer direction (master mode)
 376:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SADD =                // Slave address bit (master mode) (10 bits
 378:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 379:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
 380:../../..\hal\include/device/stm32g431.h **** 
 381:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1 =                 // Interface address (10 bits)
 383:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1MODE = 0x400;      // Own Address 1 10-bit mode
 385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1EN = 0x8000;       // Own Address 1 enable
 386:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR1_RESET_VALUE = 0x0;
 387:../../..\hal\include/device/stm32g431.h **** 
 388:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2 =                 // Interface address (7 bits)
 390:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x7f>::value<X>();
 391:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2MSK =              // Own Address 2 masks (3 bits)
 393:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
 394:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2EN = 0x8000;       // Own Address 2 enable
 395:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR2_RESET_VALUE = 0x0;
 396:../../..\hal\include/device/stm32g431.h **** 
 397:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLL =                // SCL low period (master mode) (8 bits
 399:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 400:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLH =                // SCL high period (master mode) (8 bit
 402:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
 403:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SDADEL =              // Data hold time (4 bits)
 405:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
 406:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLDEL =              // Data setup time (4 bits)
 408:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
 409:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_PRESC =               // Timing prescaler (4 bits)
 411:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
 412:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMINGR_RESET_VALUE = 0x0;
 413:../../..\hal\include/device/stm32g431.h **** 
 414:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTA =            // Bus timeout A (12 bits)
 416:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
 417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIDLE = 0x1000;       // Idle clock timeout detection
 418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMOUTEN = 0x8000;    // Clock timeout enable
 419:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTB =            // Bus timeout B (12 bits)
 421:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
 422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TEXTEN = 0x80000000;  // Extended clock timeout enable
 423:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMEOUTR_RESET_VALUE = 0x0;
 424:../../..\hal\include/device/stm32g431.h **** 
 425:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDCODE =             // Address match code (Slave mode) (7 bits)
 427:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7f>::value<X>();
 428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_DIR = 0x10000;        // Transfer direction (Slave mode), Read-on
 429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x8000;        // Bus busy, Read-only
 430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ALERT = 0x2000;       // SMBus alert, Read-only
 431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TIMEOUT = 0x1000;     // Timeout or t_low detection flag, Read-on
 432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PECERR = 0x800;       // PEC Error in reception, Read-only
 433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_OVR = 0x400;          // Overrun/Underrun (slave mode), Read-only
 434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ARLO = 0x200;         // Arbitration lost, Read-only
 435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BERR = 0x100;         // Bus error, Read-only
 436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCR = 0x80;           // Transfer Complete Reload, Read-only
 437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // Transfer Complete (master mode), Read-on
 438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_STOPF = 0x20;         // Stop detection flag, Read-only
 439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NACKF = 0x10;         // Not acknowledge received flag, Read-only
 440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDR = 0x8;           // Address matched (slave mode), Read-only
 441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x4;           // Receive data register not empty (receive
 442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXIS = 0x2;           // Transmit interrupt status (transmitters)
 443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x1;            // Transmit data register empty (transmitte
 444:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x1;
 445:../../..\hal\include/device/stm32g431.h **** 
 446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ALERTCF = 0x2000;     // Alert flag clear
 447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TIMOUTCF = 0x1000;    // Timeout detection flag clear
 448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECCF = 0x800;        // PEC Error flag clear
 449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_OVRCF = 0x400;        // Overrun/Underrun flag clear
 450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ARLOCF = 0x200;       // Arbitration lost flag clear
 451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_BERRCF = 0x100;       // Bus error flag clear
 452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_STOPCF = 0x20;        // Stop detection flag clear
 453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NACKCF = 0x10;        // Not Acknowledge flag clear
 454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ADDRCF = 0x8;         // Address Matched flag clear
 455:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
 456:../../..\hal\include/device/stm32g431.h **** 
 457:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PECR_PEC =                 // Packet error checking register (8 bits)
 459:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 460:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PECR_RESET_VALUE = 0x0;
 461:../../..\hal\include/device/stm32g431.h **** 
 462:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXDR_RXDATA =              // 8-bit receive data (8 bits)
 464:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 465:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXDR_RESET_VALUE = 0x0;
 466:../../..\hal\include/device/stm32g431.h **** 
 467:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXDR_TXDATA =              // 8-bit transmit data (8 bits)
 469:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 470:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXDR_RESET_VALUE = 0x0;
 471:../../..\hal\include/device/stm32g431.h **** 
 472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C2_ER = 34; // I2C2_ER
 473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C2_EV = 33; // I2C2_EV
 474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t WWDG = 0; // Window Watchdog interrupt
 475:../../..\hal\include/device/stm32g431.h **** };
 476:../../..\hal\include/device/stm32g431.h **** 
 477:../../..\hal\include/device/stm32g431.h **** static i2c2_t& I2C2 = *reinterpret_cast<i2c2_t*>(0x40005800);
 478:../../..\hal\include/device/stm32g431.h **** 
 479:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_I2C2
 480:../../..\hal\include/device/stm32g431.h **** 
 481:../../..\hal\include/device/stm32g431.h **** 
 482:../../..\hal\include/device/stm32g431.h **** ////
 483:../../..\hal\include/device/stm32g431.h **** //
 484:../../..\hal\include/device/stm32g431.h **** //    Inter-integrated circuit
 485:../../..\hal\include/device/stm32g431.h **** //
 486:../../..\hal\include/device/stm32g431.h **** ////
 487:../../..\hal\include/device/stm32g431.h **** 
 488:../../..\hal\include/device/stm32g431.h **** struct i2c3_t
 489:../../..\hal\include/device/stm32g431.h **** {
 490:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
 491:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
 492:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR1;                 // [Read-write] Own address register 1
 493:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OAR2;                 // [Read-write] Own address register 2
 494:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMINGR;              // [Read-write] Timing register
 495:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TIMEOUTR;             // [Read-write] Status register 1
 496:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // Interrupt and Status register
 497:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt clear register
 498:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PECR;                 // [Read-only] PEC register
 499:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXDR;                 // [Read-only] Receive data register
 500:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXDR;                 // [Read-write] Transmit data register
 501:../../..\hal\include/device/stm32g431.h **** 
 502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PE = 0x1;             // Peripheral enable
 503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXIE = 0x2;           // TX Interrupt enable
 504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXIE = 0x4;           // RX Interrupt enable
 505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ADDRIE = 0x8;         // Address match interrupt enable (slave on
 506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NACKIE = 0x10;        // Not acknowledge received interrupt enabl
 507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_STOPIE = 0x20;        // STOP detection Interrupt enable
 508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transfer Complete interrupt enable
 509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ERRIE = 0x80;         // Error interrupts enable
 510:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DNF =                 // Digital noise filter (4 bits)
 512:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
 513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ANFOFF = 0x1000;      // Analog noise filter OFF
 514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXDMAEN = 0x4000;     // DMA transmission requests enable
 515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXDMAEN = 0x8000;     // DMA reception requests enable
 516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SBC = 0x10000;        // Slave byte control
 517:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_NOSTRETCH = 0x20000;  // Clock stretching disable
 518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WUPEN = 0x40000;      // Wakeup from STOP enable
 519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_GCEN = 0x80000;       // General call enable
 520:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBHEN = 0x100000;    // SMBus Host address enable
 521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SMBDEN = 0x200000;    // SMBus Device Default address enable
 522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ALERTEN = 0x400000;   // SMBUS alert enable
 523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PECEN = 0x800000;     // PEC enable
 524:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
 525:../../..\hal\include/device/stm32g431.h **** 
 526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PECBYTE = 0x4000000;  // Packet error checking byte
 527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_AUTOEND = 0x2000000;  // Automatic end mode (master mode)
 528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RELOAD = 0x1000000;   // NBYTES reload mode
 529:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NBYTES =              // Number of bytes (8 bits)
 531:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
 532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NACK = 0x8000;        // NACK generation (slave mode)
 533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP = 0x4000;        // Stop generation (master mode)
 534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_START = 0x2000;       // Start generation
 535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_HEAD10R = 0x1000;     // 10-bit address header only read directio
 536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD10 = 0x800;        // 10-bit addressing mode (master mode)
 537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RD_WRN = 0x400;       // Transfer direction (master mode)
 538:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SADD =                // Slave address bit (master mode) (10 bits
 540:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 541:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
 542:../../..\hal\include/device/stm32g431.h **** 
 543:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1 =                 // Interface address (10 bits)
 545:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
 546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1MODE = 0x400;      // Own Address 1 10-bit mode
 547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR1_OA1EN = 0x8000;       // Own Address 1 enable
 548:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR1_RESET_VALUE = 0x0;
 549:../../..\hal\include/device/stm32g431.h **** 
 550:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2 =                 // Interface address (7 bits)
 552:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x7f>::value<X>();
 553:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2MSK =              // Own Address 2 masks (3 bits)
 555:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
 556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OAR2_OA2EN = 0x8000;       // Own Address 2 enable
 557:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OAR2_RESET_VALUE = 0x0;
 558:../../..\hal\include/device/stm32g431.h **** 
 559:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLL =                // SCL low period (master mode) (8 bits
 561:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 562:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLH =                // SCL high period (master mode) (8 bit
 564:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
 565:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 566:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SDADEL =              // Data hold time (4 bits)
 567:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
 568:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_SCLDEL =              // Data setup time (4 bits)
 570:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
 571:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMINGR_PRESC =               // Timing prescaler (4 bits)
 573:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
 574:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMINGR_RESET_VALUE = 0x0;
 575:../../..\hal\include/device/stm32g431.h **** 
 576:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTA =            // Bus timeout A (12 bits)
 578:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
 579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIDLE = 0x1000;       // Idle clock timeout detection
 580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMOUTEN = 0x8000;    // Clock timeout enable
 581:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TIMEOUTB =            // Bus timeout B (12 bits)
 583:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
 584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TIMEOUTR_TEXTEN = 0x80000000;  // Extended clock timeout enable
 585:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TIMEOUTR_RESET_VALUE = 0x0;
 586:../../..\hal\include/device/stm32g431.h **** 
 587:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDCODE =             // Address match code (Slave mode) (7 bits)
 589:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7f>::value<X>();
 590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_DIR = 0x10000;        // Transfer direction (Slave mode), Read-on
 591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x8000;        // Bus busy, Read-only
 592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ALERT = 0x2000;       // SMBus alert, Read-only
 593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TIMEOUT = 0x1000;     // Timeout or t_low detection flag, Read-on
 594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PECERR = 0x800;       // PEC Error in reception, Read-only
 595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_OVR = 0x400;          // Overrun/Underrun (slave mode), Read-only
 596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ARLO = 0x200;         // Arbitration lost, Read-only
 597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BERR = 0x100;         // Bus error, Read-only
 598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCR = 0x80;           // Transfer Complete Reload, Read-only
 599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // Transfer Complete (master mode), Read-on
 600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_STOPF = 0x20;         // Stop detection flag, Read-only
 601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NACKF = 0x10;         // Not acknowledge received flag, Read-only
 602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADDR = 0x8;           // Address matched (slave mode), Read-only
 603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x4;           // Receive data register not empty (receive
 604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXIS = 0x2;           // Transmit interrupt status (transmitters)
 605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x1;            // Transmit data register empty (transmitte
 606:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x1;
 607:../../..\hal\include/device/stm32g431.h **** 
 608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ALERTCF = 0x2000;     // Alert flag clear
 609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TIMOUTCF = 0x1000;    // Timeout detection flag clear
 610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECCF = 0x800;        // PEC Error flag clear
 611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_OVRCF = 0x400;        // Overrun/Underrun flag clear
 612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ARLOCF = 0x200;       // Arbitration lost flag clear
 613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_BERRCF = 0x100;       // Bus error flag clear
 614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_STOPCF = 0x20;        // Stop detection flag clear
 615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NACKCF = 0x10;        // Not Acknowledge flag clear
 616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ADDRCF = 0x8;         // Address Matched flag clear
 617:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
 618:../../..\hal\include/device/stm32g431.h **** 
 619:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PECR_PEC =                 // Packet error checking register (8 bits)
 621:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 622:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PECR_RESET_VALUE = 0x0;
 623:../../..\hal\include/device/stm32g431.h **** 
 624:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXDR_RXDATA =              // 8-bit receive data (8 bits)
 626:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 627:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXDR_RESET_VALUE = 0x0;
 628:../../..\hal\include/device/stm32g431.h **** 
 629:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXDR_TXDATA =              // 8-bit transmit data (8 bits)
 631:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 632:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXDR_RESET_VALUE = 0x0;
 633:../../..\hal\include/device/stm32g431.h **** 
 634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C3_ER = 93; // I2C3_ER
 635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t I2C3_EV = 92; // I2C3_EV
 636:../../..\hal\include/device/stm32g431.h **** };
 637:../../..\hal\include/device/stm32g431.h **** 
 638:../../..\hal\include/device/stm32g431.h **** static i2c3_t& I2C3 = *reinterpret_cast<i2c3_t*>(0x40007800);
 639:../../..\hal\include/device/stm32g431.h **** 
 640:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_I2C3
 641:../../..\hal\include/device/stm32g431.h **** 
 642:../../..\hal\include/device/stm32g431.h **** 
 643:../../..\hal\include/device/stm32g431.h **** ////
 644:../../..\hal\include/device/stm32g431.h **** //
 645:../../..\hal\include/device/stm32g431.h **** //    Flash
 646:../../..\hal\include/device/stm32g431.h **** //
 647:../../..\hal\include/device/stm32g431.h **** ////
 648:../../..\hal\include/device/stm32g431.h **** 
 649:../../..\hal\include/device/stm32g431.h **** struct flash_t
 650:../../..\hal\include/device/stm32g431.h **** {
 651:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ACR;                  // [Read-write] Access control register
 652:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDKEYR;               // [Write-only] Power down key register
 653:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR;                 // [Write-only] Flash key register
 654:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPTKEYR;              // [Write-only] Option byte key register
 655:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // Status register
 656:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] Flash control register
 657:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECCR;                 // Flash ECC register
 658:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
 659:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPTR;                 // [Read-write] Flash option register
 660:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PCROP1SR;             // [Read-write] Flash Bank 1 PCROP Start address reg
 661:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PCROP1ER;             // [Read-write] Flash Bank 1 PCROP End address regis
 662:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WRP1AR;               // [Read-write] Flash Bank 1 WRP area A address regi
 663:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WRP1BR;               // [Read-write] Flash Bank 1 WRP area B address regi
 664:../../..\hal\include/device/stm32g431.h ****     reserved_t<15>       _1;
 665:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SEC1R;                // [Read-write] securable area bank1 register
 666:../../..\hal\include/device/stm32g431.h **** 
 667:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_LATENCY =             // Latency (4 bits)
 669:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
 670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_PRFTEN = 0x100;       // Prefetch enable
 671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_ICEN = 0x200;         // Instruction cache enable
 672:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_DCEN = 0x400;         // Data cache enable
 673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_ICRST = 0x800;        // Instruction cache reset
 674:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_DCRST = 0x1000;       // Data cache reset
 675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_RUN_PD = 0x2000;      // Flash Power-down mode during Low-power r
 676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_SLEEP_PD = 0x4000;    // Flash Power-down mode during Low-power s
 677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR_DBG_SWEN = 0x40000;   // Debug software enable
 678:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ACR_RESET_VALUE = 0x600;
 679:../../..\hal\include/device/stm32g431.h **** 
 680:../../..\hal\include/device/stm32g431.h **** 
 681:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDKEYR_RESET_VALUE = 0x0;
 682:../../..\hal\include/device/stm32g431.h **** 
 683:../../..\hal\include/device/stm32g431.h **** 
 684:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR_RESET_VALUE = 0x0;
 685:../../..\hal\include/device/stm32g431.h **** 
 686:../../..\hal\include/device/stm32g431.h **** 
 687:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPTKEYR_RESET_VALUE = 0x0;
 688:../../..\hal\include/device/stm32g431.h **** 
 689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_EOP = 0x1;            // End of operation, Read-write
 690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OPERR = 0x2;          // Operation error, Read-write
 691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_PROGERR = 0x8;        // Programming error, Read-write
 692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_WRPERR = 0x10;        // Write protected error, Read-write
 693:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_PGAERR = 0x20;        // Programming alignment error, Read-write
 694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SIZERR = 0x40;        // Size error, Read-write
 695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_PGSERR = 0x80;        // Programming sequence error, Read-write
 696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_MISERR = 0x100;       // Fast programming data miss error, Read-wr
 697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FASTERR = 0x200;      // Fast programming error, Read-write
 698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RDERR = 0x4000;       // PCROP read error, Read-write
 699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OPTVERR = 0x8000;     // Option validity error, Read-write
 700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BSY = 0x10000;        // Busy, Read-only
 701:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
 702:../../..\hal\include/device/stm32g431.h **** 
 703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PG = 0x1;             // Programming
 704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PER = 0x2;            // Page erase
 705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_MER1 = 0x4;           // Bank 1 Mass erase
 706:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 707:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PNB =                 // Page number (7 bits)
 708:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7f>::value<X>();
 709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_STRT = 0x10000;       // Start
 710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OPTSTRT = 0x20000;    // Options modification start
 711:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_FSTPG = 0x40000;      // Fast programming
 712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_EOPIE = 0x1000000;    // End of operation interrupt enable
 713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ERRIE = 0x2000000;    // Error interrupt enable
 714:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RDERRIE = 0x4000000;  // PCROP read error interrupt enable
 715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OBL_LAUNCH = 0x8000000;// Force the option byte loading
 716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SEC_PROT1 = 0x10000000;// SEC_PROT1
 717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OPTLOCK = 0x40000000; // Options Lock
 718:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_LOCK = 0x80000000;    // FLASH_CR Lock
 719:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0xc0000000;
 720:../../..\hal\include/device/stm32g431.h **** 
 721:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 722:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ADDR_ECC =            // ECC fail address (19 bits), Read-only
 723:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ffff>::value<X>();
 724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_BK_ECC = 0x200000;    // BK_ECC, Read-only
 725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_SYSF_ECC = 0x400000;  // SYSF_ECC, Read-only
 726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ECCIE = 0x1000000;    // ECCIE, Read-write
 727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ECCC2 = 0x10000000;   // ECC correction, Read-write
 728:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ECCD2 = 0x20000000;   // ECC2 detection, Read-write
 729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ECCC = 0x40000000;    // ECC correction, Read-write
 730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECCR_ECCD = 0x80000000;    // ECC detection, Read-write
 731:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECCR_RESET_VALUE = 0x0;
 732:../../..\hal\include/device/stm32g431.h **** 
 733:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 734:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_RDP =                 // Read protection level (8 bits)
 735:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 736:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 737:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_BOR_LEV =             // BOR reset Level (3 bits)
 738:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
 739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nRST_STOP = 0x1000;   // nRST_STOP
 740:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nRST_STDBY = 0x2000;  // nRST_STDBY
 741:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nRST_SHDW = 0x4000;   // nRST_SHDW
 742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_IDWG_SW = 0x10000;    // Independent watchdog selection
 743:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_IWDG_STOP = 0x20000;  // Independent watchdog counter freeze in 
 744:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_IWDG_STDBY = 0x40000; // Independent watchdog counter freeze in 
 745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_WWDG_SW = 0x80000;    // Window watchdog selection
 746:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nBOOT1 = 0x800000;    // Boot configuration
 747:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_SRAM2_PE = 0x1000000; // SRAM2 parity check enable
 748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_SRAM2_RST = 0x2000000;// SRAM2 Erase when system reset
 749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nSWBOOT0 = 0x4000000; // nSWBOOT0
 750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_nBOOT0 = 0x8000000;   // nBOOT0
 751:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 752:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_NRST_MODE =           // NRST_MODE (2 bits)
 753:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
 754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPTR_IRHEN = 0x40000000;   // IRHEN
 755:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPTR_RESET_VALUE = 0xf0000000;
 756:../../..\hal\include/device/stm32g431.h **** 
 757:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PCROP1SR_PCROP1_STRT =         // Bank 1 PCROP area start offset (15 
 759:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
 760:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PCROP1SR_RESET_VALUE = 0xffff0000;
 761:../../..\hal\include/device/stm32g431.h **** 
 762:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 763:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PCROP1ER_PCROP1_END =          // Bank 1 PCROP area end offset (15 bi
 764:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
 765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PCROP1ER_PCROP_RDP = 0x80000000;// PCROP area preserved when RDP leve
 766:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PCROP1ER_RESET_VALUE = 0xfff0000;
 767:../../..\hal\include/device/stm32g431.h **** 
 768:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WRP1AR_WRP1A_STRT =          // Bank 1 WRP first area start offset (7
 770:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
 771:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WRP1AR_WRP1A_END =           // Bank 1 WRP first area A end offset (7
 773:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
 774:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WRP1AR_RESET_VALUE = 0x0;
 775:../../..\hal\include/device/stm32g431.h **** 
 776:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WRP1BR_WRP1B_STRT =          // Bank 1 WRP second area B end offset (
 778:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
 779:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WRP1BR_WRP1B_END =           // Bank 1 WRP second area B start offset
 781:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
 782:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WRP1BR_RESET_VALUE = 0x0;
 783:../../..\hal\include/device/stm32g431.h **** 
 784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SEC1R_BOOT_LOCK = 0x10000;  // BOOT_LOCK
 785:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SEC1R_SEC_SIZE1 =           // SEC_SIZE1 (8 bits)
 787:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
 788:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SEC1R_RESET_VALUE = 0xff00ff00;
 789:../../..\hal\include/device/stm32g431.h **** 
 790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t FLASH = 4; // FLASH
 791:../../..\hal\include/device/stm32g431.h **** };
 792:../../..\hal\include/device/stm32g431.h **** 
 793:../../..\hal\include/device/stm32g431.h **** static flash_t& FLASH = *reinterpret_cast<flash_t*>(0x40022000);
 794:../../..\hal\include/device/stm32g431.h **** 
 795:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FLASH
 796:../../..\hal\include/device/stm32g431.h **** 
 797:../../..\hal\include/device/stm32g431.h **** 
 798:../../..\hal\include/device/stm32g431.h **** ////
 799:../../..\hal\include/device/stm32g431.h **** //
 800:../../..\hal\include/device/stm32g431.h **** //    Debug support
 801:../../..\hal\include/device/stm32g431.h **** //
 802:../../..\hal\include/device/stm32g431.h **** ////
 803:../../..\hal\include/device/stm32g431.h **** 
 804:../../..\hal\include/device/stm32g431.h **** struct dbgmcu_t
 805:../../..\hal\include/device/stm32g431.h **** {
 806:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDCODE;               // [Read-only] MCU Device ID Code Register
 807:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] Debug MCU Configuration Register
 808:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1L_FZ;             // [Read-write] APB Low Freeze Register 1
 809:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1H_FZ;             // [Read-write] APB Low Freeze Register 2
 810:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB2_FZ;              // [Read-write] APB High Freeze Register
 811:../../..\hal\include/device/stm32g431.h **** 
 812:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDCODE_DEV_ID =              // Device Identifier (16 bits)
 814:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
 815:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDCODE_REV_ID =              // Revision Identifier (16 bits)
 817:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
 818:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDCODE_RESET_VALUE = 0x0;
 819:../../..\hal\include/device/stm32g431.h **** 
 820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DBG_SLEEP = 0x1;      // Debug Sleep Mode
 821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DBG_STOP = 0x2;       // Debug Stop Mode
 822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DBG_STANDBY = 0x4;    // Debug Standby Mode
 823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TRACE_IOEN = 0x20;    // Trace pin assignment control
 824:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TRACE_MODE =          // Trace pin assignment control (2 bits)
 826:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
 827:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
 828:../../..\hal\include/device/stm32g431.h **** 
 829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIMER2_STOP = 0x1;// Debug Timer 2 stopped when Core is 
 830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIM3_STOP = 0x2;  // TIM3 counter stopped when core is h
 831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIM4_STOP = 0x4;  // TIM4 counter stopped when core is h
 832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIM5_STOP = 0x8;  // TIM5 counter stopped when core is h
 833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIMER6_STOP = 0x10;// Debug Timer 6 stopped when Core is
 834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_TIM7_STOP = 0x20; // TIM7 counter stopped when core is h
 835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_RTC_STOP = 0x400; // Debug RTC stopped when Core is halt
 836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_WWDG_STOP = 0x800;// Debug Window Wachdog stopped when C
 837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_IWDG_STOP = 0x1000;// Debug Independent Wachdog stopped 
 838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_I2C1_STOP = 0x200000;// I2C1 SMBUS timeout mode stopped 
 839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_I2C2_STOP = 0x400000;// I2C2 SMBUS timeout mode stopped 
 840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_I2C3_STOP = 0x40000000;// I2C3 SMBUS timeout mode stoppe
 841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1L_FZ_DBG_LPTIMER_STOP = 0x80000000;// LPTIM1 counter stopped when
 842:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1L_FZ_RESET_VALUE = 0x0;
 843:../../..\hal\include/device/stm32g431.h **** 
 844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1H_FZ_DBG_I2C4_STOP = 0x2;  // DBG_I2C4_STOP
 845:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1H_FZ_RESET_VALUE = 0x0;
 846:../../..\hal\include/device/stm32g431.h **** 
 847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM1_STOP = 0x800;// TIM1 counter stopped when core is ha
 848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM8_STOP = 0x2000;// TIM8 counter stopped when core is h
 849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM15_STOP = 0x10000;// TIM15 counter stopped when core i
 850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM16_STOP = 0x20000;// TIM16 counter stopped when core i
 851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM17_STOP = 0x40000;// TIM17 counter stopped when core i
 852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_TIM20_STOP = 0x100000;// TIM20counter stopped when core i
 853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_HRTIM0_STOP = 0x4000000;// DBG_HRTIM0_STOP
 854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_HRTIM1_STOP = 0x8000000;// DBG_HRTIM0_STOP
 855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_HRTIM2_STOP = 0x10000000;// DBG_HRTIM0_STOP
 856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2_FZ_DBG_HRTIM3_STOP = 0x20000000;// DBG_HRTIM0_STOP
 857:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB2_FZ_RESET_VALUE = 0x0;
 858:../../..\hal\include/device/stm32g431.h **** };
 859:../../..\hal\include/device/stm32g431.h **** 
 860:../../..\hal\include/device/stm32g431.h **** static dbgmcu_t& DBGMCU = *reinterpret_cast<dbgmcu_t*>(0xe0042000);
 861:../../..\hal\include/device/stm32g431.h **** 
 862:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DBGMCU
 863:../../..\hal\include/device/stm32g431.h **** 
 864:../../..\hal\include/device/stm32g431.h **** 
 865:../../..\hal\include/device/stm32g431.h **** ////
 866:../../..\hal\include/device/stm32g431.h **** //
 867:../../..\hal\include/device/stm32g431.h **** //    Reset and clock control
 868:../../..\hal\include/device/stm32g431.h **** //
 869:../../..\hal\include/device/stm32g431.h **** ////
 870:../../..\hal\include/device/stm32g431.h **** 
 871:../../..\hal\include/device/stm32g431.h **** struct rcc_t
 872:../../..\hal\include/device/stm32g431.h **** {
 873:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // Clock control register
 874:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICSCR;                // Internal clock sources calibration register
 875:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR;                 // Clock configuration register
 876:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PLLSYSCFGR;           // [Read-write] PLL configuration register
 877:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
 878:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CIER;                 // [Read-write] Clock interrupt enable register
 879:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CIFR;                 // [Read-only] Clock interrupt flag register
 880:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CICR;                 // [Write-only] Clock interrupt clear register
 881:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
 882:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB1RSTR;             // [Read-write] AHB1 peripheral reset register
 883:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB2RSTR;             // [Read-write] AHB2 peripheral reset register
 884:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB3RSTR;             // [Read-write] AHB3 peripheral reset register
 885:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
 886:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1RSTR1;            // [Read-write] APB1 peripheral reset register 1
 887:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1RSTR2;            // [Read-write] APB1 peripheral reset register 2
 888:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB2RSTR;             // [Read-write] APB2 peripheral reset register
 889:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _3;
 890:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB1ENR;              // [Read-write] AHB1 peripheral clock enable registe
 891:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB2ENR;              // [Read-write] AHB2 peripheral clock enable registe
 892:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB3ENR;              // [Read-write] AHB3 peripheral clock enable registe
 893:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
 894:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1ENR1;             // [Read-write] APB1ENR1
 895:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1ENR2;             // [Read-write] APB1 peripheral clock enable registe
 896:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB2ENR;              // [Read-write] APB2ENR
 897:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _5;
 898:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB1SMENR;            // [Read-write] AHB1 peripheral clocks enable in Sle
 899:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB2SMENR;            // [Read-write] AHB2 peripheral clocks enable in Sle
 900:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AHB3SMENR;            // [Read-write] AHB3 peripheral clocks enable in Sle
 901:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _6;
 902:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1SMENR1;           // [Read-write] APB1SMENR1
 903:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB1SMENR2;           // [Read-write] APB1 peripheral clocks enable in Sle
 904:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    APB2SMENR;            // [Read-write] APB2SMENR
 905:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _7;
 906:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCIPR1;               // [Read-write] CCIPR
 907:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _8;
 908:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDCR;                 // BDCR
 909:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CSR;                  // CSR
 910:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CRRCR;                // Clock recovery RC register
 911:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCIPR2;               // [Read-write] Peripherals independent clock config
 912:../../..\hal\include/device/stm32g431.h **** 
 913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PLLSYSRDY = 0x2000000;// Main PLL clock ready flag, Read-only
 914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PLLSYSON = 0x1000000; // Main PLL enable, Read-write
 915:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSECSSON = 0x80000;   // Clock security system enable, Write-only
 916:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSEBYP = 0x40000;     // HSE crystal oscillator bypass, Read-write
 917:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSERDY = 0x20000;     // HSE clock ready flag, Read-only
 918:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSEON = 0x10000;      // HSE clock enable, Read-write
 919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSIRDY = 0x400;       // HSI clock ready flag, Read-only
 920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSIKERON = 0x200;     // HSI always enable for peripheral kernels,
 921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_HSION = 0x100;        // HSI clock enable, Read-write
 922:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x63;
 923:../../..\hal\include/device/stm32g431.h **** 
 924:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSCR_HSICAL0 =             // Internal High Speed clock Calibration 
 926:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
 927:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSCR_HSITRIM =             // Internal High Speed clock trimming (7 
 929:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7f>::value<X>();
 930:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICSCR_RESET_VALUE = 0x40000000;
 931:../../..\hal\include/device/stm32g431.h **** 
 932:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_MCOPRE =              // Microcontroller clock output prescaler 
 934:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x7>::value<X>();
 935:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_MCOSEL =              // Microcontroller clock output (4 bits), 
 937:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
 938:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_PPRE2 =               // APB high-speed prescaler (APB2) (3 bits
 940:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x7>::value<X>();
 941:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_PPRE1 =               // PB low-speed prescaler (APB1) (3 bits),
 943:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
 944:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_HPRE =                // AHB prescaler (4 bits), Read-write
 946:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
 947:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_SWS =                 // System clock switch status (2 bits), Re
 949:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
 950:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_SW =                  // System clock switch (2 bits), Read-writ
 952:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
 953:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR_RESET_VALUE = 0x5;
 954:../../..\hal\include/device/stm32g431.h **** 
 955:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSPDIV =          // Main PLL division factor for PLLS
 957:../../..\hal\include/device/stm32g431.h ****         bit_field_t<27, 0x1f>::value<X>();
 958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSR =             // Main PLL division factor for PLLC
 960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x3>::value<X>();
 961:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSREN = 0x1000000;// Main PLL PLLCLK output enable
 962:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 963:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSQ =             // Main PLL division factor for PLLU
 964:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x3>::value<X>();
 965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSQEN = 0x100000; // Main PLL PLLUSB1CLK output enable
 966:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSP = 0x20000;    // Main PLL division factor for PLLS
 967:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLPEN = 0x10000;     // Main PLL PLLSAI3CLK output enable
 968:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSN =             // Main PLL multiplication factor fo
 970:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
 971:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 972:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSYSM =             // Division factor for the main PLL 
 973:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
 974:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
 975:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PLLSYSCFGR_PLLSRC =              // Main PLL, PLLSAI1 and PLLSAI2 ent
 976:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
 977:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PLLSYSCFGR_RESET_VALUE = 0x1000;
 978:../../..\hal\include/device/stm32g431.h **** 
 979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_LSIRDYIE = 0x1;       // LSI ready interrupt enable
 980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_LSERDYIE = 0x2;       // LSE ready interrupt enable
 981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_HSIRDYIE = 0x8;       // HSI ready interrupt enable
 982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_HSERDYIE = 0x10;      // HSE ready interrupt enable
 983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_PLLSYSRDYIE = 0x20;   // PLL ready interrupt enable
 984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_LSECSSIE = 0x200;     // LSE clock security system interrupt ena
 985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIER_RC48RDYIE = 0x400;    // HSI48 ready interrupt enable
 986:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CIER_RESET_VALUE = 0x0;
 987:../../..\hal\include/device/stm32g431.h **** 
 988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_LSIRDYF = 0x1;        // LSI ready interrupt flag
 989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_LSERDYF = 0x2;        // LSE ready interrupt flag
 990:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_HSIRDYF = 0x8;        // HSI ready interrupt flag
 991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_HSERDYF = 0x10;       // HSE ready interrupt flag
 992:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_PLLSYSRDYF = 0x20;    // PLL ready interrupt flag
 993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_HSECSSF = 0x100;      // Clock security system interrupt flag
 994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_LSECSSF = 0x200;      // LSE Clock security system interrupt fla
 995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CIFR_RC48RDYF = 0x400;     // HSI48 ready interrupt flag
 996:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CIFR_RESET_VALUE = 0x0;
 997:../../..\hal\include/device/stm32g431.h **** 
 998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_LSIRDYC = 0x1;        // LSI ready interrupt clear
 999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_LSERDYC = 0x2;        // LSE ready interrupt clear
1000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_HSIRDYC = 0x8;        // HSI ready interrupt clear
1001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_HSERDYC = 0x10;       // HSE ready interrupt clear
1002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_PLLSYSRDYC = 0x20;    // PLL ready interrupt clear
1003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_HSECSSC = 0x100;      // Clock security system interrupt clear
1004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_LSECSSC = 0x200;      // LSE Clock security system interrupt cle
1005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CICR_RC48RDYC = 0x400;     // HSI48 oscillator ready interrupt clear
1006:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CICR_RESET_VALUE = 0x0;
1007:../../..\hal\include/device/stm32g431.h **** 
1008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_DMA1RST = 0x1;        // DMA1 reset
1009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_DMA2RST = 0x2;        // DMA2 reset
1010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_DMAMUX1RST = 0x4;     // DMAMUXRST
1011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_CORDICRST = 0x8;      // CORDIC reset
1012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_MATRIXRST = 0x10;     // MATRIX reset
1013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_FLITFRST_ = 0x100;    // FLITF reset
1014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1RSTR_CRCRST = 0x1000;      // CRC reset
1015:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB1RSTR_RESET_VALUE = 0x0;
1016:../../..\hal\include/device/stm32g431.h **** 
1017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOARST = 0x1;       // IO port A reset
1018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOBRST = 0x2;       // IO port B reset
1019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOCRST = 0x4;       // IO port C reset
1020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIODRST = 0x8;       // IO port D reset
1021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOERST = 0x10;      // IO port E reset
1022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOFRST = 0x20;      // IO port F reset
1023:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_GPIOGRST = 0x40;      // IO port G reset
1024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_ADC12RST = 0x2000;    // ADC reset
1025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_ADC345RST_ = 0x4000;  // SAR ADC345 interface reset
1026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_DAC1RST_ = 0x10000;   // DAC1 interface reset
1027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_DAC2RST = 0x20000;    // DAC2 interface reset
1028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_DAC3RST = 0x40000;    // DAC3 interface reset
1029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_DAC4RST = 0x80000;    // DAC4 interface reset
1030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_CRYPTRST = 0x1000000; // Cryptography module reset
1031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2RSTR_RNGRST = 0x4000000;   // Random Number Generator module rese
1032:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB2RSTR_RESET_VALUE = 0x0;
1033:../../..\hal\include/device/stm32g431.h **** 
1034:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3RSTR_FMCRST = 0x1;         // Flexible memory controller reset
1035:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3RSTR_QUADSPI1RST = 0x100;  // Quad SPI 1 module reset
1036:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB3RSTR_RESET_VALUE = 0x0;
1037:../../..\hal\include/device/stm32g431.h **** 
1038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_LPTIM1RST = 0x80000000;// Low Power Timer 1 reset
1039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_I2C3 = 0x40000000;    // I2C3 interface reset
1040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_PWRRST = 0x10000000;  // Power interface reset
1041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_FDCANRST = 0x2000000; // FDCAN reset
1042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_USBDRST = 0x800000;   // USBD reset
1043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_I2C2RST = 0x400000;   // I2C2 reset
1044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_I2C1RST = 0x200000;   // I2C1 reset
1045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_UART5RST = 0x100000;  // UART5 reset
1046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_UART4RST = 0x80000;   // UART4 reset
1047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_USART3RST = 0x40000;  // USART3 reset
1048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_USART2RST = 0x20000;  // USART2 reset
1049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_SPI3RST = 0x8000;     // SPI3 reset
1050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_SPI2RST = 0x4000;     // SPI2 reset
1051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_CRSRST = 0x100;       // Clock recovery system reset
1052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM7RST = 0x20;       // TIM7 timer reset
1053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM6RST = 0x10;       // TIM6 timer reset
1054:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM5RST = 0x8;        // TIM5 timer reset
1055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM4RST = 0x4;        // TIM3 timer reset
1056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM3RST = 0x2;        // TIM3 timer reset
1057:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR1_TIM2RST = 0x1;        // TIM2 timer reset
1058:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1RSTR1_RESET_VALUE = 0x0;
1059:../../..\hal\include/device/stm32g431.h **** 
1060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR2_LPUART1RST = 0x1;     // Low-power UART 1 reset
1061:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR2_I2C4RST = 0x2;        // I2C4 reset
1062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1RSTR2_USBPDRST = 0x100;     // USBPD reset
1063:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1RSTR2_RESET_VALUE = 0x0;
1064:../../..\hal\include/device/stm32g431.h **** 
1065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_SYSCFGRST = 0x1;      // System configuration (SYSCFG) reset
1066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM1RST = 0x800;      // TIM1 timer reset
1067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_SPI1RST = 0x1000;     // SPI1 reset
1068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM8RST = 0x2000;     // TIM8 timer reset
1069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_USART1RST = 0x4000;   // USART1 reset
1070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_SPI4RST = 0x8000;     // SPI 4 reset
1071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM15RST = 0x10000;   // TIM15 timer reset
1072:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM16RST = 0x20000;   // TIM16 timer reset
1073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM17RST = 0x40000;   // TIM17 timer reset
1074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_TIM20RST = 0x100000;  // Timer 20 reset
1075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_SAI1RST = 0x200000;   // Serial audio interface 1 (SAI1) res
1076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2RSTR_HRTIM1RST = 0x4000000;// HRTIMER reset
1077:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB2RSTR_RESET_VALUE = 0x0;
1078:../../..\hal\include/device/stm32g431.h **** 
1079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_DMA1EN = 0x1;         // DMA1 clock enable
1080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_DMA2EN = 0x2;         // DMA2 clock enable
1081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_DMAMUXEN = 0x4;       // DMAMUX clock enable
1082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_CORDICEN = 0x8;       // CORDIC clock enable
1083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_FMACEN = 0x10;        // FMAC clock enable
1084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_FLITFEN = 0x100;      // FLITF clock enable
1085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1ENR_CRCEN = 0x1000;       // CRC clock enable
1086:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB1ENR_RESET_VALUE = 0x100;
1087:../../..\hal\include/device/stm32g431.h **** 
1088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOAEN = 0x1;        // IO port A clock enable
1089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOBEN = 0x2;        // IO port B clock enable
1090:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOCEN = 0x4;        // IO port C clock enable
1091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIODEN = 0x8;        // IO port D clock enable
1092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOEEN = 0x10;       // IO port E clock enable
1093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOFEN = 0x20;       // IO port F clock enable
1094:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_GPIOGEN = 0x40;       // IO port G clock enable
1095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_ADC12EN = 0x2000;     // ADC clock enable
1096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_ADC345EN = 0x4000;    // DCMI clock enable
1097:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_DAC1 = 0x10000;       // AES accelerator clock enable
1098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_DAC2 = 0x20000;       // HASH clock enable
1099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_DAC3 = 0x40000;       // Random Number Generator clock enable
1100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_DAC4 = 0x80000;       // DAC4 clock enable
1101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_CRYPTEN = 0x1000000;  // Cryptography clock enable
1102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2ENR_RNGEN = 0x4000000;    // Random Number Generator clock enable
1103:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB2ENR_RESET_VALUE = 0x0;
1104:../../..\hal\include/device/stm32g431.h **** 
1105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3ENR_FMCEN = 0x1;          // Flexible memory controller clock ena
1106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3ENR_QUADSPI1EN = 0x100;   // Quad SPI 1 module clock enable
1107:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB3ENR_RESET_VALUE = 0x0;
1108:../../..\hal\include/device/stm32g431.h **** 
1109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM2EN = 0x1;         // TIM2 timer clock enable
1110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM3EN = 0x2;         // TIM3 timer clock enable
1111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM4EN = 0x4;         // TIM4 timer clock enable
1112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM5EN = 0x8;         // TIM5 timer clock enable
1113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM6EN = 0x10;        // TIM6 timer clock enable
1114:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_TIM7EN = 0x20;        // TIM7 timer clock enable
1115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_CRSEN = 0x100;        // CRSclock enable
1116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_RTCAPBEN = 0x400;     // RTC APB clock enable
1117:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_WWDGEN = 0x800;       // Window watchdog clock enable
1118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_SPI2EN = 0x4000;      // SPI2 clock enable
1119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_SP3EN = 0x8000;       // SPI3 clock enable
1120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_USART2EN = 0x20000;   // USART2 clock enable
1121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_USART3EN = 0x40000;   // USART3 clock enable
1122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_UART4EN = 0x80000;    // UART4 clock enable
1123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_UART5EN = 0x100000;   // UART5 clock enable
1124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_I2C1EN = 0x200000;    // I2C1 clock enable
1125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_I2C2EN = 0x400000;    // I2C2 clock enable
1126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_USBDEN = 0x800000;    // USBDclock enable
1127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_FDCANEN = 0x2000000;  // FDCAN clock enable
1128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_PWREN = 0x10000000;   // Power interface clock enable
1129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_I2C3 = 0x40000000;    // OPAMP interface clock enable
1130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR1_LPTIM1EN = 0x80000000;// Low power timer 1 clock enable
1131:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1ENR1_RESET_VALUE = 0x0;
1132:../../..\hal\include/device/stm32g431.h **** 
1133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR2_LPUART1EN = 0x1;      // Low power UART 1 clock enable
1134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR2_I2C4EN = 0x2;         // I2C4 clock enable
1135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1ENR2_USBPDEN = 0x100;      // USBPD clock enable
1136:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1ENR2_RESET_VALUE = 0x0;
1137:../../..\hal\include/device/stm32g431.h **** 
1138:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_SYSCFGEN = 0x1;       // SYSCFG clock enable
1139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM1EN = 0x800;       // TIM1 timer clock enable
1140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_SPI1EN = 0x1000;      // SPI1 clock enable
1141:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM8EN = 0x2000;      // TIM8 timer clock enable
1142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_USART1EN = 0x4000;    // USART1clock enable
1143:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_SPI4EN = 0x8000;      // SPI 4 clock enable
1144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM15EN = 0x10000;    // TIM15 timer clock enable
1145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM16EN = 0x20000;    // TIM16 timer clock enable
1146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM17EN = 0x40000;    // TIM17 timer clock enable
1147:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_TIM20EN = 0x100000;   // Timer 20 clock enable
1148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_SAI1EN = 0x200000;    // SAI1 clock enable
1149:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2ENR_HRTIMEREN = 0x4000000;// HRTIMER clock enable
1150:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB2ENR_RESET_VALUE = 0x0;
1151:../../..\hal\include/device/stm32g431.h **** 
1152:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_DMA1SMEN = 0x1;       // DMA1 clocks enable during Sleep an
1153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_DMA2SMEN = 0x2;       // DMA2 clocks enable during Sleep an
1154:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_DMAMUX1SMEN = 0x4;    // DMAMUX clock enable during Sleep a
1155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_CORDICSMEN = 0x8;     // CORDIC clock enable during sleep m
1156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_FLASHSMEN = 0x100;    // Flash memory interface clocks enab
1157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_SRAM1SMEN = 0x200;    // SRAM1 interface clocks enable duri
1158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_CRCSMEN = 0x1000;     // CRCSMEN
1159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB1SMENR_FMACSMEN = 0x10;      // FMACSM clock enable
1160:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB1SMENR_RESET_VALUE = 0x130f;
1161:../../..\hal\include/device/stm32g431.h **** 
1162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOASMEN = 0x1;      // IO port A clocks enable during Sle
1163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOBSMEN = 0x2;      // IO port B clocks enable during Sle
1164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOCSMEN = 0x4;      // IO port C clocks enable during Sle
1165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIODSMEN = 0x8;      // IO port D clocks enable during Sle
1166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOESMEN = 0x10;     // IO port E clocks enable during Sle
1167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOFSMEN = 0x20;     // IO port F clocks enable during Sle
1168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_GPIOGSMEN = 0x40;     // IO port G clocks enable during Sle
1169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_SRAM2SMEN = 0x200;    // SRAM2 interface clocks enable duri
1170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_SRAM3SMEN = 0x400;    // SRAM2 interface clocks enable duri
1171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_AD12CSMEN = 0x2000;   // ADC clocks enable during Sleep and
1172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_ADC345SMEN = 0x4000;  // DCMI clock enable during Sleep and
1173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_DAC1SMEN = 0x10000;   // AES accelerator clocks enable duri
1174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_DAC2SMEN = 0x20000;   // HASH clock enable during Sleep and
1175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_DAC3SMEN = 0x40000;   // DAC3 clock enable during sleep mod
1176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_DAC4SMEN = 0x80000;   // DAC4 clock enable during sleep mod
1177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_CRYPTSMEN = 0x1000000;// Cryptography clock enable during s
1178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB2SMENR_RNGSMEN = 0x4000000;  // Random Number Generator clock enab
1179:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB2SMENR_RESET_VALUE = 0x50f667f;
1180:../../..\hal\include/device/stm32g431.h **** 
1181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3SMENR_FMCSMEN = 0x1;        // Flexible memory controller clocks 
1182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AHB3SMENR_QUADSPI1SMEN = 0x100; // QUAD SPI 1 module clock enable dur
1183:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AHB3SMENR_RESET_VALUE = 0x101;
1184:../../..\hal\include/device/stm32g431.h **** 
1185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM2SMEN = 0x1;       // TIM2 timer clocks enable during S
1186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM3SMEN = 0x2;       // TIM3 timer clocks enable during S
1187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM4SMEN = 0x4;       // TIM4 timer clocks enable during S
1188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM5SMEN = 0x8;       // TIM5 timer clocks enable during S
1189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM6SMEN = 0x10;      // TIM6 timer clocks enable during S
1190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_TIM7SMEN = 0x20;      // TIM7 timer clocks enable during S
1191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_CRSSMEN = 0x100;      // CRS clock enable during sleep mod
1192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_RTCAPBSMEN = 0x400;   // RTC APB clock enable during Sleep
1193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_WWDGSMEN = 0x800;     // Window watchdog clocks enable dur
1194:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_SPI2SMEN = 0x4000;    // SPI2 clocks enable during Sleep a
1195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_SP3SMEN = 0x8000;     // SPI3 clocks enable during Sleep a
1196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_USART2SMEN = 0x20000; // USART2 clocks enable during Sleep
1197:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_USART3SMEN = 0x40000; // USART3 clocks enable during Sleep
1198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_UART4SMEN = 0x80000;  // UART4 clocks enable during Sleep 
1199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_UART5SMEN = 0x100000; // UART5 clocks enable during Sleep 
1200:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_I2C1SMEN = 0x200000;  // I2C1 clocks enable during Sleep a
1201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_I2C2SMEN = 0x400000;  // I2C2 clocks enable during Sleep a
1202:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_I2C3SMEN = 0x800000;  // I2C3 clocks enable during Sleep a
1203:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_FDCANSMEN = 0x2000000;// FDCAN clock enable during sleep m
1204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_PWRSMEN = 0x10000000; // Power interface clocks enable dur
1205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_I2C3SMEN_3 = 0x40000000;// I2C 3 interface clock enable du
1206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR1_LPTIM1SMEN = 0x80000000;// Low Power Timer1 clock enable d
1207:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1SMENR1_RESET_VALUE = 0xd2fecd3f;
1208:../../..\hal\include/device/stm32g431.h **** 
1209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR2_LPUART1SMEN = 0x1;    // Low power UART 1 clocks enable du
1210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR2_I2C4SMEN = 0x2;       // I2C4 clocks enable during Sleep a
1211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB1SMENR2_USBPDSMEN = 0x100;    // USB PD clock enable during sleep 
1212:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB1SMENR2_RESET_VALUE = 0x103;
1213:../../..\hal\include/device/stm32g431.h **** 
1214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_SYSCFGSMEN = 0x1;     // SYSCFG clocks enable during Sleep 
1215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM1SMEN = 0x800;     // TIM1 timer clocks enable during Sl
1216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_SPI1SMEN = 0x1000;    // SPI1 clocks enable during Sleep an
1217:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM8SMEN = 0x2000;    // TIM8 timer clocks enable during Sl
1218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_USART1SMEN = 0x4000;  // USART1clocks enable during Sleep a
1219:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_SPI4SMEN = 0x8000;    // SPI4 timer clocks enable during Sl
1220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM15SMEN = 0x10000;  // TIM15 timer clocks enable during S
1221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM16SMEN = 0x20000;  // TIM16 timer clocks enable during S
1222:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM17SMEN = 0x40000;  // TIM17 timer clocks enable during S
1223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_TIM20SMEN = 0x100000; // Timer 20clock enable during sleep 
1224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_SAI1SMEN = 0x200000;  // SAI1 clock enable during sleep mod
1225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t APB2SMENR_HRTIMERSMEN = 0x4000000;// HRTIMER clock enable during slee
1226:../../..\hal\include/device/stm32g431.h ****     static const uint32_t APB2SMENR_RESET_VALUE = 0x437f801;
1227:../../..\hal\include/device/stm32g431.h **** 
1228:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_ADC345SEL =           // ADC3/4/5 clock source selection (2 bi
1230:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
1231:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_ADCSEL =              // ADCs clock source selection (2 bits)
1233:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
1234:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_CLK48SEL =            // 48 MHz clock source selection (2 bits
1236:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
1237:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_FDCANSEL =            // SAI2 clock source selection (2 bits)
1239:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
1240:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_SPISEL_ =             // SAI1 clock source selection (2 bits)
1242:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
1243:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_SAISEL =              // Low power timer 2 clock source select
1245:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
1246:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_LPTIM1SEL =           // Low power timer 1 clock source select
1248:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
1249:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_I2C3SEL =             // I2C3 clock source selection (2 bits)
1251:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
1252:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1253:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_I2C2SEL =             // I2C2 clock source selection (2 bits)
1254:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
1255:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_I2C1SEL =             // I2C1 clock source selection (2 bits)
1257:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
1258:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_LPUART1SEL =          // LPUART1 clock source selection (2 bit
1260:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
1261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_UART5SEL =            // UART5 clock source selection (2 bits)
1263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
1264:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1265:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_UART4SEL =            // UART4 clock source selection (2 bits)
1266:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
1267:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_USART3SEL =           // USART3 clock source selection (2 bits
1269:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
1270:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_USART2SEL =           // USART2 clock source selection (2 bits
1272:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
1273:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR1_USART1SEL =           // USART1 clock source selection (2 bits
1275:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
1276:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCIPR1_RESET_VALUE = 0x0;
1277:../../..\hal\include/device/stm32g431.h **** 
1278:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSCOSEL = 0x2000000;  // Low speed clock output selection, Read-
1279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSCCOEN = 0x1000000;  // Low speed clock output enable, Read-wri
1280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_VSWRST = 0x10000;     // Vswitch domain software reset, Read-wri
1281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_RTCEN = 0x8000;       // RTC clock enable, Read-write
1282:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_RTCSEL =              // RTC clock source selection (2 bits), Re
1284:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
1285:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSECSSD = 0x40;       // LSECSSD, Read-only
1286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSECSSON = 0x20;      // LSECSSON, Read-write
1287:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSEDRV =              // SE oscillator drive capability (2 bits)
1289:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
1290:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSEBYP = 0x4;         // LSE oscillator bypass, Read-write
1291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSERDY = 0x2;         // LSE oscillator ready, Read-only
1292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDCR_LSEON = 0x1;          // LSE oscillator enable, Read-write
1293:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDCR_RESET_VALUE = 0x0;
1294:../../..\hal\include/device/stm32g431.h **** 
1295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_LPWRSTF = 0x80000000; // Low-power reset flag, Read-only
1296:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_WWDGRSTF = 0x40000000;// Window watchdog reset flag, Read-only
1297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_WDGRSTF = 0x20000000; // Independent window watchdog reset flag, 
1298:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_SFTRSTF = 0x10000000; // Software reset flag, Read-only
1299:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_BORRSTF = 0x8000000;  // BOR flag, Read-only
1300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_PADRSTF = 0x4000000;  // Pad reset flag, Read-only
1301:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_OBLRSTF = 0x2000000;  // Option byte loader reset flag, Read-only
1302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_RMVF = 0x800000;      // Remove reset flag, Read-write
1303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_LSIRDY = 0x2;         // LSI oscillator ready, Read-only
1304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_LSION = 0x1;          // LSI oscillator enable, Read-write
1305:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CSR_RESET_VALUE = 0xc000000;
1306:../../..\hal\include/device/stm32g431.h **** 
1307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRRCR_RC48ON = 0x1;         // HSI48 clock enable, Read-write
1308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRRCR_RC48RDY = 0x2;        // HSI48 clock ready flag, Read-only
1309:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRRCR_RC48CAL =             // HSI48 clock calibration (9 bits), Read
1311:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x1ff>::value<X>();
1312:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CRRCR_RESET_VALUE = 0x0;
1313:../../..\hal\include/device/stm32g431.h **** 
1314:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR2_I2C4SEL =             // I2C4 clock source selection (2 bits)
1316:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
1317:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1318:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCIPR2_QUADSPISEL =          // Octospi clock source selection (2 bit
1319:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
1320:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCIPR2_RESET_VALUE = 0x0;
1321:../../..\hal\include/device/stm32g431.h **** 
1322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t RCC = 5; // RCC
1323:../../..\hal\include/device/stm32g431.h **** };
1324:../../..\hal\include/device/stm32g431.h **** 
1325:../../..\hal\include/device/stm32g431.h **** static rcc_t& RCC = *reinterpret_cast<rcc_t*>(0x40021000);
1326:../../..\hal\include/device/stm32g431.h **** 
1327:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_RCC
1328:../../..\hal\include/device/stm32g431.h **** 
1329:../../..\hal\include/device/stm32g431.h **** 
1330:../../..\hal\include/device/stm32g431.h **** ////
1331:../../..\hal\include/device/stm32g431.h **** //
1332:../../..\hal\include/device/stm32g431.h **** //    Power control
1333:../../..\hal\include/device/stm32g431.h **** //
1334:../../..\hal\include/device/stm32g431.h **** ////
1335:../../..\hal\include/device/stm32g431.h **** 
1336:../../..\hal\include/device/stm32g431.h **** struct pwr_t
1337:../../..\hal\include/device/stm32g431.h **** {
1338:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Power control register 1
1339:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Power control register 2
1340:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Power control register 3
1341:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR4;                  // [Read-write] Power control register 4
1342:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR1;                  // [Read-only] Power status register 1
1343:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR2;                  // [Read-only] Power status register 2
1344:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SCR;                  // [Write-only] Power status clear register
1345:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
1346:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRA;                // [Read-write] Power Port A pull-up control registe
1347:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRA;                // [Read-write] Power Port A pull-down control regis
1348:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRB;                // [Read-write] Power Port B pull-up control registe
1349:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRB;                // [Read-write] Power Port B pull-down control regis
1350:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRC;                // [Read-write] Power Port C pull-up control registe
1351:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRC;                // [Read-write] Power Port C pull-down control regis
1352:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRD;                // [Read-write] Power Port D pull-up control registe
1353:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRD;                // [Read-write] Power Port D pull-down control regis
1354:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRE;                // [Read-write] Power Port E pull-up control registe
1355:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRE;                // [Read-write] Power Port E pull-down control regis
1356:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRF;                // [Read-write] Power Port F pull-up control registe
1357:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRF;                // [Read-write] Power Port F pull-down control regis
1358:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUCRG;                // [Read-write] Power Port G pull-up control registe
1359:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDCRG;                // [Read-write] Power Port G pull-down control regis
1360:../../..\hal\include/device/stm32g431.h ****     reserved_t<10>       _1;
1361:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR5;                  // [Read-write] Power control register 5
1362:../../..\hal\include/device/stm32g431.h **** 
1363:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_LPR = 0x4000;         // Low-power run
1364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_VOS =                 // Voltage scaling range selection (2 bits)
1366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
1367:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DBP = 0x100;          // Disable backup domain write protection
1368:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1369:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_LPMS =                // Low-power mode selection (3 bits)
1370:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
1371:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x200;
1372:../../..\hal\include/device/stm32g431.h **** 
1373:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PVMEN1 = 0x10;        // Peripheral voltage monitoring 1 enable: 
1374:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PLS =                 // Power voltage detector level selection (
1376:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x7>::value<X>();
1377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PVDE = 0x1;           // Power voltage detector enable
1378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PVMEN2 = 0x20;        // Peripheral voltage monitoring 2 enable: 
1379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PVMEN3 = 0x40;        // Peripheral voltage monitoring 3 enable: 
1380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_PVMEN4 = 0x80;        // Peripheral voltage monitoring 4 enable: 
1381:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
1382:../../..\hal\include/device/stm32g431.h **** 
1383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EWUP1 = 0x1;          // Enable Wakeup pin WKUP1
1384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EWUP2 = 0x2;          // Enable Wakeup pin WKUP2
1385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EWUP3 = 0x4;          // Enable Wakeup pin WKUP3
1386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EWUP4 = 0x8;          // Enable Wakeup pin WKUP4
1387:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EWUP5 = 0x10;         // Enable Wakeup pin WKUP5
1388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RRS = 0x100;          // SRAM2 retention in Standby mode
1389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_APC = 0x400;          // Apply pull-up and pull-down configuratio
1390:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_UCPD1_STDBY = 0x2000; // STDBY
1391:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_UCPD1_DBDIS = 0x4000; // DBDIS
1392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIWUL = 0x8000;       // Enable external WakeUp line
1393:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x8000;
1394:../../..\hal\include/device/stm32g431.h **** 
1395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_VBRS = 0x200;         // VBAT battery charging resistor selection
1396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_VBE = 0x100;          // VBAT battery charging enable
1397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_WP5 = 0x10;           // Wakeup pin WKUP5 polarity
1398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_WP4 = 0x8;            // Wakeup pin WKUP4 polarity
1399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_WP3 = 0x4;            // Wakeup pin WKUP3 polarity
1400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_WP2 = 0x2;            // Wakeup pin WKUP2 polarity
1401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR4_WP1 = 0x1;            // Wakeup pin WKUP1 polarity
1402:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR4_RESET_VALUE = 0x0;
1403:../../..\hal\include/device/stm32g431.h **** 
1404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUFI = 0x8000;        // Wakeup flag internal
1405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_SBF = 0x100;          // Standby flag
1406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUF5 = 0x10;          // Wakeup flag 5
1407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUF4 = 0x8;           // Wakeup flag 4
1408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUF3 = 0x4;           // Wakeup flag 3
1409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUF2 = 0x2;           // Wakeup flag 2
1410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR1_WUF1 = 0x1;           // Wakeup flag 1
1411:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR1_RESET_VALUE = 0x0;
1412:../../..\hal\include/device/stm32g431.h **** 
1413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_PVMO4 = 0x8000;       // Peripheral voltage monitoring output: VD
1414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_PVMO3 = 0x4000;       // Peripheral voltage monitoring output: VD
1415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_PVMO2 = 0x2000;       // Peripheral voltage monitoring output: VD
1416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_PVMO1 = 0x1000;       // Peripheral voltage monitoring output: VD
1417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_PVDO = 0x800;         // Power voltage detector output
1418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_VOSF = 0x400;         // Voltage scaling flag
1419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_REGLPF = 0x200;       // Low-power regulator flag
1420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR2_REGLPS = 0x100;       // Low-power regulator started
1421:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR2_RESET_VALUE = 0x0;
1422:../../..\hal\include/device/stm32g431.h **** 
1423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CSBF = 0x100;         // Clear standby flag
1424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUF5 = 0x10;         // Clear wakeup flag 5
1425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUF4 = 0x8;          // Clear wakeup flag 4
1426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUF3 = 0x4;          // Clear wakeup flag 3
1427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUF2 = 0x2;          // Clear wakeup flag 2
1428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUF1 = 0x1;          // Clear wakeup flag 1
1429:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SCR_RESET_VALUE = 0x0;
1430:../../..\hal\include/device/stm32g431.h **** 
1431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU15 = 0x8000;        // Port A pull-up bit y (y=0..15)
1432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU13 = 0x2000;        // Port A pull-up bit y (y=0..15)
1433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU12 = 0x1000;        // Port A pull-up bit y (y=0..15)
1434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU11 = 0x800;         // Port A pull-up bit y (y=0..15)
1435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU10 = 0x400;         // Port A pull-up bit y (y=0..15)
1436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU9 = 0x200;          // Port A pull-up bit y (y=0..15)
1437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU8 = 0x100;          // Port A pull-up bit y (y=0..15)
1438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU7 = 0x80;           // Port A pull-up bit y (y=0..15)
1439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU6 = 0x40;           // Port A pull-up bit y (y=0..15)
1440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU5 = 0x20;           // Port A pull-up bit y (y=0..15)
1441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU4 = 0x10;           // Port A pull-up bit y (y=0..15)
1442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU3 = 0x8;            // Port A pull-up bit y (y=0..15)
1443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU2 = 0x4;            // Port A pull-up bit y (y=0..15)
1444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU1 = 0x2;            // Port A pull-up bit y (y=0..15)
1445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRA_PU0 = 0x1;            // Port A pull-up bit y (y=0..15)
1446:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRA_RESET_VALUE = 0x0;
1447:../../..\hal\include/device/stm32g431.h **** 
1448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD14 = 0x4000;        // Port A pull-down bit y (y=0..15)
1449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD12 = 0x1000;        // Port A pull-down bit y (y=0..15)
1450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD11 = 0x800;         // Port A pull-down bit y (y=0..15)
1451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD10 = 0x400;         // Port A pull-down bit y (y=0..15)
1452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD9 = 0x200;          // Port A pull-down bit y (y=0..15)
1453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD8 = 0x100;          // Port A pull-down bit y (y=0..15)
1454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD7 = 0x80;           // Port A pull-down bit y (y=0..15)
1455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD6 = 0x40;           // Port A pull-down bit y (y=0..15)
1456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD5 = 0x20;           // Port A pull-down bit y (y=0..15)
1457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD4 = 0x10;           // Port A pull-down bit y (y=0..15)
1458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD3 = 0x8;            // Port A pull-down bit y (y=0..15)
1459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD2 = 0x4;            // Port A pull-down bit y (y=0..15)
1460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD1 = 0x2;            // Port A pull-down bit y (y=0..15)
1461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRA_PD0 = 0x1;            // Port A pull-down bit y (y=0..15)
1462:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRA_RESET_VALUE = 0x0;
1463:../../..\hal\include/device/stm32g431.h **** 
1464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU15 = 0x8000;        // Port B pull-up bit y (y=0..15)
1465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU14 = 0x4000;        // Port B pull-up bit y (y=0..15)
1466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU13 = 0x2000;        // Port B pull-up bit y (y=0..15)
1467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU12 = 0x1000;        // Port B pull-up bit y (y=0..15)
1468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU11 = 0x800;         // Port B pull-up bit y (y=0..15)
1469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU10 = 0x400;         // Port B pull-up bit y (y=0..15)
1470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU9 = 0x200;          // Port B pull-up bit y (y=0..15)
1471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU8 = 0x100;          // Port B pull-up bit y (y=0..15)
1472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU7 = 0x80;           // Port B pull-up bit y (y=0..15)
1473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU6 = 0x40;           // Port B pull-up bit y (y=0..15)
1474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU5 = 0x20;           // Port B pull-up bit y (y=0..15)
1475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU4 = 0x10;           // Port B pull-up bit y (y=0..15)
1476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU3 = 0x8;            // Port B pull-up bit y (y=0..15)
1477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU2 = 0x4;            // Port B pull-up bit y (y=0..15)
1478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU1 = 0x2;            // Port B pull-up bit y (y=0..15)
1479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRB_PU0 = 0x1;            // Port B pull-up bit y (y=0..15)
1480:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRB_RESET_VALUE = 0x0;
1481:../../..\hal\include/device/stm32g431.h **** 
1482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD15 = 0x8000;        // Port B pull-down bit y (y=0..15)
1483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD14 = 0x4000;        // Port B pull-down bit y (y=0..15)
1484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD13 = 0x2000;        // Port B pull-down bit y (y=0..15)
1485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD12 = 0x1000;        // Port B pull-down bit y (y=0..15)
1486:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD11 = 0x800;         // Port B pull-down bit y (y=0..15)
1487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD10 = 0x400;         // Port B pull-down bit y (y=0..15)
1488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD9 = 0x200;          // Port B pull-down bit y (y=0..15)
1489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD8 = 0x100;          // Port B pull-down bit y (y=0..15)
1490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD7 = 0x80;           // Port B pull-down bit y (y=0..15)
1491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD6 = 0x40;           // Port B pull-down bit y (y=0..15)
1492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD5 = 0x20;           // Port B pull-down bit y (y=0..15)
1493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD3 = 0x8;            // Port B pull-down bit y (y=0..15)
1494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD2 = 0x4;            // Port B pull-down bit y (y=0..15)
1495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD1 = 0x2;            // Port B pull-down bit y (y=0..15)
1496:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRB_PD0 = 0x1;            // Port B pull-down bit y (y=0..15)
1497:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRB_RESET_VALUE = 0x0;
1498:../../..\hal\include/device/stm32g431.h **** 
1499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU15 = 0x8000;        // Port C pull-up bit y (y=0..15)
1500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU14 = 0x4000;        // Port C pull-up bit y (y=0..15)
1501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU13 = 0x2000;        // Port C pull-up bit y (y=0..15)
1502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU12 = 0x1000;        // Port C pull-up bit y (y=0..15)
1503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU11 = 0x800;         // Port C pull-up bit y (y=0..15)
1504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU10 = 0x400;         // Port C pull-up bit y (y=0..15)
1505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU9 = 0x200;          // Port C pull-up bit y (y=0..15)
1506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU8 = 0x100;          // Port C pull-up bit y (y=0..15)
1507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU7 = 0x80;           // Port C pull-up bit y (y=0..15)
1508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU6 = 0x40;           // Port C pull-up bit y (y=0..15)
1509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU5 = 0x20;           // Port C pull-up bit y (y=0..15)
1510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU4 = 0x10;           // Port C pull-up bit y (y=0..15)
1511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU3 = 0x8;            // Port C pull-up bit y (y=0..15)
1512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU2 = 0x4;            // Port C pull-up bit y (y=0..15)
1513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU1 = 0x2;            // Port C pull-up bit y (y=0..15)
1514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRC_PU0 = 0x1;            // Port C pull-up bit y (y=0..15)
1515:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRC_RESET_VALUE = 0x0;
1516:../../..\hal\include/device/stm32g431.h **** 
1517:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD15 = 0x8000;        // Port C pull-down bit y (y=0..15)
1518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD14 = 0x4000;        // Port C pull-down bit y (y=0..15)
1519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD13 = 0x2000;        // Port C pull-down bit y (y=0..15)
1520:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD12 = 0x1000;        // Port C pull-down bit y (y=0..15)
1521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD11 = 0x800;         // Port C pull-down bit y (y=0..15)
1522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD10 = 0x400;         // Port C pull-down bit y (y=0..15)
1523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD9 = 0x200;          // Port C pull-down bit y (y=0..15)
1524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD8 = 0x100;          // Port C pull-down bit y (y=0..15)
1525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD7 = 0x80;           // Port C pull-down bit y (y=0..15)
1526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD6 = 0x40;           // Port C pull-down bit y (y=0..15)
1527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD5 = 0x20;           // Port C pull-down bit y (y=0..15)
1528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD4 = 0x10;           // Port C pull-down bit y (y=0..15)
1529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD3 = 0x8;            // Port C pull-down bit y (y=0..15)
1530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD2 = 0x4;            // Port C pull-down bit y (y=0..15)
1531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD1 = 0x2;            // Port C pull-down bit y (y=0..15)
1532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRC_PD0 = 0x1;            // Port C pull-down bit y (y=0..15)
1533:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRC_RESET_VALUE = 0x0;
1534:../../..\hal\include/device/stm32g431.h **** 
1535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU15 = 0x8000;        // Port D pull-up bit y (y=0..15)
1536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU14 = 0x4000;        // Port D pull-up bit y (y=0..15)
1537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU13 = 0x2000;        // Port D pull-up bit y (y=0..15)
1538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU12 = 0x1000;        // Port D pull-up bit y (y=0..15)
1539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU11 = 0x800;         // Port D pull-up bit y (y=0..15)
1540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU10 = 0x400;         // Port D pull-up bit y (y=0..15)
1541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU9 = 0x200;          // Port D pull-up bit y (y=0..15)
1542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU8 = 0x100;          // Port D pull-up bit y (y=0..15)
1543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU7 = 0x80;           // Port D pull-up bit y (y=0..15)
1544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU6 = 0x40;           // Port D pull-up bit y (y=0..15)
1545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU5 = 0x20;           // Port D pull-up bit y (y=0..15)
1546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU4 = 0x10;           // Port D pull-up bit y (y=0..15)
1547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU3 = 0x8;            // Port D pull-up bit y (y=0..15)
1548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU2 = 0x4;            // Port D pull-up bit y (y=0..15)
1549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU1 = 0x2;            // Port D pull-up bit y (y=0..15)
1550:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRD_PU0 = 0x1;            // Port D pull-up bit y (y=0..15)
1551:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRD_RESET_VALUE = 0x0;
1552:../../..\hal\include/device/stm32g431.h **** 
1553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD15 = 0x8000;        // Port D pull-down bit y (y=0..15)
1554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD14 = 0x4000;        // Port D pull-down bit y (y=0..15)
1555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD13 = 0x2000;        // Port D pull-down bit y (y=0..15)
1556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD12 = 0x1000;        // Port D pull-down bit y (y=0..15)
1557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD11 = 0x800;         // Port D pull-down bit y (y=0..15)
1558:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD10 = 0x400;         // Port D pull-down bit y (y=0..15)
1559:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD9 = 0x200;          // Port D pull-down bit y (y=0..15)
1560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD8 = 0x100;          // Port D pull-down bit y (y=0..15)
1561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD7 = 0x80;           // Port D pull-down bit y (y=0..15)
1562:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD6 = 0x40;           // Port D pull-down bit y (y=0..15)
1563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD5 = 0x20;           // Port D pull-down bit y (y=0..15)
1564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD4 = 0x10;           // Port D pull-down bit y (y=0..15)
1565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD3 = 0x8;            // Port D pull-down bit y (y=0..15)
1566:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD2 = 0x4;            // Port D pull-down bit y (y=0..15)
1567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD1 = 0x2;            // Port D pull-down bit y (y=0..15)
1568:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRD_PD0 = 0x1;            // Port D pull-down bit y (y=0..15)
1569:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRD_RESET_VALUE = 0x0;
1570:../../..\hal\include/device/stm32g431.h **** 
1571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU15 = 0x8000;        // Port E pull-up bit y (y=0..15)
1572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU14 = 0x4000;        // Port E pull-up bit y (y=0..15)
1573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU13 = 0x2000;        // Port E pull-up bit y (y=0..15)
1574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU12 = 0x1000;        // Port E pull-up bit y (y=0..15)
1575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU11 = 0x800;         // Port E pull-up bit y (y=0..15)
1576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU10 = 0x400;         // Port E pull-up bit y (y=0..15)
1577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU9 = 0x200;          // Port E pull-up bit y (y=0..15)
1578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU8 = 0x100;          // Port E pull-up bit y (y=0..15)
1579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU7 = 0x80;           // Port E pull-up bit y (y=0..15)
1580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU6 = 0x40;           // Port E pull-up bit y (y=0..15)
1581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU5 = 0x20;           // Port E pull-up bit y (y=0..15)
1582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU4 = 0x10;           // Port E pull-up bit y (y=0..15)
1583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU3 = 0x8;            // Port E pull-up bit y (y=0..15)
1584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU2 = 0x4;            // Port E pull-up bit y (y=0..15)
1585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU1 = 0x2;            // Port E pull-up bit y (y=0..15)
1586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRE_PU0 = 0x1;            // Port E pull-up bit y (y=0..15)
1587:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRE_RESET_VALUE = 0x0;
1588:../../..\hal\include/device/stm32g431.h **** 
1589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD15 = 0x8000;        // Port E pull-down bit y (y=0..15)
1590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD14 = 0x4000;        // Port E pull-down bit y (y=0..15)
1591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD13 = 0x2000;        // Port E pull-down bit y (y=0..15)
1592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD12 = 0x1000;        // Port E pull-down bit y (y=0..15)
1593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD11 = 0x800;         // Port E pull-down bit y (y=0..15)
1594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD10 = 0x400;         // Port E pull-down bit y (y=0..15)
1595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD9 = 0x200;          // Port E pull-down bit y (y=0..15)
1596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD8 = 0x100;          // Port E pull-down bit y (y=0..15)
1597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD7 = 0x80;           // Port E pull-down bit y (y=0..15)
1598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD6 = 0x40;           // Port E pull-down bit y (y=0..15)
1599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD5 = 0x20;           // Port E pull-down bit y (y=0..15)
1600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD4 = 0x10;           // Port E pull-down bit y (y=0..15)
1601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD3 = 0x8;            // Port E pull-down bit y (y=0..15)
1602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD2 = 0x4;            // Port E pull-down bit y (y=0..15)
1603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD1 = 0x2;            // Port E pull-down bit y (y=0..15)
1604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRE_PD0 = 0x1;            // Port E pull-down bit y (y=0..15)
1605:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRE_RESET_VALUE = 0x0;
1606:../../..\hal\include/device/stm32g431.h **** 
1607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU15 = 0x8000;        // Port F pull-up bit y (y=0..15)
1608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU14 = 0x4000;        // Port F pull-up bit y (y=0..15)
1609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU13 = 0x2000;        // Port F pull-up bit y (y=0..15)
1610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU12 = 0x1000;        // Port F pull-up bit y (y=0..15)
1611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU11 = 0x800;         // Port F pull-up bit y (y=0..15)
1612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU10 = 0x400;         // Port F pull-up bit y (y=0..15)
1613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU9 = 0x200;          // Port F pull-up bit y (y=0..15)
1614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU8 = 0x100;          // Port F pull-up bit y (y=0..15)
1615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU7 = 0x80;           // Port F pull-up bit y (y=0..15)
1616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU6 = 0x40;           // Port F pull-up bit y (y=0..15)
1617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU5 = 0x20;           // Port F pull-up bit y (y=0..15)
1618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU4 = 0x10;           // Port F pull-up bit y (y=0..15)
1619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU3 = 0x8;            // Port F pull-up bit y (y=0..15)
1620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU2 = 0x4;            // Port F pull-up bit y (y=0..15)
1621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU1 = 0x2;            // Port F pull-up bit y (y=0..15)
1622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRF_PU0 = 0x1;            // Port F pull-up bit y (y=0..15)
1623:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRF_RESET_VALUE = 0x0;
1624:../../..\hal\include/device/stm32g431.h **** 
1625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD15 = 0x8000;        // Port F pull-down bit y (y=0..15)
1626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD14 = 0x4000;        // Port F pull-down bit y (y=0..15)
1627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD13 = 0x2000;        // Port F pull-down bit y (y=0..15)
1628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD12 = 0x1000;        // Port F pull-down bit y (y=0..15)
1629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD11 = 0x800;         // Port F pull-down bit y (y=0..15)
1630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD10 = 0x400;         // Port F pull-down bit y (y=0..15)
1631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD9 = 0x200;          // Port F pull-down bit y (y=0..15)
1632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD8 = 0x100;          // Port F pull-down bit y (y=0..15)
1633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD7 = 0x80;           // Port F pull-down bit y (y=0..15)
1634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD6 = 0x40;           // Port F pull-down bit y (y=0..15)
1635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD5 = 0x20;           // Port F pull-down bit y (y=0..15)
1636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD4 = 0x10;           // Port F pull-down bit y (y=0..15)
1637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD3 = 0x8;            // Port F pull-down bit y (y=0..15)
1638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD2 = 0x4;            // Port F pull-down bit y (y=0..15)
1639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD1 = 0x2;            // Port F pull-down bit y (y=0..15)
1640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRF_PD0 = 0x1;            // Port F pull-down bit y (y=0..15)
1641:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRF_RESET_VALUE = 0x0;
1642:../../..\hal\include/device/stm32g431.h **** 
1643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU10 = 0x400;         // Port G pull-up bit y (y=0..15)
1644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU9 = 0x200;          // Port G pull-up bit y (y=0..15)
1645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU8 = 0x100;          // Port G pull-up bit y (y=0..15)
1646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU7 = 0x80;           // Port G pull-up bit y (y=0..15)
1647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU6 = 0x40;           // Port G pull-up bit y (y=0..15)
1648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU5 = 0x20;           // Port G pull-up bit y (y=0..15)
1649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU4 = 0x10;           // Port G pull-up bit y (y=0..15)
1650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU3 = 0x8;            // Port G pull-up bit y (y=0..15)
1651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU2 = 0x4;            // Port G pull-up bit y (y=0..15)
1652:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU1 = 0x2;            // Port G pull-up bit y (y=0..15)
1653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUCRG_PU0 = 0x1;            // Port G pull-up bit y (y=0..15)
1654:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUCRG_RESET_VALUE = 0x0;
1655:../../..\hal\include/device/stm32g431.h **** 
1656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD10 = 0x400;         // Port G pull-down bit y (y=0..15)
1657:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD9 = 0x200;          // Port G pull-down bit y (y=0..15)
1658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD8 = 0x100;          // Port G pull-down bit y (y=0..15)
1659:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD7 = 0x80;           // Port G pull-down bit y (y=0..15)
1660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD6 = 0x40;           // Port G pull-down bit y (y=0..15)
1661:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD5 = 0x20;           // Port G pull-down bit y (y=0..15)
1662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD4 = 0x10;           // Port G pull-down bit y (y=0..15)
1663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD3 = 0x8;            // Port G pull-down bit y (y=0..15)
1664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD2 = 0x4;            // Port G pull-down bit y (y=0..15)
1665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD1 = 0x2;            // Port G pull-down bit y (y=0..15)
1666:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDCRG_PD0 = 0x1;            // Port G pull-down bit y (y=0..15)
1667:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDCRG_RESET_VALUE = 0x0;
1668:../../..\hal\include/device/stm32g431.h **** 
1669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR5_R1MODE = 0x1;         // Main regular range 1 mode
1670:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR5_RESET_VALUE = 0x100;
1671:../../..\hal\include/device/stm32g431.h **** };
1672:../../..\hal\include/device/stm32g431.h **** 
1673:../../..\hal\include/device/stm32g431.h **** static pwr_t& PWR = *reinterpret_cast<pwr_t*>(0x40007000);
1674:../../..\hal\include/device/stm32g431.h **** 
1675:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_PWR
1676:../../..\hal\include/device/stm32g431.h **** 
1677:../../..\hal\include/device/stm32g431.h **** 
1678:../../..\hal\include/device/stm32g431.h **** ////
1679:../../..\hal\include/device/stm32g431.h **** //
1680:../../..\hal\include/device/stm32g431.h **** //    Random number generator
1681:../../..\hal\include/device/stm32g431.h **** //
1682:../../..\hal\include/device/stm32g431.h **** ////
1683:../../..\hal\include/device/stm32g431.h **** 
1684:../../..\hal\include/device/stm32g431.h **** struct rng_t
1685:../../..\hal\include/device/stm32g431.h **** {
1686:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] control register
1687:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // status register
1688:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-only] data register
1689:../../..\hal\include/device/stm32g431.h **** 
1690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CED = 0x20;           // Clock error detection
1691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_IE = 0x8;             // Interrupt enable
1692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RNGEN = 0x4;          // Random number generator enable
1693:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
1694:../../..\hal\include/device/stm32g431.h **** 
1695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SEIS = 0x40;          // Seed error interrupt status, Read-write
1696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CEIS = 0x20;          // Clock error interrupt status, Read-write
1697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SECS = 0x4;           // Seed error current status, Read-only
1698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CECS = 0x2;           // Clock error current status, Read-only
1699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DRDY = 0x1;           // Data ready, Read-only
1700:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
1701:../../..\hal\include/device/stm32g431.h **** 
1702:../../..\hal\include/device/stm32g431.h **** 
1703:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
1704:../../..\hal\include/device/stm32g431.h **** 
1705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t RNG = 90; // RNG
1706:../../..\hal\include/device/stm32g431.h **** };
1707:../../..\hal\include/device/stm32g431.h **** 
1708:../../..\hal\include/device/stm32g431.h **** static rng_t& RNG = *reinterpret_cast<rng_t*>(0x50060800);
1709:../../..\hal\include/device/stm32g431.h **** 
1710:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_RNG
1711:../../..\hal\include/device/stm32g431.h **** 
1712:../../..\hal\include/device/stm32g431.h **** 
1713:../../..\hal\include/device/stm32g431.h **** ////
1714:../../..\hal\include/device/stm32g431.h **** //
1715:../../..\hal\include/device/stm32g431.h **** //    Advanced encryption standard hardware accelerator
1716:../../..\hal\include/device/stm32g431.h **** //
1717:../../..\hal\include/device/stm32g431.h **** ////
1718:../../..\hal\include/device/stm32g431.h **** 
1719:../../..\hal\include/device/stm32g431.h **** struct aes_t
1720:../../..\hal\include/device/stm32g431.h **** {
1721:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] control register
1722:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-only] status register
1723:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DINR;                 // [Read-write] data input register
1724:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DOUTR;                // [Read-only] data output register
1725:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR0;                // [Read-write] key register 0
1726:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR1;                // [Read-write] key register 1
1727:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR2;                // [Read-write] key register 2
1728:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR3;                // [Read-write] key register 3
1729:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IVR0;                 // [Read-write] initialization vector register 0
1730:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IVR1;                 // [Read-write] initialization vector register 1
1731:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IVR2;                 // [Read-write] initialization vector register 2
1732:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IVR3;                 // [Read-write] initialization vector register 3
1733:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR4;                // [Read-write] key register 4
1734:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR5;                // [Read-write] key register 5
1735:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR6;                // [Read-write] key register 6
1736:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    KEYR7;                // [Read-write] key register 7
1737:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP0R;               // [Read-write] suspend registers
1738:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP1R;               // [Read-write] suspend registers
1739:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP2R;               // [Read-write] suspend registers
1740:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP3R;               // [Read-write] suspend registers
1741:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP4R;               // [Read-write] suspend registers
1742:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP5R;               // [Read-write] suspend registers
1743:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP6R;               // [Read-write] suspend registers
1744:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SUSP7R;               // [Read-write] suspend registers
1745:../../..\hal\include/device/stm32g431.h **** 
1746:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1747:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_NPBLB =               // NPBLB (4 bits)
1748:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
1749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_KEYSIZE = 0x40000;    // KEYSIZE
1750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CHMOD_2 = 0x10000;    // CHMOD_2
1751:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1752:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_GCMPH =               // GCMPH (2 bits)
1753:../../..\hal\include/device/stm32g431.h ****         bit_field_t<13, 0x3>::value<X>();
1754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DMAOUTEN = 0x1000;    // Enable DMA management of data output phas
1755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DMAINEN = 0x800;      // Enable DMA management of data input phase
1756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ERRIE = 0x400;        // Error interrupt enable
1757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CCFIE = 0x200;        // CCF flag interrupt enable
1758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ERRC = 0x100;         // Error clear
1759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CCFC = 0x80;          // Computation Complete Flag Clear
1760:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CHMOD =               // AES chaining mode (2 bits)
1762:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
1763:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1764:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_MODE =                // AES operating mode (2 bits)
1765:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
1766:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DATATYPE =            // Data type selection (for data in and data
1768:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
1769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_EN = 0x1;             // AES enable
1770:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
1771:../../..\hal\include/device/stm32g431.h **** 
1772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BUSY = 0x8;           // BUSY
1773:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_WRERR = 0x4;          // Write error flag
1774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RDERR = 0x2;          // Read error flag
1775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CCF = 0x1;            // Computation complete flag
1776:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
1777:../../..\hal\include/device/stm32g431.h **** 
1778:../../..\hal\include/device/stm32g431.h **** 
1779:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DINR_RESET_VALUE = 0x0;
1780:../../..\hal\include/device/stm32g431.h **** 
1781:../../..\hal\include/device/stm32g431.h **** 
1782:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DOUTR_RESET_VALUE = 0x0;
1783:../../..\hal\include/device/stm32g431.h **** 
1784:../../..\hal\include/device/stm32g431.h **** 
1785:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR0_RESET_VALUE = 0x0;
1786:../../..\hal\include/device/stm32g431.h **** 
1787:../../..\hal\include/device/stm32g431.h **** 
1788:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR1_RESET_VALUE = 0x0;
1789:../../..\hal\include/device/stm32g431.h **** 
1790:../../..\hal\include/device/stm32g431.h **** 
1791:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR2_RESET_VALUE = 0x0;
1792:../../..\hal\include/device/stm32g431.h **** 
1793:../../..\hal\include/device/stm32g431.h **** 
1794:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR3_RESET_VALUE = 0x0;
1795:../../..\hal\include/device/stm32g431.h **** 
1796:../../..\hal\include/device/stm32g431.h **** 
1797:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IVR0_RESET_VALUE = 0x0;
1798:../../..\hal\include/device/stm32g431.h **** 
1799:../../..\hal\include/device/stm32g431.h **** 
1800:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IVR1_RESET_VALUE = 0x0;
1801:../../..\hal\include/device/stm32g431.h **** 
1802:../../..\hal\include/device/stm32g431.h **** 
1803:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IVR2_RESET_VALUE = 0x0;
1804:../../..\hal\include/device/stm32g431.h **** 
1805:../../..\hal\include/device/stm32g431.h **** 
1806:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IVR3_RESET_VALUE = 0x0;
1807:../../..\hal\include/device/stm32g431.h **** 
1808:../../..\hal\include/device/stm32g431.h **** 
1809:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR4_RESET_VALUE = 0x0;
1810:../../..\hal\include/device/stm32g431.h **** 
1811:../../..\hal\include/device/stm32g431.h **** 
1812:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR5_RESET_VALUE = 0x0;
1813:../../..\hal\include/device/stm32g431.h **** 
1814:../../..\hal\include/device/stm32g431.h **** 
1815:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR6_RESET_VALUE = 0x0;
1816:../../..\hal\include/device/stm32g431.h **** 
1817:../../..\hal\include/device/stm32g431.h **** 
1818:../../..\hal\include/device/stm32g431.h ****     static const uint32_t KEYR7_RESET_VALUE = 0x0;
1819:../../..\hal\include/device/stm32g431.h **** 
1820:../../..\hal\include/device/stm32g431.h **** 
1821:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP0R_RESET_VALUE = 0x0;
1822:../../..\hal\include/device/stm32g431.h **** 
1823:../../..\hal\include/device/stm32g431.h **** 
1824:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP1R_RESET_VALUE = 0x0;
1825:../../..\hal\include/device/stm32g431.h **** 
1826:../../..\hal\include/device/stm32g431.h **** 
1827:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP2R_RESET_VALUE = 0x0;
1828:../../..\hal\include/device/stm32g431.h **** 
1829:../../..\hal\include/device/stm32g431.h **** 
1830:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP3R_RESET_VALUE = 0x0;
1831:../../..\hal\include/device/stm32g431.h **** 
1832:../../..\hal\include/device/stm32g431.h **** 
1833:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP4R_RESET_VALUE = 0x0;
1834:../../..\hal\include/device/stm32g431.h **** 
1835:../../..\hal\include/device/stm32g431.h **** 
1836:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP5R_RESET_VALUE = 0x0;
1837:../../..\hal\include/device/stm32g431.h **** 
1838:../../..\hal\include/device/stm32g431.h **** 
1839:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP6R_RESET_VALUE = 0x0;
1840:../../..\hal\include/device/stm32g431.h **** 
1841:../../..\hal\include/device/stm32g431.h **** 
1842:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SUSP7R_RESET_VALUE = 0x0;
1843:../../..\hal\include/device/stm32g431.h **** 
1844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t AES = 85; // AES
1845:../../..\hal\include/device/stm32g431.h **** };
1846:../../..\hal\include/device/stm32g431.h **** 
1847:../../..\hal\include/device/stm32g431.h **** static aes_t& AES = *reinterpret_cast<aes_t*>(0x50060000);
1848:../../..\hal\include/device/stm32g431.h **** 
1849:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_AES
1850:../../..\hal\include/device/stm32g431.h **** 
1851:../../..\hal\include/device/stm32g431.h **** 
1852:../../..\hal\include/device/stm32g431.h **** ////
1853:../../..\hal\include/device/stm32g431.h **** //
1854:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
1855:../../..\hal\include/device/stm32g431.h **** //
1856:../../..\hal\include/device/stm32g431.h **** ////
1857:../../..\hal\include/device/stm32g431.h **** 
1858:../../..\hal\include/device/stm32g431.h **** struct gpioa_t
1859:../../..\hal\include/device/stm32g431.h **** {
1860:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
1861:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
1862:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
1863:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
1864:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
1865:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
1866:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
1867:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
1868:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
1869:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
1870:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
1871:../../..\hal\include/device/stm32g431.h **** 
1872:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1873:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
1874:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
1875:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1876:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
1877:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
1878:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1879:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
1880:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
1881:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
1883:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
1884:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
1886:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
1887:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
1889:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
1890:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
1892:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
1893:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
1895:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
1896:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
1898:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
1899:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
1901:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
1902:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
1904:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
1905:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1906:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
1907:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
1908:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
1910:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
1911:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
1913:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
1914:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1915:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
1916:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
1917:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1918:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
1919:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
1920:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xabffffff;
1921:../../..\hal\include/device/stm32g431.h **** 
1922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
1923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
1924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
1925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
1926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
1927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
1928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
1929:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
1930:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
1931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
1932:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
1933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
1934:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
1935:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
1936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
1937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
1938:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
1939:../../..\hal\include/device/stm32g431.h **** 
1940:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
1942:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
1943:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
1945:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
1946:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
1948:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
1949:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
1951:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
1952:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
1954:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
1955:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
1957:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
1958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
1960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
1961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
1963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
1964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
1966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
1967:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1968:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
1969:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
1970:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
1972:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
1973:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
1975:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
1976:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
1978:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
1979:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
1981:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
1982:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
1984:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
1985:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
1987:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
1988:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0xc000000;
1989:../../..\hal\include/device/stm32g431.h **** 
1990:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
1992:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
1993:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
1995:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
1996:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
1997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
1998:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
1999:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
2001:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2002:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
2004:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2005:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
2007:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2008:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
2010:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2011:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
2013:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2014:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
2016:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2017:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
2019:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2020:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
2022:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
2025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2026:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
2028:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2029:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
2031:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
2034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2035:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
2037:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2038:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x64000000;
2039:../../..\hal\include/device/stm32g431.h **** 
2040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
2041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
2042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
2043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
2044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
2045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
2046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
2047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
2048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
2049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
2050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
2051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
2052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
2053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
2054:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
2055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
2056:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
2057:../../..\hal\include/device/stm32g431.h **** 
2058:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
2059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
2060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
2061:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
2062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
2063:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
2064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
2065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
2066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
2067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
2068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
2069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
2070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
2071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
2072:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
2073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
2074:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
2075:../../..\hal\include/device/stm32g431.h **** 
2076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
2077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
2078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
2079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
2080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
2081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
2082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
2083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
2084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
2085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
2086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
2087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
2088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
2089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
2090:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
2091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
2092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
2093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
2094:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
2095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
2096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
2097:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
2098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
2099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
2100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
2101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
2102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
2103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
2104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
2105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
2106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
2107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
2108:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
2109:../../..\hal\include/device/stm32g431.h **** 
2110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
2111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
2112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
2113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
2114:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
2115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
2116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
2117:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
2118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
2119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
2120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
2121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
2122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
2123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
2124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
2125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
2126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
2127:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
2128:../../..\hal\include/device/stm32g431.h **** 
2129:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
2131:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2132:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
2134:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2135:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
2137:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2138:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
2140:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
2143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2144:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
2146:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2147:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
2149:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2150:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
2152:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2153:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
2154:../../..\hal\include/device/stm32g431.h **** 
2155:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
2157:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2158:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
2160:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2161:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
2163:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2164:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
2166:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2167:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
2169:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2170:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
2172:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2173:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
2175:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2176:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
2178:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2179:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
2180:../../..\hal\include/device/stm32g431.h **** 
2181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
2182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
2183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
2184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
2185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
2186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
2187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
2188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
2189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
2190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
2191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
2192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
2193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
2194:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
2195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
2196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
2197:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
2198:../../..\hal\include/device/stm32g431.h **** };
2199:../../..\hal\include/device/stm32g431.h **** 
2200:../../..\hal\include/device/stm32g431.h **** static gpioa_t& GPIOA = *reinterpret_cast<gpioa_t*>(0x48000000);
2201:../../..\hal\include/device/stm32g431.h **** 
2202:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOA
2203:../../..\hal\include/device/stm32g431.h **** 
2204:../../..\hal\include/device/stm32g431.h **** 
2205:../../..\hal\include/device/stm32g431.h **** ////
2206:../../..\hal\include/device/stm32g431.h **** //
2207:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
2208:../../..\hal\include/device/stm32g431.h **** //
2209:../../..\hal\include/device/stm32g431.h **** ////
2210:../../..\hal\include/device/stm32g431.h **** 
2211:../../..\hal\include/device/stm32g431.h **** struct gpiob_t
2212:../../..\hal\include/device/stm32g431.h **** {
2213:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
2214:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
2215:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
2216:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
2217:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
2218:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
2219:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
2220:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
2221:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
2222:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
2223:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
2224:../../..\hal\include/device/stm32g431.h **** 
2225:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
2227:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2228:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
2230:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2231:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
2233:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2234:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
2236:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2237:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
2239:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2240:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
2242:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2243:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
2245:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2246:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
2248:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2249:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
2251:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2252:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2253:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
2254:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2255:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
2257:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2258:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
2260:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
2263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2264:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2265:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
2266:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2267:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
2269:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2270:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
2272:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2273:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xfffffebf;
2274:../../..\hal\include/device/stm32g431.h **** 
2275:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
2276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
2277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
2278:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
2279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
2280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
2281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
2282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
2283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
2284:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
2285:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
2286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
2287:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
2288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
2289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
2290:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
2291:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
2292:../../..\hal\include/device/stm32g431.h **** 
2293:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
2295:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
2298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
2301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2302:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
2304:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2305:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
2307:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2308:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
2310:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2311:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
2313:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2314:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
2316:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2317:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2318:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
2319:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2320:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
2322:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2323:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
2325:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2326:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
2328:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2329:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
2331:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2332:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
2334:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2335:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
2337:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2338:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
2340:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2341:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0xc0;
2342:../../..\hal\include/device/stm32g431.h **** 
2343:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
2345:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2346:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
2348:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2349:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2350:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
2351:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2352:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2353:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
2354:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2355:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
2357:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2358:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
2360:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2361:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
2363:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
2366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2367:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
2369:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2370:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
2372:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2373:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
2375:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2376:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
2378:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2379:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
2381:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2382:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
2384:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2385:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
2387:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2388:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
2390:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2391:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x100;
2392:../../..\hal\include/device/stm32g431.h **** 
2393:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
2394:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
2395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
2396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
2397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
2398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
2399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
2400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
2401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
2402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
2403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
2404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
2405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
2406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
2407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
2408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
2409:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
2410:../../..\hal\include/device/stm32g431.h **** 
2411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
2412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
2413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
2414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
2415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
2416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
2417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
2418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
2419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
2420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
2421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
2422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
2423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
2424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
2425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
2426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
2427:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
2428:../../..\hal\include/device/stm32g431.h **** 
2429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
2430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
2431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
2432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
2433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
2434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
2435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
2436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
2437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
2438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
2439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
2440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
2441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
2442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
2443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
2444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
2445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
2446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
2447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
2448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
2449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
2450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
2451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
2452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
2453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
2454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
2455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
2456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
2457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
2458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
2459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
2460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
2461:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
2462:../../..\hal\include/device/stm32g431.h **** 
2463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
2464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
2465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
2466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
2467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
2468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
2469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
2470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
2471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
2472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
2473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
2474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
2475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
2476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
2477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
2478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
2479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
2480:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
2481:../../..\hal\include/device/stm32g431.h **** 
2482:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
2484:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2485:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2486:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
2487:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
2490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2491:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
2493:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2494:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
2496:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2497:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
2499:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2500:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
2502:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2503:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
2505:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2506:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
2507:../../..\hal\include/device/stm32g431.h **** 
2508:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
2510:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2511:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
2513:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2514:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
2516:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2517:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
2519:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2520:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
2522:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2523:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
2525:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2526:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
2528:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2529:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
2531:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2532:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
2533:../../..\hal\include/device/stm32g431.h **** 
2534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
2535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
2536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
2537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
2538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
2539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
2540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
2541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
2542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
2543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
2544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
2545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
2546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
2547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
2548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
2549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
2550:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
2551:../../..\hal\include/device/stm32g431.h **** };
2552:../../..\hal\include/device/stm32g431.h **** 
2553:../../..\hal\include/device/stm32g431.h **** static gpiob_t& GPIOB = *reinterpret_cast<gpiob_t*>(0x48000400);
2554:../../..\hal\include/device/stm32g431.h **** 
2555:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOB
2556:../../..\hal\include/device/stm32g431.h **** 
2557:../../..\hal\include/device/stm32g431.h **** 
2558:../../..\hal\include/device/stm32g431.h **** ////
2559:../../..\hal\include/device/stm32g431.h **** //
2560:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
2561:../../..\hal\include/device/stm32g431.h **** //
2562:../../..\hal\include/device/stm32g431.h **** ////
2563:../../..\hal\include/device/stm32g431.h **** 
2564:../../..\hal\include/device/stm32g431.h **** struct gpioc_t
2565:../../..\hal\include/device/stm32g431.h **** {
2566:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
2567:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
2568:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
2569:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
2570:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
2571:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
2572:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
2573:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
2574:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
2575:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
2576:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
2577:../../..\hal\include/device/stm32g431.h **** 
2578:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
2580:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2581:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
2583:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2584:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
2586:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2587:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
2589:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2590:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
2592:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2593:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
2595:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2596:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
2598:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2599:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
2601:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2602:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
2604:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2605:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
2607:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2608:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
2610:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2611:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
2613:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2614:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
2616:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2617:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
2619:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2620:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
2622:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2623:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
2625:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2626:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xffffffff;
2627:../../..\hal\include/device/stm32g431.h **** 
2628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
2629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
2630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
2631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
2632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
2633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
2634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
2635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
2636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
2637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
2638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
2639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
2640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
2641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
2642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
2643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
2644:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
2645:../../..\hal\include/device/stm32g431.h **** 
2646:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
2648:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2649:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
2651:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2652:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
2654:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2655:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
2657:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2658:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2659:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
2660:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2661:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
2663:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2664:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
2666:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2667:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
2669:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2670:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
2672:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2673:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2674:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
2675:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2676:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
2678:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2679:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
2681:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2682:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2683:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
2684:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2685:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2686:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
2687:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2688:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
2690:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2691:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
2693:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2694:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0x0;
2695:../../..\hal\include/device/stm32g431.h **** 
2696:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
2698:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2699:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
2701:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2702:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
2704:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2705:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2706:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
2707:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2708:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
2710:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2711:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
2713:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2714:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
2716:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2717:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2718:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
2719:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2720:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
2722:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2723:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
2725:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2726:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
2728:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2729:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
2731:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
2734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2735:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
2737:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2738:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
2740:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2741:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
2743:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2744:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x0;
2745:../../..\hal\include/device/stm32g431.h **** 
2746:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
2747:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
2748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
2749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
2750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
2751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
2752:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
2753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
2754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
2755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
2756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
2757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
2758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
2759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
2760:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
2761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
2762:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
2763:../../..\hal\include/device/stm32g431.h **** 
2764:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
2765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
2766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
2767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
2768:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
2769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
2770:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
2771:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
2772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
2773:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
2774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
2775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
2776:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
2777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
2778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
2779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
2780:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
2781:../../..\hal\include/device/stm32g431.h **** 
2782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
2783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
2784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
2785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
2786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
2787:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
2788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
2789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
2790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
2791:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
2792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
2793:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
2794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
2795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
2796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
2797:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
2798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
2799:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
2800:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
2801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
2802:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
2803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
2804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
2805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
2806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
2807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
2808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
2809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
2810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
2811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
2812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
2813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
2814:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
2815:../../..\hal\include/device/stm32g431.h **** 
2816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
2817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
2818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
2819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
2820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
2821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
2822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
2823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
2824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
2825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
2826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
2827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
2828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
2829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
2830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
2831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
2832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
2833:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
2834:../../..\hal\include/device/stm32g431.h **** 
2835:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
2837:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2838:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
2840:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2841:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
2843:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2844:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2845:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
2846:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2847:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
2849:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2850:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
2852:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2853:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
2855:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2856:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
2858:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2859:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
2860:../../..\hal\include/device/stm32g431.h **** 
2861:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
2863:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
2864:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2865:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
2866:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
2867:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
2869:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
2870:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
2872:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
2873:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
2875:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
2876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
2878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
2879:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
2881:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
2882:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
2884:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
2885:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
2886:../../..\hal\include/device/stm32g431.h **** 
2887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
2888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
2889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
2890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
2891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
2892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
2893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
2894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
2895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
2896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
2897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
2898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
2899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
2900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
2901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
2902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
2903:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
2904:../../..\hal\include/device/stm32g431.h **** };
2905:../../..\hal\include/device/stm32g431.h **** 
2906:../../..\hal\include/device/stm32g431.h **** static gpioc_t& GPIOC = *reinterpret_cast<gpioc_t*>(0x48000800);
2907:../../..\hal\include/device/stm32g431.h **** 
2908:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOC
2909:../../..\hal\include/device/stm32g431.h **** 
2910:../../..\hal\include/device/stm32g431.h **** 
2911:../../..\hal\include/device/stm32g431.h **** ////
2912:../../..\hal\include/device/stm32g431.h **** //
2913:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
2914:../../..\hal\include/device/stm32g431.h **** //
2915:../../..\hal\include/device/stm32g431.h **** ////
2916:../../..\hal\include/device/stm32g431.h **** 
2917:../../..\hal\include/device/stm32g431.h **** struct gpiod_t
2918:../../..\hal\include/device/stm32g431.h **** {
2919:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
2920:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
2921:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
2922:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
2923:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
2924:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
2925:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
2926:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
2927:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
2928:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
2929:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
2930:../../..\hal\include/device/stm32g431.h **** 
2931:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2932:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
2933:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
2934:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2935:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
2936:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
2937:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
2939:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
2940:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
2942:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
2943:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
2945:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
2946:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
2948:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
2949:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
2951:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
2952:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
2954:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
2955:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
2957:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
2958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
2960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
2961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
2963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
2964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
2966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
2967:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2968:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
2969:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
2970:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
2972:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
2973:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
2975:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
2976:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
2977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
2978:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
2979:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xffffffff;
2980:../../..\hal\include/device/stm32g431.h **** 
2981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
2982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
2983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
2984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
2985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
2986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
2987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
2988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
2989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
2990:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
2991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
2992:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
2993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
2994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
2995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
2996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
2997:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
2998:../../..\hal\include/device/stm32g431.h **** 
2999:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
3001:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3002:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
3004:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3005:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
3007:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3008:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
3010:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3011:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
3013:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3014:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
3016:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3017:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
3019:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3020:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
3022:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
3025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3026:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
3028:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3029:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
3031:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
3034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3035:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
3037:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3038:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
3040:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3041:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
3043:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3044:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
3046:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3047:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0x0;
3048:../../..\hal\include/device/stm32g431.h **** 
3049:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
3051:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3052:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
3054:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3055:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
3057:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3058:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
3060:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3061:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
3063:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3064:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
3066:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3067:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
3069:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3070:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
3072:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3073:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
3075:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3076:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
3078:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3079:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
3081:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3082:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
3084:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3085:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
3087:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3088:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
3090:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3091:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
3093:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3094:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
3096:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3097:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x0;
3098:../../..\hal\include/device/stm32g431.h **** 
3099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
3100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
3101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
3102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
3103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
3104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
3105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
3106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
3107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
3108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
3109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
3110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
3111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
3112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
3113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
3114:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
3115:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
3116:../../..\hal\include/device/stm32g431.h **** 
3117:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
3118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
3119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
3120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
3121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
3122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
3123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
3124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
3125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
3126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
3127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
3128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
3129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
3130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
3131:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
3132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
3133:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
3134:../../..\hal\include/device/stm32g431.h **** 
3135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
3136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
3137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
3138:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
3139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
3140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
3141:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
3142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
3143:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
3144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
3145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
3146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
3147:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
3148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
3149:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
3150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
3151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
3152:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
3153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
3154:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
3155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
3156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
3157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
3158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
3159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
3160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
3161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
3162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
3163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
3164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
3165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
3166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
3167:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
3168:../../..\hal\include/device/stm32g431.h **** 
3169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
3170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
3171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
3172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
3173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
3174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
3175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
3176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
3177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
3178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
3179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
3180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
3181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
3182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
3183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
3184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
3185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
3186:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
3187:../../..\hal\include/device/stm32g431.h **** 
3188:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
3190:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3191:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
3193:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
3196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3197:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
3199:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3200:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
3202:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3203:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
3205:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3206:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
3208:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3209:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
3211:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3212:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
3213:../../..\hal\include/device/stm32g431.h **** 
3214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
3216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3217:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
3219:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
3222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3223:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
3225:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3226:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
3228:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3229:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3230:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
3231:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3232:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
3234:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3235:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
3237:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3238:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
3239:../../..\hal\include/device/stm32g431.h **** 
3240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
3241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
3242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
3243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
3244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
3245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
3246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
3247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
3248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
3249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
3250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
3251:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
3252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
3253:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
3254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
3255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
3256:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
3257:../../..\hal\include/device/stm32g431.h **** };
3258:../../..\hal\include/device/stm32g431.h **** 
3259:../../..\hal\include/device/stm32g431.h **** static gpiod_t& GPIOD = *reinterpret_cast<gpiod_t*>(0x48000c00);
3260:../../..\hal\include/device/stm32g431.h **** 
3261:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOD
3262:../../..\hal\include/device/stm32g431.h **** 
3263:../../..\hal\include/device/stm32g431.h **** 
3264:../../..\hal\include/device/stm32g431.h **** ////
3265:../../..\hal\include/device/stm32g431.h **** //
3266:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
3267:../../..\hal\include/device/stm32g431.h **** //
3268:../../..\hal\include/device/stm32g431.h **** ////
3269:../../..\hal\include/device/stm32g431.h **** 
3270:../../..\hal\include/device/stm32g431.h **** struct gpioe_t
3271:../../..\hal\include/device/stm32g431.h **** {
3272:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
3273:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
3274:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
3275:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
3276:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
3277:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
3278:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
3279:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
3280:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
3281:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
3282:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
3283:../../..\hal\include/device/stm32g431.h **** 
3284:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3285:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
3286:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3287:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
3289:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3290:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
3292:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3293:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
3295:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
3298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
3301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3302:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
3304:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3305:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
3307:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3308:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
3310:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3311:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
3313:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3314:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
3316:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3317:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3318:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
3319:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3320:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
3322:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3323:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
3325:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3326:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
3328:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3329:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
3331:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3332:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xffffffff;
3333:../../..\hal\include/device/stm32g431.h **** 
3334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
3335:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
3336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
3337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
3338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
3339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
3340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
3341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
3342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
3343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
3344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
3345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
3346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
3347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
3348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
3349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
3350:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
3351:../../..\hal\include/device/stm32g431.h **** 
3352:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3353:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
3354:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3355:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
3357:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3358:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
3360:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3361:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
3363:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
3366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3367:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
3369:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3370:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
3372:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3373:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
3375:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3376:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
3378:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3379:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
3381:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3382:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
3384:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3385:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
3387:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3388:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
3390:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3391:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
3393:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3394:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
3396:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3397:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
3399:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3400:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0x0;
3401:../../..\hal\include/device/stm32g431.h **** 
3402:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
3404:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3405:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
3407:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3408:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
3410:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3411:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
3413:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3414:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
3416:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3417:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
3419:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3420:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
3422:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3423:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
3425:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3426:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
3428:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3429:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
3431:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3432:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
3434:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3435:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
3437:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3438:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
3440:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3441:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
3443:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3444:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
3446:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3447:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
3449:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3450:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x0;
3451:../../..\hal\include/device/stm32g431.h **** 
3452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
3453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
3454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
3455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
3456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
3457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
3458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
3459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
3460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
3461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
3462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
3463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
3464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
3465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
3466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
3467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
3468:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
3469:../../..\hal\include/device/stm32g431.h **** 
3470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
3471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
3472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
3473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
3474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
3475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
3476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
3477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
3478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
3479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
3480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
3481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
3482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
3483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
3484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
3485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
3486:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
3487:../../..\hal\include/device/stm32g431.h **** 
3488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
3489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
3490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
3491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
3492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
3493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
3494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
3495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
3496:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
3497:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
3498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
3499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
3500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
3501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
3502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
3503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
3504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
3505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
3506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
3507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
3508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
3509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
3510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
3511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
3512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
3513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
3514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
3515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
3516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
3517:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
3518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
3519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
3520:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
3521:../../..\hal\include/device/stm32g431.h **** 
3522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
3523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
3524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
3525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
3526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
3527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
3528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
3529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
3530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
3531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
3532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
3533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
3534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
3535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
3536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
3537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
3538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
3539:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
3540:../../..\hal\include/device/stm32g431.h **** 
3541:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
3543:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3544:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
3546:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3547:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
3549:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3550:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
3552:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3553:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
3555:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3556:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
3558:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3559:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
3561:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3562:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
3564:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3565:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
3566:../../..\hal\include/device/stm32g431.h **** 
3567:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3568:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
3569:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3570:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
3572:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3573:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
3575:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3576:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
3578:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3579:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
3581:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3582:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
3584:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3585:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
3587:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3588:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
3590:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3591:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
3592:../../..\hal\include/device/stm32g431.h **** 
3593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
3594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
3595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
3596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
3597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
3598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
3599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
3600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
3601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
3602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
3603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
3604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
3605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
3606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
3607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
3608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
3609:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
3610:../../..\hal\include/device/stm32g431.h **** };
3611:../../..\hal\include/device/stm32g431.h **** 
3612:../../..\hal\include/device/stm32g431.h **** static gpioe_t& GPIOE = *reinterpret_cast<gpioe_t*>(0x48001000);
3613:../../..\hal\include/device/stm32g431.h **** 
3614:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOE
3615:../../..\hal\include/device/stm32g431.h **** 
3616:../../..\hal\include/device/stm32g431.h **** 
3617:../../..\hal\include/device/stm32g431.h **** ////
3618:../../..\hal\include/device/stm32g431.h **** //
3619:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
3620:../../..\hal\include/device/stm32g431.h **** //
3621:../../..\hal\include/device/stm32g431.h **** ////
3622:../../..\hal\include/device/stm32g431.h **** 
3623:../../..\hal\include/device/stm32g431.h **** struct gpiof_t
3624:../../..\hal\include/device/stm32g431.h **** {
3625:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
3626:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
3627:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
3628:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
3629:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
3630:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
3631:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
3632:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
3633:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
3634:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
3635:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
3636:../../..\hal\include/device/stm32g431.h **** 
3637:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
3639:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3640:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
3642:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3643:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
3645:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3646:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
3648:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3649:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
3651:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3652:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
3654:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3655:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
3657:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3658:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3659:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
3660:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3661:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
3663:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3664:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
3666:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3667:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
3669:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3670:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
3672:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3673:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3674:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
3675:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3676:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
3678:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3679:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
3681:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3682:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3683:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
3684:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3685:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xffffffff;
3686:../../..\hal\include/device/stm32g431.h **** 
3687:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
3688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
3689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
3690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
3691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
3692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
3693:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
3694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
3695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
3696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
3697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
3698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
3699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
3700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
3701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
3702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
3703:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
3704:../../..\hal\include/device/stm32g431.h **** 
3705:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3706:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
3707:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3708:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
3710:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3711:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
3713:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3714:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
3716:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3717:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3718:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
3719:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3720:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
3722:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3723:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
3725:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3726:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
3728:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3729:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
3731:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
3734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3735:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
3737:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3738:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
3740:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3741:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
3743:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3744:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
3746:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3747:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
3749:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3750:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
3752:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3753:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0x0;
3754:../../..\hal\include/device/stm32g431.h **** 
3755:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
3757:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3758:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
3760:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3761:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3762:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
3763:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3764:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
3766:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
3767:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3768:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
3769:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
3770:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3771:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
3772:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
3773:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
3775:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
3776:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
3778:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
3779:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
3781:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
3782:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
3784:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
3785:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
3787:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
3788:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
3790:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
3791:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
3793:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
3794:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
3796:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
3797:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
3799:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
3800:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
3802:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
3803:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x0;
3804:../../..\hal\include/device/stm32g431.h **** 
3805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
3806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
3807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
3808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
3809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
3810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
3811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
3812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
3813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
3814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
3815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
3816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
3817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
3818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
3819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
3820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
3821:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
3822:../../..\hal\include/device/stm32g431.h **** 
3823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
3824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
3825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
3826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
3827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
3828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
3829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
3830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
3831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
3832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
3833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
3834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
3835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
3836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
3837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
3838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
3839:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
3840:../../..\hal\include/device/stm32g431.h **** 
3841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
3842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
3843:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
3844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
3845:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
3846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
3847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
3848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
3849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
3850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
3851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
3852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
3853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
3854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
3855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
3856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
3857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
3858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
3859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
3860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
3861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
3862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
3863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
3864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
3865:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
3866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
3867:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
3868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
3869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
3870:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
3871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
3872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
3873:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
3874:../../..\hal\include/device/stm32g431.h **** 
3875:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
3876:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
3877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
3878:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
3879:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
3880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
3881:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
3882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
3883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
3884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
3885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
3886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
3887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
3888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
3889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
3890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
3891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
3892:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
3893:../../..\hal\include/device/stm32g431.h **** 
3894:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
3896:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3897:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
3899:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3900:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
3902:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3903:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3904:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
3905:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3906:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3907:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
3908:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3909:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
3911:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3912:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
3914:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3915:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3916:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
3917:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3918:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
3919:../../..\hal\include/device/stm32g431.h **** 
3920:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
3922:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
3923:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
3925:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
3926:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
3928:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
3929:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3930:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
3931:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
3932:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
3934:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
3935:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
3937:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
3938:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
3940:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
3941:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
3943:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
3944:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
3945:../../..\hal\include/device/stm32g431.h **** 
3946:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
3947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
3948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
3949:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
3950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
3951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
3952:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
3953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
3954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
3955:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
3956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
3957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
3958:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
3959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
3960:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
3961:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
3962:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
3963:../../..\hal\include/device/stm32g431.h **** };
3964:../../..\hal\include/device/stm32g431.h **** 
3965:../../..\hal\include/device/stm32g431.h **** static gpiof_t& GPIOF = *reinterpret_cast<gpiof_t*>(0x48001400);
3966:../../..\hal\include/device/stm32g431.h **** 
3967:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOF
3968:../../..\hal\include/device/stm32g431.h **** 
3969:../../..\hal\include/device/stm32g431.h **** 
3970:../../..\hal\include/device/stm32g431.h **** ////
3971:../../..\hal\include/device/stm32g431.h **** //
3972:../../..\hal\include/device/stm32g431.h **** //    General-purpose I/Os
3973:../../..\hal\include/device/stm32g431.h **** //
3974:../../..\hal\include/device/stm32g431.h **** ////
3975:../../..\hal\include/device/stm32g431.h **** 
3976:../../..\hal\include/device/stm32g431.h **** struct gpiog_t
3977:../../..\hal\include/device/stm32g431.h **** {
3978:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MODER;                // [Read-write] GPIO port mode register
3979:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OTYPER;               // [Read-write] GPIO port output type register
3980:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OSPEEDR;              // [Read-write] GPIO port output speed register
3981:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PUPDR;                // [Read-write] GPIO port pull-up/pull-down register
3982:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IDR;                  // [Read-only] GPIO port input data register
3983:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ODR;                  // [Read-write] GPIO port output data register
3984:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSRR;                 // [Write-only] GPIO port bit set/reset register
3985:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LCKR;                 // [Read-write] GPIO port configuration lock registe
3986:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRL;                 // [Read-write] GPIO alternate function low register
3987:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRH;                 // [Read-write] GPIO alternate function high registe
3988:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Write-only] GPIO port bit reset register
3989:../../..\hal\include/device/stm32g431.h **** 
3990:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER15 =             // Port x configuration bits (y = 0..15) 
3992:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
3993:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER14 =             // Port x configuration bits (y = 0..15) 
3995:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
3996:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
3997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER13 =             // Port x configuration bits (y = 0..15) 
3998:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
3999:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER12 =             // Port x configuration bits (y = 0..15) 
4001:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
4002:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER11 =             // Port x configuration bits (y = 0..15) 
4004:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
4005:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER10 =             // Port x configuration bits (y = 0..15) 
4007:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
4008:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER9 =              // Port x configuration bits (y = 0..15) 
4010:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
4011:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER8 =              // Port x configuration bits (y = 0..15) 
4013:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
4014:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER7 =              // Port x configuration bits (y = 0..15) 
4016:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
4017:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER6 =              // Port x configuration bits (y = 0..15) 
4019:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
4020:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER5 =              // Port x configuration bits (y = 0..15) 
4022:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
4023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER4 =              // Port x configuration bits (y = 0..15) 
4025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4026:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER3 =              // Port x configuration bits (y = 0..15) 
4028:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
4029:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER2 =              // Port x configuration bits (y = 0..15) 
4031:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
4032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER1 =              // Port x configuration bits (y = 0..15) 
4034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4035:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MODER_MODER0 =              // Port x configuration bits (y = 0..15) 
4037:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4038:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MODER_RESET_VALUE = 0xffffffff;
4039:../../..\hal\include/device/stm32g431.h **** 
4040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT15 = 0x8000;        // Port x configuration bits (y = 0..15)
4041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT14 = 0x4000;        // Port x configuration bits (y = 0..15)
4042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT13 = 0x2000;        // Port x configuration bits (y = 0..15)
4043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT12 = 0x1000;        // Port x configuration bits (y = 0..15)
4044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT11 = 0x800;         // Port x configuration bits (y = 0..15)
4045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT10 = 0x400;         // Port x configuration bits (y = 0..15)
4046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT9 = 0x200;          // Port x configuration bits (y = 0..15)
4047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT8 = 0x100;          // Port x configuration bits (y = 0..15)
4048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT7 = 0x80;           // Port x configuration bits (y = 0..15)
4049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT6 = 0x40;           // Port x configuration bits (y = 0..15)
4050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT5 = 0x20;           // Port x configuration bits (y = 0..15)
4051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT4 = 0x10;           // Port x configuration bits (y = 0..15)
4052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT3 = 0x8;            // Port x configuration bits (y = 0..15)
4053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT2 = 0x4;            // Port x configuration bits (y = 0..15)
4054:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT1 = 0x2;            // Port x configuration bits (y = 0..15)
4055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OTYPER_OT0 = 0x1;            // Port x configuration bits (y = 0..15)
4056:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OTYPER_RESET_VALUE = 0x0;
4057:../../..\hal\include/device/stm32g431.h **** 
4058:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR15 =           // Port x configuration bits (y = 0..15
4060:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
4061:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR14 =           // Port x configuration bits (y = 0..15
4063:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
4064:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR13 =           // Port x configuration bits (y = 0..15
4066:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
4067:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR12 =           // Port x configuration bits (y = 0..15
4069:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
4070:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR11 =           // Port x configuration bits (y = 0..15
4072:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
4073:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR10 =           // Port x configuration bits (y = 0..15
4075:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
4076:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR9 =            // Port x configuration bits (y = 0..15
4078:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
4079:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR8 =            // Port x configuration bits (y = 0..15
4081:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
4082:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR7 =            // Port x configuration bits (y = 0..15
4084:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
4085:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR6 =            // Port x configuration bits (y = 0..15
4087:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
4088:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR5 =            // Port x configuration bits (y = 0..15
4090:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
4091:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR4 =            // Port x configuration bits (y = 0..15
4093:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4094:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR3 =            // Port x configuration bits (y = 0..15
4096:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
4097:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR2 =            // Port x configuration bits (y = 0..15
4099:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
4100:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR1 =            // Port x configuration bits (y = 0..15
4102:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4103:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OSPEEDR_OSPEEDR0 =            // Port x configuration bits (y = 0..15
4105:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4106:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OSPEEDR_RESET_VALUE = 0x0;
4107:../../..\hal\include/device/stm32g431.h **** 
4108:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR15 =             // Port x configuration bits (y = 0..15) 
4110:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
4111:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR14 =             // Port x configuration bits (y = 0..15) 
4113:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
4114:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR13 =             // Port x configuration bits (y = 0..15) 
4116:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3>::value<X>();
4117:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR12 =             // Port x configuration bits (y = 0..15) 
4119:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
4120:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR11 =             // Port x configuration bits (y = 0..15) 
4122:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
4123:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR10 =             // Port x configuration bits (y = 0..15) 
4125:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
4126:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR9 =              // Port x configuration bits (y = 0..15) 
4128:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
4129:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR8 =              // Port x configuration bits (y = 0..15) 
4131:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
4132:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR7 =              // Port x configuration bits (y = 0..15) 
4134:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
4135:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR6 =              // Port x configuration bits (y = 0..15) 
4137:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
4138:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR5 =              // Port x configuration bits (y = 0..15) 
4140:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
4141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR4 =              // Port x configuration bits (y = 0..15) 
4143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4144:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR3 =              // Port x configuration bits (y = 0..15) 
4146:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
4147:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR2 =              // Port x configuration bits (y = 0..15) 
4149:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
4150:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR1 =              // Port x configuration bits (y = 0..15) 
4152:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4153:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4154:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PUPDR_PUPDR0 =              // Port x configuration bits (y = 0..15) 
4155:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4156:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PUPDR_RESET_VALUE = 0x0;
4157:../../..\hal\include/device/stm32g431.h **** 
4158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR15 = 0x8000;       // Port input data (y = 0..15)
4159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR14 = 0x4000;       // Port input data (y = 0..15)
4160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR13 = 0x2000;       // Port input data (y = 0..15)
4161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR12 = 0x1000;       // Port input data (y = 0..15)
4162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR11 = 0x800;        // Port input data (y = 0..15)
4163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR10 = 0x400;        // Port input data (y = 0..15)
4164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR9 = 0x200;         // Port input data (y = 0..15)
4165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR8 = 0x100;         // Port input data (y = 0..15)
4166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR7 = 0x80;          // Port input data (y = 0..15)
4167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR6 = 0x40;          // Port input data (y = 0..15)
4168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR5 = 0x20;          // Port input data (y = 0..15)
4169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR4 = 0x10;          // Port input data (y = 0..15)
4170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR3 = 0x8;           // Port input data (y = 0..15)
4171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR2 = 0x4;           // Port input data (y = 0..15)
4172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR1 = 0x2;           // Port input data (y = 0..15)
4173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IDR_IDR0 = 0x1;           // Port input data (y = 0..15)
4174:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IDR_RESET_VALUE = 0x0;
4175:../../..\hal\include/device/stm32g431.h **** 
4176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR15 = 0x8000;       // Port output data (y = 0..15)
4177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR14 = 0x4000;       // Port output data (y = 0..15)
4178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR13 = 0x2000;       // Port output data (y = 0..15)
4179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR12 = 0x1000;       // Port output data (y = 0..15)
4180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR11 = 0x800;        // Port output data (y = 0..15)
4181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR10 = 0x400;        // Port output data (y = 0..15)
4182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR9 = 0x200;         // Port output data (y = 0..15)
4183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR8 = 0x100;         // Port output data (y = 0..15)
4184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR7 = 0x80;          // Port output data (y = 0..15)
4185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR6 = 0x40;          // Port output data (y = 0..15)
4186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR5 = 0x20;          // Port output data (y = 0..15)
4187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR4 = 0x10;          // Port output data (y = 0..15)
4188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR3 = 0x8;           // Port output data (y = 0..15)
4189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR2 = 0x4;           // Port output data (y = 0..15)
4190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR1 = 0x2;           // Port output data (y = 0..15)
4191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ODR_ODR0 = 0x1;           // Port output data (y = 0..15)
4192:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ODR_RESET_VALUE = 0x0;
4193:../../..\hal\include/device/stm32g431.h **** 
4194:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR15 = 0x80000000;    // Port x reset bit y (y = 0..15)
4195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR14 = 0x40000000;    // Port x reset bit y (y = 0..15)
4196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR13 = 0x20000000;    // Port x reset bit y (y = 0..15)
4197:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR12 = 0x10000000;    // Port x reset bit y (y = 0..15)
4198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR11 = 0x8000000;     // Port x reset bit y (y = 0..15)
4199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR10 = 0x4000000;     // Port x reset bit y (y = 0..15)
4200:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR9 = 0x2000000;      // Port x reset bit y (y = 0..15)
4201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR8 = 0x1000000;      // Port x reset bit y (y = 0..15)
4202:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR7 = 0x800000;       // Port x reset bit y (y = 0..15)
4203:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR6 = 0x400000;       // Port x reset bit y (y = 0..15)
4204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR5 = 0x200000;       // Port x reset bit y (y = 0..15)
4205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR4 = 0x100000;       // Port x reset bit y (y = 0..15)
4206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR3 = 0x80000;        // Port x reset bit y (y = 0..15)
4207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR2 = 0x40000;        // Port x reset bit y (y = 0..15)
4208:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR1 = 0x20000;        // Port x reset bit y (y = 0..15)
4209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BR0 = 0x10000;        // Port x set bit y (y= 0..15)
4210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS15 = 0x8000;        // Port x set bit y (y= 0..15)
4211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS14 = 0x4000;        // Port x set bit y (y= 0..15)
4212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS13 = 0x2000;        // Port x set bit y (y= 0..15)
4213:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS12 = 0x1000;        // Port x set bit y (y= 0..15)
4214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS11 = 0x800;         // Port x set bit y (y= 0..15)
4215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS10 = 0x400;         // Port x set bit y (y= 0..15)
4216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS9 = 0x200;          // Port x set bit y (y= 0..15)
4217:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS8 = 0x100;          // Port x set bit y (y= 0..15)
4218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS7 = 0x80;           // Port x set bit y (y= 0..15)
4219:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS6 = 0x40;           // Port x set bit y (y= 0..15)
4220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS5 = 0x20;           // Port x set bit y (y= 0..15)
4221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS4 = 0x10;           // Port x set bit y (y= 0..15)
4222:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS3 = 0x8;            // Port x set bit y (y= 0..15)
4223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS2 = 0x4;            // Port x set bit y (y= 0..15)
4224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS1 = 0x2;            // Port x set bit y (y= 0..15)
4225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSRR_BS0 = 0x1;            // Port x set bit y (y= 0..15)
4226:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSRR_RESET_VALUE = 0x0;
4227:../../..\hal\include/device/stm32g431.h **** 
4228:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCKK = 0x10000;       // Port x lock bit y (y= 0..15)
4229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK15 = 0x8000;       // Port x lock bit y (y= 0..15)
4230:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK14 = 0x4000;       // Port x lock bit y (y= 0..15)
4231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK13 = 0x2000;       // Port x lock bit y (y= 0..15)
4232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK12 = 0x1000;       // Port x lock bit y (y= 0..15)
4233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK11 = 0x800;        // Port x lock bit y (y= 0..15)
4234:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK10 = 0x400;        // Port x lock bit y (y= 0..15)
4235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK9 = 0x200;         // Port x lock bit y (y= 0..15)
4236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK8 = 0x100;         // Port x lock bit y (y= 0..15)
4237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK7 = 0x80;          // Port x lock bit y (y= 0..15)
4238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK6 = 0x40;          // Port x lock bit y (y= 0..15)
4239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK5 = 0x20;          // Port x lock bit y (y= 0..15)
4240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK4 = 0x10;          // Port x lock bit y (y= 0..15)
4241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK3 = 0x8;           // Port x lock bit y (y= 0..15)
4242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK2 = 0x4;           // Port x lock bit y (y= 0..15)
4243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK1 = 0x2;           // Port x lock bit y (y= 0..15)
4244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LCKR_LCK0 = 0x1;           // Port x lock bit y (y= 0..15)
4245:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LCKR_RESET_VALUE = 0x0;
4246:../../..\hal\include/device/stm32g431.h **** 
4247:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL7 =               // Alternate function selection for port x
4249:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
4250:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4251:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL6 =               // Alternate function selection for port x
4252:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
4253:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL5 =               // Alternate function selection for port x
4255:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
4256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL4 =               // Alternate function selection for port x
4258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
4259:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL3 =               // Alternate function selection for port x
4261:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
4262:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4263:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL2 =               // Alternate function selection for port x
4264:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
4265:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL1 =               // Alternate function selection for port x
4267:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
4268:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRL_AFRL0 =               // Alternate function selection for port x
4270:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
4271:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRL_RESET_VALUE = 0x0;
4272:../../..\hal\include/device/stm32g431.h **** 
4273:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH15 =              // Alternate function selection for port x
4275:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
4276:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH14 =              // Alternate function selection for port x
4278:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
4279:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH13 =              // Alternate function selection for port x
4281:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
4282:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH12 =              // Alternate function selection for port x
4284:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
4285:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH11 =              // Alternate function selection for port x
4287:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
4288:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH10 =              // Alternate function selection for port x
4290:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
4291:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH9 =               // Alternate function selection for port x
4293:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
4294:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRH_AFRH8 =               // Alternate function selection for port x
4296:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
4297:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRH_RESET_VALUE = 0x0;
4298:../../..\hal\include/device/stm32g431.h **** 
4299:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR0 = 0x1;            // Port Reset bit
4300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR1 = 0x2;            // Port Reset bit
4301:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR2 = 0x4;            // Port Reset bit
4302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR3 = 0x8;            // Port Reset bit
4303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR4 = 0x10;           // Port Reset bit
4304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR5 = 0x20;           // Port Reset bit
4305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR6 = 0x40;           // Port Reset bit
4306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR7 = 0x80;           // Port Reset bit
4307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR8 = 0x100;          // Port Reset bit
4308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR9 = 0x200;          // Port Reset bit
4309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR10 = 0x400;         // Port Reset bit
4310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR11 = 0x800;         // Port Reset bit
4311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR12 = 0x1000;        // Port Reset bit
4312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR13 = 0x2000;        // Port Reset bit
4313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR14 = 0x4000;        // Port Reset bit
4314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BR15 = 0x8000;        // Port Reset bit
4315:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
4316:../../..\hal\include/device/stm32g431.h **** };
4317:../../..\hal\include/device/stm32g431.h **** 
4318:../../..\hal\include/device/stm32g431.h **** static gpiog_t& GPIOG = *reinterpret_cast<gpiog_t*>(0x48001800);
4319:../../..\hal\include/device/stm32g431.h **** 
4320:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_GPIOG
4321:../../..\hal\include/device/stm32g431.h **** 
4322:../../..\hal\include/device/stm32g431.h **** 
4323:../../..\hal\include/device/stm32g431.h **** ////
4324:../../..\hal\include/device/stm32g431.h **** //
4325:../../..\hal\include/device/stm32g431.h **** //    General purpose timers
4326:../../..\hal\include/device/stm32g431.h **** //
4327:../../..\hal\include/device/stm32g431.h **** ////
4328:../../..\hal\include/device/stm32g431.h **** 
4329:../../..\hal\include/device/stm32g431.h **** struct tim15_t
4330:../../..\hal\include/device/stm32g431.h **** {
4331:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
4332:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
4333:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
4334:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
4335:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
4336:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
4337:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register (outpu
4338:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
4339:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
4340:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
4341:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
4342:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
4343:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
4344:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
4345:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
4346:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _1;
4347:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
4348:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _2;
4349:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
4350:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _3;
4351:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
4352:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
4353:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
4354:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _4;
4355:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] DMA control register
4356:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
4357:../../..\hal\include/device/stm32g431.h **** 
4358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
4359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
4360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
4361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
4362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
4363:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4364:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
4365:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4366:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
4367:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
4368:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
4369:../../..\hal\include/device/stm32g431.h **** 
4370:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output idle state 2 (OC2 output)
4371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
4372:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
4373:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
4374:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
4376:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
4377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
4378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
4379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
4380:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
4381:../../..\hal\include/device/stm32g431.h **** 
4382:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
4384:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
4385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
4386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
4387:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
4389:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
4390:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4391:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
4392:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
4393:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
4394:../../..\hal\include/device/stm32g431.h **** 
4395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
4396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
4397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
4398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
4399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
4400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
4401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
4402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
4403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
4404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
4405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
4406:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
4407:../../..\hal\include/device/stm32g431.h **** 
4408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/Compare 2 overcapture flag
4409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
4410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
4411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
4412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
4413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/compare 2 interrupt flag
4414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
4415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
4416:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
4417:../../..\hal\include/device/stm32g431.h **** 
4418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
4419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
4420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
4421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
4422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
4423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
4424:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
4425:../../..\hal\include/device/stm32g431.h **** 
4426:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
4428:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4429:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // CC2S (2 bits)
4431:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4432:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
4434:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
4435:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1PSC =              // Input capture 1 prescaler (2 bits)
4437:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4438:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // IC2F (4 bits)
4440:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
4441:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // IC2PSC (2 bits)
4443:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
4444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // OC1CE
4445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
4446:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
4448:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
4449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode
4450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
4451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // OC2FE
4452:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // OC2M (3 bits)
4454:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
4455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
4456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // OC2PE
4457:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
4458:../../..\hal\include/device/stm32g431.h **** 
4459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 complementary output 
4460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output polarity
4461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
4462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
4463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
4464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
4465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
4466:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
4467:../../..\hal\include/device/stm32g431.h **** 
4468:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits), Read-write
4470:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIF Copy, Read-only
4472:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
4473:../../..\hal\include/device/stm32g431.h **** 
4474:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
4476:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4477:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
4478:../../..\hal\include/device/stm32g431.h **** 
4479:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
4481:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4482:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
4483:../../..\hal\include/device/stm32g431.h **** 
4484:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (8 bits)
4486:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4487:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
4488:../../..\hal\include/device/stm32g431.h **** 
4489:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
4491:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4492:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
4493:../../..\hal\include/device/stm32g431.h **** 
4494:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 1 value (16 bits)
4496:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4497:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
4498:../../..\hal\include/device/stm32g431.h **** 
4499:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
4501:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4502:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
4504:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
4506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
4507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
4508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
4509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
4510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
4511:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
4513:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
4514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
4515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
4516:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
4517:../../..\hal\include/device/stm32g431.h **** 
4518:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time generator setup (8 bits)
4520:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
4522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
4523:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
4524:../../..\hal\include/device/stm32g431.h **** 
4525:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
4527:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
4528:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
4530:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
4531:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
4532:../../..\hal\include/device/stm32g431.h **** 
4533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
4534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
4535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
4536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
4537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
4538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
4539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
4540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
4541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
4542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
4543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
4544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
4545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
4546:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
4547:../../..\hal\include/device/stm32g431.h **** 
4548:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
4550:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
4551:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
4552:../../..\hal\include/device/stm32g431.h **** 
4553:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
4555:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
4556:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
4558:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
4559:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
4560:../../..\hal\include/device/stm32g431.h **** 
4561:../../..\hal\include/device/stm32g431.h **** 
4562:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
4563:../../..\hal\include/device/stm32g431.h **** };
4564:../../..\hal\include/device/stm32g431.h **** 
4565:../../..\hal\include/device/stm32g431.h **** static tim15_t& TIM15 = *reinterpret_cast<tim15_t*>(0x40014000);
4566:../../..\hal\include/device/stm32g431.h **** 
4567:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM15
4568:../../..\hal\include/device/stm32g431.h **** 
4569:../../..\hal\include/device/stm32g431.h **** 
4570:../../..\hal\include/device/stm32g431.h **** ////
4571:../../..\hal\include/device/stm32g431.h **** //
4572:../../..\hal\include/device/stm32g431.h **** //    General purpose timers
4573:../../..\hal\include/device/stm32g431.h **** //
4574:../../..\hal\include/device/stm32g431.h **** ////
4575:../../..\hal\include/device/stm32g431.h **** 
4576:../../..\hal\include/device/stm32g431.h **** struct tim16_t
4577:../../..\hal\include/device/stm32g431.h **** {
4578:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
4579:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
4580:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
4581:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
4582:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
4583:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
4584:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register (outpu
4585:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
4586:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
4587:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
4588:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
4589:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
4590:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
4591:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
4592:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _2;
4593:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
4594:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _3;
4595:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
4596:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
4597:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
4598:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
4599:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
4600:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _5;
4601:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] DMA control register
4602:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
4603:../../..\hal\include/device/stm32g431.h **** 
4604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
4605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
4606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
4607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
4608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
4609:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
4611:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
4613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
4614:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
4615:../../..\hal\include/device/stm32g431.h **** 
4616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
4617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
4618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
4619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
4620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
4621:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
4622:../../..\hal\include/device/stm32g431.h **** 
4623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
4624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
4625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
4626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
4627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
4628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
4629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
4630:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
4631:../../..\hal\include/device/stm32g431.h **** 
4632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
4633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
4634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
4635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
4636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
4637:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
4638:../../..\hal\include/device/stm32g431.h **** 
4639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
4640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
4641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
4642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
4643:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
4644:../../..\hal\include/device/stm32g431.h **** 
4645:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
4647:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4648:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
4650:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
4651:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4652:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1PSC =              // Input capture 1 prescaler (2 bits)
4653:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
4655:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
4657:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
4658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode
4659:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
4660:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
4661:../../..\hal\include/device/stm32g431.h **** 
4662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
4663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
4664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
4665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
4666:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
4667:../../..\hal\include/device/stm32g431.h **** 
4668:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits), Read-write
4670:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIF Copy, Read-only
4672:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
4673:../../..\hal\include/device/stm32g431.h **** 
4674:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
4676:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4677:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
4678:../../..\hal\include/device/stm32g431.h **** 
4679:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
4681:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4682:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
4683:../../..\hal\include/device/stm32g431.h **** 
4684:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (8 bits)
4686:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4687:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
4688:../../..\hal\include/device/stm32g431.h **** 
4689:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
4691:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4692:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
4693:../../..\hal\include/device/stm32g431.h **** 
4694:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
4696:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4697:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
4699:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
4701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
4702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
4703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
4704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
4705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
4706:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4707:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
4708:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
4709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
4710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
4711:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
4712:../../..\hal\include/device/stm32g431.h **** 
4713:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4714:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time generator setup (8 bits)
4715:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
4717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
4718:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
4719:../../..\hal\include/device/stm32g431.h **** 
4720:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
4722:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
4723:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
4724:../../..\hal\include/device/stm32g431.h **** 
4725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
4726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
4727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
4728:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
4729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
4730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
4731:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
4732:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
4733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
4734:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
4735:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
4736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
4737:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
4738:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
4739:../../..\hal\include/device/stm32g431.h **** 
4740:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4741:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
4742:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
4743:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
4744:../../..\hal\include/device/stm32g431.h **** 
4745:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4746:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
4747:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
4748:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
4750:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
4751:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
4752:../../..\hal\include/device/stm32g431.h **** 
4753:../../..\hal\include/device/stm32g431.h **** 
4754:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
4755:../../..\hal\include/device/stm32g431.h **** };
4756:../../..\hal\include/device/stm32g431.h **** 
4757:../../..\hal\include/device/stm32g431.h **** static tim16_t& TIM16 = *reinterpret_cast<tim16_t*>(0x40014400);
4758:../../..\hal\include/device/stm32g431.h **** 
4759:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM16
4760:../../..\hal\include/device/stm32g431.h **** 
4761:../../..\hal\include/device/stm32g431.h **** 
4762:../../..\hal\include/device/stm32g431.h **** ////
4763:../../..\hal\include/device/stm32g431.h **** //
4764:../../..\hal\include/device/stm32g431.h **** //    General purpose timers
4765:../../..\hal\include/device/stm32g431.h **** //
4766:../../..\hal\include/device/stm32g431.h **** ////
4767:../../..\hal\include/device/stm32g431.h **** 
4768:../../..\hal\include/device/stm32g431.h **** struct tim17_t
4769:../../..\hal\include/device/stm32g431.h **** {
4770:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
4771:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
4772:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
4773:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
4774:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
4775:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
4776:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register (outpu
4777:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
4778:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
4779:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
4780:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
4781:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
4782:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
4783:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
4784:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _2;
4785:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
4786:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _3;
4787:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
4788:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
4789:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
4790:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
4791:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
4792:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _5;
4793:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] DMA control register
4794:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
4795:../../..\hal\include/device/stm32g431.h **** 
4796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
4797:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
4798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
4799:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
4800:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
4801:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4802:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
4803:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
4805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
4806:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
4807:../../..\hal\include/device/stm32g431.h **** 
4808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
4809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
4810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
4811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
4812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
4813:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
4814:../../..\hal\include/device/stm32g431.h **** 
4815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
4816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
4817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
4818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
4819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
4820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
4821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
4822:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
4823:../../..\hal\include/device/stm32g431.h **** 
4824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
4825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
4826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
4827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
4828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
4829:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
4830:../../..\hal\include/device/stm32g431.h **** 
4831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
4832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
4833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
4834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
4835:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
4836:../../..\hal\include/device/stm32g431.h **** 
4837:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
4839:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
4840:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
4842:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
4843:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1PSC =              // Input capture 1 prescaler (2 bits)
4845:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
4846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
4847:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
4849:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
4850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode
4851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
4852:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
4853:../../..\hal\include/device/stm32g431.h **** 
4854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
4855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
4856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
4857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
4858:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
4859:../../..\hal\include/device/stm32g431.h **** 
4860:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits), Read-write
4862:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIF Copy, Read-only
4864:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
4865:../../..\hal\include/device/stm32g431.h **** 
4866:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4867:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
4868:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4869:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
4870:../../..\hal\include/device/stm32g431.h **** 
4871:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
4873:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4874:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
4875:../../..\hal\include/device/stm32g431.h **** 
4876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (8 bits)
4878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4879:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
4880:../../..\hal\include/device/stm32g431.h **** 
4881:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
4883:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
4884:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
4885:../../..\hal\include/device/stm32g431.h **** 
4886:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
4888:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4889:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
4891:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
4893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
4894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
4895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
4896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
4897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
4898:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
4900:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
4901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
4902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
4903:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
4904:../../..\hal\include/device/stm32g431.h **** 
4905:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4906:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time generator setup (8 bits)
4907:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
4908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
4909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
4910:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
4911:../../..\hal\include/device/stm32g431.h **** 
4912:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
4914:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
4915:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
4916:../../..\hal\include/device/stm32g431.h **** 
4917:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
4918:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
4919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
4920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
4921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
4922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
4923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
4924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
4925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
4926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
4927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
4928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
4929:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
4930:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
4931:../../..\hal\include/device/stm32g431.h **** 
4932:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
4934:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
4935:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
4936:../../..\hal\include/device/stm32g431.h **** 
4937:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
4939:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
4940:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
4942:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
4943:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
4944:../../..\hal\include/device/stm32g431.h **** 
4945:../../..\hal\include/device/stm32g431.h **** 
4946:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
4947:../../..\hal\include/device/stm32g431.h **** };
4948:../../..\hal\include/device/stm32g431.h **** 
4949:../../..\hal\include/device/stm32g431.h **** static tim17_t& TIM17 = *reinterpret_cast<tim17_t*>(0x40014800);
4950:../../..\hal\include/device/stm32g431.h **** 
4951:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM17
4952:../../..\hal\include/device/stm32g431.h **** 
4953:../../..\hal\include/device/stm32g431.h **** 
4954:../../..\hal\include/device/stm32g431.h **** ////
4955:../../..\hal\include/device/stm32g431.h **** //
4956:../../..\hal\include/device/stm32g431.h **** //    Advanced-timers
4957:../../..\hal\include/device/stm32g431.h **** //
4958:../../..\hal\include/device/stm32g431.h **** ////
4959:../../..\hal\include/device/stm32g431.h **** 
4960:../../..\hal\include/device/stm32g431.h **** struct tim1_t
4961:../../..\hal\include/device/stm32g431.h **** {
4962:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
4963:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
4964:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
4965:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
4966:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
4967:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
4968:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register 1 (out
4969:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR2;                // [Read-write] capture/compare mode register 2 (out
4970:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
4971:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
4972:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
4973:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
4974:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
4975:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
4976:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
4977:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] capture/compare register 3
4978:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] capture/compare register 4
4979:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
4980:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] capture/compare register 4
4981:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] capture/compare register 4
4982:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR3_Output;         // [Read-write] capture/compare mode register 2 (out
4983:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
4984:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-write] DMA control register
4985:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
4986:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
4987:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
4988:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _0;
4989:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] control register
4990:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
4991:../../..\hal\include/device/stm32g431.h **** 
4992:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
4993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
4994:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
4996:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
4997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
4998:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
4999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMS =                 // Center-aligned mode selection (2 bits)
5000:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
5001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DIR = 0x10;           // Direction
5002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
5003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
5004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
5005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
5006:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
5007:../../..\hal\include/device/stm32g431.h **** 
5008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS_3 = 0x2000000;    // Master mode selection - bit 3
5009:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS2 =                // Master mode selection 2 (4 bits)
5011:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
5012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS6 = 0x40000;       // Output Idle state 6 (OC6 output)
5013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS5 = 0x10000;       // Output Idle state 5 (OC5 output)
5014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4N = 0x8000;       // Output Idle state 4 (OC4N output)
5015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4 = 0x4000;        // Output Idle state 4
5016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3N = 0x2000;       // Output Idle state 3
5017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3 = 0x1000;        // Output Idle state 3
5018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2N = 0x800;        // Output Idle state 2
5019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output Idle state 2
5020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
5021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
5022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
5023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
5025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
5027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
5028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
5029:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
5030:../../..\hal\include/device/stm32g431.h **** 
5031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPS = 0x2000000;    // SMS Preload Source
5032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPE = 0x1000000;    // SMS Preload Enable
5033:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5034:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
5035:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
5036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
5037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETP = 0x8000;         // External trigger polarity
5038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ECE = 0x4000;         // External clock enable
5039:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETPS =                // External trigger prescaler (2 bits)
5041:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
5042:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETF =                 // External trigger filter (4 bits)
5044:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
5045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
5046:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
5048:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_OCCS = 0x8;           // OCREF clear selection
5050:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
5052:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
5053:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
5054:../../..\hal\include/device/stm32g431.h **** 
5055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TERRIE = 0x800000;    // Transition Error interrupt enable
5056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IERRIE = 0x400000;    // Index Error interrupt enable
5057:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_DIRIE = 0x200000;     // Direction Change interrupt enable
5058:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IDXIE = 0x100000;     // Index interrupt enable
5059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
5060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
5061:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4DE = 0x1000;       // Capture/Compare 4 DMA request enable
5062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3DE = 0x800;        // Capture/Compare 3 DMA request enable
5063:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
5064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
5065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
5066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
5067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4IE = 0x10;         // Capture/Compare 4 interrupt enable
5068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3IE = 0x8;          // Capture/Compare 3 interrupt enable
5069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
5070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
5071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
5072:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
5073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
5074:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
5075:../../..\hal\include/device/stm32g431.h **** 
5076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TERRF = 0x800000;     // Transition Error interrupt flag
5077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IERRF = 0x400000;     // Index Error interrupt flag
5078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DIRF = 0x200000;      // Direction Change interrupt flag
5079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IDXF = 0x100000;      // Index interrupt flag
5080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC6IF = 0x20000;      // Compare 6 interrupt flag
5081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC5IF = 0x10000;      // Compare 5 interrupt flag
5082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SBIF = 0x2000;        // System Break interrupt flag
5083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4OF = 0x1000;       // Capture/Compare 4 overcapture flag
5084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3OF = 0x800;        // Capture/Compare 3 overcapture flag
5085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/compare 2 overcapture flag
5086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
5087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_B2IF = 0x100;         // Break 2 interrupt flag
5088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
5089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
5090:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
5091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4IF = 0x10;         // Capture/Compare 4 interrupt flag
5092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3IF = 0x8;          // Capture/Compare 3 interrupt flag
5093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/Compare 2 interrupt flag
5094:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
5095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
5096:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
5097:../../..\hal\include/device/stm32g431.h **** 
5098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_B2G = 0x100;          // Break 2 generation
5099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
5100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
5101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
5102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC4G = 0x10;          // Capture/compare 4 generation
5103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC3G = 0x8;           // Capture/compare 3 generation
5104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
5105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
5106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
5107:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
5108:../../..\hal\include/device/stm32g431.h **** 
5109:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
5111:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
5112:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // Capture/Compare 2 selection (2 bits)
5114:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5115:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
5117:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
5118:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // Input capture 2 filter (4 bits)
5120:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
5121:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // Input capture 2 prescaler (2 bits)
5123:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
5124:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_ICPCS =               // Input capture 1 prescaler (2 bits)
5126:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
5127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // Output Compare 1 clear enable
5128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
5129:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
5131:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode - bit 3
5133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
5134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2CE = 0x8000;       // Output Compare 2 clear enable
5135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // Output Compare 2 fast enable
5136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // Output Compare 2 mode (3 bits)
5138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
5140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // Output Compare 2 preload enable
5141:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
5142:../../..\hal\include/device/stm32g431.h **** 
5143:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC3S =                // Capture/Compare 3 selection (2 bits)
5145:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
5146:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5147:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC4S =                // Capture/Compare 4 selection (2 bits)
5148:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5149:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3F =                // Input capture 3 filter (4 bits)
5151:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
5152:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3PSC =              // Input capture 3 prescaler (2 bits)
5154:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
5155:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4F =                // Input capture 4 filter (4 bits)
5157:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
5158:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4PSC =              // Input capture 4 prescaler (2 bits)
5160:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
5161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3CE = 0x80;         // Output compare 3 clear enable
5162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3FE = 0x4;          // Output compare 3 fast enable
5163:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M =                // Output compare 3 mode (3 bits)
5165:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M_3 = 0x10000;     // Output Compare 3 mode - bit 3
5167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3PE = 0x8;          // Output compare 3 preload enable
5168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4CE = 0x8000;       // Output compare 4 clear enable
5169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4FE = 0x400;        // Output compare 4 fast enable
5170:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M =                // Output compare 4 mode (3 bits)
5172:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M_3 = 0x1000000;   // Output Compare 4 mode - bit 3
5174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4PE = 0x800;        // Output compare 4 preload enable
5175:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR2_RESET_VALUE = 0x0;
5176:../../..\hal\include/device/stm32g431.h **** 
5177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6P = 0x200000;      // Capture/Compare 6 output polarity
5178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6E = 0x100000;      // Capture/Compare 6 output enable
5179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5P = 0x20000;       // Capture/Compare 5 output polarity
5180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5E = 0x10000;       // Capture/Compare 5 output enable
5181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NP = 0x8000;       // Capture/Compare 4 complementary output 
5182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NE = 0x4000;       // Capture/Compare 4 complementary output 
5183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4P = 0x2000;        // Capture/Compare 3 output Polarity
5184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4E = 0x1000;        // Capture/Compare 4 output enable
5185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NP = 0x800;        // Capture/Compare 3 output Polarity
5186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NE = 0x400;        // Capture/Compare 3 complementary output 
5187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3P = 0x200;         // Capture/Compare 3 output Polarity
5188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3E = 0x100;         // Capture/Compare 3 output enable
5189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 output Polarity
5190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NE = 0x40;         // Capture/Compare 2 complementary output 
5191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output Polarity
5192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
5193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
5194:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
5195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
5196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
5197:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
5198:../../..\hal\include/device/stm32g431.h **** 
5199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIFCPY, Read-only
5200:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits), Read-write
5202:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5203:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
5204:../../..\hal\include/device/stm32g431.h **** 
5205:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
5207:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5208:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
5209:../../..\hal\include/device/stm32g431.h **** 
5210:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
5212:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5213:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
5214:../../..\hal\include/device/stm32g431.h **** 
5215:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (16 bits)
5217:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5218:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
5219:../../..\hal\include/device/stm32g431.h **** 
5220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
5222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5223:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
5224:../../..\hal\include/device/stm32g431.h **** 
5225:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 2 value (16 bits)
5227:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5228:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
5229:../../..\hal\include/device/stm32g431.h **** 
5230:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CCR3 =                // Capture/Compare value (16 bits)
5232:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5233:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
5234:../../..\hal\include/device/stm32g431.h **** 
5235:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CCR4 =                // Capture/Compare value (16 bits)
5237:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5238:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
5239:../../..\hal\include/device/stm32g431.h **** 
5240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2ID = 0x20000000;   // BK2ID
5241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
5242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2DSRM = 0x8000000;  // BK2DSRM
5243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
5244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2P = 0x2000000;     // Break 2 polarity
5245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2E = 0x1000000;     // Break 2 Enable
5246:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2F =                // Break 2 filter (4 bits)
5248:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
5249:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
5251:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
5252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
5253:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
5254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
5255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
5256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
5257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
5258:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
5260:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
5263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
5264:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
5265:../../..\hal\include/device/stm32g431.h **** 
5266:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CCR5 =                // Capture/Compare value (16 bits)
5268:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C1 = 0x20000000;   // Group Channel 5 and Channel 1
5270:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C2 = 0x40000000;   // Group Channel 5 and Channel 2
5271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C3 = 0x80000000;   // Group Channel 5 and Channel 3
5272:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
5273:../../..\hal\include/device/stm32g431.h **** 
5274:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5275:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CCR6 =                // Capture/Compare value (16 bits)
5276:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5277:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
5278:../../..\hal\include/device/stm32g431.h **** 
5279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M_bit3 = 0x1000000;// Output Compare 6 mode bit 3
5280:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M_bit3 =           // Output Compare 5 mode bit 3 (3 
5282:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
5283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6CE = 0x8000;       // Output compare 6 clear enable
5284:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5285:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M =                // Output compare 6 mode (3 bits)
5286:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5287:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6PE = 0x800;        // Output compare 6 preload enable
5288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6FE = 0x400;        // Output compare 6 fast enable
5289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5CE = 0x80;         // Output compare 5 clear enable
5290:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M =                // Output compare 5 mode (3 bits)
5292:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5293:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5PE = 0x8;          // Output compare 5 preload enable
5294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5FE = 0x4;          // Output compare 5 fast enable
5295:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR3_Output_RESET_VALUE = 0x0;
5296:../../..\hal\include/device/stm32g431.h **** 
5297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
5298:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
5299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time falling edge generator setup 
5301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
5302:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
5303:../../..\hal\include/device/stm32g431.h **** 
5304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IE = 0x1;             // Index Enable
5305:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IDIR =                // Index Direction (2 bits)
5307:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
5308:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IBLK =                // Index Blanking (2 bits)
5310:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
5311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_FIDX = 0x20;          // First Index
5312:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IPOS =                // Index Positioning (2 bits)
5314:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
5315:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5316:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PW =                  // Pulse width (8 bits)
5317:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
5318:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PWPRSC =              // Pulse Width prescaler (3 bits)
5320:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
5321:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
5322:../../..\hal\include/device/stm32g431.h **** 
5323:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
5325:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
5326:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
5328:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
5329:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI3SEL =              // TI3[0] to TI3[15] input selection (4 b
5331:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
5332:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI4SEL =              // TI4[0] to TI4[15] input selection (4 b
5334:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
5335:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
5336:../../..\hal\include/device/stm32g431.h **** 
5337:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_ETRSEL =              // ETR source selection (4 bits)
5339:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0xf>::value<X>();
5340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
5341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
5342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
5343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
5344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
5345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
5346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
5347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
5348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
5349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
5350:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
5351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
5352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
5353:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
5354:../../..\hal\include/device/stm32g431.h **** 
5355:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
5357:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
5358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4P = 0x2000;    // BRK2 COMP4 input polarity
5359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3P = 0x1000;    // BRK2 COMP3 input polarity
5360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2P = 0x800;     // BRK2 COMP2 input polarity
5361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1P = 0x400;     // BRK2 COMP1 input polarity
5362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2INP = 0x200;       // BRK2 BKIN input polarity
5363:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP7E = 0x80;      // BRK2 COMP7 enable
5364:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP6E = 0x40;      // BRK2 COMP6 enable
5365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP5E = 0x20;      // BRK2 COMP5 enable
5366:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4E = 0x10;      // BRK2 COMP4 enable
5367:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3E = 0x8;       // BRK2 COMP3 enable
5368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2E = 0x4;       // BRK2 COMP2 enable
5369:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1E = 0x2;       // BRK2 COMP1 enable
5370:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BKINE = 0x1;          // BRK BKIN input enable
5371:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
5372:../../..\hal\include/device/stm32g431.h **** 
5373:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
5375:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
5376:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
5378:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
5379:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
5380:../../..\hal\include/device/stm32g431.h **** 
5381:../../..\hal\include/device/stm32g431.h **** 
5382:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
5383:../../..\hal\include/device/stm32g431.h **** 
5384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM1_BRK_TIM15 = 24; // TIM1_BRK_TIM15
5385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM1_CC = 27; // TIM1 capture compare interrupt
5386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM1_TRG_COM = 26; // TIM1_TRG_COM/
5387:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM1_UP_TIM16 = 25; // TIM1_UP_TIM16
5388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM8_CC = 46; // TIM8_CC
5389:../../..\hal\include/device/stm32g431.h **** };
5390:../../..\hal\include/device/stm32g431.h **** 
5391:../../..\hal\include/device/stm32g431.h **** static tim1_t& TIM1 = *reinterpret_cast<tim1_t*>(0x40012c00);
5392:../../..\hal\include/device/stm32g431.h **** 
5393:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM1
5394:../../..\hal\include/device/stm32g431.h **** 
5395:../../..\hal\include/device/stm32g431.h **** 
5396:../../..\hal\include/device/stm32g431.h **** ////
5397:../../..\hal\include/device/stm32g431.h **** //
5398:../../..\hal\include/device/stm32g431.h **** //    Advanced-timers
5399:../../..\hal\include/device/stm32g431.h **** //
5400:../../..\hal\include/device/stm32g431.h **** ////
5401:../../..\hal\include/device/stm32g431.h **** 
5402:../../..\hal\include/device/stm32g431.h **** struct tim8_t
5403:../../..\hal\include/device/stm32g431.h **** {
5404:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
5405:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
5406:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
5407:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
5408:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
5409:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
5410:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register 1 (out
5411:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR2;                // [Read-write] capture/compare mode register 2 (out
5412:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
5413:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
5414:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
5415:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
5416:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
5417:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
5418:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
5419:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] capture/compare register 3
5420:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] capture/compare register 4
5421:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
5422:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] capture/compare register 4
5423:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] capture/compare register 4
5424:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR3_Output;         // [Read-write] capture/compare mode register 2 (out
5425:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
5426:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-write] DMA control register
5427:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
5428:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
5429:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
5430:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _0;
5431:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] control register
5432:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
5433:../../..\hal\include/device/stm32g431.h **** 
5434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
5435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
5436:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
5438:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
5440:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMS =                 // Center-aligned mode selection (2 bits)
5442:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
5443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DIR = 0x10;           // Direction
5444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
5445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
5446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
5447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
5448:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
5449:../../..\hal\include/device/stm32g431.h **** 
5450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS_3 = 0x2000000;    // Master mode selection - bit 3
5451:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS2 =                // Master mode selection 2 (4 bits)
5453:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
5454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS6 = 0x40000;       // Output Idle state 6 (OC6 output)
5455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS5 = 0x10000;       // Output Idle state 5 (OC5 output)
5456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4N = 0x8000;       // Output Idle state 4 (OC4N output)
5457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4 = 0x4000;        // Output Idle state 4
5458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3N = 0x2000;       // Output Idle state 3
5459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3 = 0x1000;        // Output Idle state 3
5460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2N = 0x800;        // Output Idle state 2
5461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output Idle state 2
5462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
5463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
5464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
5465:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
5467:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
5469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
5470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
5471:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
5472:../../..\hal\include/device/stm32g431.h **** 
5473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPS = 0x2000000;    // SMS Preload Source
5474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPE = 0x1000000;    // SMS Preload Enable
5475:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
5477:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
5478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
5479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETP = 0x8000;         // External trigger polarity
5480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ECE = 0x4000;         // External clock enable
5481:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETPS =                // External trigger prescaler (2 bits)
5483:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
5484:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETF =                 // External trigger filter (4 bits)
5486:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
5487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
5488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
5490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_OCCS = 0x8;           // OCREF clear selection
5492:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
5494:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
5495:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
5496:../../..\hal\include/device/stm32g431.h **** 
5497:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TERRIE = 0x800000;    // Transition Error interrupt enable
5498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IERRIE = 0x400000;    // Index Error interrupt enable
5499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_DIRIE = 0x200000;     // Direction Change interrupt enable
5500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IDXIE = 0x100000;     // Index interrupt enable
5501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
5502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
5503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4DE = 0x1000;       // Capture/Compare 4 DMA request enable
5504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3DE = 0x800;        // Capture/Compare 3 DMA request enable
5505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
5506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
5507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
5508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
5509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4IE = 0x10;         // Capture/Compare 4 interrupt enable
5510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3IE = 0x8;          // Capture/Compare 3 interrupt enable
5511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
5512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
5513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
5514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
5515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
5516:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
5517:../../..\hal\include/device/stm32g431.h **** 
5518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TERRF = 0x800000;     // Transition Error interrupt flag
5519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IERRF = 0x400000;     // Index Error interrupt flag
5520:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DIRF = 0x200000;      // Direction Change interrupt flag
5521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IDXF = 0x100000;      // Index interrupt flag
5522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC6IF = 0x20000;      // Compare 6 interrupt flag
5523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC5IF = 0x10000;      // Compare 5 interrupt flag
5524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SBIF = 0x2000;        // System Break interrupt flag
5525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4OF = 0x1000;       // Capture/Compare 4 overcapture flag
5526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3OF = 0x800;        // Capture/Compare 3 overcapture flag
5527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/compare 2 overcapture flag
5528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
5529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_B2IF = 0x100;         // Break 2 interrupt flag
5530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
5531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
5532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
5533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4IF = 0x10;         // Capture/Compare 4 interrupt flag
5534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3IF = 0x8;          // Capture/Compare 3 interrupt flag
5535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/Compare 2 interrupt flag
5536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
5537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
5538:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
5539:../../..\hal\include/device/stm32g431.h **** 
5540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_B2G = 0x100;          // Break 2 generation
5541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
5542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
5543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
5544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC4G = 0x10;          // Capture/compare 4 generation
5545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC3G = 0x8;           // Capture/compare 3 generation
5546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
5547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
5548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
5549:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
5550:../../..\hal\include/device/stm32g431.h **** 
5551:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5552:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
5553:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
5554:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // Capture/Compare 2 selection (2 bits)
5556:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5557:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5558:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
5559:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
5560:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // Input capture 2 filter (4 bits)
5562:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
5563:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // Input capture 2 prescaler (2 bits)
5565:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
5566:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_ICPCS =               // Input capture 1 prescaler (2 bits)
5568:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
5569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // Output Compare 1 clear enable
5570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
5571:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
5573:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode - bit 3
5575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
5576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2CE = 0x8000;       // Output Compare 2 clear enable
5577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // Output Compare 2 fast enable
5578:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // Output Compare 2 mode (3 bits)
5580:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
5582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // Output Compare 2 preload enable
5583:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
5584:../../..\hal\include/device/stm32g431.h **** 
5585:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC3S =                // Capture/Compare 3 selection (2 bits)
5587:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
5588:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC4S =                // Capture/Compare 4 selection (2 bits)
5590:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5591:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3F =                // Input capture 3 filter (4 bits)
5593:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
5594:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3PSC =              // Input capture 3 prescaler (2 bits)
5596:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
5597:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4F =                // Input capture 4 filter (4 bits)
5599:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
5600:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4PSC =              // Input capture 4 prescaler (2 bits)
5602:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
5603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3CE = 0x80;         // Output compare 3 clear enable
5604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3FE = 0x4;          // Output compare 3 fast enable
5605:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M =                // Output compare 3 mode (3 bits)
5607:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M_3 = 0x10000;     // Output Compare 3 mode - bit 3
5609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3PE = 0x8;          // Output compare 3 preload enable
5610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4CE = 0x8000;       // Output compare 4 clear enable
5611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4FE = 0x400;        // Output compare 4 fast enable
5612:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M =                // Output compare 4 mode (3 bits)
5614:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M_3 = 0x1000000;   // Output Compare 4 mode - bit 3
5616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4PE = 0x800;        // Output compare 4 preload enable
5617:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR2_RESET_VALUE = 0x0;
5618:../../..\hal\include/device/stm32g431.h **** 
5619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6P = 0x200000;      // Capture/Compare 6 output polarity
5620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6E = 0x100000;      // Capture/Compare 6 output enable
5621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5P = 0x20000;       // Capture/Compare 5 output polarity
5622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5E = 0x10000;       // Capture/Compare 5 output enable
5623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NP = 0x8000;       // Capture/Compare 4 complementary output 
5624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NE = 0x4000;       // Capture/Compare 4 complementary output 
5625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4P = 0x2000;        // Capture/Compare 3 output Polarity
5626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4E = 0x1000;        // Capture/Compare 4 output enable
5627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NP = 0x800;        // Capture/Compare 3 output Polarity
5628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NE = 0x400;        // Capture/Compare 3 complementary output 
5629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3P = 0x200;         // Capture/Compare 3 output Polarity
5630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3E = 0x100;         // Capture/Compare 3 output enable
5631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 output Polarity
5632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NE = 0x40;         // Capture/Compare 2 complementary output 
5633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output Polarity
5634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
5635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
5636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
5637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
5638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
5639:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
5640:../../..\hal\include/device/stm32g431.h **** 
5641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIFCPY, Read-only
5642:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits), Read-write
5644:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5645:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
5646:../../..\hal\include/device/stm32g431.h **** 
5647:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
5649:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5650:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
5651:../../..\hal\include/device/stm32g431.h **** 
5652:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
5654:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5655:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
5656:../../..\hal\include/device/stm32g431.h **** 
5657:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (16 bits)
5659:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5660:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
5661:../../..\hal\include/device/stm32g431.h **** 
5662:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
5664:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5665:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
5666:../../..\hal\include/device/stm32g431.h **** 
5667:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 2 value (16 bits)
5669:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5670:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
5671:../../..\hal\include/device/stm32g431.h **** 
5672:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CCR3 =                // Capture/Compare value (16 bits)
5674:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5675:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
5676:../../..\hal\include/device/stm32g431.h **** 
5677:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CCR4 =                // Capture/Compare value (16 bits)
5679:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5680:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
5681:../../..\hal\include/device/stm32g431.h **** 
5682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2ID = 0x20000000;   // BK2ID
5683:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
5684:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2DSRM = 0x8000000;  // BK2DSRM
5685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
5686:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2P = 0x2000000;     // Break 2 polarity
5687:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2E = 0x1000000;     // Break 2 Enable
5688:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2F =                // Break 2 filter (4 bits)
5690:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
5691:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
5693:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
5694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
5695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
5696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
5697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
5698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
5699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
5700:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
5702:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5703:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
5705:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
5706:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
5707:../../..\hal\include/device/stm32g431.h **** 
5708:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CCR5 =                // Capture/Compare value (16 bits)
5710:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5711:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C1 = 0x20000000;   // Group Channel 5 and Channel 1
5712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C2 = 0x40000000;   // Group Channel 5 and Channel 2
5713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C3 = 0x80000000;   // Group Channel 5 and Channel 3
5714:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
5715:../../..\hal\include/device/stm32g431.h **** 
5716:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CCR6 =                // Capture/Compare value (16 bits)
5718:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
5719:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
5720:../../..\hal\include/device/stm32g431.h **** 
5721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M_bit3 = 0x1000000;// Output Compare 6 mode bit 3
5722:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5723:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M_bit3 =           // Output Compare 5 mode bit 3 (3 
5724:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
5725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6CE = 0x8000;       // Output compare 6 clear enable
5726:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M =                // Output compare 6 mode (3 bits)
5728:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
5729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6PE = 0x800;        // Output compare 6 preload enable
5730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6FE = 0x400;        // Output compare 6 fast enable
5731:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5CE = 0x80;         // Output compare 5 clear enable
5732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M =                // Output compare 5 mode (3 bits)
5734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5735:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5PE = 0x8;          // Output compare 5 preload enable
5736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5FE = 0x4;          // Output compare 5 fast enable
5737:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR3_Output_RESET_VALUE = 0x0;
5738:../../..\hal\include/device/stm32g431.h **** 
5739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
5740:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
5741:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time falling edge generator setup 
5743:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
5744:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
5745:../../..\hal\include/device/stm32g431.h **** 
5746:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IE = 0x1;             // Index Enable
5747:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IDIR =                // Index Direction (2 bits)
5749:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
5750:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IBLK =                // Index Blanking (2 bits)
5752:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
5753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_FIDX = 0x20;          // First Index
5754:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IPOS =                // Index Positioning (2 bits)
5756:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
5757:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PW =                  // Pulse width (8 bits)
5759:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
5760:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PWPRSC =              // Pulse Width prescaler (3 bits)
5762:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
5763:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
5764:../../..\hal\include/device/stm32g431.h **** 
5765:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
5767:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
5768:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
5770:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
5771:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI3SEL =              // TI3[0] to TI3[15] input selection (4 b
5773:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
5774:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI4SEL =              // TI4[0] to TI4[15] input selection (4 b
5776:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
5777:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
5778:../../..\hal\include/device/stm32g431.h **** 
5779:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_ETRSEL =              // ETR source selection (4 bits)
5781:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0xf>::value<X>();
5782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
5783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
5784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
5785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
5786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
5787:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
5788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
5789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
5790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
5791:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
5792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
5793:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
5794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
5795:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
5796:../../..\hal\include/device/stm32g431.h **** 
5797:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
5799:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
5800:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4P = 0x2000;    // BRK2 COMP4 input polarity
5801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3P = 0x1000;    // BRK2 COMP3 input polarity
5802:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2P = 0x800;     // BRK2 COMP2 input polarity
5803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1P = 0x400;     // BRK2 COMP1 input polarity
5804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2INP = 0x200;       // BRK2 BKIN input polarity
5805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP7E = 0x80;      // BRK2 COMP7 enable
5806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP6E = 0x40;      // BRK2 COMP6 enable
5807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP5E = 0x20;      // BRK2 COMP5 enable
5808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4E = 0x10;      // BRK2 COMP4 enable
5809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3E = 0x8;       // BRK2 COMP3 enable
5810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2E = 0x4;       // BRK2 COMP2 enable
5811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1E = 0x2;       // BRK2 COMP1 enable
5812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BKINE = 0x1;          // BRK BKIN input enable
5813:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
5814:../../..\hal\include/device/stm32g431.h **** 
5815:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
5817:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
5818:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
5820:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
5821:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
5822:../../..\hal\include/device/stm32g431.h **** 
5823:../../..\hal\include/device/stm32g431.h **** 
5824:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
5825:../../..\hal\include/device/stm32g431.h **** 
5826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM8_BRK = 43; // TIM8_BRK
5827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM8_TRG_COM = 45; // TIM8_TRG_COM
5828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM8_UP = 44; // TIM8_UP
5829:../../..\hal\include/device/stm32g431.h **** };
5830:../../..\hal\include/device/stm32g431.h **** 
5831:../../..\hal\include/device/stm32g431.h **** static tim8_t& TIM8 = *reinterpret_cast<tim8_t*>(0x40013400);
5832:../../..\hal\include/device/stm32g431.h **** 
5833:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM8
5834:../../..\hal\include/device/stm32g431.h **** 
5835:../../..\hal\include/device/stm32g431.h **** 
5836:../../..\hal\include/device/stm32g431.h **** ////
5837:../../..\hal\include/device/stm32g431.h **** //
5838:../../..\hal\include/device/stm32g431.h **** //    Advanced-timers
5839:../../..\hal\include/device/stm32g431.h **** //
5840:../../..\hal\include/device/stm32g431.h **** ////
5841:../../..\hal\include/device/stm32g431.h **** 
5842:../../..\hal\include/device/stm32g431.h **** struct tim2_t
5843:../../..\hal\include/device/stm32g431.h **** {
5844:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
5845:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
5846:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
5847:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
5848:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
5849:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
5850:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register 1 (out
5851:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR2;                // [Read-write] capture/compare mode register 2 (out
5852:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
5853:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // [Read-write] counter
5854:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
5855:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
5856:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
5857:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
5858:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
5859:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] capture/compare register 3
5860:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] capture/compare register 4
5861:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
5862:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] capture/compare register 4
5863:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] capture/compare register 4
5864:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR3_Output;         // [Read-write] capture/compare mode register 2 (out
5865:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
5866:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-write] DMA control register
5867:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
5868:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
5869:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
5870:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _0;
5871:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] control register
5872:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
5873:../../..\hal\include/device/stm32g431.h **** 
5874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
5875:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
5876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
5878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5879:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
5880:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5881:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMS =                 // Center-aligned mode selection (2 bits)
5882:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
5883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DIR = 0x10;           // Direction
5884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
5885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
5886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
5887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
5888:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
5889:../../..\hal\include/device/stm32g431.h **** 
5890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS_3 = 0x2000000;    // Master mode selection - bit 3
5891:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS2 =                // Master mode selection 2 (4 bits)
5893:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
5894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS6 = 0x40000;       // Output Idle state 6 (OC6 output)
5895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS5 = 0x10000;       // Output Idle state 5 (OC5 output)
5896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4N = 0x8000;       // Output Idle state 4 (OC4N output)
5897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4 = 0x4000;        // Output Idle state 4
5898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3N = 0x2000;       // Output Idle state 3
5899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3 = 0x1000;        // Output Idle state 3
5900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2N = 0x800;        // Output Idle state 2
5901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output Idle state 2
5902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
5903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
5904:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
5905:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5906:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
5907:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
5909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
5910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
5911:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
5912:../../..\hal\include/device/stm32g431.h **** 
5913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPS = 0x2000000;    // SMS Preload Source
5914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPE = 0x1000000;    // SMS Preload Enable
5915:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5916:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
5917:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
5918:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
5919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETP = 0x8000;         // External trigger polarity
5920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ECE = 0x4000;         // External clock enable
5921:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETPS =                // External trigger prescaler (2 bits)
5923:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
5924:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETF =                 // External trigger filter (4 bits)
5926:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
5927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
5928:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5929:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
5930:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
5931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_OCCS = 0x8;           // OCREF clear selection
5932:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
5934:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
5935:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
5936:../../..\hal\include/device/stm32g431.h **** 
5937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TERRIE = 0x800000;    // Transition Error interrupt enable
5938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IERRIE = 0x400000;    // Index Error interrupt enable
5939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_DIRIE = 0x200000;     // Direction Change interrupt enable
5940:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IDXIE = 0x100000;     // Index interrupt enable
5941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
5942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
5943:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4DE = 0x1000;       // Capture/Compare 4 DMA request enable
5944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3DE = 0x800;        // Capture/Compare 3 DMA request enable
5945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
5946:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
5947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
5948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
5949:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4IE = 0x10;         // Capture/Compare 4 interrupt enable
5950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3IE = 0x8;          // Capture/Compare 3 interrupt enable
5951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
5952:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
5953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
5954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
5955:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
5956:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
5957:../../..\hal\include/device/stm32g431.h **** 
5958:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TERRF = 0x800000;     // Transition Error interrupt flag
5959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IERRF = 0x400000;     // Index Error interrupt flag
5960:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DIRF = 0x200000;      // Direction Change interrupt flag
5961:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IDXF = 0x100000;      // Index interrupt flag
5962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC6IF = 0x20000;      // Compare 6 interrupt flag
5963:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC5IF = 0x10000;      // Compare 5 interrupt flag
5964:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SBIF = 0x2000;        // System Break interrupt flag
5965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4OF = 0x1000;       // Capture/Compare 4 overcapture flag
5966:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3OF = 0x800;        // Capture/Compare 3 overcapture flag
5967:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/compare 2 overcapture flag
5968:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
5969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_B2IF = 0x100;         // Break 2 interrupt flag
5970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
5971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
5972:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
5973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4IF = 0x10;         // Capture/Compare 4 interrupt flag
5974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3IF = 0x8;          // Capture/Compare 3 interrupt flag
5975:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/Compare 2 interrupt flag
5976:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
5977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
5978:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
5979:../../..\hal\include/device/stm32g431.h **** 
5980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_B2G = 0x100;          // Break 2 generation
5981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
5982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
5983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
5984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC4G = 0x10;          // Capture/compare 4 generation
5985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC3G = 0x8;           // Capture/compare 3 generation
5986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
5987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
5988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
5989:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
5990:../../..\hal\include/device/stm32g431.h **** 
5991:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5992:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
5993:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
5994:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // Capture/Compare 2 selection (2 bits)
5996:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
5997:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
5998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
5999:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6000:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // Input capture 2 filter (4 bits)
6002:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6003:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // Input capture 2 prescaler (2 bits)
6005:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6006:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6007:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_ICPCS =               // Input capture 1 prescaler (2 bits)
6008:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // Output Compare 1 clear enable
6010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
6011:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
6013:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode - bit 3
6015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
6016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2CE = 0x8000;       // Output Compare 2 clear enable
6017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // Output Compare 2 fast enable
6018:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // Output Compare 2 mode (3 bits)
6020:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
6022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // Output Compare 2 preload enable
6023:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
6024:../../..\hal\include/device/stm32g431.h **** 
6025:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC3S =                // Capture/Compare 3 selection (2 bits)
6027:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
6028:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC4S =                // Capture/Compare 4 selection (2 bits)
6030:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6031:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3F =                // Input capture 3 filter (4 bits)
6033:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6034:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6035:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3PSC =              // Input capture 3 prescaler (2 bits)
6036:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6037:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4F =                // Input capture 4 filter (4 bits)
6039:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6040:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4PSC =              // Input capture 4 prescaler (2 bits)
6042:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3CE = 0x80;         // Output compare 3 clear enable
6044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3FE = 0x4;          // Output compare 3 fast enable
6045:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M =                // Output compare 3 mode (3 bits)
6047:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M_3 = 0x10000;     // Output Compare 3 mode - bit 3
6049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3PE = 0x8;          // Output compare 3 preload enable
6050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4CE = 0x8000;       // Output compare 4 clear enable
6051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4FE = 0x400;        // Output compare 4 fast enable
6052:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M =                // Output compare 4 mode (3 bits)
6054:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M_3 = 0x1000000;   // Output Compare 4 mode - bit 3
6056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4PE = 0x800;        // Output compare 4 preload enable
6057:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR2_RESET_VALUE = 0x0;
6058:../../..\hal\include/device/stm32g431.h **** 
6059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6P = 0x200000;      // Capture/Compare 6 output polarity
6060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6E = 0x100000;      // Capture/Compare 6 output enable
6061:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5P = 0x20000;       // Capture/Compare 5 output polarity
6062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5E = 0x10000;       // Capture/Compare 5 output enable
6063:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NP = 0x8000;       // Capture/Compare 4 complementary output 
6064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NE = 0x4000;       // Capture/Compare 4 complementary output 
6065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4P = 0x2000;        // Capture/Compare 3 output Polarity
6066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4E = 0x1000;        // Capture/Compare 4 output enable
6067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NP = 0x800;        // Capture/Compare 3 output Polarity
6068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NE = 0x400;        // Capture/Compare 3 complementary output 
6069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3P = 0x200;         // Capture/Compare 3 output Polarity
6070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3E = 0x100;         // Capture/Compare 3 output enable
6071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 output Polarity
6072:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NE = 0x40;         // Capture/Compare 2 complementary output 
6073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output Polarity
6074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
6075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
6076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
6077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
6078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
6079:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
6080:../../..\hal\include/device/stm32g431.h **** 
6081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIFCPY
6082:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits)
6084:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6085:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
6086:../../..\hal\include/device/stm32g431.h **** 
6087:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
6089:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6090:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
6091:../../..\hal\include/device/stm32g431.h **** 
6092:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
6094:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6095:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffffffff;
6096:../../..\hal\include/device/stm32g431.h **** 
6097:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (16 bits)
6099:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6100:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
6101:../../..\hal\include/device/stm32g431.h **** 
6102:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
6104:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6105:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
6106:../../..\hal\include/device/stm32g431.h **** 
6107:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 2 value (16 bits)
6109:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6110:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
6111:../../..\hal\include/device/stm32g431.h **** 
6112:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CCR3 =                // Capture/Compare value (16 bits)
6114:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6115:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
6116:../../..\hal\include/device/stm32g431.h **** 
6117:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CCR4 =                // Capture/Compare value (16 bits)
6119:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6120:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
6121:../../..\hal\include/device/stm32g431.h **** 
6122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2ID = 0x20000000;   // BK2ID
6123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
6124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2DSRM = 0x8000000;  // BK2DSRM
6125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
6126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2P = 0x2000000;     // Break 2 polarity
6127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2E = 0x1000000;     // Break 2 Enable
6128:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2F =                // Break 2 filter (4 bits)
6130:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
6131:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
6133:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
6134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
6135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
6136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
6137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
6138:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
6139:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
6140:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6141:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
6142:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6143:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
6145:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
6146:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
6147:../../..\hal\include/device/stm32g431.h **** 
6148:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6149:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CCR5 =                // Capture/Compare value (16 bits)
6150:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C1 = 0x20000000;   // Group Channel 5 and Channel 1
6152:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C2 = 0x40000000;   // Group Channel 5 and Channel 2
6153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C3 = 0x80000000;   // Group Channel 5 and Channel 3
6154:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
6155:../../..\hal\include/device/stm32g431.h **** 
6156:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CCR6 =                // Capture/Compare value (16 bits)
6158:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6159:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
6160:../../..\hal\include/device/stm32g431.h **** 
6161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M_bit3 = 0x1000000;// Output Compare 6 mode bit 3
6162:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M_bit3 =           // Output Compare 5 mode bit 3 (3 
6164:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
6165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6CE = 0x8000;       // Output compare 6 clear enable
6166:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M =                // Output compare 6 mode (3 bits)
6168:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6PE = 0x800;        // Output compare 6 preload enable
6170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6FE = 0x400;        // Output compare 6 fast enable
6171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5CE = 0x80;         // Output compare 5 clear enable
6172:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M =                // Output compare 5 mode (3 bits)
6174:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5PE = 0x8;          // Output compare 5 preload enable
6176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5FE = 0x4;          // Output compare 5 fast enable
6177:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR3_Output_RESET_VALUE = 0x0;
6178:../../..\hal\include/device/stm32g431.h **** 
6179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
6180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
6181:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time falling edge generator setup 
6183:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
6184:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
6185:../../..\hal\include/device/stm32g431.h **** 
6186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IE = 0x1;             // Index Enable
6187:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6188:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IDIR =                // Index Direction (2 bits)
6189:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
6190:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IBLK =                // Index Blanking (2 bits)
6192:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
6193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_FIDX = 0x20;          // First Index
6194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IPOS =                // Index Positioning (2 bits)
6196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
6197:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PW =                  // Pulse width (8 bits)
6199:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
6200:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PWPRSC =              // Pulse Width prescaler (3 bits)
6202:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
6203:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
6204:../../..\hal\include/device/stm32g431.h **** 
6205:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
6207:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
6208:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
6210:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
6211:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI3SEL =              // TI3[0] to TI3[15] input selection (4 b
6213:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
6214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI4SEL =              // TI4[0] to TI4[15] input selection (4 b
6216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
6217:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
6218:../../..\hal\include/device/stm32g431.h **** 
6219:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_ETRSEL =              // ETR source selection (4 bits)
6221:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0xf>::value<X>();
6222:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
6223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
6224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
6225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
6226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
6227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
6228:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
6229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
6230:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
6231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
6232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
6233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
6234:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
6235:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
6236:../../..\hal\include/device/stm32g431.h **** 
6237:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
6239:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
6240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4P = 0x2000;    // BRK2 COMP4 input polarity
6241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3P = 0x1000;    // BRK2 COMP3 input polarity
6242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2P = 0x800;     // BRK2 COMP2 input polarity
6243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1P = 0x400;     // BRK2 COMP1 input polarity
6244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2INP = 0x200;       // BRK2 BKIN input polarity
6245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP7E = 0x80;      // BRK2 COMP7 enable
6246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP6E = 0x40;      // BRK2 COMP6 enable
6247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP5E = 0x20;      // BRK2 COMP5 enable
6248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4E = 0x10;      // BRK2 COMP4 enable
6249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3E = 0x8;       // BRK2 COMP3 enable
6250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2E = 0x4;       // BRK2 COMP2 enable
6251:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1E = 0x2;       // BRK2 COMP1 enable
6252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BKINE = 0x1;          // BRK BKIN input enable
6253:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
6254:../../..\hal\include/device/stm32g431.h **** 
6255:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
6257:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
6258:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
6260:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
6261:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
6262:../../..\hal\include/device/stm32g431.h **** 
6263:../../..\hal\include/device/stm32g431.h **** 
6264:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
6265:../../..\hal\include/device/stm32g431.h **** 
6266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM2 = 28; // TIM2
6267:../../..\hal\include/device/stm32g431.h **** };
6268:../../..\hal\include/device/stm32g431.h **** 
6269:../../..\hal\include/device/stm32g431.h **** static tim2_t& TIM2 = *reinterpret_cast<tim2_t*>(0x40000000);
6270:../../..\hal\include/device/stm32g431.h **** 
6271:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM2
6272:../../..\hal\include/device/stm32g431.h **** 
6273:../../..\hal\include/device/stm32g431.h **** 
6274:../../..\hal\include/device/stm32g431.h **** ////
6275:../../..\hal\include/device/stm32g431.h **** //
6276:../../..\hal\include/device/stm32g431.h **** //    Advanced-timers
6277:../../..\hal\include/device/stm32g431.h **** //
6278:../../..\hal\include/device/stm32g431.h **** ////
6279:../../..\hal\include/device/stm32g431.h **** 
6280:../../..\hal\include/device/stm32g431.h **** struct tim3_t
6281:../../..\hal\include/device/stm32g431.h **** {
6282:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
6283:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
6284:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
6285:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
6286:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
6287:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
6288:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register 1 (out
6289:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR2;                // [Read-write] capture/compare mode register 2 (out
6290:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
6291:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // [Read-write] counter
6292:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
6293:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
6294:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
6295:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
6296:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
6297:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] capture/compare register 3
6298:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] capture/compare register 4
6299:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
6300:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] capture/compare register 4
6301:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] capture/compare register 4
6302:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR3_Output;         // [Read-write] capture/compare mode register 2 (out
6303:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
6304:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-write] DMA control register
6305:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
6306:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
6307:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
6308:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _0;
6309:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] control register
6310:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
6311:../../..\hal\include/device/stm32g431.h **** 
6312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
6313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
6314:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
6316:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6317:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
6318:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMS =                 // Center-aligned mode selection (2 bits)
6320:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
6321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DIR = 0x10;           // Direction
6322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
6323:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
6324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
6325:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
6326:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
6327:../../..\hal\include/device/stm32g431.h **** 
6328:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS_3 = 0x2000000;    // Master mode selection - bit 3
6329:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS2 =                // Master mode selection 2 (4 bits)
6331:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
6332:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS6 = 0x40000;       // Output Idle state 6 (OC6 output)
6333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS5 = 0x10000;       // Output Idle state 5 (OC5 output)
6334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4N = 0x8000;       // Output Idle state 4 (OC4N output)
6335:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4 = 0x4000;        // Output Idle state 4
6336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3N = 0x2000;       // Output Idle state 3
6337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3 = 0x1000;        // Output Idle state 3
6338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2N = 0x800;        // Output Idle state 2
6339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output Idle state 2
6340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
6341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
6342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
6343:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
6345:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
6347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
6348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
6349:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
6350:../../..\hal\include/device/stm32g431.h **** 
6351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPS = 0x2000000;    // SMS Preload Source
6352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPE = 0x1000000;    // SMS Preload Enable
6353:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6354:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
6355:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
6356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
6357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETP = 0x8000;         // External trigger polarity
6358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ECE = 0x4000;         // External clock enable
6359:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETPS =                // External trigger prescaler (2 bits)
6361:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
6362:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6363:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETF =                 // External trigger filter (4 bits)
6364:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
6365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
6366:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6367:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
6368:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6369:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_OCCS = 0x8;           // OCREF clear selection
6370:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
6372:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
6373:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
6374:../../..\hal\include/device/stm32g431.h **** 
6375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TERRIE = 0x800000;    // Transition Error interrupt enable
6376:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IERRIE = 0x400000;    // Index Error interrupt enable
6377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_DIRIE = 0x200000;     // Direction Change interrupt enable
6378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IDXIE = 0x100000;     // Index interrupt enable
6379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
6380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
6381:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4DE = 0x1000;       // Capture/Compare 4 DMA request enable
6382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3DE = 0x800;        // Capture/Compare 3 DMA request enable
6383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
6384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
6385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
6386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
6387:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4IE = 0x10;         // Capture/Compare 4 interrupt enable
6388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3IE = 0x8;          // Capture/Compare 3 interrupt enable
6389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
6390:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
6391:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
6392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
6393:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
6394:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
6395:../../..\hal\include/device/stm32g431.h **** 
6396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TERRF = 0x800000;     // Transition Error interrupt flag
6397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IERRF = 0x400000;     // Index Error interrupt flag
6398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DIRF = 0x200000;      // Direction Change interrupt flag
6399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IDXF = 0x100000;      // Index interrupt flag
6400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC6IF = 0x20000;      // Compare 6 interrupt flag
6401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC5IF = 0x10000;      // Compare 5 interrupt flag
6402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SBIF = 0x2000;        // System Break interrupt flag
6403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4OF = 0x1000;       // Capture/Compare 4 overcapture flag
6404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3OF = 0x800;        // Capture/Compare 3 overcapture flag
6405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/compare 2 overcapture flag
6406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
6407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_B2IF = 0x100;         // Break 2 interrupt flag
6408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
6409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
6410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
6411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4IF = 0x10;         // Capture/Compare 4 interrupt flag
6412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3IF = 0x8;          // Capture/Compare 3 interrupt flag
6413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/Compare 2 interrupt flag
6414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
6415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
6416:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
6417:../../..\hal\include/device/stm32g431.h **** 
6418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_B2G = 0x100;          // Break 2 generation
6419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
6420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
6421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
6422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC4G = 0x10;          // Capture/compare 4 generation
6423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC3G = 0x8;           // Capture/compare 3 generation
6424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
6425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
6426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
6427:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
6428:../../..\hal\include/device/stm32g431.h **** 
6429:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
6431:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
6432:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // Capture/Compare 2 selection (2 bits)
6434:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6435:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
6437:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6438:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // Input capture 2 filter (4 bits)
6440:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6441:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // Input capture 2 prescaler (2 bits)
6443:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6444:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_ICPCS =               // Input capture 1 prescaler (2 bits)
6446:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // Output Compare 1 clear enable
6448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
6449:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
6451:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode - bit 3
6453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
6454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2CE = 0x8000;       // Output Compare 2 clear enable
6455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // Output Compare 2 fast enable
6456:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // Output Compare 2 mode (3 bits)
6458:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
6460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // Output Compare 2 preload enable
6461:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
6462:../../..\hal\include/device/stm32g431.h **** 
6463:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC3S =                // Capture/Compare 3 selection (2 bits)
6465:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
6466:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC4S =                // Capture/Compare 4 selection (2 bits)
6468:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6469:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3F =                // Input capture 3 filter (4 bits)
6471:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6472:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3PSC =              // Input capture 3 prescaler (2 bits)
6474:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6475:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4F =                // Input capture 4 filter (4 bits)
6477:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6478:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4PSC =              // Input capture 4 prescaler (2 bits)
6480:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3CE = 0x80;         // Output compare 3 clear enable
6482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3FE = 0x4;          // Output compare 3 fast enable
6483:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M =                // Output compare 3 mode (3 bits)
6485:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6486:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M_3 = 0x10000;     // Output Compare 3 mode - bit 3
6487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3PE = 0x8;          // Output compare 3 preload enable
6488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4CE = 0x8000;       // Output compare 4 clear enable
6489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4FE = 0x400;        // Output compare 4 fast enable
6490:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M =                // Output compare 4 mode (3 bits)
6492:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M_3 = 0x1000000;   // Output Compare 4 mode - bit 3
6494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4PE = 0x800;        // Output compare 4 preload enable
6495:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR2_RESET_VALUE = 0x0;
6496:../../..\hal\include/device/stm32g431.h **** 
6497:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6P = 0x200000;      // Capture/Compare 6 output polarity
6498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6E = 0x100000;      // Capture/Compare 6 output enable
6499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5P = 0x20000;       // Capture/Compare 5 output polarity
6500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5E = 0x10000;       // Capture/Compare 5 output enable
6501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NP = 0x8000;       // Capture/Compare 4 complementary output 
6502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NE = 0x4000;       // Capture/Compare 4 complementary output 
6503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4P = 0x2000;        // Capture/Compare 3 output Polarity
6504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4E = 0x1000;        // Capture/Compare 4 output enable
6505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NP = 0x800;        // Capture/Compare 3 output Polarity
6506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NE = 0x400;        // Capture/Compare 3 complementary output 
6507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3P = 0x200;         // Capture/Compare 3 output Polarity
6508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3E = 0x100;         // Capture/Compare 3 output enable
6509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 output Polarity
6510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NE = 0x40;         // Capture/Compare 2 complementary output 
6511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output Polarity
6512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
6513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
6514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
6515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
6516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
6517:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
6518:../../..\hal\include/device/stm32g431.h **** 
6519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIFCPY
6520:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits)
6522:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6523:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
6524:../../..\hal\include/device/stm32g431.h **** 
6525:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
6527:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6528:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
6529:../../..\hal\include/device/stm32g431.h **** 
6530:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
6532:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6533:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffffffff;
6534:../../..\hal\include/device/stm32g431.h **** 
6535:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (16 bits)
6537:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6538:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
6539:../../..\hal\include/device/stm32g431.h **** 
6540:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
6542:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6543:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
6544:../../..\hal\include/device/stm32g431.h **** 
6545:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 2 value (16 bits)
6547:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6548:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
6549:../../..\hal\include/device/stm32g431.h **** 
6550:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CCR3 =                // Capture/Compare value (16 bits)
6552:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6553:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
6554:../../..\hal\include/device/stm32g431.h **** 
6555:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CCR4 =                // Capture/Compare value (16 bits)
6557:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6558:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
6559:../../..\hal\include/device/stm32g431.h **** 
6560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2ID = 0x20000000;   // BK2ID
6561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
6562:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2DSRM = 0x8000000;  // BK2DSRM
6563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
6564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2P = 0x2000000;     // Break 2 polarity
6565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2E = 0x1000000;     // Break 2 Enable
6566:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2F =                // Break 2 filter (4 bits)
6568:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
6569:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
6571:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
6572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
6573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
6574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
6575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
6576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
6577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
6578:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
6580:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6581:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
6583:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
6584:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
6585:../../..\hal\include/device/stm32g431.h **** 
6586:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CCR5 =                // Capture/Compare value (16 bits)
6588:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C1 = 0x20000000;   // Group Channel 5 and Channel 1
6590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C2 = 0x40000000;   // Group Channel 5 and Channel 2
6591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C3 = 0x80000000;   // Group Channel 5 and Channel 3
6592:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
6593:../../..\hal\include/device/stm32g431.h **** 
6594:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CCR6 =                // Capture/Compare value (16 bits)
6596:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6597:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
6598:../../..\hal\include/device/stm32g431.h **** 
6599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M_bit3 = 0x1000000;// Output Compare 6 mode bit 3
6600:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M_bit3 =           // Output Compare 5 mode bit 3 (3 
6602:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
6603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6CE = 0x8000;       // Output compare 6 clear enable
6604:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M =                // Output compare 6 mode (3 bits)
6606:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6PE = 0x800;        // Output compare 6 preload enable
6608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6FE = 0x400;        // Output compare 6 fast enable
6609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5CE = 0x80;         // Output compare 5 clear enable
6610:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M =                // Output compare 5 mode (3 bits)
6612:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5PE = 0x8;          // Output compare 5 preload enable
6614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5FE = 0x4;          // Output compare 5 fast enable
6615:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR3_Output_RESET_VALUE = 0x0;
6616:../../..\hal\include/device/stm32g431.h **** 
6617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
6618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
6619:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time falling edge generator setup 
6621:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
6622:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
6623:../../..\hal\include/device/stm32g431.h **** 
6624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IE = 0x1;             // Index Enable
6625:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IDIR =                // Index Direction (2 bits)
6627:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
6628:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IBLK =                // Index Blanking (2 bits)
6630:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
6631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_FIDX = 0x20;          // First Index
6632:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IPOS =                // Index Positioning (2 bits)
6634:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
6635:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PW =                  // Pulse width (8 bits)
6637:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
6638:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PWPRSC =              // Pulse Width prescaler (3 bits)
6640:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
6641:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
6642:../../..\hal\include/device/stm32g431.h **** 
6643:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
6645:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
6646:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
6648:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
6649:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI3SEL =              // TI3[0] to TI3[15] input selection (4 b
6651:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
6652:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI4SEL =              // TI4[0] to TI4[15] input selection (4 b
6654:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
6655:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
6656:../../..\hal\include/device/stm32g431.h **** 
6657:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_ETRSEL =              // ETR source selection (4 bits)
6659:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0xf>::value<X>();
6660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
6661:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
6662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
6663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
6664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
6665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
6666:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
6667:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
6668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
6669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
6670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
6671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
6672:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
6673:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
6674:../../..\hal\include/device/stm32g431.h **** 
6675:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
6677:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
6678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4P = 0x2000;    // BRK2 COMP4 input polarity
6679:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3P = 0x1000;    // BRK2 COMP3 input polarity
6680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2P = 0x800;     // BRK2 COMP2 input polarity
6681:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1P = 0x400;     // BRK2 COMP1 input polarity
6682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2INP = 0x200;       // BRK2 BKIN input polarity
6683:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP7E = 0x80;      // BRK2 COMP7 enable
6684:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP6E = 0x40;      // BRK2 COMP6 enable
6685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP5E = 0x20;      // BRK2 COMP5 enable
6686:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4E = 0x10;      // BRK2 COMP4 enable
6687:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3E = 0x8;       // BRK2 COMP3 enable
6688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2E = 0x4;       // BRK2 COMP2 enable
6689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1E = 0x2;       // BRK2 COMP1 enable
6690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BKINE = 0x1;          // BRK BKIN input enable
6691:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
6692:../../..\hal\include/device/stm32g431.h **** 
6693:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
6695:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
6696:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
6698:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
6699:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
6700:../../..\hal\include/device/stm32g431.h **** 
6701:../../..\hal\include/device/stm32g431.h **** 
6702:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
6703:../../..\hal\include/device/stm32g431.h **** 
6704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM3 = 29; // TIM3
6705:../../..\hal\include/device/stm32g431.h **** };
6706:../../..\hal\include/device/stm32g431.h **** 
6707:../../..\hal\include/device/stm32g431.h **** static tim3_t& TIM3 = *reinterpret_cast<tim3_t*>(0x40000400);
6708:../../..\hal\include/device/stm32g431.h **** 
6709:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM3
6710:../../..\hal\include/device/stm32g431.h **** 
6711:../../..\hal\include/device/stm32g431.h **** 
6712:../../..\hal\include/device/stm32g431.h **** ////
6713:../../..\hal\include/device/stm32g431.h **** //
6714:../../..\hal\include/device/stm32g431.h **** //    Advanced-timers
6715:../../..\hal\include/device/stm32g431.h **** //
6716:../../..\hal\include/device/stm32g431.h **** ////
6717:../../..\hal\include/device/stm32g431.h **** 
6718:../../..\hal\include/device/stm32g431.h **** struct tim4_t
6719:../../..\hal\include/device/stm32g431.h **** {
6720:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
6721:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
6722:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMCR;                 // [Read-write] slave mode control register
6723:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
6724:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
6725:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
6726:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR1;                // [Read-write] capture/compare mode register 1 (out
6727:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR2;                // [Read-write] capture/compare mode register 2 (out
6728:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCER;                 // [Read-write] capture/compare enable register
6729:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // [Read-write] counter
6730:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
6731:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
6732:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RCR;                  // [Read-write] repetition counter register
6733:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] capture/compare register 1
6734:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] capture/compare register 2
6735:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] capture/compare register 3
6736:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] capture/compare register 4
6737:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDTR;                 // [Read-write] break and dead-time register
6738:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] capture/compare register 4
6739:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] capture/compare register 4
6740:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCMR3_Output;         // [Read-write] capture/compare mode register 2 (out
6741:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DTR2;                 // [Read-write] timer Deadtime Register 2
6742:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-write] DMA control register
6743:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TISEL;                // [Read-write] TIM timer input selection register
6744:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF1;                  // [Read-write] TIM alternate function option regist
6745:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AF2;                  // [Read-write] TIM alternate function option regist
6746:../../..\hal\include/device/stm32g431.h ****     reserved_t<221>      _0;
6747:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DCR;                  // [Read-write] control register
6748:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DMAR;                 // [Read-write] DMA address for full transfer
6749:../../..\hal\include/device/stm32g431.h **** 
6750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
6751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
6752:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CKD =                 // Clock division (2 bits)
6754:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
6756:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMS =                 // Center-aligned mode selection (2 bits)
6758:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
6759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DIR = 0x10;           // Direction
6760:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
6761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
6762:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
6763:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
6764:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
6765:../../..\hal\include/device/stm32g431.h **** 
6766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS_3 = 0x2000000;    // Master mode selection - bit 3
6767:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6768:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS2 =                // Master mode selection 2 (4 bits)
6769:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
6770:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS6 = 0x40000;       // Output Idle state 6 (OC6 output)
6771:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS5 = 0x10000;       // Output Idle state 5 (OC5 output)
6772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4N = 0x8000;       // Output Idle state 4 (OC4N output)
6773:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS4 = 0x4000;        // Output Idle state 4
6774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3N = 0x2000;       // Output Idle state 3
6775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS3 = 0x1000;        // Output Idle state 3
6776:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2N = 0x800;        // Output Idle state 2
6777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS2 = 0x400;         // Output Idle state 2
6778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1N = 0x200;        // Output Idle state 1
6779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_OIS1 = 0x100;         // Output Idle state 1
6780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TI1S = 0x80;          // TI1 selection
6781:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
6783:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCDS = 0x8;           // Capture/compare DMA selection
6785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCUS = 0x4;           // Capture/compare control update selection
6786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CCPC = 0x1;           // Capture/compare preloaded control
6787:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
6788:../../..\hal\include/device/stm32g431.h **** 
6789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPS = 0x2000000;    // SMS Preload Source
6790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMSPE = 0x1000000;    // SMS Preload Enable
6791:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS_4_3 =              // Trigger selection - bit 4:3 (2 bits)
6793:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
6794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS_3 = 0x10000;      // Slave mode selection - bit 3
6795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETP = 0x8000;         // External trigger polarity
6796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ECE = 0x4000;         // External clock enable
6797:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETPS =                // External trigger prescaler (2 bits)
6799:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
6800:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_ETF =                 // External trigger filter (4 bits)
6802:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
6803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_MSM = 0x80;           // Master/Slave mode
6804:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_TS =                  // Trigger selection (3 bits)
6806:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_OCCS = 0x8;           // OCREF clear selection
6808:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMCR_SMS =                 // Slave mode selection (3 bits)
6810:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
6811:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMCR_RESET_VALUE = 0x0;
6812:../../..\hal\include/device/stm32g431.h **** 
6813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TERRIE = 0x800000;    // Transition Error interrupt enable
6814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IERRIE = 0x400000;    // Index Error interrupt enable
6815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_DIRIE = 0x200000;     // Direction Change interrupt enable
6816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_IDXIE = 0x100000;     // Index interrupt enable
6817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TDE = 0x4000;         // Trigger DMA request enable
6818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMDE = 0x2000;       // COM DMA request enable
6819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4DE = 0x1000;       // Capture/Compare 4 DMA request enable
6820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3DE = 0x800;        // Capture/Compare 3 DMA request enable
6821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2DE = 0x400;        // Capture/Compare 2 DMA request enable
6822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1DE = 0x200;        // Capture/Compare 1 DMA request enable
6823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
6824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_TIE = 0x40;           // Trigger interrupt enable
6825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC4IE = 0x10;         // Capture/Compare 4 interrupt enable
6826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC3IE = 0x8;          // Capture/Compare 3 interrupt enable
6827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC2IE = 0x4;          // Capture/Compare 2 interrupt enable
6828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_CC1IE = 0x2;          // Capture/Compare 1 interrupt enable
6829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
6830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_BIE = 0x80;           // Break interrupt enable
6831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_COMIE = 0x20;         // COM interrupt enable
6832:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
6833:../../..\hal\include/device/stm32g431.h **** 
6834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TERRF = 0x800000;     // Transition Error interrupt flag
6835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IERRF = 0x400000;     // Index Error interrupt flag
6836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_DIRF = 0x200000;      // Direction Change interrupt flag
6837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_IDXF = 0x100000;      // Index interrupt flag
6838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC6IF = 0x20000;      // Compare 6 interrupt flag
6839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC5IF = 0x10000;      // Compare 5 interrupt flag
6840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SBIF = 0x2000;        // System Break interrupt flag
6841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4OF = 0x1000;       // Capture/Compare 4 overcapture flag
6842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3OF = 0x800;        // Capture/Compare 3 overcapture flag
6843:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2OF = 0x400;        // Capture/compare 2 overcapture flag
6844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1OF = 0x200;        // Capture/Compare 1 overcapture flag
6845:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_B2IF = 0x100;         // Break 2 interrupt flag
6846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BIF = 0x80;           // Break interrupt flag
6847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIF = 0x40;           // Trigger interrupt flag
6848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_COMIF = 0x20;         // COM interrupt flag
6849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC4IF = 0x10;         // Capture/Compare 4 interrupt flag
6850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC3IF = 0x8;          // Capture/Compare 3 interrupt flag
6851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC2IF = 0x4;          // Capture/Compare 2 interrupt flag
6852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CC1IF = 0x2;          // Capture/compare 1 interrupt flag
6853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
6854:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
6855:../../..\hal\include/device/stm32g431.h **** 
6856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_B2G = 0x100;          // Break 2 generation
6857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_BG = 0x80;            // Break generation
6858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_TG = 0x40;            // Trigger generation
6859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_COMG = 0x20;          // Capture/Compare control update generatio
6860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC4G = 0x10;          // Capture/compare 4 generation
6861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC3G = 0x8;           // Capture/compare 3 generation
6862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC2G = 0x4;           // Capture/compare 2 generation
6863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_CC1G = 0x2;           // Capture/compare 1 generation
6864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
6865:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
6866:../../..\hal\include/device/stm32g431.h **** 
6867:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC1S =                // Capture/Compare 1 selection (2 bits)
6869:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
6870:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_CC2S =                // Capture/Compare 2 selection (2 bits)
6872:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6873:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC1F =                // Input capture 1 filter (4 bits)
6875:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2F =                // Input capture 2 filter (4 bits)
6878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6879:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_IC2PSC =              // Input capture 2 prescaler (2 bits)
6881:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6882:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_ICPCS =               // Input capture 1 prescaler (2 bits)
6884:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1CE = 0x80;         // Output Compare 1 clear enable
6886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1FE = 0x4;          // Output Compare 1 fast enable
6887:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M =                // Output Compare 1 mode (3 bits)
6889:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1M_3 = 0x10000;     // Output Compare 1 mode - bit 3
6891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC1PE = 0x8;          // Output Compare 1 preload enable
6892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2CE = 0x8000;       // Output Compare 2 clear enable
6893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2FE = 0x400;        // Output Compare 2 fast enable
6894:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M =                // Output Compare 2 mode (3 bits)
6896:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2M_3 = 0x1000000;   // Output Compare 2 mode - bit 3
6898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR1_OC2PE = 0x800;        // Output Compare 2 preload enable
6899:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR1_RESET_VALUE = 0x0;
6900:../../..\hal\include/device/stm32g431.h **** 
6901:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC3S =                // Capture/Compare 3 selection (2 bits)
6903:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
6904:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6905:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_CC4S =                // Capture/Compare 4 selection (2 bits)
6906:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
6907:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3F =                // Input capture 3 filter (4 bits)
6909:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
6910:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6911:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC3PSC =              // Input capture 3 prescaler (2 bits)
6912:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
6913:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4F =                // Input capture 4 filter (4 bits)
6915:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
6916:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6917:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_IC4PSC =              // Input capture 4 prescaler (2 bits)
6918:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
6919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3CE = 0x80;         // Output compare 3 clear enable
6920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3FE = 0x4;          // Output compare 3 fast enable
6921:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M =                // Output compare 3 mode (3 bits)
6923:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
6924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3M_3 = 0x10000;     // Output Compare 3 mode - bit 3
6925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC3PE = 0x8;          // Output compare 3 preload enable
6926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4CE = 0x8000;       // Output compare 4 clear enable
6927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4FE = 0x400;        // Output compare 4 fast enable
6928:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6929:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M =                // Output compare 4 mode (3 bits)
6930:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
6931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4M_3 = 0x1000000;   // Output Compare 4 mode - bit 3
6932:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR2_OC4PE = 0x800;        // Output compare 4 preload enable
6933:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR2_RESET_VALUE = 0x0;
6934:../../..\hal\include/device/stm32g431.h **** 
6935:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6P = 0x200000;      // Capture/Compare 6 output polarity
6936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC6E = 0x100000;      // Capture/Compare 6 output enable
6937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5P = 0x20000;       // Capture/Compare 5 output polarity
6938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC5E = 0x10000;       // Capture/Compare 5 output enable
6939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NP = 0x8000;       // Capture/Compare 4 complementary output 
6940:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4NE = 0x4000;       // Capture/Compare 4 complementary output 
6941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4P = 0x2000;        // Capture/Compare 3 output Polarity
6942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC4E = 0x1000;        // Capture/Compare 4 output enable
6943:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NP = 0x800;        // Capture/Compare 3 output Polarity
6944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3NE = 0x400;        // Capture/Compare 3 complementary output 
6945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3P = 0x200;         // Capture/Compare 3 output Polarity
6946:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC3E = 0x100;         // Capture/Compare 3 output enable
6947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NP = 0x80;         // Capture/Compare 2 output Polarity
6948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2NE = 0x40;         // Capture/Compare 2 complementary output 
6949:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2P = 0x20;          // Capture/Compare 2 output Polarity
6950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC2E = 0x10;          // Capture/Compare 2 output enable
6951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NP = 0x8;          // Capture/Compare 1 output Polarity
6952:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1NE = 0x4;          // Capture/Compare 1 complementary output 
6953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1P = 0x2;           // Capture/Compare 1 output Polarity
6954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCER_CC1E = 0x1;           // Capture/Compare 1 output enable
6955:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCER_RESET_VALUE = 0x0;
6956:../../..\hal\include/device/stm32g431.h **** 
6957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIFCPY
6958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // counter value (16 bits)
6960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6961:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
6962:../../..\hal\include/device/stm32g431.h **** 
6963:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6964:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
6965:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6966:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
6967:../../..\hal\include/device/stm32g431.h **** 
6968:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto-reload value (16 bits)
6970:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6971:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffffffff;
6972:../../..\hal\include/device/stm32g431.h **** 
6973:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RCR_REP =                 // Repetition counter value (16 bits)
6975:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6976:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RCR_RESET_VALUE = 0x0;
6977:../../..\hal\include/device/stm32g431.h **** 
6978:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CCR1 =                // Capture/Compare 1 value (16 bits)
6980:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6981:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
6982:../../..\hal\include/device/stm32g431.h **** 
6983:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CCR2 =                // Capture/Compare 2 value (16 bits)
6985:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6986:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
6987:../../..\hal\include/device/stm32g431.h **** 
6988:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CCR3 =                // Capture/Compare value (16 bits)
6990:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6991:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
6992:../../..\hal\include/device/stm32g431.h **** 
6993:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
6994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CCR4 =                // Capture/Compare value (16 bits)
6995:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
6996:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
6997:../../..\hal\include/device/stm32g431.h **** 
6998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2ID = 0x20000000;   // BK2ID
6999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKBID = 0x10000000;   // BKBID
7000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2DSRM = 0x8000000;  // BK2DSRM
7001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKDSRM = 0x4000000;   // BKDSRM
7002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2P = 0x2000000;     // Break 2 polarity
7003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2E = 0x1000000;     // Break 2 Enable
7004:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BK2F =                // Break 2 filter (4 bits)
7006:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
7007:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKF =                 // Break filter (4 bits)
7009:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
7010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_MOE = 0x8000;         // Main output enable
7011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_AOE = 0x4000;         // Automatic output enable
7012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKP = 0x2000;         // Break polarity
7013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_BKE = 0x1000;         // Break enable
7014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSR = 0x800;         // Off-state selection for Run mode
7015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_OSSI = 0x400;         // Off-state selection for Idle mode
7016:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_LOCK =                // Lock configuration (2 bits)
7018:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
7019:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BDTR_DTG =                 // Dead-time generator setup (8 bits)
7021:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
7022:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDTR_RESET_VALUE = 0x0;
7023:../../..\hal\include/device/stm32g431.h **** 
7024:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CCR5 =                // Capture/Compare value (16 bits)
7026:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C1 = 0x20000000;   // Group Channel 5 and Channel 1
7028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C2 = 0x40000000;   // Group Channel 5 and Channel 2
7029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_GC5C3 = 0x80000000;   // Group Channel 5 and Channel 3
7030:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
7031:../../..\hal\include/device/stm32g431.h **** 
7032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CCR6 =                // Capture/Compare value (16 bits)
7034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7035:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
7036:../../..\hal\include/device/stm32g431.h **** 
7037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M_bit3 = 0x1000000;// Output Compare 6 mode bit 3
7038:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M_bit3 =           // Output Compare 5 mode bit 3 (3 
7040:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
7041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6CE = 0x8000;       // Output compare 6 clear enable
7042:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6M =                // Output compare 6 mode (3 bits)
7044:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
7045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6PE = 0x800;        // Output compare 6 preload enable
7046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC6FE = 0x400;        // Output compare 6 fast enable
7047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5CE = 0x80;         // Output compare 5 clear enable
7048:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5M =                // Output compare 5 mode (3 bits)
7050:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
7051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5PE = 0x8;          // Output compare 5 preload enable
7052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCMR3_Output_OC5FE = 0x4;          // Output compare 5 fast enable
7053:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCMR3_Output_RESET_VALUE = 0x0;
7054:../../..\hal\include/device/stm32g431.h **** 
7055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTPE = 0x20000;       // Deadtime Preload Enable
7056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTAE = 0x10000;       // Deadtime Asymmetric Enable
7057:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7058:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DTR2_DTGF =                // Dead-time falling edge generator setup 
7059:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
7060:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DTR2_RESET_VALUE = 0x0;
7061:../../..\hal\include/device/stm32g431.h **** 
7062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IE = 0x1;             // Index Enable
7063:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IDIR =                // Index Direction (2 bits)
7065:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
7066:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IBLK =                // Index Blanking (2 bits)
7068:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
7069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_FIDX = 0x20;          // First Index
7070:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_IPOS =                // Index Positioning (2 bits)
7072:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
7073:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PW =                  // Pulse width (8 bits)
7075:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
7076:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_PWPRSC =              // Pulse Width prescaler (3 bits)
7078:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
7079:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
7080:../../..\hal\include/device/stm32g431.h **** 
7081:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI1SEL =              // TI1[0] to TI1[15] input selection (4 b
7083:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7084:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI2SEL =              // TI2[0] to TI2[15] input selection (4 b
7086:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
7087:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI3SEL =              // TI3[0] to TI3[15] input selection (4 b
7089:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
7090:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TISEL_TI4SEL =              // TI4[0] to TI4[15] input selection (4 b
7092:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
7093:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TISEL_RESET_VALUE = 0x0;
7094:../../..\hal\include/device/stm32g431.h **** 
7095:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_ETRSEL =              // ETR source selection (4 bits)
7097:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0xf>::value<X>();
7098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4P = 0x2000;     // BRK COMP4 input polarity
7099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3P = 0x1000;     // BRK COMP3 input polarity
7100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2P = 0x800;      // BRK COMP2 input polarity
7101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1P = 0x400;      // BRK COMP1 input polarity
7102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINP = 0x200;        // BRK BKIN input polarity
7103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP7E = 0x80;       // BRK COMP7 enable
7104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP6E = 0x40;       // BRK COMP6 enable
7105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP5E = 0x20;       // BRK COMP5 enable
7106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP4E = 0x10;       // BRK COMP4 enable
7107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP3E = 0x8;        // BRK COMP3 enable
7108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP2E = 0x4;        // BRK COMP2 enable
7109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKCMP1E = 0x2;        // BRK COMP1 enable
7110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF1_BKINE = 0x1;          // BRK BKIN input enable
7111:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF1_RESET_VALUE = 0x0;
7112:../../..\hal\include/device/stm32g431.h **** 
7113:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7114:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_OCRSEL =              // OCREF_CLR source selection (3 bits)
7115:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
7116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4P = 0x2000;    // BRK2 COMP4 input polarity
7117:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3P = 0x1000;    // BRK2 COMP3 input polarity
7118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2P = 0x800;     // BRK2 COMP2 input polarity
7119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1P = 0x400;     // BRK2 COMP1 input polarity
7120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2INP = 0x200;       // BRK2 BKIN input polarity
7121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP7E = 0x80;      // BRK2 COMP7 enable
7122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP6E = 0x40;      // BRK2 COMP6 enable
7123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP5E = 0x20;      // BRK2 COMP5 enable
7124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP4E = 0x10;      // BRK2 COMP4 enable
7125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP3E = 0x8;       // BRK2 COMP3 enable
7126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP2E = 0x4;       // BRK2 COMP2 enable
7127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BK2CMP1E = 0x2;       // BRK2 COMP1 enable
7128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AF2_BKINE = 0x1;          // BRK BKIN input enable
7129:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AF2_RESET_VALUE = 0x0;
7130:../../..\hal\include/device/stm32g431.h **** 
7131:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBL =                 // DMA burst length (5 bits)
7133:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
7134:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DCR_DBA =                 // DMA base address (5 bits)
7136:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
7137:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DCR_RESET_VALUE = 0x0;
7138:../../..\hal\include/device/stm32g431.h **** 
7139:../../..\hal\include/device/stm32g431.h **** 
7140:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DMAR_RESET_VALUE = 0x0;
7141:../../..\hal\include/device/stm32g431.h **** 
7142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM4 = 30; // TIM4
7143:../../..\hal\include/device/stm32g431.h **** };
7144:../../..\hal\include/device/stm32g431.h **** 
7145:../../..\hal\include/device/stm32g431.h **** static tim4_t& TIM4 = *reinterpret_cast<tim4_t*>(0x40000800);
7146:../../..\hal\include/device/stm32g431.h **** 
7147:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM4
7148:../../..\hal\include/device/stm32g431.h **** 
7149:../../..\hal\include/device/stm32g431.h **** 
7150:../../..\hal\include/device/stm32g431.h **** ////
7151:../../..\hal\include/device/stm32g431.h **** //
7152:../../..\hal\include/device/stm32g431.h **** //    Basic-timers
7153:../../..\hal\include/device/stm32g431.h **** //
7154:../../..\hal\include/device/stm32g431.h **** ////
7155:../../..\hal\include/device/stm32g431.h **** 
7156:../../..\hal\include/device/stm32g431.h **** struct tim6_t
7157:../../..\hal\include/device/stm32g431.h **** {
7158:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
7159:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
7160:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
7161:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
7162:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
7163:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
7164:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _1;
7165:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
7166:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
7167:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
7168:../../..\hal\include/device/stm32g431.h **** 
7169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
7170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
7171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
7172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
7173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
7174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
7175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
7176:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
7177:../../..\hal\include/device/stm32g431.h **** 
7178:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
7180:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
7181:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
7182:../../..\hal\include/device/stm32g431.h **** 
7183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
7184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
7185:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
7186:../../..\hal\include/device/stm32g431.h **** 
7187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
7188:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
7189:../../..\hal\include/device/stm32g431.h **** 
7190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
7191:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
7192:../../..\hal\include/device/stm32g431.h **** 
7193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIF Copy, Read-only
7194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // Low counter value (16 bits), Read-write
7196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7197:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
7198:../../..\hal\include/device/stm32g431.h **** 
7199:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7200:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
7201:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7202:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
7203:../../..\hal\include/device/stm32g431.h **** 
7204:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Low Auto-reload value (16 bits)
7206:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7207:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
7208:../../..\hal\include/device/stm32g431.h **** 
7209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM6_DACUNDER = 54; // TIM6_DACUNDER
7210:../../..\hal\include/device/stm32g431.h **** };
7211:../../..\hal\include/device/stm32g431.h **** 
7212:../../..\hal\include/device/stm32g431.h **** static tim6_t& TIM6 = *reinterpret_cast<tim6_t*>(0x40001000);
7213:../../..\hal\include/device/stm32g431.h **** 
7214:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM6
7215:../../..\hal\include/device/stm32g431.h **** 
7216:../../..\hal\include/device/stm32g431.h **** 
7217:../../..\hal\include/device/stm32g431.h **** ////
7218:../../..\hal\include/device/stm32g431.h **** //
7219:../../..\hal\include/device/stm32g431.h **** //    Basic-timers
7220:../../..\hal\include/device/stm32g431.h **** //
7221:../../..\hal\include/device/stm32g431.h **** ////
7222:../../..\hal\include/device/stm32g431.h **** 
7223:../../..\hal\include/device/stm32g431.h **** struct tim7_t
7224:../../..\hal\include/device/stm32g431.h **** {
7225:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
7226:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
7227:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
7228:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIER;                 // [Read-write] DMA/Interrupt enable register
7229:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] status register
7230:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EGR;                  // [Write-only] event generation register
7231:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _1;
7232:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // counter
7233:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSC;                  // [Read-write] prescaler
7234:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] auto-reload register
7235:../../..\hal\include/device/stm32g431.h **** 
7236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DITHEN = 0x1000;      // Dithering Enable
7237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UIFREMAP = 0x800;     // UIF status bit remapping
7238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ARPE = 0x80;          // Auto-reload preload enable
7239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OPM = 0x8;            // One-pulse mode
7240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_URS = 0x4;            // Update request source
7241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UDIS = 0x2;           // Update disable
7242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CEN = 0x1;            // Counter enable
7243:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
7244:../../..\hal\include/device/stm32g431.h **** 
7245:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MMS =                 // Master mode selection (3 bits)
7247:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
7248:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
7249:../../..\hal\include/device/stm32g431.h **** 
7250:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UDE = 0x100;          // Update DMA request enable
7251:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIER_UIE = 0x1;            // Update interrupt enable
7252:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIER_RESET_VALUE = 0x0;
7253:../../..\hal\include/device/stm32g431.h **** 
7254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UIF = 0x1;            // Update interrupt flag
7255:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
7256:../../..\hal\include/device/stm32g431.h **** 
7257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EGR_UG = 0x1;             // Update generation
7258:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EGR_RESET_VALUE = 0x0;
7259:../../..\hal\include/device/stm32g431.h **** 
7260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_UIFCPY = 0x80000000;  // UIF Copy, Read-only
7261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // Low counter value (16 bits), Read-write
7263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7264:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
7265:../../..\hal\include/device/stm32g431.h **** 
7266:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSC_PSC =                 // Prescaler value (16 bits)
7268:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7269:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSC_RESET_VALUE = 0x0;
7270:../../..\hal\include/device/stm32g431.h **** 
7271:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7272:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Low Auto-reload value (16 bits)
7273:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7274:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0xffff;
7275:../../..\hal\include/device/stm32g431.h **** 
7276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t TIM7 = 55; // TIM7
7277:../../..\hal\include/device/stm32g431.h **** };
7278:../../..\hal\include/device/stm32g431.h **** 
7279:../../..\hal\include/device/stm32g431.h **** static tim7_t& TIM7 = *reinterpret_cast<tim7_t*>(0x40001400);
7280:../../..\hal\include/device/stm32g431.h **** 
7281:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TIM7
7282:../../..\hal\include/device/stm32g431.h **** 
7283:../../..\hal\include/device/stm32g431.h **** 
7284:../../..\hal\include/device/stm32g431.h **** ////
7285:../../..\hal\include/device/stm32g431.h **** //
7286:../../..\hal\include/device/stm32g431.h **** //    Low power timer
7287:../../..\hal\include/device/stm32g431.h **** //
7288:../../..\hal\include/device/stm32g431.h **** ////
7289:../../..\hal\include/device/stm32g431.h **** 
7290:../../..\hal\include/device/stm32g431.h **** struct lptimer1_t
7291:../../..\hal\include/device/stm32g431.h **** {
7292:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt and Status Register
7293:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt Clear Register
7294:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IER;                  // [Read-write] Interrupt Enable Register
7295:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR;                 // [Read-write] Configuration Register
7296:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] Control Register
7297:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMP;                  // [Read-write] Compare Register
7298:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ARR;                  // [Read-write] Autoreload Register
7299:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNT;                  // [Read-only] Counter Register
7300:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OR;                   // [Read-write] option register
7301:../../..\hal\include/device/stm32g431.h **** 
7302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_DOWN = 0x40;          // Counter direction change up to down
7303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_UP = 0x20;            // Counter direction change down to up
7304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ARROK = 0x10;         // Autoreload register update OK
7305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMPOK = 0x8;          // Compare register update OK
7306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EXTTRIG = 0x4;        // External trigger edge event
7307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ARRM = 0x2;           // Autoreload match
7308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMPM = 0x1;           // Compare match
7309:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
7310:../../..\hal\include/device/stm32g431.h **** 
7311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_DOWNCF = 0x40;        // Direction change to down Clear Flag
7312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_UPCF = 0x20;          // Direction change to UP Clear Flag
7313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ARROKCF = 0x10;       // Autoreload register update OK Clear Flag
7314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMPOKCF = 0x8;        // Compare register update OK Clear Flag
7315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_EXTTRIGCF = 0x4;      // External trigger valid edge Clear Flag
7316:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ARRMCF = 0x2;         // Autoreload match Clear Flag
7317:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMPMCF = 0x1;         // compare match Clear Flag
7318:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
7319:../../..\hal\include/device/stm32g431.h **** 
7320:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_DOWNIE = 0x40;        // Direction change to down Interrupt Enabl
7321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_UPIE = 0x20;          // Direction change to UP Interrupt Enable
7322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ARROKIE = 0x10;       // Autoreload register update OK Interrupt 
7323:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_CMPOKIE = 0x8;        // Compare register update OK Interrupt Ena
7324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EXTTRIGIE = 0x4;      // External trigger valid edge Interrupt En
7325:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ARRMIE = 0x2;         // Autoreload match Interrupt Enable
7326:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_CMPMIE = 0x1;         // Compare match Interrupt Enable
7327:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IER_RESET_VALUE = 0x0;
7328:../../..\hal\include/device/stm32g431.h **** 
7329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_ENC = 0x1000000;      // Encoder mode enable
7330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_COUNTMODE = 0x800000; // counter mode enabled
7331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_PRELOAD = 0x400000;   // Registers update mode
7332:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_WAVPOL = 0x200000;    // Waveform shape polarity
7333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_WAVE = 0x100000;      // Waveform shape
7334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_TIMOUT = 0x80000;     // Timeout enable
7335:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_TRIGEN =              // Trigger enable and polarity (2 bits)
7337:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
7338:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_TRIGSEL =             // Trigger selector (4 bits)
7340:../../..\hal\include/device/stm32g431.h ****         bit_field_t<13, 0xf>::value<X>();
7341:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_PRESC =               // Clock prescaler (3 bits)
7343:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x7>::value<X>();
7344:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_TRGFLT =              // Configurable digital filter for trigger
7346:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
7347:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_CKFLT =               // Configurable digital filter for externa
7349:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
7350:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_CKPOL =               // Clock Polarity (2 bits)
7352:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
7353:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_CKSEL = 0x1;          // Clock selector
7354:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR_RESET_VALUE = 0x0;
7355:../../..\hal\include/device/stm32g431.h **** 
7356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RSTARE = 0x10;        // RSTARE
7357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_COUNTRST = 0x8;       // COUNTRST
7358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CNTSTRT = 0x4;        // Timer start in continuous mode
7359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SNGSTRT = 0x2;        // LPTIM start in single mode
7360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ENABLE = 0x1;         // LPTIM Enable
7361:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
7362:../../..\hal\include/device/stm32g431.h **** 
7363:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7364:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CMP_CMP =                 // Compare value (16 bits)
7365:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7366:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMP_RESET_VALUE = 0x0;
7367:../../..\hal\include/device/stm32g431.h **** 
7368:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7369:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ARR_ARR =                 // Auto reload value (16 bits)
7370:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7371:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ARR_RESET_VALUE = 0x1;
7372:../../..\hal\include/device/stm32g431.h **** 
7373:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNT_CNT =                 // Counter value (16 bits)
7375:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
7376:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNT_RESET_VALUE = 0x0;
7377:../../..\hal\include/device/stm32g431.h **** 
7378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OR_IN1 = 0x1;            // IN1
7379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OR_IN2 = 0x2;            // IN2
7380:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7381:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OR_IN1_2_1 =             // IN1_2_1 (2 bits)
7382:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
7383:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OR_IN2_2_1 =             // IN2_2_1 (2 bits)
7385:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
7386:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OR_RESET_VALUE = 0x0;
7387:../../..\hal\include/device/stm32g431.h **** };
7388:../../..\hal\include/device/stm32g431.h **** 
7389:../../..\hal\include/device/stm32g431.h **** static lptimer1_t& LPTIMER1 = *reinterpret_cast<lptimer1_t*>(0x40007c00);
7390:../../..\hal\include/device/stm32g431.h **** 
7391:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_LPTIMER1
7392:../../..\hal\include/device/stm32g431.h **** 
7393:../../..\hal\include/device/stm32g431.h **** 
7394:../../..\hal\include/device/stm32g431.h **** ////
7395:../../..\hal\include/device/stm32g431.h **** //
7396:../../..\hal\include/device/stm32g431.h **** //    Universal synchronous asynchronous receiver transmitter
7397:../../..\hal\include/device/stm32g431.h **** //
7398:../../..\hal\include/device/stm32g431.h **** ////
7399:../../..\hal\include/device/stm32g431.h **** 
7400:../../..\hal\include/device/stm32g431.h **** struct usart1_t
7401:../../..\hal\include/device/stm32g431.h **** {
7402:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
7403:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
7404:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Control register 3
7405:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Read-write] Baud rate register
7406:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GTPR;                 // [Read-write] Guard time and prescaler register
7407:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTOR;                 // [Read-write] Receiver timeout register
7408:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RQR;                  // [Write-only] Request register
7409:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt &amp; status register
7410:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt flag clear register
7411:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDR;                  // [Read-only] Receive data register
7412:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDR;                  // [Read-write] Transmit data register
7413:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRESC;                // [Read-write] USART prescaler register
7414:../../..\hal\include/device/stm32g431.h **** 
7415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXFFIE = 0x80000000;  // RXFFIE
7416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXFEIE = 0x40000000;  // TXFEIE
7417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_FIFOEN = 0x20000000;  // FIFOEN
7418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M1 = 0x10000000;      // M1
7419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_EOBIE = 0x8000000;    // End of Block interrupt enable
7420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RTOIE = 0x4000000;    // Receiver timeout interrupt enable
7421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT4 = 0x2000000;    // Driver Enable assertion time
7422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT3 = 0x1000000;    // DEAT3
7423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT2 = 0x800000;     // DEAT2
7424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT1 = 0x400000;     // DEAT1
7425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT0 = 0x200000;     // DEAT0
7426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT4 = 0x100000;     // Driver Enable de-assertion time
7427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT3 = 0x80000;      // DEDT3
7428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT2 = 0x40000;      // DEDT2
7429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT1 = 0x20000;      // DEDT1
7430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT0 = 0x10000;      // DEDT0
7431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OVER8 = 0x8000;       // Oversampling mode
7432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMIE = 0x4000;        // Character match interrupt enable
7433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MME = 0x2000;         // Mute mode enable
7434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M0 = 0x1000;          // Word length
7435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WAKE = 0x800;         // Receiver wakeup method
7436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PCE = 0x400;          // Parity control enable
7437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PS = 0x200;           // Parity selection
7438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PEIE = 0x100;         // PE interrupt enable
7439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXEIE = 0x80;         // interrupt enable
7440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transmission complete interrupt enable
7441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXNEIE = 0x20;        // RXNE interrupt enable
7442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_IDLEIE = 0x10;        // IDLE interrupt enable
7443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TE = 0x8;             // Transmitter enable
7444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RE = 0x4;             // Receiver enable
7445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UESM = 0x2;           // USART enable in Stop mode
7446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UE = 0x1;             // USART enable
7447:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
7448:../../..\hal\include/device/stm32g431.h **** 
7449:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD4_7 =              // Address of the USART node (4 bits)
7451:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
7452:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD0_3 =              // Address of the USART node (4 bits)
7454:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
7455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RTOEN = 0x800000;     // Receiver timeout enable
7456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD1 = 0x400000;   // Auto baud rate mode
7457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD0 = 0x200000;   // ABRMOD0
7458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABREN = 0x100000;     // Auto baud rate enable
7459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MSBFIRST = 0x80000;   // Most significant bit first
7460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAINV = 0x40000;      // Binary data inversion
7461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXINV = 0x20000;      // TX pin active level inversion
7462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXINV = 0x10000;      // RX pin active level inversion
7463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SWAP = 0x8000;        // Swap TX/RX pins
7464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LINEN = 0x4000;       // LIN mode enable
7465:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP =                // STOP bits (2 bits)
7467:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
7468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CLKEN = 0x800;        // Clock enable
7469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPOL = 0x400;         // Clock polarity
7470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPHA = 0x200;         // Clock phase
7471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBCL = 0x100;         // Last bit clock pulse
7472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDIE = 0x40;         // LIN break detection interrupt enable
7473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDL = 0x20;          // LIN break detection length
7474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADDM7 = 0x10;         // 7-bit Address Detection/4-bit Address De
7475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DIS_NSS = 0x8;        // DIS_NSS
7476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SLVEN = 0x1;          // SLVEN
7477:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
7478:../../..\hal\include/device/stm32g431.h **** 
7479:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTCFG =             // TXFTCFG (3 bits)
7481:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
7482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTIE = 0x10000000;  // RXFTIE
7483:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTCFG =             // RXFTCFG (3 bits)
7485:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7>::value<X>();
7486:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TCBGTIE = 0x1000000;  // TCBGTIE
7487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTIE = 0x800000;    // TXFTIE
7488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUFIE = 0x400000;     // Wakeup from Stop mode interrupt enable
7489:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUS =                 // Wakeup from Stop mode interrupt flag sel
7491:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
7492:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCARCNT =             // Smartcard auto-retry count (3 bits)
7494:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
7495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEP = 0x8000;         // Driver enable polarity selection
7496:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEM = 0x4000;         // Driver enable mode
7497:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DDRE = 0x2000;        // DMA Disable on Reception Error
7498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_OVRDIS = 0x1000;      // Overrun Disable
7499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_ONEBIT = 0x800;       // One sample bit method enable
7500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSIE = 0x400;        // CTS interrupt enable
7501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSE = 0x200;         // CTS enable
7502:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RTSE = 0x100;         // RTS enable
7503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAT = 0x80;          // DMA enable transmitter
7504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAR = 0x40;          // DMA enable receiver
7505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCEN = 0x20;          // Smartcard mode enable
7506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_NACK = 0x10;          // Smartcard NACK enable
7507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_HDSEL = 0x8;          // Half-duplex selection
7508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IRLP = 0x4;           // Ir low-power
7509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IREN = 0x2;           // Ir mode enable
7510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIE = 0x1;            // Error interrupt enable
7511:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x0;
7512:../../..\hal\include/device/stm32g431.h **** 
7513:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Mantissa =        // DIV_Mantissa (12 bits)
7515:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
7516:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7517:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Fraction =        // DIV_Fraction (4 bits)
7518:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7519:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
7520:../../..\hal\include/device/stm32g431.h **** 
7521:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_GT =                  // Guard time value (8 bits)
7523:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
7524:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_PSC =                 // Prescaler value (8 bits)
7526:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
7527:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GTPR_RESET_VALUE = 0x0;
7528:../../..\hal\include/device/stm32g431.h **** 
7529:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_BLEN =                // Block Length (8 bits)
7531:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
7532:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_RTO =                 // Receiver timeout value (24 bits)
7534:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
7535:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTOR_RESET_VALUE = 0x0;
7536:../../..\hal\include/device/stm32g431.h **** 
7537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_TXFRQ = 0x10;         // Transmit data flush request
7538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_RXFRQ = 0x8;          // Receive data flush request
7539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_MMRQ = 0x4;           // Mute mode request
7540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_SBKRQ = 0x2;          // Send break request
7541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_ABRRQ = 0x1;          // Auto baud rate request
7542:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RQR_RESET_VALUE = 0x0;
7543:../../..\hal\include/device/stm32g431.h **** 
7544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFT = 0x8000000;     // TXFT
7545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFT = 0x4000000;     // RXFT
7546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCBGT = 0x2000000;    // TCBGT
7547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFF = 0x1000000;     // RXFF
7548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFE = 0x800000;      // TXFE
7549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_REACK = 0x400000;     // REACK
7550:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEACK = 0x200000;     // TEACK
7551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_WUF = 0x100000;       // WUF
7552:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RWU = 0x80000;        // RWU
7553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SBKF = 0x40000;       // SBKF
7554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMF = 0x20000;        // CMF
7555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x10000;       // BUSY
7556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRF = 0x8000;        // ABRF
7557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRE = 0x4000;        // ABRE
7558:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_UDR = 0x2000;         // UDR
7559:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOBF = 0x1000;        // EOBF
7560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RTOF = 0x800;         // RTOF
7561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTS = 0x400;          // CTS
7562:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTSIF = 0x200;        // CTSIF
7563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_LBDF = 0x100;         // LBDF
7564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x80;           // TXE
7565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // TC
7566:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x20;          // RXNE
7567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_IDLE = 0x10;          // IDLE
7568:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ORE = 0x8;            // ORE
7569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NF = 0x4;             // NF
7570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FE = 0x2;             // FE
7571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PE = 0x1;             // PE
7572:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
7573:../../..\hal\include/device/stm32g431.h **** 
7574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_WUCF = 0x100000;      // Wakeup from Stop mode clear flag
7575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMCF = 0x20000;       // Character match clear flag
7576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_UDRCF = 0x2000;       // UDRCF
7577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_EOBCF = 0x1000;       // End of block clear flag
7578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RTOCF = 0x800;        // Receiver timeout clear flag
7579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CTSCF = 0x200;        // CTS clear flag
7580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_LBDCF = 0x100;        // LIN break detection clear flag
7581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCBGTCF = 0x80;       // TCBGTCF
7582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCCF = 0x40;          // Transmission complete clear flag
7583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXFECF = 0x20;        // TXFECF
7584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_IDLECF = 0x10;        // Idle line detected clear flag
7585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ORECF = 0x8;          // Overrun error clear flag
7586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NCF = 0x4;            // Noise detected clear flag
7587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FECF = 0x2;           // Framing error clear flag
7588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECF = 0x1;           // Parity error clear flag
7589:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
7590:../../..\hal\include/device/stm32g431.h **** 
7591:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDR_RDR =                 // Receive data value (9 bits)
7593:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
7594:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDR_RESET_VALUE = 0x0;
7595:../../..\hal\include/device/stm32g431.h **** 
7596:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDR_TDR =                 // Transmit data value (9 bits)
7598:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
7599:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDR_RESET_VALUE = 0x0;
7600:../../..\hal\include/device/stm32g431.h **** 
7601:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRESC_PRESCALER =           // PRESCALER (4 bits)
7603:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7604:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRESC_RESET_VALUE = 0x0;
7605:../../..\hal\include/device/stm32g431.h **** 
7606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USART1 = 37; // USART1
7607:../../..\hal\include/device/stm32g431.h **** };
7608:../../..\hal\include/device/stm32g431.h **** 
7609:../../..\hal\include/device/stm32g431.h **** static usart1_t& USART1 = *reinterpret_cast<usart1_t*>(0x40013800);
7610:../../..\hal\include/device/stm32g431.h **** 
7611:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_USART1
7612:../../..\hal\include/device/stm32g431.h **** 
7613:../../..\hal\include/device/stm32g431.h **** 
7614:../../..\hal\include/device/stm32g431.h **** ////
7615:../../..\hal\include/device/stm32g431.h **** //
7616:../../..\hal\include/device/stm32g431.h **** //    Universal synchronous asynchronous receiver transmitter
7617:../../..\hal\include/device/stm32g431.h **** //
7618:../../..\hal\include/device/stm32g431.h **** ////
7619:../../..\hal\include/device/stm32g431.h **** 
7620:../../..\hal\include/device/stm32g431.h **** struct usart2_t
7621:../../..\hal\include/device/stm32g431.h **** {
7622:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
7623:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
7624:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Control register 3
7625:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Read-write] Baud rate register
7626:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GTPR;                 // [Read-write] Guard time and prescaler register
7627:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTOR;                 // [Read-write] Receiver timeout register
7628:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RQR;                  // [Write-only] Request register
7629:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt &amp; status register
7630:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt flag clear register
7631:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDR;                  // [Read-only] Receive data register
7632:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDR;                  // [Read-write] Transmit data register
7633:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRESC;                // [Read-write] USART prescaler register
7634:../../..\hal\include/device/stm32g431.h **** 
7635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXFFIE = 0x80000000;  // RXFFIE
7636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXFEIE = 0x40000000;  // TXFEIE
7637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_FIFOEN = 0x20000000;  // FIFOEN
7638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M1 = 0x10000000;      // M1
7639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_EOBIE = 0x8000000;    // End of Block interrupt enable
7640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RTOIE = 0x4000000;    // Receiver timeout interrupt enable
7641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT4 = 0x2000000;    // Driver Enable assertion time
7642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT3 = 0x1000000;    // DEAT3
7643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT2 = 0x800000;     // DEAT2
7644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT1 = 0x400000;     // DEAT1
7645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT0 = 0x200000;     // DEAT0
7646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT4 = 0x100000;     // Driver Enable de-assertion time
7647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT3 = 0x80000;      // DEDT3
7648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT2 = 0x40000;      // DEDT2
7649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT1 = 0x20000;      // DEDT1
7650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT0 = 0x10000;      // DEDT0
7651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OVER8 = 0x8000;       // Oversampling mode
7652:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMIE = 0x4000;        // Character match interrupt enable
7653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MME = 0x2000;         // Mute mode enable
7654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M0 = 0x1000;          // Word length
7655:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WAKE = 0x800;         // Receiver wakeup method
7656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PCE = 0x400;          // Parity control enable
7657:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PS = 0x200;           // Parity selection
7658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PEIE = 0x100;         // PE interrupt enable
7659:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXEIE = 0x80;         // interrupt enable
7660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transmission complete interrupt enable
7661:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXNEIE = 0x20;        // RXNE interrupt enable
7662:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_IDLEIE = 0x10;        // IDLE interrupt enable
7663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TE = 0x8;             // Transmitter enable
7664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RE = 0x4;             // Receiver enable
7665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UESM = 0x2;           // USART enable in Stop mode
7666:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UE = 0x1;             // USART enable
7667:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
7668:../../..\hal\include/device/stm32g431.h **** 
7669:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD4_7 =              // Address of the USART node (4 bits)
7671:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
7672:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD0_3 =              // Address of the USART node (4 bits)
7674:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
7675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RTOEN = 0x800000;     // Receiver timeout enable
7676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD1 = 0x400000;   // Auto baud rate mode
7677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD0 = 0x200000;   // ABRMOD0
7678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABREN = 0x100000;     // Auto baud rate enable
7679:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MSBFIRST = 0x80000;   // Most significant bit first
7680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAINV = 0x40000;      // Binary data inversion
7681:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXINV = 0x20000;      // TX pin active level inversion
7682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXINV = 0x10000;      // RX pin active level inversion
7683:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SWAP = 0x8000;        // Swap TX/RX pins
7684:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LINEN = 0x4000;       // LIN mode enable
7685:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7686:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP =                // STOP bits (2 bits)
7687:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
7688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CLKEN = 0x800;        // Clock enable
7689:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPOL = 0x400;         // Clock polarity
7690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPHA = 0x200;         // Clock phase
7691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBCL = 0x100;         // Last bit clock pulse
7692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDIE = 0x40;         // LIN break detection interrupt enable
7693:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDL = 0x20;          // LIN break detection length
7694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADDM7 = 0x10;         // 7-bit Address Detection/4-bit Address De
7695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DIS_NSS = 0x8;        // DIS_NSS
7696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SLVEN = 0x1;          // SLVEN
7697:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
7698:../../..\hal\include/device/stm32g431.h **** 
7699:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTCFG =             // TXFTCFG (3 bits)
7701:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
7702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTIE = 0x10000000;  // RXFTIE
7703:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTCFG =             // RXFTCFG (3 bits)
7705:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7>::value<X>();
7706:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TCBGTIE = 0x1000000;  // TCBGTIE
7707:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTIE = 0x800000;    // TXFTIE
7708:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUFIE = 0x400000;     // Wakeup from Stop mode interrupt enable
7709:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUS =                 // Wakeup from Stop mode interrupt flag sel
7711:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
7712:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCARCNT =             // Smartcard auto-retry count (3 bits)
7714:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
7715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEP = 0x8000;         // Driver enable polarity selection
7716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEM = 0x4000;         // Driver enable mode
7717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DDRE = 0x2000;        // DMA Disable on Reception Error
7718:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_OVRDIS = 0x1000;      // Overrun Disable
7719:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_ONEBIT = 0x800;       // One sample bit method enable
7720:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSIE = 0x400;        // CTS interrupt enable
7721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSE = 0x200;         // CTS enable
7722:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RTSE = 0x100;         // RTS enable
7723:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAT = 0x80;          // DMA enable transmitter
7724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAR = 0x40;          // DMA enable receiver
7725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCEN = 0x20;          // Smartcard mode enable
7726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_NACK = 0x10;          // Smartcard NACK enable
7727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_HDSEL = 0x8;          // Half-duplex selection
7728:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IRLP = 0x4;           // Ir low-power
7729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IREN = 0x2;           // Ir mode enable
7730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIE = 0x1;            // Error interrupt enable
7731:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x0;
7732:../../..\hal\include/device/stm32g431.h **** 
7733:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7734:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Mantissa =        // DIV_Mantissa (12 bits)
7735:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
7736:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7737:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Fraction =        // DIV_Fraction (4 bits)
7738:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7739:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
7740:../../..\hal\include/device/stm32g431.h **** 
7741:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_GT =                  // Guard time value (8 bits)
7743:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
7744:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_PSC =                 // Prescaler value (8 bits)
7746:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
7747:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GTPR_RESET_VALUE = 0x0;
7748:../../..\hal\include/device/stm32g431.h **** 
7749:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_BLEN =                // Block Length (8 bits)
7751:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
7752:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_RTO =                 // Receiver timeout value (24 bits)
7754:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
7755:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTOR_RESET_VALUE = 0x0;
7756:../../..\hal\include/device/stm32g431.h **** 
7757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_TXFRQ = 0x10;         // Transmit data flush request
7758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_RXFRQ = 0x8;          // Receive data flush request
7759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_MMRQ = 0x4;           // Mute mode request
7760:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_SBKRQ = 0x2;          // Send break request
7761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_ABRRQ = 0x1;          // Auto baud rate request
7762:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RQR_RESET_VALUE = 0x0;
7763:../../..\hal\include/device/stm32g431.h **** 
7764:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFT = 0x8000000;     // TXFT
7765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFT = 0x4000000;     // RXFT
7766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCBGT = 0x2000000;    // TCBGT
7767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFF = 0x1000000;     // RXFF
7768:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFE = 0x800000;      // TXFE
7769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_REACK = 0x400000;     // REACK
7770:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEACK = 0x200000;     // TEACK
7771:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_WUF = 0x100000;       // WUF
7772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RWU = 0x80000;        // RWU
7773:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SBKF = 0x40000;       // SBKF
7774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMF = 0x20000;        // CMF
7775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x10000;       // BUSY
7776:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRF = 0x8000;        // ABRF
7777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRE = 0x4000;        // ABRE
7778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_UDR = 0x2000;         // UDR
7779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOBF = 0x1000;        // EOBF
7780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RTOF = 0x800;         // RTOF
7781:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTS = 0x400;          // CTS
7782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTSIF = 0x200;        // CTSIF
7783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_LBDF = 0x100;         // LBDF
7784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x80;           // TXE
7785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // TC
7786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x20;          // RXNE
7787:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_IDLE = 0x10;          // IDLE
7788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ORE = 0x8;            // ORE
7789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NF = 0x4;             // NF
7790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FE = 0x2;             // FE
7791:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PE = 0x1;             // PE
7792:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
7793:../../..\hal\include/device/stm32g431.h **** 
7794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_WUCF = 0x100000;      // Wakeup from Stop mode clear flag
7795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMCF = 0x20000;       // Character match clear flag
7796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_UDRCF = 0x2000;       // UDRCF
7797:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_EOBCF = 0x1000;       // End of block clear flag
7798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RTOCF = 0x800;        // Receiver timeout clear flag
7799:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CTSCF = 0x200;        // CTS clear flag
7800:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_LBDCF = 0x100;        // LIN break detection clear flag
7801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCBGTCF = 0x80;       // TCBGTCF
7802:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCCF = 0x40;          // Transmission complete clear flag
7803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXFECF = 0x20;        // TXFECF
7804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_IDLECF = 0x10;        // Idle line detected clear flag
7805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ORECF = 0x8;          // Overrun error clear flag
7806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NCF = 0x4;            // Noise detected clear flag
7807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FECF = 0x2;           // Framing error clear flag
7808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECF = 0x1;           // Parity error clear flag
7809:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
7810:../../..\hal\include/device/stm32g431.h **** 
7811:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDR_RDR =                 // Receive data value (9 bits)
7813:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
7814:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDR_RESET_VALUE = 0x0;
7815:../../..\hal\include/device/stm32g431.h **** 
7816:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDR_TDR =                 // Transmit data value (9 bits)
7818:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
7819:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDR_RESET_VALUE = 0x0;
7820:../../..\hal\include/device/stm32g431.h **** 
7821:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRESC_PRESCALER =           // PRESCALER (4 bits)
7823:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7824:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRESC_RESET_VALUE = 0x0;
7825:../../..\hal\include/device/stm32g431.h **** 
7826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USART2 = 38; // USART2
7827:../../..\hal\include/device/stm32g431.h **** };
7828:../../..\hal\include/device/stm32g431.h **** 
7829:../../..\hal\include/device/stm32g431.h **** static usart2_t& USART2 = *reinterpret_cast<usart2_t*>(0x40004400);
7830:../../..\hal\include/device/stm32g431.h **** 
7831:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_USART2
7832:../../..\hal\include/device/stm32g431.h **** 
7833:../../..\hal\include/device/stm32g431.h **** 
7834:../../..\hal\include/device/stm32g431.h **** ////
7835:../../..\hal\include/device/stm32g431.h **** //
7836:../../..\hal\include/device/stm32g431.h **** //    Universal synchronous asynchronous receiver transmitter
7837:../../..\hal\include/device/stm32g431.h **** //
7838:../../..\hal\include/device/stm32g431.h **** ////
7839:../../..\hal\include/device/stm32g431.h **** 
7840:../../..\hal\include/device/stm32g431.h **** struct usart3_t
7841:../../..\hal\include/device/stm32g431.h **** {
7842:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
7843:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
7844:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Control register 3
7845:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Read-write] Baud rate register
7846:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GTPR;                 // [Read-write] Guard time and prescaler register
7847:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTOR;                 // [Read-write] Receiver timeout register
7848:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RQR;                  // [Write-only] Request register
7849:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt &amp; status register
7850:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt flag clear register
7851:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDR;                  // [Read-only] Receive data register
7852:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDR;                  // [Read-write] Transmit data register
7853:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRESC;                // [Read-write] USART prescaler register
7854:../../..\hal\include/device/stm32g431.h **** 
7855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXFFIE = 0x80000000;  // RXFFIE
7856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXFEIE = 0x40000000;  // TXFEIE
7857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_FIFOEN = 0x20000000;  // FIFOEN
7858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M1 = 0x10000000;      // M1
7859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_EOBIE = 0x8000000;    // End of Block interrupt enable
7860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RTOIE = 0x4000000;    // Receiver timeout interrupt enable
7861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT4 = 0x2000000;    // Driver Enable assertion time
7862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT3 = 0x1000000;    // DEAT3
7863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT2 = 0x800000;     // DEAT2
7864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT1 = 0x400000;     // DEAT1
7865:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT0 = 0x200000;     // DEAT0
7866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT4 = 0x100000;     // Driver Enable de-assertion time
7867:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT3 = 0x80000;      // DEDT3
7868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT2 = 0x40000;      // DEDT2
7869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT1 = 0x20000;      // DEDT1
7870:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT0 = 0x10000;      // DEDT0
7871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OVER8 = 0x8000;       // Oversampling mode
7872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMIE = 0x4000;        // Character match interrupt enable
7873:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MME = 0x2000;         // Mute mode enable
7874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M0 = 0x1000;          // Word length
7875:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WAKE = 0x800;         // Receiver wakeup method
7876:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PCE = 0x400;          // Parity control enable
7877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PS = 0x200;           // Parity selection
7878:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PEIE = 0x100;         // PE interrupt enable
7879:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXEIE = 0x80;         // interrupt enable
7880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transmission complete interrupt enable
7881:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXNEIE = 0x20;        // RXNE interrupt enable
7882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_IDLEIE = 0x10;        // IDLE interrupt enable
7883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TE = 0x8;             // Transmitter enable
7884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RE = 0x4;             // Receiver enable
7885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UESM = 0x2;           // USART enable in Stop mode
7886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UE = 0x1;             // USART enable
7887:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
7888:../../..\hal\include/device/stm32g431.h **** 
7889:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD4_7 =              // Address of the USART node (4 bits)
7891:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
7892:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD0_3 =              // Address of the USART node (4 bits)
7894:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
7895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RTOEN = 0x800000;     // Receiver timeout enable
7896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD1 = 0x400000;   // Auto baud rate mode
7897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD0 = 0x200000;   // ABRMOD0
7898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABREN = 0x100000;     // Auto baud rate enable
7899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MSBFIRST = 0x80000;   // Most significant bit first
7900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAINV = 0x40000;      // Binary data inversion
7901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXINV = 0x20000;      // TX pin active level inversion
7902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXINV = 0x10000;      // RX pin active level inversion
7903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SWAP = 0x8000;        // Swap TX/RX pins
7904:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LINEN = 0x4000;       // LIN mode enable
7905:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7906:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP =                // STOP bits (2 bits)
7907:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
7908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CLKEN = 0x800;        // Clock enable
7909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPOL = 0x400;         // Clock polarity
7910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPHA = 0x200;         // Clock phase
7911:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBCL = 0x100;         // Last bit clock pulse
7912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDIE = 0x40;         // LIN break detection interrupt enable
7913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDL = 0x20;          // LIN break detection length
7914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADDM7 = 0x10;         // 7-bit Address Detection/4-bit Address De
7915:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DIS_NSS = 0x8;        // DIS_NSS
7916:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SLVEN = 0x1;          // SLVEN
7917:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
7918:../../..\hal\include/device/stm32g431.h **** 
7919:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTCFG =             // TXFTCFG (3 bits)
7921:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
7922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTIE = 0x10000000;  // RXFTIE
7923:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTCFG =             // RXFTCFG (3 bits)
7925:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7>::value<X>();
7926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TCBGTIE = 0x1000000;  // TCBGTIE
7927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTIE = 0x800000;    // TXFTIE
7928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUFIE = 0x400000;     // Wakeup from Stop mode interrupt enable
7929:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7930:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUS =                 // Wakeup from Stop mode interrupt flag sel
7931:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
7932:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCARCNT =             // Smartcard auto-retry count (3 bits)
7934:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
7935:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEP = 0x8000;         // Driver enable polarity selection
7936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEM = 0x4000;         // Driver enable mode
7937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DDRE = 0x2000;        // DMA Disable on Reception Error
7938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_OVRDIS = 0x1000;      // Overrun Disable
7939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_ONEBIT = 0x800;       // One sample bit method enable
7940:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSIE = 0x400;        // CTS interrupt enable
7941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSE = 0x200;         // CTS enable
7942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RTSE = 0x100;         // RTS enable
7943:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAT = 0x80;          // DMA enable transmitter
7944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAR = 0x40;          // DMA enable receiver
7945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCEN = 0x20;          // Smartcard mode enable
7946:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_NACK = 0x10;          // Smartcard NACK enable
7947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_HDSEL = 0x8;          // Half-duplex selection
7948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IRLP = 0x4;           // Ir low-power
7949:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IREN = 0x2;           // Ir mode enable
7950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIE = 0x1;            // Error interrupt enable
7951:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x0;
7952:../../..\hal\include/device/stm32g431.h **** 
7953:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Mantissa =        // DIV_Mantissa (12 bits)
7955:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
7956:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Fraction =        // DIV_Fraction (4 bits)
7958:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
7959:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
7960:../../..\hal\include/device/stm32g431.h **** 
7961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_GT =                  // Guard time value (8 bits)
7963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
7964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_PSC =                 // Prescaler value (8 bits)
7966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
7967:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GTPR_RESET_VALUE = 0x0;
7968:../../..\hal\include/device/stm32g431.h **** 
7969:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_BLEN =                // Block Length (8 bits)
7971:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
7972:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
7973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_RTO =                 // Receiver timeout value (24 bits)
7974:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
7975:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTOR_RESET_VALUE = 0x0;
7976:../../..\hal\include/device/stm32g431.h **** 
7977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_TXFRQ = 0x10;         // Transmit data flush request
7978:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_RXFRQ = 0x8;          // Receive data flush request
7979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_MMRQ = 0x4;           // Mute mode request
7980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_SBKRQ = 0x2;          // Send break request
7981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_ABRRQ = 0x1;          // Auto baud rate request
7982:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RQR_RESET_VALUE = 0x0;
7983:../../..\hal\include/device/stm32g431.h **** 
7984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFT = 0x8000000;     // TXFT
7985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFT = 0x4000000;     // RXFT
7986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCBGT = 0x2000000;    // TCBGT
7987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFF = 0x1000000;     // RXFF
7988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFE = 0x800000;      // TXFE
7989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_REACK = 0x400000;     // REACK
7990:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEACK = 0x200000;     // TEACK
7991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_WUF = 0x100000;       // WUF
7992:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RWU = 0x80000;        // RWU
7993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SBKF = 0x40000;       // SBKF
7994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMF = 0x20000;        // CMF
7995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x10000;       // BUSY
7996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRF = 0x8000;        // ABRF
7997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRE = 0x4000;        // ABRE
7998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_UDR = 0x2000;         // UDR
7999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOBF = 0x1000;        // EOBF
8000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RTOF = 0x800;         // RTOF
8001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTS = 0x400;          // CTS
8002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTSIF = 0x200;        // CTSIF
8003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_LBDF = 0x100;         // LBDF
8004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x80;           // TXE
8005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // TC
8006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x20;          // RXNE
8007:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_IDLE = 0x10;          // IDLE
8008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ORE = 0x8;            // ORE
8009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NF = 0x4;             // NF
8010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FE = 0x2;             // FE
8011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PE = 0x1;             // PE
8012:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
8013:../../..\hal\include/device/stm32g431.h **** 
8014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_WUCF = 0x100000;      // Wakeup from Stop mode clear flag
8015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMCF = 0x20000;       // Character match clear flag
8016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_UDRCF = 0x2000;       // UDRCF
8017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_EOBCF = 0x1000;       // End of block clear flag
8018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RTOCF = 0x800;        // Receiver timeout clear flag
8019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CTSCF = 0x200;        // CTS clear flag
8020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_LBDCF = 0x100;        // LIN break detection clear flag
8021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCBGTCF = 0x80;       // TCBGTCF
8022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCCF = 0x40;          // Transmission complete clear flag
8023:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXFECF = 0x20;        // TXFECF
8024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_IDLECF = 0x10;        // Idle line detected clear flag
8025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ORECF = 0x8;          // Overrun error clear flag
8026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NCF = 0x4;            // Noise detected clear flag
8027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FECF = 0x2;           // Framing error clear flag
8028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECF = 0x1;           // Parity error clear flag
8029:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
8030:../../..\hal\include/device/stm32g431.h **** 
8031:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDR_RDR =                 // Receive data value (9 bits)
8033:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8034:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDR_RESET_VALUE = 0x0;
8035:../../..\hal\include/device/stm32g431.h **** 
8036:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDR_TDR =                 // Transmit data value (9 bits)
8038:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8039:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDR_RESET_VALUE = 0x0;
8040:../../..\hal\include/device/stm32g431.h **** 
8041:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRESC_PRESCALER =           // PRESCALER (4 bits)
8043:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
8044:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRESC_RESET_VALUE = 0x0;
8045:../../..\hal\include/device/stm32g431.h **** 
8046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USART3 = 39; // USART3
8047:../../..\hal\include/device/stm32g431.h **** };
8048:../../..\hal\include/device/stm32g431.h **** 
8049:../../..\hal\include/device/stm32g431.h **** static usart3_t& USART3 = *reinterpret_cast<usart3_t*>(0x40004800);
8050:../../..\hal\include/device/stm32g431.h **** 
8051:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_USART3
8052:../../..\hal\include/device/stm32g431.h **** 
8053:../../..\hal\include/device/stm32g431.h **** 
8054:../../..\hal\include/device/stm32g431.h **** ////
8055:../../..\hal\include/device/stm32g431.h **** //
8056:../../..\hal\include/device/stm32g431.h **** //    Universal synchronous asynchronous receiver transmitter
8057:../../..\hal\include/device/stm32g431.h **** //
8058:../../..\hal\include/device/stm32g431.h **** ////
8059:../../..\hal\include/device/stm32g431.h **** 
8060:../../..\hal\include/device/stm32g431.h **** struct uart4_t
8061:../../..\hal\include/device/stm32g431.h **** {
8062:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
8063:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
8064:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Control register 3
8065:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Read-write] Baud rate register
8066:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GTPR;                 // [Read-write] Guard time and prescaler register
8067:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTOR;                 // [Read-write] Receiver timeout register
8068:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RQR;                  // [Write-only] Request register
8069:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt &amp; status register
8070:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt flag clear register
8071:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDR;                  // [Read-only] Receive data register
8072:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDR;                  // [Read-write] Transmit data register
8073:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRESC;                // [Read-write] USART prescaler register
8074:../../..\hal\include/device/stm32g431.h **** 
8075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXFFIE = 0x80000000;  // RXFFIE
8076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXFEIE = 0x40000000;  // TXFEIE
8077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_FIFOEN = 0x20000000;  // FIFOEN
8078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M1 = 0x10000000;      // M1
8079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_EOBIE = 0x8000000;    // End of Block interrupt enable
8080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RTOIE = 0x4000000;    // Receiver timeout interrupt enable
8081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT4 = 0x2000000;    // Driver Enable assertion time
8082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT3 = 0x1000000;    // DEAT3
8083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT2 = 0x800000;     // DEAT2
8084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT1 = 0x400000;     // DEAT1
8085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT0 = 0x200000;     // DEAT0
8086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT4 = 0x100000;     // Driver Enable de-assertion time
8087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT3 = 0x80000;      // DEDT3
8088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT2 = 0x40000;      // DEDT2
8089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT1 = 0x20000;      // DEDT1
8090:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT0 = 0x10000;      // DEDT0
8091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_OVER8 = 0x8000;       // Oversampling mode
8092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMIE = 0x4000;        // Character match interrupt enable
8093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MME = 0x2000;         // Mute mode enable
8094:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M0 = 0x1000;          // Word length
8095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WAKE = 0x800;         // Receiver wakeup method
8096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PCE = 0x400;          // Parity control enable
8097:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PS = 0x200;           // Parity selection
8098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PEIE = 0x100;         // PE interrupt enable
8099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXEIE = 0x80;         // interrupt enable
8100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transmission complete interrupt enable
8101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXNEIE = 0x20;        // RXNE interrupt enable
8102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_IDLEIE = 0x10;        // IDLE interrupt enable
8103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TE = 0x8;             // Transmitter enable
8104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RE = 0x4;             // Receiver enable
8105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UESM = 0x2;           // USART enable in Stop mode
8106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UE = 0x1;             // USART enable
8107:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
8108:../../..\hal\include/device/stm32g431.h **** 
8109:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD4_7 =              // Address of the USART node (4 bits)
8111:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
8112:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD0_3 =              // Address of the USART node (4 bits)
8114:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
8115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RTOEN = 0x800000;     // Receiver timeout enable
8116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD1 = 0x400000;   // Auto baud rate mode
8117:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABRMOD0 = 0x200000;   // ABRMOD0
8118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ABREN = 0x100000;     // Auto baud rate enable
8119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MSBFIRST = 0x80000;   // Most significant bit first
8120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAINV = 0x40000;      // Binary data inversion
8121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXINV = 0x20000;      // TX pin active level inversion
8122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXINV = 0x10000;      // RX pin active level inversion
8123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SWAP = 0x8000;        // Swap TX/RX pins
8124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LINEN = 0x4000;       // LIN mode enable
8125:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP =                // STOP bits (2 bits)
8127:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
8128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CLKEN = 0x800;        // Clock enable
8129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPOL = 0x400;         // Clock polarity
8130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_CPHA = 0x200;         // Clock phase
8131:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBCL = 0x100;         // Last bit clock pulse
8132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDIE = 0x40;         // LIN break detection interrupt enable
8133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LBDL = 0x20;          // LIN break detection length
8134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADDM7 = 0x10;         // 7-bit Address Detection/4-bit Address De
8135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DIS_NSS = 0x8;        // DIS_NSS
8136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SLVEN = 0x1;          // SLVEN
8137:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
8138:../../..\hal\include/device/stm32g431.h **** 
8139:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTCFG =             // TXFTCFG (3 bits)
8141:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
8142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTIE = 0x10000000;  // RXFTIE
8143:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTCFG =             // RXFTCFG (3 bits)
8145:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7>::value<X>();
8146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TCBGTIE = 0x1000000;  // TCBGTIE
8147:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTIE = 0x800000;    // TXFTIE
8148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUFIE = 0x400000;     // Wakeup from Stop mode interrupt enable
8149:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUS =                 // Wakeup from Stop mode interrupt flag sel
8151:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
8152:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCARCNT =             // Smartcard auto-retry count (3 bits)
8154:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
8155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEP = 0x8000;         // Driver enable polarity selection
8156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEM = 0x4000;         // Driver enable mode
8157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DDRE = 0x2000;        // DMA Disable on Reception Error
8158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_OVRDIS = 0x1000;      // Overrun Disable
8159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_ONEBIT = 0x800;       // One sample bit method enable
8160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSIE = 0x400;        // CTS interrupt enable
8161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSE = 0x200;         // CTS enable
8162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RTSE = 0x100;         // RTS enable
8163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAT = 0x80;          // DMA enable transmitter
8164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAR = 0x40;          // DMA enable receiver
8165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_SCEN = 0x20;          // Smartcard mode enable
8166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_NACK = 0x10;          // Smartcard NACK enable
8167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_HDSEL = 0x8;          // Half-duplex selection
8168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IRLP = 0x4;           // Ir low-power
8169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_IREN = 0x2;           // Ir mode enable
8170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIE = 0x1;            // Error interrupt enable
8171:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x0;
8172:../../..\hal\include/device/stm32g431.h **** 
8173:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Mantissa =        // DIV_Mantissa (12 bits)
8175:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
8176:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_DIV_Fraction =        // DIV_Fraction (4 bits)
8178:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
8179:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
8180:../../..\hal\include/device/stm32g431.h **** 
8181:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_GT =                  // Guard time value (8 bits)
8183:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
8184:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GTPR_PSC =                 // Prescaler value (8 bits)
8186:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
8187:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GTPR_RESET_VALUE = 0x0;
8188:../../..\hal\include/device/stm32g431.h **** 
8189:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_BLEN =                // Block Length (8 bits)
8191:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
8192:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTOR_RTO =                 // Receiver timeout value (24 bits)
8194:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
8195:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTOR_RESET_VALUE = 0x0;
8196:../../..\hal\include/device/stm32g431.h **** 
8197:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_TXFRQ = 0x10;         // Transmit data flush request
8198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_RXFRQ = 0x8;          // Receive data flush request
8199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_MMRQ = 0x4;           // Mute mode request
8200:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_SBKRQ = 0x2;          // Send break request
8201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_ABRRQ = 0x1;          // Auto baud rate request
8202:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RQR_RESET_VALUE = 0x0;
8203:../../..\hal\include/device/stm32g431.h **** 
8204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFT = 0x8000000;     // TXFT
8205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFT = 0x4000000;     // RXFT
8206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCBGT = 0x2000000;    // TCBGT
8207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFF = 0x1000000;     // RXFF
8208:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFE = 0x800000;      // TXFE
8209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_REACK = 0x400000;     // REACK
8210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEACK = 0x200000;     // TEACK
8211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_WUF = 0x100000;       // WUF
8212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RWU = 0x80000;        // RWU
8213:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SBKF = 0x40000;       // SBKF
8214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMF = 0x20000;        // CMF
8215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x10000;       // BUSY
8216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRF = 0x8000;        // ABRF
8217:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ABRE = 0x4000;        // ABRE
8218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_UDR = 0x2000;         // UDR
8219:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOBF = 0x1000;        // EOBF
8220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RTOF = 0x800;         // RTOF
8221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTS = 0x400;          // CTS
8222:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTSIF = 0x200;        // CTSIF
8223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_LBDF = 0x100;         // LBDF
8224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x80;           // TXE
8225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // TC
8226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x20;          // RXNE
8227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_IDLE = 0x10;          // IDLE
8228:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ORE = 0x8;            // ORE
8229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NF = 0x4;             // NF
8230:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FE = 0x2;             // FE
8231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PE = 0x1;             // PE
8232:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0xc0;
8233:../../..\hal\include/device/stm32g431.h **** 
8234:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_WUCF = 0x100000;      // Wakeup from Stop mode clear flag
8235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMCF = 0x20000;       // Character match clear flag
8236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_UDRCF = 0x2000;       // UDRCF
8237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_EOBCF = 0x1000;       // End of block clear flag
8238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RTOCF = 0x800;        // Receiver timeout clear flag
8239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CTSCF = 0x200;        // CTS clear flag
8240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_LBDCF = 0x100;        // LIN break detection clear flag
8241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCBGTCF = 0x80;       // TCBGTCF
8242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCCF = 0x40;          // Transmission complete clear flag
8243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXFECF = 0x20;        // TXFECF
8244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_IDLECF = 0x10;        // Idle line detected clear flag
8245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ORECF = 0x8;          // Overrun error clear flag
8246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NCF = 0x4;            // Noise detected clear flag
8247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FECF = 0x2;           // Framing error clear flag
8248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECF = 0x1;           // Parity error clear flag
8249:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
8250:../../..\hal\include/device/stm32g431.h **** 
8251:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDR_RDR =                 // Receive data value (9 bits)
8253:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8254:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDR_RESET_VALUE = 0x0;
8255:../../..\hal\include/device/stm32g431.h **** 
8256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDR_TDR =                 // Transmit data value (9 bits)
8258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8259:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDR_RESET_VALUE = 0x0;
8260:../../..\hal\include/device/stm32g431.h **** 
8261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRESC_PRESCALER =           // PRESCALER (4 bits)
8263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
8264:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRESC_RESET_VALUE = 0x0;
8265:../../..\hal\include/device/stm32g431.h **** 
8266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t UART4 = 52; // UART4
8267:../../..\hal\include/device/stm32g431.h **** };
8268:../../..\hal\include/device/stm32g431.h **** 
8269:../../..\hal\include/device/stm32g431.h **** static uart4_t& UART4 = *reinterpret_cast<uart4_t*>(0x40004c00);
8270:../../..\hal\include/device/stm32g431.h **** 
8271:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_UART4
8272:../../..\hal\include/device/stm32g431.h **** 
8273:../../..\hal\include/device/stm32g431.h **** 
8274:../../..\hal\include/device/stm32g431.h **** ////
8275:../../..\hal\include/device/stm32g431.h **** //
8276:../../..\hal\include/device/stm32g431.h **** //    Universal synchronous asynchronous receiver transmitter
8277:../../..\hal\include/device/stm32g431.h **** //
8278:../../..\hal\include/device/stm32g431.h **** ////
8279:../../..\hal\include/device/stm32g431.h **** 
8280:../../..\hal\include/device/stm32g431.h **** struct lpuart1_t
8281:../../..\hal\include/device/stm32g431.h **** {
8282:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] Control register 1
8283:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] Control register 2
8284:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR3;                  // [Read-write] Control register 3
8285:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BRR;                  // [Read-write] Baud rate register
8286:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
8287:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RQR;                  // [Write-only] Request register
8288:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] Interrupt &amp; status register
8289:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Write-only] Interrupt flag clear register
8290:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDR;                  // [Read-only] Receive data register
8291:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDR;                  // [Read-write] Transmit data register
8292:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRESC;                // [Read-write] Prescaler register
8293:../../..\hal\include/device/stm32g431.h **** 
8294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXFFIE = 0x80000000;  // RXFFIE
8295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXFEIE = 0x40000000;  // TXFEIE
8296:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_FIFOEN = 0x20000000;  // FIFOEN
8297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M1 = 0x10000000;      // Word length
8298:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT4 = 0x2000000;    // Driver Enable assertion time
8299:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT3 = 0x1000000;    // DEAT3
8300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT2 = 0x800000;     // DEAT2
8301:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT1 = 0x400000;     // DEAT1
8302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEAT0 = 0x200000;     // DEAT0
8303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT4 = 0x100000;     // Driver Enable de-assertion time
8304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT3 = 0x80000;      // DEDT3
8305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT2 = 0x40000;      // DEDT2
8306:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT1 = 0x20000;      // DEDT1
8307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DEDT0 = 0x10000;      // DEDT0
8308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CMIE = 0x4000;        // Character match interrupt enable
8309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MME = 0x2000;         // Mute mode enable
8310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_M0 = 0x1000;          // Word length
8311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_WAKE = 0x800;         // Receiver wakeup method
8312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PCE = 0x400;          // Parity control enable
8313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PS = 0x200;           // Parity selection
8314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_PEIE = 0x100;         // PE interrupt enable
8315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TXEIE = 0x80;         // interrupt enable
8316:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TCIE = 0x40;          // Transmission complete interrupt enable
8317:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXNEIE = 0x20;        // RXNE interrupt enable
8318:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_IDLEIE = 0x10;        // IDLE interrupt enable
8319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TE = 0x8;             // Transmitter enable
8320:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RE = 0x4;             // Receiver enable
8321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UESM = 0x2;           // USART enable in Stop mode
8322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_UE = 0x1;             // USART enable
8323:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
8324:../../..\hal\include/device/stm32g431.h **** 
8325:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8326:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD4_7 =              // Address of the USART node (4 bits)
8327:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
8328:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADD0_3 =              // Address of the USART node (4 bits)
8330:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
8331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_MSBFIRST = 0x80000;   // Most significant bit first
8332:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAINV = 0x40000;      // Binary data inversion
8333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXINV = 0x20000;      // TX pin active level inversion
8334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXINV = 0x10000;      // RX pin active level inversion
8335:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SWAP = 0x8000;        // Swap TX/RX pins
8336:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_STOP =                // STOP bits (2 bits)
8338:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
8339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ADDM7 = 0x10;         // 7-bit Address Detection/4-bit Address De
8340:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
8341:../../..\hal\include/device/stm32g431.h **** 
8342:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTCFG =             // TXFTCFG (3 bits)
8344:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
8345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTIE = 0x10000000;  // RXFTIE
8346:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RXFTCFG =             // RXFTCFG (3 bits)
8348:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7>::value<X>();
8349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_TXFTIE = 0x800000;    // TXFTIE
8350:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUFIE = 0x400000;     // Wakeup from Stop mode interrupt enable
8351:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_WUS =                 // Wakeup from Stop mode interrupt flag sel
8353:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
8354:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEP = 0x8000;         // Driver enable polarity selection
8355:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DEM = 0x4000;         // Driver enable mode
8356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DDRE = 0x2000;        // DMA Disable on Reception Error
8357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_OVRDIS = 0x1000;      // Overrun Disable
8358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSIE = 0x400;        // CTS interrupt enable
8359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_CTSE = 0x200;         // CTS enable
8360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_RTSE = 0x100;         // RTS enable
8361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAT = 0x80;          // DMA enable transmitter
8362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_DMAR = 0x40;          // DMA enable receiver
8363:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_HDSEL = 0x8;          // Half-duplex selection
8364:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR3_EIE = 0x1;            // Error interrupt enable
8365:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR3_RESET_VALUE = 0x0;
8366:../../..\hal\include/device/stm32g431.h **** 
8367:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BRR_BRR =                 // BRR (20 bits)
8369:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfffff>::value<X>();
8370:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BRR_RESET_VALUE = 0x0;
8371:../../..\hal\include/device/stm32g431.h **** 
8372:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_TXFRQ = 0x10;         // TXFRQ
8373:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_RXFRQ = 0x8;          // Receive data flush request
8374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_MMRQ = 0x4;           // Mute mode request
8375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RQR_SBKRQ = 0x2;          // Send break request
8376:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RQR_RESET_VALUE = 0x0;
8377:../../..\hal\include/device/stm32g431.h **** 
8378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFT = 0x8000000;     // TXFT
8379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFT = 0x4000000;     // RXFT
8380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXFF = 0x1000000;     // RXFF
8381:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXFE = 0x800000;      // TXFE
8382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_REACK = 0x400000;     // REACK
8383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEACK = 0x200000;     // TEACK
8384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_WUF = 0x100000;       // WUF
8385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RWU = 0x80000;        // RWU
8386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SBKF = 0x40000;       // SBKF
8387:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CMF = 0x20000;        // CMF
8388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_BUSY = 0x10000;       // BUSY
8389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTS = 0x400;          // CTS
8390:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_CTSIF = 0x200;        // CTSIF
8391:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TXE = 0x80;           // TXE
8392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TC = 0x40;            // TC
8393:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_RXNE = 0x20;          // RXNE
8394:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_IDLE = 0x10;          // IDLE
8395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ORE = 0x8;            // ORE
8396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_NF = 0x4;             // NF
8397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FE = 0x2;             // FE
8398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_PE = 0x1;             // PE
8399:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0xc0;
8400:../../..\hal\include/device/stm32g431.h **** 
8401:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_WUCF = 0x100000;      // Wakeup from Stop mode clear flag
8402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CMCF = 0x20000;       // Character match clear flag
8403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_CTSCF = 0x200;        // CTS clear flag
8404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TCCF = 0x40;          // Transmission complete clear flag
8405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_IDLECF = 0x10;        // Idle line detected clear flag
8406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ORECF = 0x8;          // Overrun error clear flag
8407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_NCF = 0x4;            // Noise detected clear flag
8408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FECF = 0x2;           // Framing error clear flag
8409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_PECF = 0x1;           // Parity error clear flag
8410:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
8411:../../..\hal\include/device/stm32g431.h **** 
8412:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDR_RDR =                 // Receive data value (9 bits)
8414:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8415:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDR_RESET_VALUE = 0x0;
8416:../../..\hal\include/device/stm32g431.h **** 
8417:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDR_TDR =                 // Transmit data value (9 bits)
8419:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
8420:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDR_RESET_VALUE = 0x0;
8421:../../..\hal\include/device/stm32g431.h **** 
8422:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRESC_PRESCALER =           // PRESCALER (4 bits)
8424:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
8425:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRESC_RESET_VALUE = 0x0;
8426:../../..\hal\include/device/stm32g431.h **** 
8427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t LPTIM1 = 49; // LPTIM1
8428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t LPUART = 91; // LPUART
8429:../../..\hal\include/device/stm32g431.h **** };
8430:../../..\hal\include/device/stm32g431.h **** 
8431:../../..\hal\include/device/stm32g431.h **** static lpuart1_t& LPUART1 = *reinterpret_cast<lpuart1_t*>(0x40008000);
8432:../../..\hal\include/device/stm32g431.h **** 
8433:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_LPUART1
8434:../../..\hal\include/device/stm32g431.h **** 
8435:../../..\hal\include/device/stm32g431.h **** 
8436:../../..\hal\include/device/stm32g431.h **** ////
8437:../../..\hal\include/device/stm32g431.h **** //
8438:../../..\hal\include/device/stm32g431.h **** //    Serial peripheral interface/Inter-IC sound
8439:../../..\hal\include/device/stm32g431.h **** //
8440:../../..\hal\include/device/stm32g431.h **** ////
8441:../../..\hal\include/device/stm32g431.h **** 
8442:../../..\hal\include/device/stm32g431.h **** struct spi1_t
8443:../../..\hal\include/device/stm32g431.h **** {
8444:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
8445:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
8446:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // status register
8447:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-write] data register
8448:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CRCPR;                // [Read-write] CRC polynomial register
8449:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXCRCR;               // [Read-only] RX CRC register
8450:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXCRCR;               // [Read-only] TX CRC register
8451:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SCFGR;              // [Read-write] configuration register
8452:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SPR;                // [Read-write] prescaler register
8453:../../..\hal\include/device/stm32g431.h **** 
8454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIMODE = 0x8000;    // Bidirectional data mode enable
8455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIOE = 0x4000;      // Output enable in bidirectional mode
8456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCEN = 0x2000;       // Hardware CRC calculation enable
8457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCNEXT = 0x1000;     // CRC transfer next
8458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DFF = 0x800;          // Data frame format
8459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXONLY = 0x400;       // Receive only
8460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSM = 0x200;          // Software slave management
8461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSI = 0x100;          // Internal slave select
8462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_LSBFIRST = 0x80;      // Frame format
8463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SPE = 0x40;           // SPI enable
8464:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BR =                  // Baud rate control (3 bits)
8466:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
8467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MSTR = 0x4;           // Master selection
8468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPOL = 0x2;           // Clock polarity
8469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPHA = 0x1;           // Clock phase
8470:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
8471:../../..\hal\include/device/stm32g431.h **** 
8472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXDMAEN = 0x1;        // Rx buffer DMA enable
8473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXDMAEN = 0x2;        // Tx buffer DMA enable
8474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SSOE = 0x4;           // SS output enable
8475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NSSP = 0x8;           // NSS pulse management
8476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRF = 0x10;           // Frame format
8477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ERRIE = 0x20;         // Error interrupt enable
8478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXNEIE = 0x40;        // RX buffer not empty interrupt enable
8479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXEIE = 0x80;         // Tx buffer empty interrupt enable
8480:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DS =                  // Data size (4 bits)
8482:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
8483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRXTH = 0x1000;       // FIFO reception threshold
8484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_RX = 0x2000;     // Last DMA transfer for reception
8485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_TX = 0x4000;     // Last DMA transfer for transmission
8486:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x700;
8487:../../..\hal\include/device/stm32g431.h **** 
8488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXNE = 0x1;           // Receive buffer not empty, Read-only
8489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXE = 0x2;            // Transmit buffer empty, Read-only
8490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CRCERR = 0x10;        // CRC error flag, Read-write
8491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_MODF = 0x20;          // Mode fault, Read-only
8492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OVR = 0x40;           // Overrun flag, Read-only
8493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BSY = 0x80;           // Busy flag, Read-only
8494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIFRFE = 0x100;       // TI frame format error, Read-only
8495:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8496:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FRLVL =               // FIFO reception level (2 bits), Read-only
8497:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
8498:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FTLVL =               // FIFO transmission level (2 bits), Read-on
8500:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x3>::value<X>();
8501:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x2;
8502:../../..\hal\include/device/stm32g431.h **** 
8503:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_DR =                  // Data register (16 bits)
8505:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8506:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
8507:../../..\hal\include/device/stm32g431.h **** 
8508:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRCPR_CRCPOLY =             // CRC polynomial register (16 bits)
8510:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8511:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CRCPR_RESET_VALUE = 0x7;
8512:../../..\hal\include/device/stm32g431.h **** 
8513:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXCRCR_RxCRC =               // Rx CRC register (16 bits)
8515:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8516:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXCRCR_RESET_VALUE = 0x0;
8517:../../..\hal\include/device/stm32g431.h **** 
8518:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXCRCR_TxCRC =               // Tx CRC register (16 bits)
8520:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8521:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXCRCR_RESET_VALUE = 0x0;
8522:../../..\hal\include/device/stm32g431.h **** 
8523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CHLEN = 0x1;          // CHLEN
8524:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_DATLEN =              // DATLEN (2 bits)
8526:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
8527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CKPOL = 0x8;          // CKPOL
8528:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SSTD =              // I2SSTD (2 bits)
8530:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
8531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_PCMSYNC = 0x80;       // PCMSYNC
8532:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SCFG =              // I2SCFG (2 bits)
8534:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
8535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SE = 0x400;         // I2SE
8536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SMOD = 0x800;       // I2SMOD
8537:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SCFGR_RESET_VALUE = 0x0;
8538:../../..\hal\include/device/stm32g431.h **** 
8539:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_I2SDIV =              // I2SDIV (8 bits)
8541:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
8542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_ODD = 0x100;          // ODD
8543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_MCKOE = 0x200;        // MCKOE
8544:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SPR_RESET_VALUE = 0x2;
8545:../../..\hal\include/device/stm32g431.h **** 
8546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t SPI1 = 35; // SPI1
8547:../../..\hal\include/device/stm32g431.h **** };
8548:../../..\hal\include/device/stm32g431.h **** 
8549:../../..\hal\include/device/stm32g431.h **** static spi1_t& SPI1 = *reinterpret_cast<spi1_t*>(0x40013000);
8550:../../..\hal\include/device/stm32g431.h **** 
8551:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SPI1
8552:../../..\hal\include/device/stm32g431.h **** 
8553:../../..\hal\include/device/stm32g431.h **** 
8554:../../..\hal\include/device/stm32g431.h **** ////
8555:../../..\hal\include/device/stm32g431.h **** //
8556:../../..\hal\include/device/stm32g431.h **** //    Serial peripheral interface/Inter-IC sound
8557:../../..\hal\include/device/stm32g431.h **** //
8558:../../..\hal\include/device/stm32g431.h **** ////
8559:../../..\hal\include/device/stm32g431.h **** 
8560:../../..\hal\include/device/stm32g431.h **** struct spi3_t
8561:../../..\hal\include/device/stm32g431.h **** {
8562:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
8563:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
8564:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // status register
8565:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-write] data register
8566:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CRCPR;                // [Read-write] CRC polynomial register
8567:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXCRCR;               // [Read-only] RX CRC register
8568:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXCRCR;               // [Read-only] TX CRC register
8569:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SCFGR;              // [Read-write] configuration register
8570:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SPR;                // [Read-write] prescaler register
8571:../../..\hal\include/device/stm32g431.h **** 
8572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIMODE = 0x8000;    // Bidirectional data mode enable
8573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIOE = 0x4000;      // Output enable in bidirectional mode
8574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCEN = 0x2000;       // Hardware CRC calculation enable
8575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCNEXT = 0x1000;     // CRC transfer next
8576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DFF = 0x800;          // Data frame format
8577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXONLY = 0x400;       // Receive only
8578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSM = 0x200;          // Software slave management
8579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSI = 0x100;          // Internal slave select
8580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_LSBFIRST = 0x80;      // Frame format
8581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SPE = 0x40;           // SPI enable
8582:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BR =                  // Baud rate control (3 bits)
8584:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
8585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MSTR = 0x4;           // Master selection
8586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPOL = 0x2;           // Clock polarity
8587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPHA = 0x1;           // Clock phase
8588:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
8589:../../..\hal\include/device/stm32g431.h **** 
8590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXDMAEN = 0x1;        // Rx buffer DMA enable
8591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXDMAEN = 0x2;        // Tx buffer DMA enable
8592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SSOE = 0x4;           // SS output enable
8593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NSSP = 0x8;           // NSS pulse management
8594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRF = 0x10;           // Frame format
8595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ERRIE = 0x20;         // Error interrupt enable
8596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXNEIE = 0x40;        // RX buffer not empty interrupt enable
8597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXEIE = 0x80;         // Tx buffer empty interrupt enable
8598:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DS =                  // Data size (4 bits)
8600:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
8601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRXTH = 0x1000;       // FIFO reception threshold
8602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_RX = 0x2000;     // Last DMA transfer for reception
8603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_TX = 0x4000;     // Last DMA transfer for transmission
8604:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x700;
8605:../../..\hal\include/device/stm32g431.h **** 
8606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXNE = 0x1;           // Receive buffer not empty, Read-only
8607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXE = 0x2;            // Transmit buffer empty, Read-only
8608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CRCERR = 0x10;        // CRC error flag, Read-write
8609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_MODF = 0x20;          // Mode fault, Read-only
8610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OVR = 0x40;           // Overrun flag, Read-only
8611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BSY = 0x80;           // Busy flag, Read-only
8612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIFRFE = 0x100;       // TI frame format error, Read-only
8613:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FRLVL =               // FIFO reception level (2 bits), Read-only
8615:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
8616:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FTLVL =               // FIFO transmission level (2 bits), Read-on
8618:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x3>::value<X>();
8619:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x2;
8620:../../..\hal\include/device/stm32g431.h **** 
8621:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_DR =                  // Data register (16 bits)
8623:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8624:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
8625:../../..\hal\include/device/stm32g431.h **** 
8626:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRCPR_CRCPOLY =             // CRC polynomial register (16 bits)
8628:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8629:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CRCPR_RESET_VALUE = 0x7;
8630:../../..\hal\include/device/stm32g431.h **** 
8631:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXCRCR_RxCRC =               // Rx CRC register (16 bits)
8633:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8634:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXCRCR_RESET_VALUE = 0x0;
8635:../../..\hal\include/device/stm32g431.h **** 
8636:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXCRCR_TxCRC =               // Tx CRC register (16 bits)
8638:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8639:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXCRCR_RESET_VALUE = 0x0;
8640:../../..\hal\include/device/stm32g431.h **** 
8641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CHLEN = 0x1;          // CHLEN
8642:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_DATLEN =              // DATLEN (2 bits)
8644:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
8645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CKPOL = 0x8;          // CKPOL
8646:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SSTD =              // I2SSTD (2 bits)
8648:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
8649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_PCMSYNC = 0x80;       // PCMSYNC
8650:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SCFG =              // I2SCFG (2 bits)
8652:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
8653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SE = 0x400;         // I2SE
8654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SMOD = 0x800;       // I2SMOD
8655:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SCFGR_RESET_VALUE = 0x0;
8656:../../..\hal\include/device/stm32g431.h **** 
8657:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_I2SDIV =              // I2SDIV (8 bits)
8659:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
8660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_ODD = 0x100;          // ODD
8661:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_MCKOE = 0x200;        // MCKOE
8662:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SPR_RESET_VALUE = 0x2;
8663:../../..\hal\include/device/stm32g431.h **** 
8664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t SPI3 = 51; // SPI3
8665:../../..\hal\include/device/stm32g431.h **** };
8666:../../..\hal\include/device/stm32g431.h **** 
8667:../../..\hal\include/device/stm32g431.h **** static spi3_t& SPI3 = *reinterpret_cast<spi3_t*>(0x40003c00);
8668:../../..\hal\include/device/stm32g431.h **** 
8669:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SPI3
8670:../../..\hal\include/device/stm32g431.h **** 
8671:../../..\hal\include/device/stm32g431.h **** 
8672:../../..\hal\include/device/stm32g431.h **** ////
8673:../../..\hal\include/device/stm32g431.h **** //
8674:../../..\hal\include/device/stm32g431.h **** //    Serial peripheral interface/Inter-IC sound
8675:../../..\hal\include/device/stm32g431.h **** //
8676:../../..\hal\include/device/stm32g431.h **** ////
8677:../../..\hal\include/device/stm32g431.h **** 
8678:../../..\hal\include/device/stm32g431.h **** struct spi2_t
8679:../../..\hal\include/device/stm32g431.h **** {
8680:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
8681:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
8682:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // status register
8683:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-write] data register
8684:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CRCPR;                // [Read-write] CRC polynomial register
8685:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXCRCR;               // [Read-only] RX CRC register
8686:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXCRCR;               // [Read-only] TX CRC register
8687:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SCFGR;              // [Read-write] configuration register
8688:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    I2SPR;                // [Read-write] prescaler register
8689:../../..\hal\include/device/stm32g431.h **** 
8690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIMODE = 0x8000;    // Bidirectional data mode enable
8691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BIDIOE = 0x4000;      // Output enable in bidirectional mode
8692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCEN = 0x2000;       // Hardware CRC calculation enable
8693:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CRCNEXT = 0x1000;     // CRC transfer next
8694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_DFF = 0x800;          // Data frame format
8695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_RXONLY = 0x400;       // Receive only
8696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSM = 0x200;          // Software slave management
8697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SSI = 0x100;          // Internal slave select
8698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_LSBFIRST = 0x80;      // Frame format
8699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_SPE = 0x40;           // SPI enable
8700:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_BR =                  // Baud rate control (3 bits)
8702:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
8703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_MSTR = 0x4;           // Master selection
8704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPOL = 0x2;           // Clock polarity
8705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_CPHA = 0x1;           // Clock phase
8706:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0x0;
8707:../../..\hal\include/device/stm32g431.h **** 
8708:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXDMAEN = 0x1;        // Rx buffer DMA enable
8709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXDMAEN = 0x2;        // Tx buffer DMA enable
8710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_SSOE = 0x4;           // SS output enable
8711:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_NSSP = 0x8;           // NSS pulse management
8712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRF = 0x10;           // Frame format
8713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_ERRIE = 0x20;         // Error interrupt enable
8714:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_RXNEIE = 0x40;        // RX buffer not empty interrupt enable
8715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TXEIE = 0x80;         // Tx buffer empty interrupt enable
8716:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_DS =                  // Data size (4 bits)
8718:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
8719:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_FRXTH = 0x1000;       // FIFO reception threshold
8720:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_RX = 0x2000;     // Last DMA transfer for reception
8721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_LDMA_TX = 0x4000;     // Last DMA transfer for transmission
8722:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x700;
8723:../../..\hal\include/device/stm32g431.h **** 
8724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXNE = 0x1;           // Receive buffer not empty, Read-only
8725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXE = 0x2;            // Transmit buffer empty, Read-only
8726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_CRCERR = 0x10;        // CRC error flag, Read-write
8727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_MODF = 0x20;          // Mode fault, Read-only
8728:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OVR = 0x40;           // Overrun flag, Read-only
8729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_BSY = 0x80;           // Busy flag, Read-only
8730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TIFRFE = 0x100;       // TI frame format error, Read-only
8731:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8732:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FRLVL =               // FIFO reception level (2 bits), Read-only
8733:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
8734:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8735:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FTLVL =               // FIFO transmission level (2 bits), Read-on
8736:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x3>::value<X>();
8737:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x2;
8738:../../..\hal\include/device/stm32g431.h **** 
8739:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8740:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_DR =                  // Data register (16 bits)
8741:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8742:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
8743:../../..\hal\include/device/stm32g431.h **** 
8744:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CRCPR_CRCPOLY =             // CRC polynomial register (16 bits)
8746:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8747:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CRCPR_RESET_VALUE = 0x7;
8748:../../..\hal\include/device/stm32g431.h **** 
8749:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXCRCR_RxCRC =               // Rx CRC register (16 bits)
8751:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8752:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXCRCR_RESET_VALUE = 0x0;
8753:../../..\hal\include/device/stm32g431.h **** 
8754:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXCRCR_TxCRC =               // Tx CRC register (16 bits)
8756:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
8757:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXCRCR_RESET_VALUE = 0x0;
8758:../../..\hal\include/device/stm32g431.h **** 
8759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CHLEN = 0x1;          // CHLEN
8760:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_DATLEN =              // DATLEN (2 bits)
8762:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
8763:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_CKPOL = 0x8;          // CKPOL
8764:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SSTD =              // I2SSTD (2 bits)
8766:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
8767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_PCMSYNC = 0x80;       // PCMSYNC
8768:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SCFG =              // I2SCFG (2 bits)
8770:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
8771:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SE = 0x400;         // I2SE
8772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SCFGR_I2SMOD = 0x800;       // I2SMOD
8773:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SCFGR_RESET_VALUE = 0x0;
8774:../../..\hal\include/device/stm32g431.h **** 
8775:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8776:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_I2SDIV =              // I2SDIV (8 bits)
8777:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
8778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_ODD = 0x100;          // ODD
8779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t I2SPR_MCKOE = 0x200;        // MCKOE
8780:../../..\hal\include/device/stm32g431.h ****     static const uint32_t I2SPR_RESET_VALUE = 0x2;
8781:../../..\hal\include/device/stm32g431.h **** 
8782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t SPI2 = 36; // SPI2
8783:../../..\hal\include/device/stm32g431.h **** };
8784:../../..\hal\include/device/stm32g431.h **** 
8785:../../..\hal\include/device/stm32g431.h **** static spi2_t& SPI2 = *reinterpret_cast<spi2_t*>(0x40003800);
8786:../../..\hal\include/device/stm32g431.h **** 
8787:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SPI2
8788:../../..\hal\include/device/stm32g431.h **** 
8789:../../..\hal\include/device/stm32g431.h **** 
8790:../../..\hal\include/device/stm32g431.h **** ////
8791:../../..\hal\include/device/stm32g431.h **** //
8792:../../..\hal\include/device/stm32g431.h **** //    External interrupt/event controller
8793:../../..\hal\include/device/stm32g431.h **** //
8794:../../..\hal\include/device/stm32g431.h **** ////
8795:../../..\hal\include/device/stm32g431.h **** 
8796:../../..\hal\include/device/stm32g431.h **** struct exti_t
8797:../../..\hal\include/device/stm32g431.h **** {
8798:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IMR1;                 // [Read-write] Interrupt mask register
8799:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EMR1;                 // [Read-write] Event mask register
8800:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTSR1;                // [Read-write] Rising Trigger selection register
8801:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FTSR1;                // [Read-write] Falling Trigger selection register
8802:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SWIER1;               // [Read-write] Software interrupt event register
8803:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PR1;                  // [Read-write] Pending register
8804:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
8805:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IMR2;                 // [Read-write] Interrupt mask register
8806:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EMR2;                 // [Read-write] Event mask register
8807:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RTSR2;                // [Read-write] Rising Trigger selection register
8808:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FTSR2;                // [Read-write] Falling Trigger selection register
8809:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SWIER2;               // [Read-write] Software interrupt event register
8810:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PR2;                  // [Read-write] Pending register
8811:../../..\hal\include/device/stm32g431.h **** 
8812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM0 = 0x1;            // Interrupt Mask on line 0
8813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM1 = 0x2;            // Interrupt Mask on line 1
8814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM2 = 0x4;            // Interrupt Mask on line 2
8815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM3 = 0x8;            // Interrupt Mask on line 3
8816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM4 = 0x10;           // Interrupt Mask on line 4
8817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM5 = 0x20;           // Interrupt Mask on line 5
8818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM6 = 0x40;           // Interrupt Mask on line 6
8819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM7 = 0x80;           // Interrupt Mask on line 7
8820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM8 = 0x100;          // Interrupt Mask on line 8
8821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM9 = 0x200;          // Interrupt Mask on line 9
8822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM10 = 0x400;         // Interrupt Mask on line 10
8823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM11 = 0x800;         // Interrupt Mask on line 11
8824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM12 = 0x1000;        // Interrupt Mask on line 12
8825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM13 = 0x2000;        // Interrupt Mask on line 13
8826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM14 = 0x4000;        // Interrupt Mask on line 14
8827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM15 = 0x8000;        // Interrupt Mask on line 15
8828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM16 = 0x10000;       // Interrupt Mask on line 16
8829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM17 = 0x20000;       // Interrupt Mask on line 17
8830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM18 = 0x40000;       // Interrupt Mask on line 18
8831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM19 = 0x80000;       // Interrupt Mask on line 19
8832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM20 = 0x100000;      // Interrupt Mask on line 20
8833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM21 = 0x200000;      // Interrupt Mask on line 21
8834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM22 = 0x400000;      // Interrupt Mask on line 22
8835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM23 = 0x800000;      // Interrupt Mask on line 23
8836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM24 = 0x1000000;     // Interrupt Mask on line 24
8837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM25 = 0x2000000;     // Interrupt Mask on line 25
8838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM26 = 0x4000000;     // Interrupt Mask on line 26
8839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM27 = 0x8000000;     // Interrupt Mask on line 27
8840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM28 = 0x10000000;    // Interrupt Mask on line 28
8841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM29 = 0x20000000;    // Interrupt Mask on line 29
8842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM30 = 0x40000000;    // Interrupt Mask on line 30
8843:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR1_IM31 = 0x80000000;    // Interrupt Mask on line 31
8844:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IMR1_RESET_VALUE = 0xff820000;
8845:../../..\hal\include/device/stm32g431.h **** 
8846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM0 = 0x1;            // Event Mask on line 0
8847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM1 = 0x2;            // Event Mask on line 1
8848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM2 = 0x4;            // Event Mask on line 2
8849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM3 = 0x8;            // Event Mask on line 3
8850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM4 = 0x10;           // Event Mask on line 4
8851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM5 = 0x20;           // Event Mask on line 5
8852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM6 = 0x40;           // Event Mask on line 6
8853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM7 = 0x80;           // Event Mask on line 7
8854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM8 = 0x100;          // Event Mask on line 8
8855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM9 = 0x200;          // Event Mask on line 9
8856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM10 = 0x400;         // Event Mask on line 10
8857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM11 = 0x800;         // Event Mask on line 11
8858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM12 = 0x1000;        // Event Mask on line 12
8859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM13 = 0x2000;        // Event Mask on line 13
8860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM14 = 0x4000;        // Event Mask on line 14
8861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM15 = 0x8000;        // Event Mask on line 15
8862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM16 = 0x10000;       // Event Mask on line 16
8863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM17 = 0x20000;       // Event Mask on line 17
8864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM18 = 0x40000;       // Event Mask on line 18
8865:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM19 = 0x80000;       // Event Mask on line 19
8866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM20 = 0x100000;      // Event Mask on line 20
8867:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM21 = 0x200000;      // Event Mask on line 21
8868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM22 = 0x400000;      // Event Mask on line 22
8869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM23 = 0x800000;      // Event Mask on line 23
8870:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM24 = 0x1000000;     // Event Mask on line 24
8871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM25 = 0x2000000;     // Event Mask on line 25
8872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM26 = 0x4000000;     // Event Mask on line 26
8873:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM27 = 0x8000000;     // Event Mask on line 27
8874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM28 = 0x10000000;    // Event Mask on line 28
8875:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM29 = 0x20000000;    // Event Mask on line 29
8876:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM30 = 0x40000000;    // Event Mask on line 30
8877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR1_EM31 = 0x80000000;    // Event Mask on line 31
8878:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EMR1_RESET_VALUE = 0x0;
8879:../../..\hal\include/device/stm32g431.h **** 
8880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT0 = 0x1;            // Rising trigger event configuration of 
8881:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT1 = 0x2;            // Rising trigger event configuration of 
8882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT2 = 0x4;            // Rising trigger event configuration of 
8883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT3 = 0x8;            // Rising trigger event configuration of 
8884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT4 = 0x10;           // Rising trigger event configuration of 
8885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT5 = 0x20;           // Rising trigger event configuration of 
8886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT6 = 0x40;           // Rising trigger event configuration of 
8887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT7 = 0x80;           // Rising trigger event configuration of 
8888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT8 = 0x100;          // Rising trigger event configuration of 
8889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT9 = 0x200;          // Rising trigger event configuration of 
8890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT10 = 0x400;         // Rising trigger event configuration of 
8891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT11 = 0x800;         // Rising trigger event configuration of 
8892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT12 = 0x1000;        // Rising trigger event configuration of 
8893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT13 = 0x2000;        // Rising trigger event configuration of 
8894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT14 = 0x4000;        // Rising trigger event configuration of 
8895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT15 = 0x8000;        // Rising trigger event configuration of 
8896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT16 = 0x10000;       // Rising trigger event configuration of 
8897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT18 = 0x40000;       // Rising trigger event configuration of 
8898:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT19 = 0x80000;       // Rising trigger event configuration of 
8899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT20 = 0x100000;      // Rising trigger event configuration of 
8900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT21 = 0x200000;      // Rising trigger event configuration of 
8901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT22 = 0x400000;      // Rising trigger event configuration of 
8902:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
8903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR1_RT =                  // RT (3 bits)
8904:../../..\hal\include/device/stm32g431.h ****         bit_field_t<29, 0x7>::value<X>();
8905:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTSR1_RESET_VALUE = 0x0;
8906:../../..\hal\include/device/stm32g431.h **** 
8907:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT0 = 0x1;            // Falling trigger event configuration of
8908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT1 = 0x2;            // Falling trigger event configuration of
8909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT2 = 0x4;            // Falling trigger event configuration of
8910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT3 = 0x8;            // Falling trigger event configuration of
8911:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT4 = 0x10;           // Falling trigger event configuration of
8912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT5 = 0x20;           // Falling trigger event configuration of
8913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT6 = 0x40;           // Falling trigger event configuration of
8914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT7 = 0x80;           // Falling trigger event configuration of
8915:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT8 = 0x100;          // Falling trigger event configuration of
8916:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT9 = 0x200;          // Falling trigger event configuration of
8917:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT10 = 0x400;         // Falling trigger event configuration of
8918:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT11 = 0x800;         // Falling trigger event configuration of
8919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT12 = 0x1000;        // Falling trigger event configuration of
8920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT13 = 0x2000;        // Falling trigger event configuration of
8921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT14 = 0x4000;        // Falling trigger event configuration of
8922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT15 = 0x8000;        // Falling trigger event configuration of
8923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT16 = 0x10000;       // Falling trigger event configuration of
8924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT18 = 0x40000;       // Falling trigger event configuration of
8925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT19 = 0x80000;       // Falling trigger event configuration of
8926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT20 = 0x100000;      // Falling trigger event configuration of
8927:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT21 = 0x200000;      // Falling trigger event configuration of
8928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR1_FT22 = 0x400000;      // Falling trigger event configuration of
8929:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FTSR1_RESET_VALUE = 0x0;
8930:../../..\hal\include/device/stm32g431.h **** 
8931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI0 = 0x1;           // Software Interrupt on line 0
8932:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI1 = 0x2;           // Software Interrupt on line 1
8933:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI2 = 0x4;           // Software Interrupt on line 2
8934:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI3 = 0x8;           // Software Interrupt on line 3
8935:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI4 = 0x10;          // Software Interrupt on line 4
8936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI5 = 0x20;          // Software Interrupt on line 5
8937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI6 = 0x40;          // Software Interrupt on line 6
8938:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI7 = 0x80;          // Software Interrupt on line 7
8939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI8 = 0x100;         // Software Interrupt on line 8
8940:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI9 = 0x200;         // Software Interrupt on line 9
8941:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI10 = 0x400;        // Software Interrupt on line 10
8942:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI11 = 0x800;        // Software Interrupt on line 11
8943:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI12 = 0x1000;       // Software Interrupt on line 12
8944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI13 = 0x2000;       // Software Interrupt on line 13
8945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI14 = 0x4000;       // Software Interrupt on line 14
8946:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI15 = 0x8000;       // Software Interrupt on line 15
8947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI16 = 0x10000;      // Software Interrupt on line 16
8948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI18 = 0x40000;      // Software Interrupt on line 18
8949:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI19 = 0x80000;      // Software Interrupt on line 19
8950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI20 = 0x100000;     // Software Interrupt on line 20
8951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI21 = 0x200000;     // Software Interrupt on line 21
8952:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER1_SWI22 = 0x400000;     // Software Interrupt on line 22
8953:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SWIER1_RESET_VALUE = 0x0;
8954:../../..\hal\include/device/stm32g431.h **** 
8955:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF0 = 0x1;           // Pending bit 0
8956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF1 = 0x2;           // Pending bit 1
8957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF2 = 0x4;           // Pending bit 2
8958:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF3 = 0x8;           // Pending bit 3
8959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF4 = 0x10;          // Pending bit 4
8960:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF5 = 0x20;          // Pending bit 5
8961:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF6 = 0x40;          // Pending bit 6
8962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF7 = 0x80;          // Pending bit 7
8963:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF8 = 0x100;         // Pending bit 8
8964:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF9 = 0x200;         // Pending bit 9
8965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF10 = 0x400;        // Pending bit 10
8966:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF11 = 0x800;        // Pending bit 11
8967:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF12 = 0x1000;       // Pending bit 12
8968:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF13 = 0x2000;       // Pending bit 13
8969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF14 = 0x4000;       // Pending bit 14
8970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF15 = 0x8000;       // Pending bit 15
8971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF16 = 0x10000;      // Pending bit 16
8972:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF18 = 0x40000;      // Pending bit 18
8973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF19 = 0x80000;      // Pending bit 19
8974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF20 = 0x100000;     // Pending bit 20
8975:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF21 = 0x200000;     // Pending bit 21
8976:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR1_PIF22 = 0x400000;     // Pending bit 22
8977:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PR1_RESET_VALUE = 0x0;
8978:../../..\hal\include/device/stm32g431.h **** 
8979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM32 = 0x1;           // Interrupt Mask on external/internal lin
8980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM33 = 0x2;           // Interrupt Mask on external/internal lin
8981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM34 = 0x4;           // Interrupt Mask on external/internal lin
8982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM35 = 0x8;           // Interrupt Mask on external/internal lin
8983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM36 = 0x10;          // Interrupt Mask on external/internal lin
8984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM37 = 0x20;          // Interrupt Mask on external/internal lin
8985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM38 = 0x40;          // Interrupt Mask on external/internal lin
8986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM39 = 0x80;          // Interrupt Mask on external/internal lin
8987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM40 = 0x100;         // Interrupt Mask on external/internal lin
8988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM41 = 0x200;         // Interrupt Mask on external/internal lin
8989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM42 = 0x400;         // Interrupt Mask on external/internal lin
8990:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR2_IM43 = 0x800;         // Interrupt Mask on external/internal lin
8991:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IMR2_RESET_VALUE = 0xffffff87;
8992:../../..\hal\include/device/stm32g431.h **** 
8993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM32 = 0x1;           // Event mask on external/internal line 32
8994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM33 = 0x2;           // Event mask on external/internal line 33
8995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM34 = 0x4;           // Event mask on external/internal line 34
8996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM35 = 0x8;           // Event mask on external/internal line 35
8997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM36 = 0x10;          // Event mask on external/internal line 36
8998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM37 = 0x20;          // Event mask on external/internal line 37
8999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM38 = 0x40;          // Event mask on external/internal line 38
9000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM39 = 0x80;          // Event mask on external/internal line 39
9001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EMR2_EM40 = 0x100;         // Event mask on external/internal line 40
9002:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EMR2_RESET_VALUE = 0x0;
9003:../../..\hal\include/device/stm32g431.h **** 
9004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT32 = 0x1;           // Rising trigger event configuration bit
9005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT33 = 0x2;           // Rising trigger event configuration bit
9006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT38 = 0x40;          // Rising trigger event configuration bit
9007:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT39 = 0x80;          // Rising trigger event configuration bit
9008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT40 = 0x100;         // Rising trigger event configuration bit
9009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RTSR2_RT41 = 0x200;         // Rising trigger event configuration bit
9010:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RTSR2_RESET_VALUE = 0x0;
9011:../../..\hal\include/device/stm32g431.h **** 
9012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR2_FT35 = 0x8;           // Falling trigger event configuration bi
9013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR2_FT36 = 0x10;          // Falling trigger event configuration bi
9014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR2_FT37 = 0x20;          // Falling trigger event configuration bi
9015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FTSR2_FT38 = 0x40;          // Falling trigger event configuration bi
9016:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FTSR2_RESET_VALUE = 0x0;
9017:../../..\hal\include/device/stm32g431.h **** 
9018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER2_SWI35 = 0x8;          // Software interrupt on line 35
9019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER2_SWI36 = 0x10;         // Software interrupt on line 36
9020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER2_SWI37 = 0x20;         // Software interrupt on line 37
9021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWIER2_SWI38 = 0x40;         // Software interrupt on line 38
9022:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SWIER2_RESET_VALUE = 0x0;
9023:../../..\hal\include/device/stm32g431.h **** 
9024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR2_PIF35 = 0x8;          // Pending interrupt flag on line 35
9025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR2_PIF36 = 0x10;         // Pending interrupt flag on line 36
9026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR2_PIF37 = 0x20;         // Pending interrupt flag on line 37
9027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PR2_PIF38 = 0x40;         // Pending interrupt flag on line 38
9028:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PR2_RESET_VALUE = 0x0;
9029:../../..\hal\include/device/stm32g431.h **** 
9030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t CRS = 75; // CRS
9031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI0 = 6; // EXTI Line0 interrupt
9032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI1 = 7; // EXTI Line1 interrupt
9033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI15_10 = 40; // EXTI15_10
9034:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI2 = 8; // EXTI Line2 interrupt
9035:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI3 = 9; // EXTI Line3 interrupt
9036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI4 = 10; // EXTI Line4 interrupt
9037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t EXTI9_5 = 23; // EXTI9_5
9038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t PVD_PVM = 1; // PVD through EXTI line detection
9039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USBWAKEUP = 42; // USBWakeUP
9040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USB_HP = 19; // USB_HP
9041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t USB_LP = 20; // USB_LP
9042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t FDCAN1_INTR0_IT = 22; // fdcan1_intr0_it
9043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t FDCAN1_INTR1_IT = 21; // fdcan1_intr1_it
9044:../../..\hal\include/device/stm32g431.h **** };
9045:../../..\hal\include/device/stm32g431.h **** 
9046:../../..\hal\include/device/stm32g431.h **** static exti_t& EXTI = *reinterpret_cast<exti_t*>(0x40010400);
9047:../../..\hal\include/device/stm32g431.h **** 
9048:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_EXTI
9049:../../..\hal\include/device/stm32g431.h **** 
9050:../../..\hal\include/device/stm32g431.h **** 
9051:../../..\hal\include/device/stm32g431.h **** ////
9052:../../..\hal\include/device/stm32g431.h **** //
9053:../../..\hal\include/device/stm32g431.h **** //    Real-time clock
9054:../../..\hal\include/device/stm32g431.h **** //
9055:../../..\hal\include/device/stm32g431.h **** ////
9056:../../..\hal\include/device/stm32g431.h **** 
9057:../../..\hal\include/device/stm32g431.h **** struct rtc_t
9058:../../..\hal\include/device/stm32g431.h **** {
9059:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR;                   // [Read-write] time register
9060:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-write] date register
9061:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SSR;                  // [Read-only] sub second register
9062:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICSR;                 // initialization and status register
9063:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PRER;                 // [Read-write] prescaler register
9064:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WUTR;                 // [Read-write] wakeup timer register
9065:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] control register
9066:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
9067:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WPR;                  // [Write-only] write protection register
9068:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CALR;                 // [Read-write] calibration register
9069:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SHIFTR;               // [Write-only] shift control register
9070:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSTR;                 // [Read-only] time stamp time register
9071:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSDR;                 // [Read-only] time stamp date register
9072:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSSSR;                // [Read-only] timestamp sub second register
9073:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
9074:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ALRMAR;               // [Read-write] alarm A register
9075:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ALRMASSR;             // [Read-write] alarm A sub second register
9076:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ALRMBR;               // [Read-write] alarm B register
9077:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ALRMBSSR;             // [Read-write] alarm B sub second register
9078:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-only] status register
9079:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MISR;                 // [Read-only] status register
9080:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
9081:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SCR;                  // [Write-only] status register
9082:../../..\hal\include/device/stm32g431.h **** 
9083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_PM = 0x400000;        // AM/PM notation
9084:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_HT =                  // Hour tens in BCD format (2 bits)
9086:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
9087:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_HU =                  // Hour units in BCD format (4 bits)
9089:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
9090:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_MNT =                 // Minute tens in BCD format (3 bits)
9092:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
9093:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9094:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_MNU =                 // Minute units in BCD format (4 bits)
9095:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9096:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9097:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_ST =                  // Second tens in BCD format (3 bits)
9098:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
9099:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9100:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR_SU =                  // Second units in BCD format (4 bits)
9101:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9102:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR_RESET_VALUE = 0x0;
9103:../../..\hal\include/device/stm32g431.h **** 
9104:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_YT =                  // Year tens in BCD format (4 bits)
9106:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
9107:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_YU =                  // Year units in BCD format (4 bits)
9109:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
9110:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_WDU =                 // Week day units (3 bits)
9112:../../..\hal\include/device/stm32g431.h ****         bit_field_t<13, 0x7>::value<X>();
9113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_MT = 0x1000;          // Month tens in BCD format
9114:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_MU =                  // Month units in BCD format (4 bits)
9116:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9117:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_DT =                  // Date tens in BCD format (2 bits)
9119:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
9120:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_DU =                  // Date units in BCD format (4 bits)
9122:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9123:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x2101;
9124:../../..\hal\include/device/stm32g431.h **** 
9125:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SSR_SS =                  // Sub second value (16 bits)
9127:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9128:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SSR_RESET_VALUE = 0x0;
9129:../../..\hal\include/device/stm32g431.h **** 
9130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_ALRAWF = 0x1;         // Alarm A write flag, Read-only
9131:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_ALRBWF = 0x2;         // Alarm B write flag, Read-only
9132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_WUTWF = 0x4;          // Wakeup timer write flag, Read-only
9133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_SHPF = 0x8;           // Shift operation pending, Read-write
9134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_INITS = 0x10;         // Initialization status flag, Read-only
9135:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_RSF = 0x20;           // Registers synchronization flag, Read-wr
9136:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_INITF = 0x40;         // Initialization flag, Read-only
9137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_INIT = 0x80;          // Initialization mode, Read-write
9138:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_RECALPF = 0x10000;    // Recalibration pending Flag, Read-only
9139:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICSR_RESET_VALUE = 0x7;
9140:../../..\hal\include/device/stm32g431.h **** 
9141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRER_PREDIV_A =            // Asynchronous prescaler factor (7 bits)
9143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
9144:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PRER_PREDIV_S =            // Synchronous prescaler factor (15 bits)
9146:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
9147:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PRER_RESET_VALUE = 0x7f00ff;
9148:../../..\hal\include/device/stm32g431.h **** 
9149:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WUTR_WUT =                 // Wakeup auto-reload value bits (16 bits)
9151:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9152:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WUTR_RESET_VALUE = 0xffff;
9153:../../..\hal\include/device/stm32g431.h **** 
9154:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_WCKSEL =              // Wakeup clock selection (3 bits)
9156:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
9157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TSEDGE = 0x8;         // Time-stamp event active edge
9158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_REFCKON = 0x10;       // Reference clock detection enable (50 or 6
9159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_BYPSHAD = 0x20;       // Bypass the shadow registers
9160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_FMT = 0x40;           // Hour format
9161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ALRAE = 0x100;        // Alarm A enable
9162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ALRBE = 0x200;        // Alarm B enable
9163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_WUTE = 0x400;         // Wakeup timer enable
9164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TSE = 0x800;          // Time stamp enable
9165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ALRAIE = 0x1000;      // Alarm A interrupt enable
9166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ALRBIE = 0x2000;      // Alarm B interrupt enable
9167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_WUTIE = 0x4000;       // Wakeup timer interrupt enable
9168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TSIE = 0x8000;        // Time-stamp interrupt enable
9169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADD1H = 0x10000;      // Add 1 hour (summer time change)
9170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SUB1H = 0x20000;      // Subtract 1 hour (winter time change)
9171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_BKP = 0x40000;        // Backup
9172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_COSEL = 0x80000;      // Calibration output selection
9173:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_POL = 0x100000;       // Output polarity
9174:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OSEL =                // Output selection (2 bits)
9176:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x3>::value<X>();
9177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_COE = 0x800000;       // Calibration output enable
9178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ITSE = 0x1000000;     // timestamp on internal event enable
9179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TAMPTS = 0x2000000;   // TAMPTS
9180:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TAMPOE = 0x4000000;   // TAMPOE
9181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TAMPALRM_PU = 0x20000000;// TAMPALRM_PU
9182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TAMPALRM_TYPE = 0x40000000;// TAMPALRM_TYPE
9183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OUT2EN = 0x80000000;  // OUT2EN
9184:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
9185:../../..\hal\include/device/stm32g431.h **** 
9186:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WPR_KEY =                 // Write protection key (8 bits)
9188:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
9189:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WPR_RESET_VALUE = 0x0;
9190:../../..\hal\include/device/stm32g431.h **** 
9191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALR_CALP = 0x8000;        // Increase frequency of RTC by 488.5 ppm
9192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALR_CALW8 = 0x4000;       // Use an 8-second calibration cycle perio
9193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALR_CALW16 = 0x2000;      // Use a 16-second calibration cycle perio
9194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALR_CALM =                // Calibration minus (9 bits)
9196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
9197:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CALR_RESET_VALUE = 0x0;
9198:../../..\hal\include/device/stm32g431.h **** 
9199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHIFTR_ADD1S = 0x80000000;   // Add one second
9200:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHIFTR_SUBFS =               // Subtract a fraction of a second (15 b
9202:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
9203:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SHIFTR_RESET_VALUE = 0x0;
9204:../../..\hal\include/device/stm32g431.h **** 
9205:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_SU =                  // Second units in BCD format (4 bits)
9207:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9208:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_ST =                  // Second tens in BCD format (3 bits)
9210:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
9211:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_MNU =                 // Minute units in BCD format (4 bits)
9213:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_MNT =                 // Minute tens in BCD format (3 bits)
9216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
9217:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_HU =                  // Hour units in BCD format (4 bits)
9219:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
9220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_HT =                  // Hour tens in BCD format (2 bits)
9222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
9223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSTR_PM = 0x400000;        // AM/PM notation
9224:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSTR_RESET_VALUE = 0x0;
9225:../../..\hal\include/device/stm32g431.h **** 
9226:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSDR_WDU =                 // Week day units (3 bits)
9228:../../..\hal\include/device/stm32g431.h ****         bit_field_t<13, 0x7>::value<X>();
9229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSDR_MT = 0x1000;          // Month tens in BCD format
9230:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9231:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSDR_MU =                  // Month units in BCD format (4 bits)
9232:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9233:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9234:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSDR_DT =                  // Date tens in BCD format (2 bits)
9235:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
9236:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSDR_DU =                  // Date units in BCD format (4 bits)
9238:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9239:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSDR_RESET_VALUE = 0x0;
9240:../../..\hal\include/device/stm32g431.h **** 
9241:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSSSR_SS =                  // Sub second value (16 bits)
9243:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9244:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSSSR_RESET_VALUE = 0x0;
9245:../../..\hal\include/device/stm32g431.h **** 
9246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MSK4 = 0x80000000;    // Alarm A date mask
9247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_WDSEL = 0x40000000;   // Week day selection
9248:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_DT =                  // Date tens in BCD format (2 bits)
9250:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
9251:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_DU =                  // Date units or day in BCD format (4 bi
9253:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
9254:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MSK3 = 0x800000;      // Alarm A hours mask
9255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_PM = 0x400000;        // AM/PM notation
9256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_HT =                  // Hour tens in BCD format (2 bits)
9258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
9259:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_HU =                  // Hour units in BCD format (4 bits)
9261:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
9262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MSK2 = 0x8000;        // Alarm A minutes mask
9263:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9264:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MNT =                 // Minute tens in BCD format (3 bits)
9265:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
9266:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MNU =                 // Minute units in BCD format (4 bits)
9268:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_MSK1 = 0x80;          // Alarm A seconds mask
9270:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_ST =                  // Second tens in BCD format (3 bits)
9272:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
9273:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMAR_SU =                  // Second units in BCD format (4 bits)
9275:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9276:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ALRMAR_RESET_VALUE = 0x0;
9277:../../..\hal\include/device/stm32g431.h **** 
9278:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMASSR_MASKSS =              // Mask the most-significant bits star
9280:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
9281:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMASSR_SS =                  // Sub seconds value (15 bits)
9283:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
9284:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ALRMASSR_RESET_VALUE = 0x0;
9285:../../..\hal\include/device/stm32g431.h **** 
9286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MSK4 = 0x80000000;    // Alarm B date mask
9287:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_WDSEL = 0x40000000;   // Week day selection
9288:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_DT =                  // Date tens in BCD format (2 bits)
9290:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
9291:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_DU =                  // Date units or day in BCD format (4 bi
9293:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
9294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MSK3 = 0x800000;      // Alarm B hours mask
9295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_PM = 0x400000;        // AM/PM notation
9296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_HT =                  // Hour tens in BCD format (2 bits)
9298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3>::value<X>();
9299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_HU =                  // Hour units in BCD format (4 bits)
9301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
9302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MSK2 = 0x8000;        // Alarm B minutes mask
9303:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MNT =                 // Minute tens in BCD format (3 bits)
9305:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
9306:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MNU =                 // Minute units in BCD format (4 bits)
9308:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
9309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_MSK1 = 0x80;          // Alarm B seconds mask
9310:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_ST =                  // Second tens in BCD format (3 bits)
9312:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
9313:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBR_SU =                  // Second units in BCD format (4 bits)
9315:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
9316:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ALRMBR_RESET_VALUE = 0x0;
9317:../../..\hal\include/device/stm32g431.h **** 
9318:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBSSR_MASKSS =              // Mask the most-significant bits star
9320:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
9321:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ALRMBSSR_SS =                  // Sub seconds value (15 bits)
9323:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7fff>::value<X>();
9324:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ALRMBSSR_RESET_VALUE = 0x0;
9325:../../..\hal\include/device/stm32g431.h **** 
9326:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ALRAF = 0x1;          // ALRAF
9327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ALRBF = 0x2;          // ALRBF
9328:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_WUTF = 0x4;           // WUTF
9329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TSF = 0x8;            // TSF
9330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TSOVF = 0x10;         // TSOVF
9331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ITSF = 0x20;          // ITSF
9332:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
9333:../../..\hal\include/device/stm32g431.h **** 
9334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ALRAMF = 0x1;         // ALRAMF
9335:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ALRBMF = 0x2;         // ALRBMF
9336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_WUTMF = 0x4;          // WUTMF
9337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_TSMF = 0x8;           // TSMF
9338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_TSOVMF = 0x10;        // TSOVMF
9339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ITSMF = 0x20;         // ITSMF
9340:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MISR_RESET_VALUE = 0x0;
9341:../../..\hal\include/device/stm32g431.h **** 
9342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CALRAF = 0x1;         // CALRAF
9343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CALRBF = 0x2;         // CALRBF
9344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CWUTF = 0x4;          // CWUTF
9345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CTSF = 0x8;           // CTSF
9346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CTSOVF = 0x10;        // CTSOVF
9347:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CITSF = 0x20;         // CITSF
9348:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SCR_RESET_VALUE = 0x0;
9349:../../..\hal\include/device/stm32g431.h **** 
9350:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t RTC_ALARM = 41; // RTC_ALARM
9351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t RTC_TAMP_CSS_LSE = 2; // RTC_TAMP_CSS_LSE
9352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t RTC_WKUP = 3; // RTC Wakeup timer
9353:../../..\hal\include/device/stm32g431.h **** };
9354:../../..\hal\include/device/stm32g431.h **** 
9355:../../..\hal\include/device/stm32g431.h **** static rtc_t& RTC = *reinterpret_cast<rtc_t*>(0x40002800);
9356:../../..\hal\include/device/stm32g431.h **** 
9357:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_RTC
9358:../../..\hal\include/device/stm32g431.h **** 
9359:../../..\hal\include/device/stm32g431.h **** 
9360:../../..\hal\include/device/stm32g431.h **** ////
9361:../../..\hal\include/device/stm32g431.h **** //
9362:../../..\hal\include/device/stm32g431.h **** //    DMA controller
9363:../../..\hal\include/device/stm32g431.h **** //
9364:../../..\hal\include/device/stm32g431.h **** ////
9365:../../..\hal\include/device/stm32g431.h **** 
9366:../../..\hal\include/device/stm32g431.h **** struct dma1_t
9367:../../..\hal\include/device/stm32g431.h **** {
9368:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] interrupt status register
9369:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IFCR;                 // [Write-only] DMA interrupt flag clear register
9370:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] DMA channel 1 configuration register
9371:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR1;               // [Read-write] channel x number of data to transfer
9372:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR1;                // [Read-write] DMA channel x peripheral address reg
9373:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR1;                // [Read-write] DMA channel x memory address registe
9374:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
9375:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] DMA channel 2 configuration register
9376:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR2;               // [Read-write] channel x number of data to transfer
9377:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR2;                // [Read-write] DMA channel x peripheral address reg
9378:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR2;                // [Read-write] DMA channel x memory address registe
9379:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
9380:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] DMA channel 3 configuration register
9381:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR3;               // [Read-write] channel x number of data to transfer
9382:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR3;                // [Read-write] DMA channel x peripheral address reg
9383:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR3;                // [Read-write] DMA channel x memory address registe
9384:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
9385:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] DMA channel 3 configuration register
9386:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR4;               // [Read-write] channel x number of data to transfer
9387:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR4;                // [Read-write] DMA channel x peripheral address reg
9388:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR4;                // [Read-write] DMA channel x memory address registe
9389:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _3;
9390:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] DMA channel 4 configuration register
9391:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR5;               // [Read-write] channel x number of data to transfer
9392:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR5;                // [Read-write] DMA channel x peripheral address reg
9393:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR5;                // [Read-write] DMA channel x memory address registe
9394:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
9395:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] DMA channel 5 configuration register
9396:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR6;               // [Read-write] channel x number of data to transfer
9397:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR6;                // [Read-write] DMA channel x peripheral address reg
9398:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR6;                // [Read-write] DMA channel x memory address registe
9399:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _5;
9400:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR7;                 // [Read-write] DMA channel 6 configuration register
9401:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR7;               // [Read-write] channel x number of data to transfer
9402:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR7;                // [Read-write] DMA channel x peripheral address reg
9403:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR7;                // [Read-write] DMA channel x memory address registe
9404:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _6;
9405:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR8;                 // [Read-write] DMA channel 7 configuration register
9406:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR8;               // [Read-write] channel x number of data to transfer
9407:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR8;                // [Read-write] DMA channel x peripheral address reg
9408:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR8;                // [Read-write] DMA channel x memory address registe
9409:../../..\hal\include/device/stm32g431.h **** 
9410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF8 = 0x80000000;   // TEIF8
9411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF8 = 0x40000000;   // HTIF8
9412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF8 = 0x20000000;   // TCIF8
9413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF8 = 0x10000000;    // GIF8
9414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF7 = 0x8000000;    // TEIF7
9415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF7 = 0x4000000;    // HTIF7
9416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF7 = 0x2000000;    // TCIF7
9417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF7 = 0x1000000;     // GIF7
9418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF6 = 0x800000;     // TEIF6
9419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF6 = 0x400000;     // HTIF6
9420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF6 = 0x200000;     // TCIF6
9421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF6 = 0x100000;      // GIF6
9422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF5 = 0x80000;      // TEIF5
9423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF5 = 0x40000;      // HTIF5
9424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF5 = 0x20000;      // TCIF5
9425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF5 = 0x10000;       // GIF5
9426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF4 = 0x8000;       // TEIF4
9427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF4 = 0x4000;       // HTIF4
9428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF4 = 0x2000;       // TCIF4
9429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF4 = 0x1000;        // GIF4
9430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF3 = 0x800;        // TEIF3
9431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF3 = 0x400;        // HTIF3
9432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF3 = 0x200;        // TCIF3
9433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF3 = 0x100;         // GIF3
9434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF2 = 0x80;         // TEIF2
9435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF2 = 0x40;         // HTIF2
9436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF2 = 0x20;         // TCIF2
9437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF2 = 0x10;          // GIF2
9438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF1 = 0x8;          // TEIF1
9439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF1 = 0x4;          // HTIF1
9440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF1 = 0x2;          // TCIF1
9441:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF1 = 0x1;           // GIF1
9442:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
9443:../../..\hal\include/device/stm32g431.h **** 
9444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF8 = 0x80000000;   // TEIF8
9445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF8 = 0x40000000;   // HTIF8
9446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF8 = 0x20000000;   // TCIF8
9447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF8 = 0x10000000;    // GIF8
9448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF7 = 0x8000000;    // TEIF7
9449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF7 = 0x4000000;    // HTIF7
9450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF7 = 0x2000000;    // TCIF7
9451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF7 = 0x1000000;     // GIF7
9452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF6 = 0x800000;     // TEIF6
9453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF6 = 0x400000;     // HTIF6
9454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF6 = 0x200000;     // TCIF6
9455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF6 = 0x100000;      // GIF6
9456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF5 = 0x80000;      // TEIF5
9457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF5 = 0x40000;      // HTIF5
9458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF5 = 0x20000;      // TCIF5
9459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF5 = 0x10000;       // GIF5
9460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF4 = 0x8000;       // TEIF4
9461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF4 = 0x4000;       // HTIF4
9462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF4 = 0x2000;       // TCIF4
9463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF4 = 0x1000;        // GIF4
9464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF3 = 0x800;        // TEIF3
9465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF3 = 0x400;        // HTIF3
9466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF3 = 0x200;        // TCIF3
9467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF3 = 0x100;         // GIF3
9468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF2 = 0x80;         // TEIF2
9469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF2 = 0x40;         // HTIF2
9470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF2 = 0x20;         // TCIF2
9471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF2 = 0x10;          // GIF2
9472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF1 = 0x8;          // TEIF1
9473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF1 = 0x4;          // HTIF1
9474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF1 = 0x2;          // TCIF1
9475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF1 = 0x1;           // GIF1
9476:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IFCR_RESET_VALUE = 0x0;
9477:../../..\hal\include/device/stm32g431.h **** 
9478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_EN = 0x1;             // channel enable
9479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_TCIE = 0x2;           // TCIE
9480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_HTIE = 0x4;           // HTIE
9481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_TEIE = 0x8;           // TEIE
9482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_DIR = 0x10;           // DIR
9483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CIRC = 0x20;          // CIRC
9484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PINC = 0x40;          // PINC
9485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MINC = 0x80;          // MINC
9486:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PSIZE =               // PSIZE (2 bits)
9488:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9489:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9490:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MSIZE =               // MSIZE (2 bits)
9491:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9492:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PL =                  // PL (2 bits)
9494:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MEM2MEM = 0x4000;     // MEM2MEM
9496:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
9497:../../..\hal\include/device/stm32g431.h **** 
9498:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR1_NDT =                 // Number of data items to transfer (16 
9500:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9501:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR1_RESET_VALUE = 0x0;
9502:../../..\hal\include/device/stm32g431.h **** 
9503:../../..\hal\include/device/stm32g431.h **** 
9504:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR1_RESET_VALUE = 0x0;
9505:../../..\hal\include/device/stm32g431.h **** 
9506:../../..\hal\include/device/stm32g431.h **** 
9507:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR1_RESET_VALUE = 0x0;
9508:../../..\hal\include/device/stm32g431.h **** 
9509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_EN = 0x1;             // channel enable
9510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_TCIE = 0x2;           // TCIE
9511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_HTIE = 0x4;           // HTIE
9512:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_TEIE = 0x8;           // TEIE
9513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_DIR = 0x10;           // DIR
9514:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CIRC = 0x20;          // CIRC
9515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PINC = 0x40;          // PINC
9516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MINC = 0x80;          // MINC
9517:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9518:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PSIZE =               // PSIZE (2 bits)
9519:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9520:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MSIZE =               // MSIZE (2 bits)
9522:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9523:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PL =                  // PL (2 bits)
9525:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MEM2MEM = 0x4000;     // MEM2MEM
9527:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
9528:../../..\hal\include/device/stm32g431.h **** 
9529:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9530:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR2_NDT =                 // Number of data items to transfer (16 
9531:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9532:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR2_RESET_VALUE = 0x0;
9533:../../..\hal\include/device/stm32g431.h **** 
9534:../../..\hal\include/device/stm32g431.h **** 
9535:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR2_RESET_VALUE = 0x0;
9536:../../..\hal\include/device/stm32g431.h **** 
9537:../../..\hal\include/device/stm32g431.h **** 
9538:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR2_RESET_VALUE = 0x0;
9539:../../..\hal\include/device/stm32g431.h **** 
9540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_EN = 0x1;             // channel enable
9541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_TCIE = 0x2;           // TCIE
9542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_HTIE = 0x4;           // HTIE
9543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_TEIE = 0x8;           // TEIE
9544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_DIR = 0x10;           // DIR
9545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CIRC = 0x20;          // CIRC
9546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PINC = 0x40;          // PINC
9547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MINC = 0x80;          // MINC
9548:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PSIZE =               // PSIZE (2 bits)
9550:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9551:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9552:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MSIZE =               // MSIZE (2 bits)
9553:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9554:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PL =                  // PL (2 bits)
9556:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MEM2MEM = 0x4000;     // MEM2MEM
9558:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
9559:../../..\hal\include/device/stm32g431.h **** 
9560:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR3_NDT =                 // Number of data items to transfer (16 
9562:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9563:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR3_RESET_VALUE = 0x0;
9564:../../..\hal\include/device/stm32g431.h **** 
9565:../../..\hal\include/device/stm32g431.h **** 
9566:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR3_RESET_VALUE = 0x0;
9567:../../..\hal\include/device/stm32g431.h **** 
9568:../../..\hal\include/device/stm32g431.h **** 
9569:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR3_RESET_VALUE = 0x0;
9570:../../..\hal\include/device/stm32g431.h **** 
9571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_EN = 0x1;             // channel enable
9572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_TCIE = 0x2;           // TCIE
9573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_HTIE = 0x4;           // HTIE
9574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_TEIE = 0x8;           // TEIE
9575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_DIR = 0x10;           // DIR
9576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CIRC = 0x20;          // CIRC
9577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PINC = 0x40;          // PINC
9578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MINC = 0x80;          // MINC
9579:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PSIZE =               // PSIZE (2 bits)
9581:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9582:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MSIZE =               // MSIZE (2 bits)
9584:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9585:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PL =                  // PL (2 bits)
9587:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MEM2MEM = 0x4000;     // MEM2MEM
9589:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
9590:../../..\hal\include/device/stm32g431.h **** 
9591:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR4_NDT =                 // Number of data items to transfer (16 
9593:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9594:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR4_RESET_VALUE = 0x0;
9595:../../..\hal\include/device/stm32g431.h **** 
9596:../../..\hal\include/device/stm32g431.h **** 
9597:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR4_RESET_VALUE = 0x0;
9598:../../..\hal\include/device/stm32g431.h **** 
9599:../../..\hal\include/device/stm32g431.h **** 
9600:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR4_RESET_VALUE = 0x0;
9601:../../..\hal\include/device/stm32g431.h **** 
9602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_EN = 0x1;             // channel enable
9603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_TCIE = 0x2;           // TCIE
9604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_HTIE = 0x4;           // HTIE
9605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_TEIE = 0x8;           // TEIE
9606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_DIR = 0x10;           // DIR
9607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CIRC = 0x20;          // CIRC
9608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PINC = 0x40;          // PINC
9609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MINC = 0x80;          // MINC
9610:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PSIZE =               // PSIZE (2 bits)
9612:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9613:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MSIZE =               // MSIZE (2 bits)
9615:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9616:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PL =                  // PL (2 bits)
9618:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MEM2MEM = 0x4000;     // MEM2MEM
9620:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
9621:../../..\hal\include/device/stm32g431.h **** 
9622:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR5_NDT =                 // Number of data items to transfer (16 
9624:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9625:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR5_RESET_VALUE = 0x0;
9626:../../..\hal\include/device/stm32g431.h **** 
9627:../../..\hal\include/device/stm32g431.h **** 
9628:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR5_RESET_VALUE = 0x0;
9629:../../..\hal\include/device/stm32g431.h **** 
9630:../../..\hal\include/device/stm32g431.h **** 
9631:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR5_RESET_VALUE = 0x0;
9632:../../..\hal\include/device/stm32g431.h **** 
9633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_EN = 0x1;             // channel enable
9634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_TCIE = 0x2;           // TCIE
9635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_HTIE = 0x4;           // HTIE
9636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_TEIE = 0x8;           // TEIE
9637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_DIR = 0x10;           // DIR
9638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CIRC = 0x20;          // CIRC
9639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PINC = 0x40;          // PINC
9640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MINC = 0x80;          // MINC
9641:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PSIZE =               // PSIZE (2 bits)
9643:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9644:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MSIZE =               // MSIZE (2 bits)
9646:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9647:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PL =                  // PL (2 bits)
9649:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MEM2MEM = 0x4000;     // MEM2MEM
9651:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
9652:../../..\hal\include/device/stm32g431.h **** 
9653:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR6_NDT =                 // Number of data items to transfer (16 
9655:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9656:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR6_RESET_VALUE = 0x0;
9657:../../..\hal\include/device/stm32g431.h **** 
9658:../../..\hal\include/device/stm32g431.h **** 
9659:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR6_RESET_VALUE = 0x0;
9660:../../..\hal\include/device/stm32g431.h **** 
9661:../../..\hal\include/device/stm32g431.h **** 
9662:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR6_RESET_VALUE = 0x0;
9663:../../..\hal\include/device/stm32g431.h **** 
9664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_EN = 0x1;             // channel enable
9665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_TCIE = 0x2;           // TCIE
9666:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_HTIE = 0x4;           // HTIE
9667:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_TEIE = 0x8;           // TEIE
9668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_DIR = 0x10;           // DIR
9669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_CIRC = 0x20;          // CIRC
9670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PINC = 0x40;          // PINC
9671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MINC = 0x80;          // MINC
9672:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PSIZE =               // PSIZE (2 bits)
9674:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9675:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MSIZE =               // MSIZE (2 bits)
9677:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9678:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9679:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PL =                  // PL (2 bits)
9680:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9681:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MEM2MEM = 0x4000;     // MEM2MEM
9682:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR7_RESET_VALUE = 0x0;
9683:../../..\hal\include/device/stm32g431.h **** 
9684:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR7_NDT =                 // Number of data items to transfer (16 
9686:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9687:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR7_RESET_VALUE = 0x0;
9688:../../..\hal\include/device/stm32g431.h **** 
9689:../../..\hal\include/device/stm32g431.h **** 
9690:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR7_RESET_VALUE = 0x0;
9691:../../..\hal\include/device/stm32g431.h **** 
9692:../../..\hal\include/device/stm32g431.h **** 
9693:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR7_RESET_VALUE = 0x0;
9694:../../..\hal\include/device/stm32g431.h **** 
9695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_EN = 0x1;             // channel enable
9696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_TCIE = 0x2;           // TCIE
9697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_HTIE = 0x4;           // HTIE
9698:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_TEIE = 0x8;           // TEIE
9699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_DIR = 0x10;           // DIR
9700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_CIRC = 0x20;          // CIRC
9701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PINC = 0x40;          // PINC
9702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MINC = 0x80;          // MINC
9703:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PSIZE =               // PSIZE (2 bits)
9705:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9706:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9707:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MSIZE =               // MSIZE (2 bits)
9708:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9709:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PL =                  // PL (2 bits)
9711:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MEM2MEM = 0x4000;     // MEM2MEM
9713:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR8_RESET_VALUE = 0x0;
9714:../../..\hal\include/device/stm32g431.h **** 
9715:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR8_NDT =                 // Number of data items to transfer (16 
9717:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9718:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR8_RESET_VALUE = 0x0;
9719:../../..\hal\include/device/stm32g431.h **** 
9720:../../..\hal\include/device/stm32g431.h **** 
9721:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR8_RESET_VALUE = 0x0;
9722:../../..\hal\include/device/stm32g431.h **** 
9723:../../..\hal\include/device/stm32g431.h **** 
9724:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR8_RESET_VALUE = 0x0;
9725:../../..\hal\include/device/stm32g431.h **** 
9726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH1 = 11; // DMA1 channel 1 interrupt
9727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH2 = 12; // DMA1 channel 2 interrupt
9728:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH3 = 13; // DMA1 channel 3 interrupt
9729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH4 = 14; // DMA1 channel 4 interrupt
9730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH5 = 15; // DMA1 channel 5 interrupt
9731:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA1_CH6 = 16; // DMA1 channel 6 interrupt
9732:../../..\hal\include/device/stm32g431.h **** };
9733:../../..\hal\include/device/stm32g431.h **** 
9734:../../..\hal\include/device/stm32g431.h **** static dma1_t& DMA1 = *reinterpret_cast<dma1_t*>(0x40020000);
9735:../../..\hal\include/device/stm32g431.h **** 
9736:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DMA1
9737:../../..\hal\include/device/stm32g431.h **** 
9738:../../..\hal\include/device/stm32g431.h **** 
9739:../../..\hal\include/device/stm32g431.h **** ////
9740:../../..\hal\include/device/stm32g431.h **** //
9741:../../..\hal\include/device/stm32g431.h **** //    DMA controller
9742:../../..\hal\include/device/stm32g431.h **** //
9743:../../..\hal\include/device/stm32g431.h **** ////
9744:../../..\hal\include/device/stm32g431.h **** 
9745:../../..\hal\include/device/stm32g431.h **** struct dma2_t
9746:../../..\hal\include/device/stm32g431.h **** {
9747:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] interrupt status register
9748:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IFCR;                 // [Write-only] DMA interrupt flag clear register
9749:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR1;                 // [Read-write] DMA channel 1 configuration register
9750:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR1;               // [Read-write] channel x number of data to transfer
9751:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR1;                // [Read-write] DMA channel x peripheral address reg
9752:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR1;                // [Read-write] DMA channel x memory address registe
9753:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
9754:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR2;                 // [Read-write] DMA channel 2 configuration register
9755:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR2;               // [Read-write] channel x number of data to transfer
9756:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR2;                // [Read-write] DMA channel x peripheral address reg
9757:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR2;                // [Read-write] DMA channel x memory address registe
9758:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
9759:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR3;                 // [Read-write] DMA channel 3 configuration register
9760:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR3;               // [Read-write] channel x number of data to transfer
9761:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR3;                // [Read-write] DMA channel x peripheral address reg
9762:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR3;                // [Read-write] DMA channel x memory address registe
9763:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
9764:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR4;                 // [Read-write] DMA channel 3 configuration register
9765:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR4;               // [Read-write] channel x number of data to transfer
9766:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR4;                // [Read-write] DMA channel x peripheral address reg
9767:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR4;                // [Read-write] DMA channel x memory address registe
9768:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _3;
9769:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR5;                 // [Read-write] DMA channel 4 configuration register
9770:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR5;               // [Read-write] channel x number of data to transfer
9771:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR5;                // [Read-write] DMA channel x peripheral address reg
9772:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR5;                // [Read-write] DMA channel x memory address registe
9773:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
9774:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR6;                 // [Read-write] DMA channel 5 configuration register
9775:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR6;               // [Read-write] channel x number of data to transfer
9776:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR6;                // [Read-write] DMA channel x peripheral address reg
9777:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR6;                // [Read-write] DMA channel x memory address registe
9778:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _5;
9779:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR7;                 // [Read-write] DMA channel 6 configuration register
9780:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR7;               // [Read-write] channel x number of data to transfer
9781:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR7;                // [Read-write] DMA channel x peripheral address reg
9782:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR7;                // [Read-write] DMA channel x memory address registe
9783:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _6;
9784:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR8;                 // [Read-write] DMA channel 7 configuration register
9785:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNDTR8;               // [Read-write] channel x number of data to transfer
9786:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPAR8;                // [Read-write] DMA channel x peripheral address reg
9787:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CMAR8;                // [Read-write] DMA channel x memory address registe
9788:../../..\hal\include/device/stm32g431.h **** 
9789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF8 = 0x80000000;   // TEIF8
9790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF8 = 0x40000000;   // HTIF8
9791:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF8 = 0x20000000;   // TCIF8
9792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF8 = 0x10000000;    // GIF8
9793:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF7 = 0x8000000;    // TEIF7
9794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF7 = 0x4000000;    // HTIF7
9795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF7 = 0x2000000;    // TCIF7
9796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF7 = 0x1000000;     // GIF7
9797:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF6 = 0x800000;     // TEIF6
9798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF6 = 0x400000;     // HTIF6
9799:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF6 = 0x200000;     // TCIF6
9800:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF6 = 0x100000;      // GIF6
9801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF5 = 0x80000;      // TEIF5
9802:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF5 = 0x40000;      // HTIF5
9803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF5 = 0x20000;      // TCIF5
9804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF5 = 0x10000;       // GIF5
9805:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF4 = 0x8000;       // TEIF4
9806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF4 = 0x4000;       // HTIF4
9807:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF4 = 0x2000;       // TCIF4
9808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF4 = 0x1000;        // GIF4
9809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF3 = 0x800;        // TEIF3
9810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF3 = 0x400;        // HTIF3
9811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF3 = 0x200;        // TCIF3
9812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF3 = 0x100;         // GIF3
9813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF2 = 0x80;         // TEIF2
9814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF2 = 0x40;         // HTIF2
9815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF2 = 0x20;         // TCIF2
9816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF2 = 0x10;          // GIF2
9817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TEIF1 = 0x8;          // TEIF1
9818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_HTIF1 = 0x4;          // HTIF1
9819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TCIF1 = 0x2;          // TCIF1
9820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_GIF1 = 0x1;           // GIF1
9821:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
9822:../../..\hal\include/device/stm32g431.h **** 
9823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF8 = 0x80000000;   // TEIF8
9824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF8 = 0x40000000;   // HTIF8
9825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF8 = 0x20000000;   // TCIF8
9826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF8 = 0x10000000;    // GIF8
9827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF7 = 0x8000000;    // TEIF7
9828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF7 = 0x4000000;    // HTIF7
9829:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF7 = 0x2000000;    // TCIF7
9830:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF7 = 0x1000000;     // GIF7
9831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF6 = 0x800000;     // TEIF6
9832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF6 = 0x400000;     // HTIF6
9833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF6 = 0x200000;     // TCIF6
9834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF6 = 0x100000;      // GIF6
9835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF5 = 0x80000;      // TEIF5
9836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF5 = 0x40000;      // HTIF5
9837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF5 = 0x20000;      // TCIF5
9838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF5 = 0x10000;       // GIF5
9839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF4 = 0x8000;       // TEIF4
9840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF4 = 0x4000;       // HTIF4
9841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF4 = 0x2000;       // TCIF4
9842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF4 = 0x1000;        // GIF4
9843:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF3 = 0x800;        // TEIF3
9844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF3 = 0x400;        // HTIF3
9845:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF3 = 0x200;        // TCIF3
9846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF3 = 0x100;         // GIF3
9847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF2 = 0x80;         // TEIF2
9848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF2 = 0x40;         // HTIF2
9849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF2 = 0x20;         // TCIF2
9850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF2 = 0x10;          // GIF2
9851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TEIF1 = 0x8;          // TEIF1
9852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_HTIF1 = 0x4;          // HTIF1
9853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_TCIF1 = 0x2;          // TCIF1
9854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IFCR_GIF1 = 0x1;           // GIF1
9855:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IFCR_RESET_VALUE = 0x0;
9856:../../..\hal\include/device/stm32g431.h **** 
9857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_EN = 0x1;             // channel enable
9858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_TCIE = 0x2;           // TCIE
9859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_HTIE = 0x4;           // HTIE
9860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_TEIE = 0x8;           // TEIE
9861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_DIR = 0x10;           // DIR
9862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_CIRC = 0x20;          // CIRC
9863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PINC = 0x40;          // PINC
9864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MINC = 0x80;          // MINC
9865:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PSIZE =               // PSIZE (2 bits)
9867:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9868:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MSIZE =               // MSIZE (2 bits)
9870:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9871:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_PL =                  // PL (2 bits)
9873:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR1_MEM2MEM = 0x4000;     // MEM2MEM
9875:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR1_RESET_VALUE = 0x0;
9876:../../..\hal\include/device/stm32g431.h **** 
9877:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9878:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR1_NDT =                 // Number of data items to transfer (16 
9879:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9880:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR1_RESET_VALUE = 0x0;
9881:../../..\hal\include/device/stm32g431.h **** 
9882:../../..\hal\include/device/stm32g431.h **** 
9883:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR1_RESET_VALUE = 0x0;
9884:../../..\hal\include/device/stm32g431.h **** 
9885:../../..\hal\include/device/stm32g431.h **** 
9886:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR1_RESET_VALUE = 0x0;
9887:../../..\hal\include/device/stm32g431.h **** 
9888:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_EN = 0x1;             // channel enable
9889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_TCIE = 0x2;           // TCIE
9890:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_HTIE = 0x4;           // HTIE
9891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_TEIE = 0x8;           // TEIE
9892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_DIR = 0x10;           // DIR
9893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_CIRC = 0x20;          // CIRC
9894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PINC = 0x40;          // PINC
9895:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MINC = 0x80;          // MINC
9896:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PSIZE =               // PSIZE (2 bits)
9898:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9899:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MSIZE =               // MSIZE (2 bits)
9901:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9902:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_PL =                  // PL (2 bits)
9904:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9905:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR2_MEM2MEM = 0x4000;     // MEM2MEM
9906:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR2_RESET_VALUE = 0x0;
9907:../../..\hal\include/device/stm32g431.h **** 
9908:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR2_NDT =                 // Number of data items to transfer (16 
9910:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9911:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR2_RESET_VALUE = 0x0;
9912:../../..\hal\include/device/stm32g431.h **** 
9913:../../..\hal\include/device/stm32g431.h **** 
9914:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR2_RESET_VALUE = 0x0;
9915:../../..\hal\include/device/stm32g431.h **** 
9916:../../..\hal\include/device/stm32g431.h **** 
9917:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR2_RESET_VALUE = 0x0;
9918:../../..\hal\include/device/stm32g431.h **** 
9919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_EN = 0x1;             // channel enable
9920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_TCIE = 0x2;           // TCIE
9921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_HTIE = 0x4;           // HTIE
9922:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_TEIE = 0x8;           // TEIE
9923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_DIR = 0x10;           // DIR
9924:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_CIRC = 0x20;          // CIRC
9925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PINC = 0x40;          // PINC
9926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MINC = 0x80;          // MINC
9927:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PSIZE =               // PSIZE (2 bits)
9929:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9930:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MSIZE =               // MSIZE (2 bits)
9932:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9933:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9934:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_PL =                  // PL (2 bits)
9935:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR3_MEM2MEM = 0x4000;     // MEM2MEM
9937:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR3_RESET_VALUE = 0x0;
9938:../../..\hal\include/device/stm32g431.h **** 
9939:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9940:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR3_NDT =                 // Number of data items to transfer (16 
9941:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9942:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR3_RESET_VALUE = 0x0;
9943:../../..\hal\include/device/stm32g431.h **** 
9944:../../..\hal\include/device/stm32g431.h **** 
9945:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR3_RESET_VALUE = 0x0;
9946:../../..\hal\include/device/stm32g431.h **** 
9947:../../..\hal\include/device/stm32g431.h **** 
9948:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR3_RESET_VALUE = 0x0;
9949:../../..\hal\include/device/stm32g431.h **** 
9950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_EN = 0x1;             // channel enable
9951:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_TCIE = 0x2;           // TCIE
9952:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_HTIE = 0x4;           // HTIE
9953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_TEIE = 0x8;           // TEIE
9954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_DIR = 0x10;           // DIR
9955:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_CIRC = 0x20;          // CIRC
9956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PINC = 0x40;          // PINC
9957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MINC = 0x80;          // MINC
9958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PSIZE =               // PSIZE (2 bits)
9960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MSIZE =               // MSIZE (2 bits)
9963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_PL =                  // PL (2 bits)
9966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9967:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR4_MEM2MEM = 0x4000;     // MEM2MEM
9968:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR4_RESET_VALUE = 0x0;
9969:../../..\hal\include/device/stm32g431.h **** 
9970:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR4_NDT =                 // Number of data items to transfer (16 
9972:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
9973:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR4_RESET_VALUE = 0x0;
9974:../../..\hal\include/device/stm32g431.h **** 
9975:../../..\hal\include/device/stm32g431.h **** 
9976:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR4_RESET_VALUE = 0x0;
9977:../../..\hal\include/device/stm32g431.h **** 
9978:../../..\hal\include/device/stm32g431.h **** 
9979:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR4_RESET_VALUE = 0x0;
9980:../../..\hal\include/device/stm32g431.h **** 
9981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_EN = 0x1;             // channel enable
9982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_TCIE = 0x2;           // TCIE
9983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_HTIE = 0x4;           // HTIE
9984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_TEIE = 0x8;           // TEIE
9985:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_DIR = 0x10;           // DIR
9986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_CIRC = 0x20;          // CIRC
9987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PINC = 0x40;          // PINC
9988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MINC = 0x80;          // MINC
9989:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9990:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PSIZE =               // PSIZE (2 bits)
9991:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
9992:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MSIZE =               // MSIZE (2 bits)
9994:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
9995:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
9996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_PL =                  // PL (2 bits)
9997:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
9998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR5_MEM2MEM = 0x4000;     // MEM2MEM
9999:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR5_RESET_VALUE = 0x0;
10000:../../..\hal\include/device/stm32g431.h **** 
10001:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR5_NDT =                 // Number of data items to transfer (16 
10003:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10004:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR5_RESET_VALUE = 0x0;
10005:../../..\hal\include/device/stm32g431.h **** 
10006:../../..\hal\include/device/stm32g431.h **** 
10007:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR5_RESET_VALUE = 0x0;
10008:../../..\hal\include/device/stm32g431.h **** 
10009:../../..\hal\include/device/stm32g431.h **** 
10010:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR5_RESET_VALUE = 0x0;
10011:../../..\hal\include/device/stm32g431.h **** 
10012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_EN = 0x1;             // channel enable
10013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_TCIE = 0x2;           // TCIE
10014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_HTIE = 0x4;           // HTIE
10015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_TEIE = 0x8;           // TEIE
10016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_DIR = 0x10;           // DIR
10017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_CIRC = 0x20;          // CIRC
10018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PINC = 0x40;          // PINC
10019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MINC = 0x80;          // MINC
10020:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PSIZE =               // PSIZE (2 bits)
10022:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
10023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MSIZE =               // MSIZE (2 bits)
10025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
10026:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_PL =                  // PL (2 bits)
10028:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR6_MEM2MEM = 0x4000;     // MEM2MEM
10030:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR6_RESET_VALUE = 0x0;
10031:../../..\hal\include/device/stm32g431.h **** 
10032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR6_NDT =                 // Number of data items to transfer (16 
10034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10035:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR6_RESET_VALUE = 0x0;
10036:../../..\hal\include/device/stm32g431.h **** 
10037:../../..\hal\include/device/stm32g431.h **** 
10038:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR6_RESET_VALUE = 0x0;
10039:../../..\hal\include/device/stm32g431.h **** 
10040:../../..\hal\include/device/stm32g431.h **** 
10041:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR6_RESET_VALUE = 0x0;
10042:../../..\hal\include/device/stm32g431.h **** 
10043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_EN = 0x1;             // channel enable
10044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_TCIE = 0x2;           // TCIE
10045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_HTIE = 0x4;           // HTIE
10046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_TEIE = 0x8;           // TEIE
10047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_DIR = 0x10;           // DIR
10048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_CIRC = 0x20;          // CIRC
10049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PINC = 0x40;          // PINC
10050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MINC = 0x80;          // MINC
10051:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PSIZE =               // PSIZE (2 bits)
10053:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
10054:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MSIZE =               // MSIZE (2 bits)
10056:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
10057:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10058:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_PL =                  // PL (2 bits)
10059:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR7_MEM2MEM = 0x4000;     // MEM2MEM
10061:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR7_RESET_VALUE = 0x0;
10062:../../..\hal\include/device/stm32g431.h **** 
10063:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR7_NDT =                 // Number of data items to transfer (16 
10065:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10066:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR7_RESET_VALUE = 0x0;
10067:../../..\hal\include/device/stm32g431.h **** 
10068:../../..\hal\include/device/stm32g431.h **** 
10069:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR7_RESET_VALUE = 0x0;
10070:../../..\hal\include/device/stm32g431.h **** 
10071:../../..\hal\include/device/stm32g431.h **** 
10072:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR7_RESET_VALUE = 0x0;
10073:../../..\hal\include/device/stm32g431.h **** 
10074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_EN = 0x1;             // channel enable
10075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_TCIE = 0x2;           // TCIE
10076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_HTIE = 0x4;           // HTIE
10077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_TEIE = 0x8;           // TEIE
10078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_DIR = 0x10;           // DIR
10079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_CIRC = 0x20;          // CIRC
10080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PINC = 0x40;          // PINC
10081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MINC = 0x80;          // MINC
10082:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PSIZE =               // PSIZE (2 bits)
10084:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3>::value<X>();
10085:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MSIZE =               // MSIZE (2 bits)
10087:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
10088:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_PL =                  // PL (2 bits)
10090:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR8_MEM2MEM = 0x4000;     // MEM2MEM
10092:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR8_RESET_VALUE = 0x0;
10093:../../..\hal\include/device/stm32g431.h **** 
10094:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNDTR8_NDT =                 // Number of data items to transfer (16 
10096:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10097:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNDTR8_RESET_VALUE = 0x0;
10098:../../..\hal\include/device/stm32g431.h **** 
10099:../../..\hal\include/device/stm32g431.h **** 
10100:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPAR8_RESET_VALUE = 0x0;
10101:../../..\hal\include/device/stm32g431.h **** 
10102:../../..\hal\include/device/stm32g431.h **** 
10103:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CMAR8_RESET_VALUE = 0x0;
10104:../../..\hal\include/device/stm32g431.h **** 
10105:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH1 = 56; // DMA2_CH1
10106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH2 = 57; // DMA2_CH2
10107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH3 = 58; // DMA2_CH3
10108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH4 = 59; // DMA2_CH4
10109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH5 = 60; // DMA2_CH5
10110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMA2_CH6 = 97; // DMA2_CH6
10111:../../..\hal\include/device/stm32g431.h **** };
10112:../../..\hal\include/device/stm32g431.h **** 
10113:../../..\hal\include/device/stm32g431.h **** static dma2_t& DMA2 = *reinterpret_cast<dma2_t*>(0x40020400);
10114:../../..\hal\include/device/stm32g431.h **** 
10115:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DMA2
10116:../../..\hal\include/device/stm32g431.h **** 
10117:../../..\hal\include/device/stm32g431.h **** 
10118:../../..\hal\include/device/stm32g431.h **** ////
10119:../../..\hal\include/device/stm32g431.h **** //
10120:../../..\hal\include/device/stm32g431.h **** //    DMAMUX
10121:../../..\hal\include/device/stm32g431.h **** //
10122:../../..\hal\include/device/stm32g431.h **** ////
10123:../../..\hal\include/device/stm32g431.h **** 
10124:../../..\hal\include/device/stm32g431.h **** struct dmamux_t
10125:../../..\hal\include/device/stm32g431.h **** {
10126:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C0CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10127:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C1CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10128:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C2CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10129:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C3CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10130:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C4CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10131:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C5CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10132:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C6CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10133:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C7CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10134:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C8CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10135:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C9CR;                 // [Read-write] DMAMux - DMA request line multiplexe
10136:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C10CR;                // [Read-write] DMAMux - DMA request line multiplexe
10137:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C11CR;                // [Read-write] DMAMux - DMA request line multiplexe
10138:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C12CR;                // [Read-write] DMAMux - DMA request line multiplexe
10139:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C13CR;                // [Read-write] DMAMux - DMA request line multiplexe
10140:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C14CR;                // [Read-write] DMAMux - DMA request line multiplexe
10141:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    C15CR;                // [Read-write] DMAMux - DMA request line multiplexe
10142:../../..\hal\include/device/stm32g431.h ****     reserved_t<16>       _0;
10143:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CSR;                  // [Read-only] DMAMUX request line multiplexer inter
10144:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFR;                  // [Write-only] DMAMUX request line multiplexer inte
10145:../../..\hal\include/device/stm32g431.h ****     reserved_t<30>       _1;
10146:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RG0CR;                // [Read-write] DMAMux - DMA request generator chann
10147:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RG1CR;                // [Read-write] DMAMux - DMA request generator chann
10148:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RG2CR;                // [Read-write] DMAMux - DMA request generator chann
10149:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RG3CR;                // [Read-write] DMAMux - DMA request generator chann
10150:../../..\hal\include/device/stm32g431.h ****     reserved_t<12>       _2;
10151:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RGSR;                 // [Read-only] DMAMux - DMA request generator status
10152:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RGCFR;                // [Write-only] DMAMux - DMA request generator clear
10153:../../..\hal\include/device/stm32g431.h **** 
10154:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10156:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_EGE = 0x200;          // Event generation enable/disable
10159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10160:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_SPOL =                // Synchronization event type selector Def
10162:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10163:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_NBREQ =               // Number of DMA requests to forward Defin
10165:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10166:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C0CR_SYNC_ID =             // Synchronization input selected (5 bits)
10168:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10169:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C0CR_RESET_VALUE = 0x0;
10170:../../..\hal\include/device/stm32g431.h **** 
10171:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10173:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10174:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_EGE = 0x200;          // Event generation enable/disable
10176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10177:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_SPOL =                // Synchronization event type selector Def
10179:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10180:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_NBREQ =               // Number of DMA requests to forward Defin
10182:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10183:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C1CR_SYNC_ID =             // Synchronization input selected (5 bits)
10185:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10186:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C1CR_RESET_VALUE = 0x0;
10187:../../..\hal\include/device/stm32g431.h **** 
10188:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10190:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10191:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_EGE = 0x200;          // Event generation enable/disable
10193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_SPOL =                // Synchronization event type selector Def
10196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10197:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_NBREQ =               // Number of DMA requests to forward Defin
10199:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10200:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10201:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C2CR_SYNC_ID =             // Synchronization input selected (5 bits)
10202:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10203:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C2CR_RESET_VALUE = 0x0;
10204:../../..\hal\include/device/stm32g431.h **** 
10205:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10207:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10208:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_EGE = 0x200;          // Event generation enable/disable
10210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10211:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_SPOL =                // Synchronization event type selector Def
10213:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_NBREQ =               // Number of DMA requests to forward Defin
10216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10217:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C3CR_SYNC_ID =             // Synchronization input selected (5 bits)
10219:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10220:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C3CR_RESET_VALUE = 0x0;
10221:../../..\hal\include/device/stm32g431.h **** 
10222:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10224:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_EGE = 0x200;          // Event generation enable/disable
10227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10228:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_SPOL =                // Synchronization event type selector Def
10230:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10231:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_NBREQ =               // Number of DMA requests to forward Defin
10233:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10234:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C4CR_SYNC_ID =             // Synchronization input selected (5 bits)
10236:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10237:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C4CR_RESET_VALUE = 0x0;
10238:../../..\hal\include/device/stm32g431.h **** 
10239:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10240:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10241:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_EGE = 0x200;          // Event generation enable/disable
10244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10245:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_SPOL =                // Synchronization event type selector Def
10247:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10248:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_NBREQ =               // Number of DMA requests to forward Defin
10250:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10251:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C5CR_SYNC_ID =             // Synchronization input selected (5 bits)
10253:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10254:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C5CR_RESET_VALUE = 0x0;
10255:../../..\hal\include/device/stm32g431.h **** 
10256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_EGE = 0x200;          // Event generation enable/disable
10261:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10262:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10263:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_SPOL =                // Synchronization event type selector Def
10264:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10265:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_NBREQ =               // Number of DMA requests to forward Defin
10267:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10268:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C6CR_SYNC_ID =             // Synchronization input selected (5 bits)
10270:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10271:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C6CR_RESET_VALUE = 0x0;
10272:../../..\hal\include/device/stm32g431.h **** 
10273:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10275:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_EGE = 0x200;          // Event generation enable/disable
10278:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10279:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_SPOL =                // Synchronization event type selector Def
10281:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10282:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_NBREQ =               // Number of DMA requests to forward Defin
10284:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10285:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C7CR_SYNC_ID =             // Synchronization input selected (5 bits)
10287:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10288:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C7CR_RESET_VALUE = 0x0;
10289:../../..\hal\include/device/stm32g431.h **** 
10290:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10292:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10293:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10294:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_EGE = 0x200;          // Event generation enable/disable
10295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_SPOL =                // Synchronization event type selector Def
10298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_NBREQ =               // Number of DMA requests to forward Defin
10301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10302:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C8CR_SYNC_ID =             // Synchronization input selected (5 bits)
10304:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10305:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C8CR_RESET_VALUE = 0x0;
10306:../../..\hal\include/device/stm32g431.h **** 
10307:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_DMAREQ_ID =           // Input DMA request line selected (7 bits
10309:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_SOIE = 0x100;         // Interrupt enable at synchronization eve
10311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_EGE = 0x200;          // Event generation enable/disable
10312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_SE = 0x10000;         // Synchronous operating mode enable/disab
10313:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_SPOL =                // Synchronization event type selector Def
10315:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10316:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10317:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_NBREQ =               // Number of DMA requests to forward Defin
10318:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10319:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10320:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C9CR_SYNC_ID =             // Synchronization input selected (5 bits)
10321:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10322:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C9CR_RESET_VALUE = 0x0;
10323:../../..\hal\include/device/stm32g431.h **** 
10324:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10325:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10326:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10328:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_EGE = 0x200;          // Event generation enable/disable
10329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10330:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_SPOL =                // Synchronization event type selector De
10332:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10333:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_NBREQ =               // Number of DMA requests to forward Defi
10335:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10336:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C10CR_SYNC_ID =             // Synchronization input selected (5 bits
10338:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10339:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C10CR_RESET_VALUE = 0x0;
10340:../../..\hal\include/device/stm32g431.h **** 
10341:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10343:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_EGE = 0x200;          // Event generation enable/disable
10346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10347:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_SPOL =                // Synchronization event type selector De
10349:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10350:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_NBREQ =               // Number of DMA requests to forward Defi
10352:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10353:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10354:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C11CR_SYNC_ID =             // Synchronization input selected (5 bits
10355:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10356:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C11CR_RESET_VALUE = 0x0;
10357:../../..\hal\include/device/stm32g431.h **** 
10358:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10360:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_EGE = 0x200;          // Event generation enable/disable
10363:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_SPOL =                // Synchronization event type selector De
10366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10367:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_NBREQ =               // Number of DMA requests to forward Defi
10369:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10370:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C12CR_SYNC_ID =             // Synchronization input selected (5 bits
10372:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10373:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C12CR_RESET_VALUE = 0x0;
10374:../../..\hal\include/device/stm32g431.h **** 
10375:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10376:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10377:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10378:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10379:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_EGE = 0x200;          // Event generation enable/disable
10380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10381:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_SPOL =                // Synchronization event type selector De
10383:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10384:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_NBREQ =               // Number of DMA requests to forward Defi
10386:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10387:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C13CR_SYNC_ID =             // Synchronization input selected (5 bits
10389:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10390:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C13CR_RESET_VALUE = 0x0;
10391:../../..\hal\include/device/stm32g431.h **** 
10392:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10393:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10394:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10396:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_EGE = 0x200;          // Event generation enable/disable
10397:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10398:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_SPOL =                // Synchronization event type selector De
10400:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10401:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_NBREQ =               // Number of DMA requests to forward Defi
10403:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10404:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C14CR_SYNC_ID =             // Synchronization input selected (5 bits
10406:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10407:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C14CR_RESET_VALUE = 0x0;
10408:../../..\hal\include/device/stm32g431.h **** 
10409:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_DMAREQ_ID =           // Input DMA request line selected (7 bit
10411:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
10412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_SOIE = 0x100;         // Interrupt enable at synchronization ev
10413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_EGE = 0x200;          // Event generation enable/disable
10414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_SE = 0x10000;         // Synchronous operating mode enable/disa
10415:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_SPOL =                // Synchronization event type selector De
10417:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10418:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_NBREQ =               // Number of DMA requests to forward Defi
10420:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10421:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t C15CR_SYNC_ID =             // Synchronization input selected (5 bits
10423:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10424:../../..\hal\include/device/stm32g431.h ****     static const uint32_t C15CR_RESET_VALUE = 0x0;
10425:../../..\hal\include/device/stm32g431.h **** 
10426:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_SOF =                 // Synchronization overrun event flag (16 b
10428:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10429:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CSR_RESET_VALUE = 0x0;
10430:../../..\hal\include/device/stm32g431.h **** 
10431:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFR_CSOF =                // Clear synchronization overrun event flag
10433:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
10434:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFR_RESET_VALUE = 0x0;
10435:../../..\hal\include/device/stm32g431.h **** 
10436:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG0CR_SIG_ID =              // DMA request trigger input selected (5 
10438:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
10439:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG0CR_OIE = 0x100;          // Interrupt enable at trigger event over
10440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG0CR_GE = 0x10000;         // DMA request generator channel enable/d
10441:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG0CR_GPOL =                // DMA request generator trigger event ty
10443:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10444:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG0CR_GNBREQ =              // Number of DMA requests to generate Def
10446:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10447:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RG0CR_RESET_VALUE = 0x0;
10448:../../..\hal\include/device/stm32g431.h **** 
10449:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10450:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG1CR_SIG_ID =              // DMA request trigger input selected (5 
10451:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
10452:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG1CR_OIE = 0x100;          // Interrupt enable at trigger event over
10453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG1CR_GE = 0x10000;         // DMA request generator channel enable/d
10454:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG1CR_GPOL =                // DMA request generator trigger event ty
10456:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10457:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG1CR_GNBREQ =              // Number of DMA requests to generate Def
10459:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10460:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RG1CR_RESET_VALUE = 0x0;
10461:../../..\hal\include/device/stm32g431.h **** 
10462:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG2CR_SIG_ID =              // DMA request trigger input selected (5 
10464:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
10465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG2CR_OIE = 0x100;          // Interrupt enable at trigger event over
10466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG2CR_GE = 0x10000;         // DMA request generator channel enable/d
10467:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG2CR_GPOL =                // DMA request generator trigger event ty
10469:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10470:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG2CR_GNBREQ =              // Number of DMA requests to generate Def
10472:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10473:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RG2CR_RESET_VALUE = 0x0;
10474:../../..\hal\include/device/stm32g431.h **** 
10475:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG3CR_SIG_ID =              // DMA request trigger input selected (5 
10477:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
10478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG3CR_OIE = 0x100;          // Interrupt enable at trigger event over
10479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG3CR_GE = 0x10000;         // DMA request generator channel enable/d
10480:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG3CR_GPOL =                // DMA request generator trigger event ty
10482:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x3>::value<X>();
10483:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RG3CR_GNBREQ =              // Number of DMA requests to generate Def
10485:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10486:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RG3CR_RESET_VALUE = 0x0;
10487:../../..\hal\include/device/stm32g431.h **** 
10488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RGSR_OF =                  // Trigger event overrun flag The flag is 
10490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10491:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RGSR_RESET_VALUE = 0x0;
10492:../../..\hal\include/device/stm32g431.h **** 
10493:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RGCFR_COF =                 // Clear trigger event overrun flag Upon 
10495:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10496:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RGCFR_RESET_VALUE = 0x0;
10497:../../..\hal\include/device/stm32g431.h **** 
10498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t DMAMUX_OVR = 94; // DMAMUX_OVR
10499:../../..\hal\include/device/stm32g431.h **** };
10500:../../..\hal\include/device/stm32g431.h **** 
10501:../../..\hal\include/device/stm32g431.h **** static dmamux_t& DMAMUX = *reinterpret_cast<dmamux_t*>(0x40020800);
10502:../../..\hal\include/device/stm32g431.h **** 
10503:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DMAMUX
10504:../../..\hal\include/device/stm32g431.h **** 
10505:../../..\hal\include/device/stm32g431.h **** 
10506:../../..\hal\include/device/stm32g431.h **** ////
10507:../../..\hal\include/device/stm32g431.h **** //
10508:../../..\hal\include/device/stm32g431.h **** //    System configuration controller
10509:../../..\hal\include/device/stm32g431.h **** //
10510:../../..\hal\include/device/stm32g431.h **** ////
10511:../../..\hal\include/device/stm32g431.h **** 
10512:../../..\hal\include/device/stm32g431.h **** struct syscfg_t
10513:../../..\hal\include/device/stm32g431.h **** {
10514:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MEMRMP;               // [Read-write] Remap Memory register
10515:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR1;                // [Read-write] peripheral mode configuration regist
10516:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EXTICR1;              // [Read-write] external interrupt configuration reg
10517:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EXTICR2;              // [Read-write] external interrupt configuration reg
10518:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EXTICR3;              // [Read-write] external interrupt configuration reg
10519:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EXTICR4;              // [Read-write] external interrupt configuration reg
10520:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SCSR;                 // CCM SRAM control and status register
10521:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR2;                // [Read-write] configuration register 2
10522:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SWPR;                 // [Read-write] SRAM Write protection register 1
10523:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SKR;                  // [Write-only] SRAM2 Key Register
10524:../../..\hal\include/device/stm32g431.h **** 
10525:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MEMRMP_MEM_MODE =            // Memory mapping selection (3 bits)
10527:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
10528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MEMRMP_FB_mode = 0x100;      // User Flash Bank mode
10529:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MEMRMP_RESET_VALUE = 0x0;
10530:../../..\hal\include/device/stm32g431.h **** 
10531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_BOOSTEN = 0x100;      // BOOSTEN
10532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_ANASWVDD = 0x200;     // GPIO analog switch control voltage sel
10533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C_PB6_FMP = 0x10000;// FM+ drive capability on PB6
10534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C_PB7_FMP = 0x20000;// FM+ drive capability on PB6
10535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C_PB8_FMP = 0x40000;// FM+ drive capability on PB6
10536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C_PB9_FMP = 0x80000;// FM+ drive capability on PB6
10537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C1_FMP = 0x100000;  // I2C1 FM+ drive capability enable
10538:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C2_FMP = 0x200000;  // I2C1 FM+ drive capability enable
10539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C3_FMP = 0x400000;  // I2C1 FM+ drive capability enable
10540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_I2C4_FMP = 0x800000;  // I2C1 FM+ drive capability enable
10541:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR1_FPU_IE =              // FPU Interrupts Enable (6 bits)
10543:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x3f>::value<X>();
10544:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR1_RESET_VALUE = 0x7c000001;
10545:../../..\hal\include/device/stm32g431.h **** 
10546:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR1_EXTI3 =               // EXTI x configuration (x = 0 to 3) (4
10548:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
10549:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10550:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR1_EXTI2 =               // EXTI x configuration (x = 0 to 3) (4
10551:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
10552:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR1_EXTI1 =               // EXTI x configuration (x = 0 to 3) (4
10554:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
10555:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR1_EXTI0 =               // EXTI x configuration (x = 0 to 3) (4
10557:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10558:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EXTICR1_RESET_VALUE = 0x0;
10559:../../..\hal\include/device/stm32g431.h **** 
10560:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR2_EXTI7 =               // EXTI x configuration (x = 4 to 7) (4
10562:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
10563:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR2_EXTI6 =               // EXTI x configuration (x = 4 to 7) (4
10565:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
10566:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR2_EXTI5 =               // EXTI x configuration (x = 4 to 7) (4
10568:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
10569:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR2_EXTI4 =               // EXTI x configuration (x = 4 to 7) (4
10571:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10572:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EXTICR2_RESET_VALUE = 0x0;
10573:../../..\hal\include/device/stm32g431.h **** 
10574:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR3_EXTI11 =              // EXTI x configuration (x = 8 to 11) (
10576:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
10577:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR3_EXTI10 =              // EXTI10 (4 bits)
10579:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
10580:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR3_EXTI9 =               // EXTI x configuration (x = 8 to 11) (
10582:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
10583:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR3_EXTI8 =               // EXTI x configuration (x = 8 to 11) (
10585:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10586:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EXTICR3_RESET_VALUE = 0x0;
10587:../../..\hal\include/device/stm32g431.h **** 
10588:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR4_EXTI15 =              // EXTI x configuration (x = 12 to 15) 
10590:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0xf>::value<X>();
10591:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR4_EXTI14 =              // EXTI x configuration (x = 12 to 15) 
10593:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
10594:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR4_EXTI13 =              // EXTI x configuration (x = 12 to 15) 
10596:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
10597:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EXTICR4_EXTI12 =              // EXTI x configuration (x = 12 to 15) 
10599:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
10600:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EXTICR4_RESET_VALUE = 0x0;
10601:../../..\hal\include/device/stm32g431.h **** 
10602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCSR_CCMER = 0x1;          // CCM SRAM Erase, Read-write
10603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCSR_CCMBSY = 0x2;         // CCM SRAM busy by erase operation, Read-
10604:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SCSR_RESET_VALUE = 0x0;
10605:../../..\hal\include/device/stm32g431.h **** 
10606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_CLL = 0x1;            // Core Lockup Lock
10607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SPL = 0x2;            // SRAM Parity Lock
10608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_PVDL = 0x4;           // PVD Lock
10609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_ECCL = 0x8;           // ECC Lock
10610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SPF = 0x100;          // SRAM Parity Flag
10611:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR2_RESET_VALUE = 0x0;
10612:../../..\hal\include/device/stm32g431.h **** 
10613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page0_WP = 0x1;       // Write protection
10614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page1_WP = 0x2;       // Write protection
10615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page2_WP = 0x4;       // Write protection
10616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page3_WP = 0x8;       // Write protection
10617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page4_WP = 0x10;      // Write protection
10618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page5_WP = 0x20;      // Write protection
10619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page6_WP = 0x40;      // Write protection
10620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page7_WP = 0x80;      // Write protection
10621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page8_WP = 0x100;     // Write protection
10622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page9_WP = 0x200;     // Write protection
10623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page10_WP = 0x400;    // Write protection
10624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page11_WP = 0x800;    // Write protection
10625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page12_WP = 0x1000;   // Write protection
10626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page13_WP = 0x2000;   // Write protection
10627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page14_WP = 0x4000;   // Write protection
10628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page15_WP = 0x8000;   // Write protection
10629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page16_WP = 0x10000;  // Write protection
10630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page17_WP = 0x20000;  // Write protection
10631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page18_WP = 0x40000;  // Write protection
10632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page19_WP = 0x80000;  // Write protection
10633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page20_WP = 0x100000; // Write protection
10634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page21_WP = 0x200000; // Write protection
10635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page22_WP = 0x400000; // Write protection
10636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page23_WP = 0x800000; // Write protection
10637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page24_WP = 0x1000000;// Write protection
10638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page25_WP = 0x2000000;// Write protection
10639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page26_WP = 0x4000000;// Write protection
10640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page27_WP = 0x8000000;// Write protection
10641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page28_WP = 0x10000000;// Write protection
10642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page29_WP = 0x20000000;// Write protection
10643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page30_WP = 0x40000000;// Write protection
10644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SWPR_Page31_WP = 0x80000000;// Write protection
10645:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SWPR_RESET_VALUE = 0x0;
10646:../../..\hal\include/device/stm32g431.h **** 
10647:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SKR_KEY =                 // SRAM2 Key for software erase (8 bits)
10649:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
10650:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SKR_RESET_VALUE = 0x0;
10651:../../..\hal\include/device/stm32g431.h **** };
10652:../../..\hal\include/device/stm32g431.h **** 
10653:../../..\hal\include/device/stm32g431.h **** static syscfg_t& SYSCFG = *reinterpret_cast<syscfg_t*>(0x40010000);
10654:../../..\hal\include/device/stm32g431.h **** 
10655:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SYSCFG
10656:../../..\hal\include/device/stm32g431.h **** 
10657:../../..\hal\include/device/stm32g431.h **** 
10658:../../..\hal\include/device/stm32g431.h **** ////
10659:../../..\hal\include/device/stm32g431.h **** //
10660:../../..\hal\include/device/stm32g431.h **** //    Voltage reference buffer
10661:../../..\hal\include/device/stm32g431.h **** //
10662:../../..\hal\include/device/stm32g431.h **** ////
10663:../../..\hal\include/device/stm32g431.h **** 
10664:../../..\hal\include/device/stm32g431.h **** struct vrefbuf_t
10665:../../..\hal\include/device/stm32g431.h **** {
10666:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    VREFBUF_CSR;          // VREF_BUF Control and Status Register
10667:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    VREFBUF_CCR;          // [Read-write] VREF_BUF Calibration Control Registe
10668:../../..\hal\include/device/stm32g431.h **** 
10669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VREFBUF_CSR_ENVR = 0x1;           // Enable Voltage Reference, Read-w
10670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VREFBUF_CSR_HIZ = 0x2;            // High impedence mode for the VREF
10671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VREFBUF_CSR_VRR = 0x8;            // Voltage reference buffer ready, 
10672:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VREFBUF_CSR_VRS =                 // Voltage reference scale (2 bits)
10674:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
10675:../../..\hal\include/device/stm32g431.h ****     static const uint32_t VREFBUF_CSR_RESET_VALUE = 0x2;
10676:../../..\hal\include/device/stm32g431.h **** 
10677:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VREFBUF_CCR_TRIM =                // Trimming code (6 bits)
10679:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
10680:../../..\hal\include/device/stm32g431.h ****     static const uint32_t VREFBUF_CCR_RESET_VALUE = 0x0;
10681:../../..\hal\include/device/stm32g431.h **** };
10682:../../..\hal\include/device/stm32g431.h **** 
10683:../../..\hal\include/device/stm32g431.h **** static vrefbuf_t& VREFBUF = *reinterpret_cast<vrefbuf_t*>(0x40010030);
10684:../../..\hal\include/device/stm32g431.h **** 
10685:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_VREFBUF
10686:../../..\hal\include/device/stm32g431.h **** 
10687:../../..\hal\include/device/stm32g431.h **** 
10688:../../..\hal\include/device/stm32g431.h **** ////
10689:../../..\hal\include/device/stm32g431.h **** //
10690:../../..\hal\include/device/stm32g431.h **** //    Comparator control and status register
10691:../../..\hal\include/device/stm32g431.h **** //
10692:../../..\hal\include/device/stm32g431.h **** ////
10693:../../..\hal\include/device/stm32g431.h **** 
10694:../../..\hal\include/device/stm32g431.h **** struct comp_t
10695:../../..\hal\include/device/stm32g431.h **** {
10696:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    COMP_C1CSR;           // Comparator control/status register
10697:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    COMP_C2CSR;           // Comparator control/status register
10698:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    COMP_C3CSR;           // Comparator control/status register
10699:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
10700:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    COMP_C4CSR;           // Comparator control/status register
10701:../../..\hal\include/device/stm32g431.h **** 
10702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_EN = 0x1;             // EN, Read-write
10703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_COMP_DEGLITCH_EN = 0x2;// COMP_DEGLITCH_EN, Read-write
10704:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_INMSEL =              // INMSEL (3 bits), Read-write
10706:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
10707:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_INPSEL = 0x100;       // INPSEL, Read-write
10708:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_POL = 0x8000;         // POL, Read-write
10709:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10710:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_HYST =                // HYST (3 bits), Read-write
10711:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
10712:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_BLANKSEL =            // BLANKSEL (3 bits), Read-write
10714:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x7>::value<X>();
10715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_BRGEN = 0x400000;     // BRGEN, Read-write
10716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_SCALEN = 0x800000;    // SCALEN, Read-write
10717:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_VALUE = 0x40000000;   // VALUE, Read-only
10718:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C1CSR_LOCK = 0x80000000;    // LOCK, Read-write
10719:../../..\hal\include/device/stm32g431.h ****     static const uint32_t COMP_C1CSR_RESET_VALUE = 0x0;
10720:../../..\hal\include/device/stm32g431.h **** 
10721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_EN = 0x1;             // EN, Read-write
10722:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_COMP_DEGLITCH_EN = 0x2;// COMP_DEGLITCH_EN, Read-write
10723:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_INMSEL =              // INMSEL (3 bits), Read-write
10725:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
10726:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_INPSEL = 0x100;       // INPSEL, Read-write
10727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_POL = 0x8000;         // POL, Read-write
10728:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_HYST =                // HYST (3 bits), Read-write
10730:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
10731:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10732:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_BLANKSEL =            // BLANKSEL (3 bits), Read-write
10733:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x7>::value<X>();
10734:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_BRGEN = 0x400000;     // BRGEN, Read-write
10735:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_SCALEN = 0x800000;    // SCALEN, Read-write
10736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_VALUE = 0x40000000;   // VALUE, Read-only
10737:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C2CSR_LOCK = 0x80000000;    // LOCK, Read-write
10738:../../..\hal\include/device/stm32g431.h ****     static const uint32_t COMP_C2CSR_RESET_VALUE = 0x0;
10739:../../..\hal\include/device/stm32g431.h **** 
10740:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_EN = 0x1;             // EN, Read-write
10741:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_COMP_DEGLITCH_EN = 0x2;// COMP_DEGLITCH_EN, Read-write
10742:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10743:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_INMSEL =              // INMSEL (3 bits), Read-write
10744:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
10745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_INPSEL = 0x100;       // INPSEL, Read-write
10746:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_POL = 0x8000;         // POL, Read-write
10747:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_HYST =                // HYST (3 bits), Read-write
10749:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
10750:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_BLANKSEL =            // BLANKSEL (3 bits), Read-write
10752:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x7>::value<X>();
10753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_BRGEN = 0x400000;     // BRGEN, Read-write
10754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_SCALEN = 0x800000;    // SCALEN, Read-write
10755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_VALUE = 0x40000000;   // VALUE, Read-only
10756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C3CSR_LOCK = 0x80000000;    // LOCK, Read-write
10757:../../..\hal\include/device/stm32g431.h ****     static const uint32_t COMP_C3CSR_RESET_VALUE = 0x0;
10758:../../..\hal\include/device/stm32g431.h **** 
10759:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_EN = 0x1;             // EN, Read-write
10760:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_COMP_DEGLITCH_EN = 0x2;// COMP_DEGLITCH_EN, Read-write
10761:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10762:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_INMSEL =              // INMSEL (3 bits), Read-write
10763:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
10764:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_INPSEL = 0x100;       // INPSEL, Read-write
10765:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_POL = 0x8000;         // POL, Read-write
10766:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_HYST =                // HYST (3 bits), Read-write
10768:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
10769:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10770:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_BLANKSEL =            // BLANKSEL (3 bits), Read-write
10771:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x7>::value<X>();
10772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_BRGEN = 0x400000;     // BRGEN, Read-write
10773:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_SCALEN = 0x800000;    // SCALEN, Read-write
10774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_VALUE = 0x40000000;   // VALUE, Read-only
10775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t COMP_C4CSR_LOCK = 0x80000000;    // LOCK, Read-write
10776:../../..\hal\include/device/stm32g431.h ****     static const uint32_t COMP_C4CSR_RESET_VALUE = 0x0;
10777:../../..\hal\include/device/stm32g431.h **** 
10778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t COMP1_2_3 = 64; // COMP1_2_3
10779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t COMP4 = 65; // COMP4_5_6
10780:../../..\hal\include/device/stm32g431.h **** };
10781:../../..\hal\include/device/stm32g431.h **** 
10782:../../..\hal\include/device/stm32g431.h **** static comp_t& COMP = *reinterpret_cast<comp_t*>(0x40010200);
10783:../../..\hal\include/device/stm32g431.h **** 
10784:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_COMP
10785:../../..\hal\include/device/stm32g431.h **** 
10786:../../..\hal\include/device/stm32g431.h **** 
10787:../../..\hal\include/device/stm32g431.h **** ////
10788:../../..\hal\include/device/stm32g431.h **** //
10789:../../..\hal\include/device/stm32g431.h **** //    Operational amplifiers
10790:../../..\hal\include/device/stm32g431.h **** //
10791:../../..\hal\include/device/stm32g431.h **** ////
10792:../../..\hal\include/device/stm32g431.h **** 
10793:../../..\hal\include/device/stm32g431.h **** struct opamp_t
10794:../../..\hal\include/device/stm32g431.h **** {
10795:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP1_CSR;           // [Read-write] OPAMP1 control/status register
10796:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP2_CSR;           // [Read-write] OPAMP2 control/status register
10797:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP3_CSR;           // [Read-write] OPAMP3 control/status register
10798:../../..\hal\include/device/stm32g431.h ****     reserved_t<3>        _0;
10799:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP1_TCMR;          // [Read-write] OPAMP1 control/status register
10800:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP2_TCMR;          // [Read-write] OPAMP2 control/status register
10801:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OPAMP3_TCMR;          // [Read-write] OPAMP3 control/status register
10802:../../..\hal\include/device/stm32g431.h **** 
10803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_OPAEN = 0x1;          // Operational amplifier Enable
10804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_FORCE_VP = 0x2;       // FORCE_VP
10805:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_VP_SEL =              // VP_SEL (2 bits)
10807:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
10808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_USERTRIM = 0x10;      // USERTRIM
10809:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10810:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_VM_SEL =              // VM_SEL (2 bits)
10811:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
10812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_OPAHSM = 0x80;        // OPAHSM
10813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_OPAINTOEN = 0x100;    // OPAINTOEN
10814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_CALON = 0x800;        // CALON
10815:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_CALSEL =              // CALSEL (2 bits)
10817:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10818:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_PGA_GAIN =            // PGA_GAIN (5 bits)
10820:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x1f>::value<X>();
10821:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_TRIMOFFSETP =         // TRIMOFFSETP (5 bits)
10823:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10824:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_TRIMOFFSETN =         // TRIMOFFSETN (5 bits)
10826:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_CALOUT = 0x40000000;  // CALOUT
10828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_CSR_LOCK = 0x80000000;    // LOCK
10829:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP1_CSR_RESET_VALUE = 0x0;
10830:../../..\hal\include/device/stm32g431.h **** 
10831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_OPAEN = 0x1;          // Operational amplifier Enable
10832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_FORCE_VP = 0x2;       // FORCE_VP
10833:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_VP_SEL =              // VP_SEL (2 bits)
10835:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
10836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_USERTRIM = 0x10;      // USERTRIM
10837:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_VM_SEL =              // VM_SEL (2 bits)
10839:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
10840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_OPAHSM = 0x80;        // OPAHSM
10841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_OPAINTOEN = 0x100;    // OPAINTOEN
10842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_CALON = 0x800;        // CALON
10843:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_CALSEL =              // CALSEL (2 bits)
10845:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10846:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_PGA_GAIN =            // PGA_GAIN (5 bits)
10848:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x1f>::value<X>();
10849:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_TRIMOFFSETP =         // TRIMOFFSETP (5 bits)
10851:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10852:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_TRIMOFFSETN =         // TRIMOFFSETN (5 bits)
10854:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_CALOUT = 0x40000000;  // CALOUT
10856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_CSR_LOCK = 0x80000000;    // LOCK
10857:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP2_CSR_RESET_VALUE = 0x0;
10858:../../..\hal\include/device/stm32g431.h **** 
10859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_OPAEN = 0x1;          // Operational amplifier Enable
10860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_FORCE_VP = 0x2;       // FORCE_VP
10861:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_VP_SEL =              // VP_SEL (2 bits)
10863:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
10864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_USERTRIM = 0x10;      // USERTRIM
10865:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_VM_SEL =              // VM_SEL (2 bits)
10867:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
10868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_OPAHSM = 0x80;        // OPAHSM
10869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_OPAINTOEN = 0x100;    // OPAINTOEN
10870:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_CALON = 0x800;        // CALON
10871:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_CALSEL =              // CALSEL (2 bits)
10873:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
10874:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10875:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_PGA_GAIN =            // PGA_GAIN (5 bits)
10876:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x1f>::value<X>();
10877:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10878:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_TRIMOFFSETP =         // TRIMOFFSETP (5 bits)
10879:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x1f>::value<X>();
10880:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10881:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_TRIMOFFSETN =         // TRIMOFFSETN (5 bits)
10882:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
10883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_CALOUT = 0x40000000;  // CALOUT
10884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_CSR_LOCK = 0x80000000;    // LOCK
10885:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP3_CSR_RESET_VALUE = 0x0;
10886:../../..\hal\include/device/stm32g431.h **** 
10887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_VMS_SEL = 0x1;        // VMS_SEL
10888:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_VPS_SEL =             // VPS_SEL (2 bits)
10890:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
10891:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_T1CM_EN = 0x8;        // T1CM_EN
10892:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_T8CM_EN = 0x10;       // T8CM_EN
10893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_T20CM_EN = 0x20;      // T20CM_EN
10894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP1_TCMR_LOCK = 0x80000000;    // LOCK
10895:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP1_TCMR_RESET_VALUE = 0x0;
10896:../../..\hal\include/device/stm32g431.h **** 
10897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_VMS_SEL = 0x1;        // VMS_SEL
10898:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10899:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_VPS_SEL =             // VPS_SEL (2 bits)
10900:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
10901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_T1CM_EN = 0x8;        // T1CM_EN
10902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_T8CM_EN = 0x10;       // T8CM_EN
10903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_T20CM_EN = 0x20;      // T20CM_EN
10904:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP2_TCMR_LOCK = 0x80000000;    // LOCK
10905:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP2_TCMR_RESET_VALUE = 0x0;
10906:../../..\hal\include/device/stm32g431.h **** 
10907:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_VMS_SEL = 0x1;        // VMS_SEL
10908:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_VPS_SEL =             // VPS_SEL (2 bits)
10910:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
10911:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_T1CM_EN = 0x8;        // T1CM_EN
10912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_T8CM_EN = 0x10;       // T8CM_EN
10913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_T20CM_EN = 0x20;      // T20CM_EN
10914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OPAMP3_TCMR_LOCK = 0x80000000;    // LOCK
10915:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OPAMP3_TCMR_RESET_VALUE = 0x0;
10916:../../..\hal\include/device/stm32g431.h **** };
10917:../../..\hal\include/device/stm32g431.h **** 
10918:../../..\hal\include/device/stm32g431.h **** static opamp_t& OPAMP = *reinterpret_cast<opamp_t*>(0x40010300);
10919:../../..\hal\include/device/stm32g431.h **** 
10920:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_OPAMP
10921:../../..\hal\include/device/stm32g431.h **** 
10922:../../..\hal\include/device/stm32g431.h **** 
10923:../../..\hal\include/device/stm32g431.h **** ////
10924:../../..\hal\include/device/stm32g431.h **** //
10925:../../..\hal\include/device/stm32g431.h **** //    Digital-to-analog converter
10926:../../..\hal\include/device/stm32g431.h **** //
10927:../../..\hal\include/device/stm32g431.h **** ////
10928:../../..\hal\include/device/stm32g431.h **** 
10929:../../..\hal\include/device/stm32g431.h **** struct dac1_t
10930:../../..\hal\include/device/stm32g431.h **** {
10931:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CR;               // [Read-write] DAC control register
10932:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SWTRGR;           // [Write-only] DAC software trigger register
10933:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R1;          // [Read-write] DAC channel1 12-bit right-aligned da
10934:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L1;          // [Read-write] DAC channel1 12-bit left aligned dat
10935:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R1;           // [Read-write] DAC channel1 8-bit right aligned dat
10936:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R2;          // [Read-write] DAC channel2 12-bit right aligned da
10937:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L2;          // [Read-write] DAC channel2 12-bit left aligned dat
10938:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R2;           // [Read-write] DAC channel2 8-bit right-aligned dat
10939:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12RD;          // [Read-write] Dual DAC 12-bit right-aligned data h
10940:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12LD;          // [Read-write] DUAL DAC 12-bit left aligned data ho
10941:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8RD;           // [Read-write] DUAL DAC 8-bit right aligned data ho
10942:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR1;             // [Read-only] DAC channel1 data output register
10943:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR2;             // [Read-only] DAC channel2 data output register
10944:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SR;               // DAC status register
10945:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CCR;              // [Read-write] DAC calibration control register
10946:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_MCR;              // [Read-write] DAC mode control register
10947:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR1;            // [Read-write] DAC Sample and Hold sample time regi
10948:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR2;            // [Read-write] DAC Sample and Hold sample time regi
10949:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHHR;             // [Read-write] DAC Sample and Hold hold time regist
10950:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHRR;             // [Read-write] DAC Sample and Hold refresh time reg
10951:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
10952:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR1;             // [Read-write] Sawtooth register
10953:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR2;             // [Read-write] Sawtooth register
10954:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STMODR;           // [Read-write] Sawtooth Mode register
10955:../../..\hal\include/device/stm32g431.h **** 
10956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN1 = 0x1;            // DAC channel1 enable This bit is set a
10957:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN1 = 0x2;           // DAC channel1 trigger enable
10958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL1 =               // DAC channel1 trigger selection These 
10960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0xf>::value<X>();
10961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE1 =               // DAC channel1 noise/triangle wave gene
10963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
10964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP1 =               // DAC channel1 mask/amplitude selector 
10966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
10967:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN1 = 0x1000;      // DAC channel1 DMA enable This bit is s
10968:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE1 = 0x2000;   // DAC channel1 DMA Underrun Interrupt e
10969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN1 = 0x4000;        // DAC Channel 1 calibration enable This
10970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN2 = 0x10000;        // DAC channel2 enable This bit is set a
10971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN2 = 0x20000;       // DAC channel2 trigger enable
10972:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL2 =               // DAC channel2 trigger selection These 
10974:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
10975:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10976:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE2 =               // DAC channel2 noise/triangle wave gene
10977:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
10978:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP2 =               // DAC channel2 mask/amplitude selector 
10980:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
10981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN2 = 0x10000000;  // DAC channel2 DMA enable This bit is s
10982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE2 = 0x20000000;// DAC channel2 DMA underrun interrupt 
10983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN2 = 0x40000000;    // DAC Channel 2 calibration enable This
10984:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CR_RESET_VALUE = 0x0;
10985:../../..\hal\include/device/stm32g431.h **** 
10986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG1 = 0x1;        // DAC channel1 software trigger Thi
10987:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG2 = 0x2;        // DAC channel2 software trigger Thi
10988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB1 = 0x10000;   // DAC channel1 software trigger B
10989:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB2 = 0x20000;   // DAC channel2 software trigger B
10990:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SWTRGR_RESET_VALUE = 0x0;
10991:../../..\hal\include/device/stm32g431.h **** 
10992:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHR =            // DAC channel1 12-bit right-aligne
10994:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
10995:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
10996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHRB =           // DAC channel1 12-bit right-aligne
10997:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
10998:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R1_RESET_VALUE = 0x0;
10999:../../..\hal\include/device/stm32g431.h **** 
11000:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHR =            // DAC channel1 12-bit left-aligned
11002:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11003:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHRB =           // DAC channel1 12-bit left-aligned
11005:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11006:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L1_RESET_VALUE = 0x0;
11007:../../..\hal\include/device/stm32g431.h **** 
11008:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11010:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11011:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHRB =           // DAC channel1 8-bit right-aligned 
11013:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11014:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R1_RESET_VALUE = 0x0;
11015:../../..\hal\include/device/stm32g431.h **** 
11016:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHR =            // DAC channel2 12-bit right-aligne
11018:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11019:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHRB =           // DAC channel2 12-bit right-aligne
11021:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11022:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R2_RESET_VALUE = 0x0;
11023:../../..\hal\include/device/stm32g431.h **** 
11024:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHR =            // DAC channel2 12-bit left-aligned
11026:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11027:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHRB =           // DAC channel2 12-bit left-aligned
11029:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11030:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L2_RESET_VALUE = 0x0;
11031:../../..\hal\include/device/stm32g431.h **** 
11032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11035:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHRB =           // DAC channel2 8-bit right-aligned 
11037:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11038:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R2_RESET_VALUE = 0x0;
11039:../../..\hal\include/device/stm32g431.h **** 
11040:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC1DHR =            // DAC channel1 12-bit right-aligne
11042:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11043:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC2DHR =            // DAC channel2 12-bit right-aligne
11045:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11046:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12RD_RESET_VALUE = 0x0;
11047:../../..\hal\include/device/stm32g431.h **** 
11048:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC1DHR =            // DAC channel1 12-bit left-aligned
11050:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11051:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC2DHR =            // DAC channel2 12-bit left-aligned
11053:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11054:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12LD_RESET_VALUE = 0x0;
11055:../../..\hal\include/device/stm32g431.h **** 
11056:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11057:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11058:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11059:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11061:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11062:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8RD_RESET_VALUE = 0x0;
11063:../../..\hal\include/device/stm32g431.h **** 
11064:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DOR =            // DAC channel1 data output These bits
11066:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11067:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DORB =           // DAC channel1 data output (12 bits)
11069:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11070:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR1_RESET_VALUE = 0x0;
11071:../../..\hal\include/device/stm32g431.h **** 
11072:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DOR =            // DAC channel2 data output These bits
11074:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11075:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DORB =           // DAC channel2 data output (12 bits)
11077:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11078:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR2_RESET_VALUE = 0x0;
11079:../../..\hal\include/device/stm32g431.h **** 
11080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC1RDY = 0x800;      // DAC channel1 ready status bit, Read-w
11081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT1 = 0x1000;    // DAC channel1 output register status b
11082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR1 = 0x2000;     // DAC channel1 DMA underrun flag This b
11083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG1 = 0x4000;   // DAC Channel 1 calibration offset stat
11084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST1 = 0x8000;       // DAC Channel 1 busy writing sample tim
11085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC2RDY = 0x8000000;  // DAC channel 2 ready status bit, Read-
11086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT2 = 0x10000000;// DAC channel 2 output register status 
11087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR2 = 0x20000000; // DAC channel2 DMA underrun flag This b
11088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG2 = 0x40000000;// DAC Channel 2 calibration offset sta
11089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST2 = 0x80000000;   // DAC Channel 2 busy writing sample tim
11090:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SR_RESET_VALUE = 0x0;
11091:../../..\hal\include/device/stm32g431.h **** 
11092:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM1 =              // DAC Channel 1 offset trimming value 
11094:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
11095:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM2 =              // DAC Channel 2 offset trimming value 
11097:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
11098:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CCR_RESET_VALUE = 0x0;
11099:../../..\hal\include/device/stm32g431.h **** 
11100:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE1 =               // DAC Channel 1 mode These bits can be
11102:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
11103:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE1 = 0x100;   // DAC Channel1 DMA double data mode
11104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT1 = 0x200;   // Enable signed format for DAC channel
11105:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_HFSEL =               // High frequency interface mode select
11107:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
11108:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE2 =               // DAC Channel 2 mode These bits can be
11110:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
11111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE2 = 0x1000000;// DAC Channel2 DMA double data mode
11112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT2 = 0x2000000;// Enable signed format for DAC channe
11113:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_MCR_RESET_VALUE = 0x0;
11114:../../..\hal\include/device/stm32g431.h **** 
11115:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR1_TSAMPLE1 =            // DAC Channel 1 sample Time (only va
11117:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11118:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR1_RESET_VALUE = 0x0;
11119:../../..\hal\include/device/stm32g431.h **** 
11120:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR2_TSAMPLE2 =            // DAC Channel 2 sample Time (only va
11122:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11123:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR2_RESET_VALUE = 0x0;
11124:../../..\hal\include/device/stm32g431.h **** 
11125:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD1 =              // DAC Channel 1 hold Time (only valid
11127:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11128:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD2 =              // DAC Channel 2 hold time (only valid
11130:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3ff>::value<X>();
11131:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHHR_RESET_VALUE = 0x10001;
11132:../../..\hal\include/device/stm32g431.h **** 
11133:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH1 =           // DAC Channel 1 refresh Time (only va
11135:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH2 =           // DAC Channel 2 refresh Time (only va
11138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
11139:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHRR_RESET_VALUE = 0x10001;
11140:../../..\hal\include/device/stm32g431.h **** 
11141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STRSTDATA1 =          // DAC Channel 1 Sawtooth reset value 
11143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STDIR1 = 0x1000;      // DAC Channel1 Sawtooth direction set
11145:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STINCDATA1 =          // DAC CH1 Sawtooth increment value (1
11147:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11148:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR1_RESET_VALUE = 0x0;
11149:../../..\hal\include/device/stm32g431.h **** 
11150:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STRSTDATA2 =          // DAC Channel 2 Sawtooth reset value 
11152:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STDIR2 = 0x1000;      // DAC Channel2 Sawtooth direction set
11154:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11155:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STINCDATA2 =          // DAC CH2 Sawtooth increment value (1
11156:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11157:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR2_RESET_VALUE = 0x0;
11158:../../..\hal\include/device/stm32g431.h **** 
11159:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL1 =       // DAC Channel 1 Sawtooth Reset trig
11161:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
11162:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL1 =       // DAC Channel 1 Sawtooth Increment 
11164:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11165:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL2 =       // DAC Channel 1 Sawtooth Reset trig
11167:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
11168:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL2 =       // DAC Channel 2 Sawtooth Increment 
11170:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11171:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STMODR_RESET_VALUE = 0x0;
11172:../../..\hal\include/device/stm32g431.h **** };
11173:../../..\hal\include/device/stm32g431.h **** 
11174:../../..\hal\include/device/stm32g431.h **** static dac1_t& DAC1 = *reinterpret_cast<dac1_t*>(0x50000800);
11175:../../..\hal\include/device/stm32g431.h **** 
11176:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DAC1
11177:../../..\hal\include/device/stm32g431.h **** 
11178:../../..\hal\include/device/stm32g431.h **** 
11179:../../..\hal\include/device/stm32g431.h **** ////
11180:../../..\hal\include/device/stm32g431.h **** //
11181:../../..\hal\include/device/stm32g431.h **** //    Digital-to-analog converter
11182:../../..\hal\include/device/stm32g431.h **** //
11183:../../..\hal\include/device/stm32g431.h **** ////
11184:../../..\hal\include/device/stm32g431.h **** 
11185:../../..\hal\include/device/stm32g431.h **** struct dac2_t
11186:../../..\hal\include/device/stm32g431.h **** {
11187:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CR;               // [Read-write] DAC control register
11188:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SWTRGR;           // [Write-only] DAC software trigger register
11189:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R1;          // [Read-write] DAC channel1 12-bit right-aligned da
11190:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L1;          // [Read-write] DAC channel1 12-bit left aligned dat
11191:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R1;           // [Read-write] DAC channel1 8-bit right aligned dat
11192:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R2;          // [Read-write] DAC channel2 12-bit right aligned da
11193:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L2;          // [Read-write] DAC channel2 12-bit left aligned dat
11194:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R2;           // [Read-write] DAC channel2 8-bit right-aligned dat
11195:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12RD;          // [Read-write] Dual DAC 12-bit right-aligned data h
11196:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12LD;          // [Read-write] DUAL DAC 12-bit left aligned data ho
11197:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8RD;           // [Read-write] DUAL DAC 8-bit right aligned data ho
11198:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR1;             // [Read-only] DAC channel1 data output register
11199:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR2;             // [Read-only] DAC channel2 data output register
11200:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SR;               // DAC status register
11201:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CCR;              // [Read-write] DAC calibration control register
11202:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_MCR;              // [Read-write] DAC mode control register
11203:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR1;            // [Read-write] DAC Sample and Hold sample time regi
11204:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR2;            // [Read-write] DAC Sample and Hold sample time regi
11205:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHHR;             // [Read-write] DAC Sample and Hold hold time regist
11206:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHRR;             // [Read-write] DAC Sample and Hold refresh time reg
11207:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
11208:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR1;             // [Read-write] Sawtooth register
11209:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR2;             // [Read-write] Sawtooth register
11210:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STMODR;           // [Read-write] Sawtooth Mode register
11211:../../..\hal\include/device/stm32g431.h **** 
11212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN1 = 0x1;            // DAC channel1 enable This bit is set a
11213:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN1 = 0x2;           // DAC channel1 trigger enable
11214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL1 =               // DAC channel1 trigger selection These 
11216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0xf>::value<X>();
11217:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE1 =               // DAC channel1 noise/triangle wave gene
11219:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
11220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP1 =               // DAC channel1 mask/amplitude selector 
11222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN1 = 0x1000;      // DAC channel1 DMA enable This bit is s
11224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE1 = 0x2000;   // DAC channel1 DMA Underrun Interrupt e
11225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN1 = 0x4000;        // DAC Channel 1 calibration enable This
11226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN2 = 0x10000;        // DAC channel2 enable This bit is set a
11227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN2 = 0x20000;       // DAC channel2 trigger enable
11228:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11229:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL2 =               // DAC channel2 trigger selection These 
11230:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
11231:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE2 =               // DAC channel2 noise/triangle wave gene
11233:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
11234:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP2 =               // DAC channel2 mask/amplitude selector 
11236:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11237:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN2 = 0x10000000;  // DAC channel2 DMA enable This bit is s
11238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE2 = 0x20000000;// DAC channel2 DMA underrun interrupt 
11239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN2 = 0x40000000;    // DAC Channel 2 calibration enable This
11240:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CR_RESET_VALUE = 0x0;
11241:../../..\hal\include/device/stm32g431.h **** 
11242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG1 = 0x1;        // DAC channel1 software trigger Thi
11243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG2 = 0x2;        // DAC channel2 software trigger Thi
11244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB1 = 0x10000;   // DAC channel1 software trigger B
11245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB2 = 0x20000;   // DAC channel2 software trigger B
11246:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SWTRGR_RESET_VALUE = 0x0;
11247:../../..\hal\include/device/stm32g431.h **** 
11248:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHR =            // DAC channel1 12-bit right-aligne
11250:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11251:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHRB =           // DAC channel1 12-bit right-aligne
11253:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11254:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R1_RESET_VALUE = 0x0;
11255:../../..\hal\include/device/stm32g431.h **** 
11256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHR =            // DAC channel1 12-bit left-aligned
11258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11259:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHRB =           // DAC channel1 12-bit left-aligned
11261:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11262:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L1_RESET_VALUE = 0x0;
11263:../../..\hal\include/device/stm32g431.h **** 
11264:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11265:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11266:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11267:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHRB =           // DAC channel1 8-bit right-aligned 
11269:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11270:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R1_RESET_VALUE = 0x0;
11271:../../..\hal\include/device/stm32g431.h **** 
11272:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11273:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHR =            // DAC channel2 12-bit right-aligne
11274:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11275:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHRB =           // DAC channel2 12-bit right-aligne
11277:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11278:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R2_RESET_VALUE = 0x0;
11279:../../..\hal\include/device/stm32g431.h **** 
11280:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHR =            // DAC channel2 12-bit left-aligned
11282:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11283:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11284:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHRB =           // DAC channel2 12-bit left-aligned
11285:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11286:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L2_RESET_VALUE = 0x0;
11287:../../..\hal\include/device/stm32g431.h **** 
11288:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11290:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11291:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHRB =           // DAC channel2 8-bit right-aligned 
11293:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11294:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R2_RESET_VALUE = 0x0;
11295:../../..\hal\include/device/stm32g431.h **** 
11296:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC1DHR =            // DAC channel1 12-bit right-aligne
11298:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC2DHR =            // DAC channel2 12-bit right-aligne
11301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11302:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12RD_RESET_VALUE = 0x0;
11303:../../..\hal\include/device/stm32g431.h **** 
11304:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC1DHR =            // DAC channel1 12-bit left-aligned
11306:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11307:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC2DHR =            // DAC channel2 12-bit left-aligned
11309:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11310:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12LD_RESET_VALUE = 0x0;
11311:../../..\hal\include/device/stm32g431.h **** 
11312:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11314:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11315:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11316:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11317:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11318:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8RD_RESET_VALUE = 0x0;
11319:../../..\hal\include/device/stm32g431.h **** 
11320:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DOR =            // DAC channel1 data output These bits
11322:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11323:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11324:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DORB =           // DAC channel1 data output (12 bits)
11325:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11326:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR1_RESET_VALUE = 0x0;
11327:../../..\hal\include/device/stm32g431.h **** 
11328:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DOR =            // DAC channel2 data output These bits
11330:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11331:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11332:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DORB =           // DAC channel2 data output (12 bits)
11333:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11334:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR2_RESET_VALUE = 0x0;
11335:../../..\hal\include/device/stm32g431.h **** 
11336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC1RDY = 0x800;      // DAC channel1 ready status bit, Read-w
11337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT1 = 0x1000;    // DAC channel1 output register status b
11338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR1 = 0x2000;     // DAC channel1 DMA underrun flag This b
11339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG1 = 0x4000;   // DAC Channel 1 calibration offset stat
11340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST1 = 0x8000;       // DAC Channel 1 busy writing sample tim
11341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC2RDY = 0x8000000;  // DAC channel 2 ready status bit, Read-
11342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT2 = 0x10000000;// DAC channel 2 output register status 
11343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR2 = 0x20000000; // DAC channel2 DMA underrun flag This b
11344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG2 = 0x40000000;// DAC Channel 2 calibration offset sta
11345:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST2 = 0x80000000;   // DAC Channel 2 busy writing sample tim
11346:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SR_RESET_VALUE = 0x0;
11347:../../..\hal\include/device/stm32g431.h **** 
11348:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM1 =              // DAC Channel 1 offset trimming value 
11350:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
11351:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM2 =              // DAC Channel 2 offset trimming value 
11353:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
11354:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CCR_RESET_VALUE = 0x0;
11355:../../..\hal\include/device/stm32g431.h **** 
11356:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE1 =               // DAC Channel 1 mode These bits can be
11358:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
11359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE1 = 0x100;   // DAC Channel1 DMA double data mode
11360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT1 = 0x200;   // Enable signed format for DAC channel
11361:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11362:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_HFSEL =               // High frequency interface mode select
11363:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
11364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE2 =               // DAC Channel 2 mode These bits can be
11366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
11367:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE2 = 0x1000000;// DAC Channel2 DMA double data mode
11368:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT2 = 0x2000000;// Enable signed format for DAC channe
11369:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_MCR_RESET_VALUE = 0x0;
11370:../../..\hal\include/device/stm32g431.h **** 
11371:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11372:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR1_TSAMPLE1 =            // DAC Channel 1 sample Time (only va
11373:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11374:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR1_RESET_VALUE = 0x0;
11375:../../..\hal\include/device/stm32g431.h **** 
11376:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR2_TSAMPLE2 =            // DAC Channel 2 sample Time (only va
11378:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11379:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR2_RESET_VALUE = 0x0;
11380:../../..\hal\include/device/stm32g431.h **** 
11381:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD1 =              // DAC Channel 1 hold Time (only valid
11383:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11384:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD2 =              // DAC Channel 2 hold time (only valid
11386:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3ff>::value<X>();
11387:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHHR_RESET_VALUE = 0x10001;
11388:../../..\hal\include/device/stm32g431.h **** 
11389:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11390:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH1 =           // DAC Channel 1 refresh Time (only va
11391:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11392:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11393:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH2 =           // DAC Channel 2 refresh Time (only va
11394:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
11395:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHRR_RESET_VALUE = 0x10001;
11396:../../..\hal\include/device/stm32g431.h **** 
11397:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STRSTDATA1 =          // DAC Channel 1 Sawtooth reset value 
11399:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STDIR1 = 0x1000;      // DAC Channel1 Sawtooth direction set
11401:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STINCDATA1 =          // DAC CH1 Sawtooth increment value (1
11403:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11404:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR1_RESET_VALUE = 0x0;
11405:../../..\hal\include/device/stm32g431.h **** 
11406:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STRSTDATA2 =          // DAC Channel 2 Sawtooth reset value 
11408:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STDIR2 = 0x1000;      // DAC Channel2 Sawtooth direction set
11410:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STINCDATA2 =          // DAC CH2 Sawtooth increment value (1
11412:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11413:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR2_RESET_VALUE = 0x0;
11414:../../..\hal\include/device/stm32g431.h **** 
11415:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL1 =       // DAC Channel 1 Sawtooth Reset trig
11417:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
11418:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL1 =       // DAC Channel 1 Sawtooth Increment 
11420:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11421:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL2 =       // DAC Channel 1 Sawtooth Reset trig
11423:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
11424:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL2 =       // DAC Channel 2 Sawtooth Increment 
11426:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11427:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STMODR_RESET_VALUE = 0x0;
11428:../../..\hal\include/device/stm32g431.h **** };
11429:../../..\hal\include/device/stm32g431.h **** 
11430:../../..\hal\include/device/stm32g431.h **** static dac2_t& DAC2 = *reinterpret_cast<dac2_t*>(0x50000c00);
11431:../../..\hal\include/device/stm32g431.h **** 
11432:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DAC2
11433:../../..\hal\include/device/stm32g431.h **** 
11434:../../..\hal\include/device/stm32g431.h **** 
11435:../../..\hal\include/device/stm32g431.h **** ////
11436:../../..\hal\include/device/stm32g431.h **** //
11437:../../..\hal\include/device/stm32g431.h **** //    Digital-to-analog converter
11438:../../..\hal\include/device/stm32g431.h **** //
11439:../../..\hal\include/device/stm32g431.h **** ////
11440:../../..\hal\include/device/stm32g431.h **** 
11441:../../..\hal\include/device/stm32g431.h **** struct dac3_t
11442:../../..\hal\include/device/stm32g431.h **** {
11443:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CR;               // [Read-write] DAC control register
11444:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SWTRGR;           // [Write-only] DAC software trigger register
11445:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R1;          // [Read-write] DAC channel1 12-bit right-aligned da
11446:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L1;          // [Read-write] DAC channel1 12-bit left aligned dat
11447:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R1;           // [Read-write] DAC channel1 8-bit right aligned dat
11448:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R2;          // [Read-write] DAC channel2 12-bit right aligned da
11449:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L2;          // [Read-write] DAC channel2 12-bit left aligned dat
11450:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R2;           // [Read-write] DAC channel2 8-bit right-aligned dat
11451:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12RD;          // [Read-write] Dual DAC 12-bit right-aligned data h
11452:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12LD;          // [Read-write] DUAL DAC 12-bit left aligned data ho
11453:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8RD;           // [Read-write] DUAL DAC 8-bit right aligned data ho
11454:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR1;             // [Read-only] DAC channel1 data output register
11455:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR2;             // [Read-only] DAC channel2 data output register
11456:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SR;               // DAC status register
11457:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CCR;              // [Read-write] DAC calibration control register
11458:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_MCR;              // [Read-write] DAC mode control register
11459:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR1;            // [Read-write] DAC Sample and Hold sample time regi
11460:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR2;            // [Read-write] DAC Sample and Hold sample time regi
11461:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHHR;             // [Read-write] DAC Sample and Hold hold time regist
11462:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHRR;             // [Read-write] DAC Sample and Hold refresh time reg
11463:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
11464:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR1;             // [Read-write] Sawtooth register
11465:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR2;             // [Read-write] Sawtooth register
11466:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STMODR;           // [Read-write] Sawtooth Mode register
11467:../../..\hal\include/device/stm32g431.h **** 
11468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN1 = 0x1;            // DAC channel1 enable This bit is set a
11469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN1 = 0x2;           // DAC channel1 trigger enable
11470:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL1 =               // DAC channel1 trigger selection These 
11472:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0xf>::value<X>();
11473:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE1 =               // DAC channel1 noise/triangle wave gene
11475:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
11476:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP1 =               // DAC channel1 mask/amplitude selector 
11478:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN1 = 0x1000;      // DAC channel1 DMA enable This bit is s
11480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE1 = 0x2000;   // DAC channel1 DMA Underrun Interrupt e
11481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN1 = 0x4000;        // DAC Channel 1 calibration enable This
11482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN2 = 0x10000;        // DAC channel2 enable This bit is set a
11483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN2 = 0x20000;       // DAC channel2 trigger enable
11484:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL2 =               // DAC channel2 trigger selection These 
11486:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
11487:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11488:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE2 =               // DAC channel2 noise/triangle wave gene
11489:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
11490:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP2 =               // DAC channel2 mask/amplitude selector 
11492:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN2 = 0x10000000;  // DAC channel2 DMA enable This bit is s
11494:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE2 = 0x20000000;// DAC channel2 DMA underrun interrupt 
11495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN2 = 0x40000000;    // DAC Channel 2 calibration enable This
11496:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CR_RESET_VALUE = 0x0;
11497:../../..\hal\include/device/stm32g431.h **** 
11498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG1 = 0x1;        // DAC channel1 software trigger Thi
11499:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG2 = 0x2;        // DAC channel2 software trigger Thi
11500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB1 = 0x10000;   // DAC channel1 software trigger B
11501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB2 = 0x20000;   // DAC channel2 software trigger B
11502:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SWTRGR_RESET_VALUE = 0x0;
11503:../../..\hal\include/device/stm32g431.h **** 
11504:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHR =            // DAC channel1 12-bit right-aligne
11506:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11507:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11508:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHRB =           // DAC channel1 12-bit right-aligne
11509:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11510:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R1_RESET_VALUE = 0x0;
11511:../../..\hal\include/device/stm32g431.h **** 
11512:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHR =            // DAC channel1 12-bit left-aligned
11514:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11515:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHRB =           // DAC channel1 12-bit left-aligned
11517:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11518:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L1_RESET_VALUE = 0x0;
11519:../../..\hal\include/device/stm32g431.h **** 
11520:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11522:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11523:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11524:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHRB =           // DAC channel1 8-bit right-aligned 
11525:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11526:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R1_RESET_VALUE = 0x0;
11527:../../..\hal\include/device/stm32g431.h **** 
11528:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHR =            // DAC channel2 12-bit right-aligne
11530:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11531:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11532:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHRB =           // DAC channel2 12-bit right-aligne
11533:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11534:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R2_RESET_VALUE = 0x0;
11535:../../..\hal\include/device/stm32g431.h **** 
11536:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHR =            // DAC channel2 12-bit left-aligned
11538:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11539:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHRB =           // DAC channel2 12-bit left-aligned
11541:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11542:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L2_RESET_VALUE = 0x0;
11543:../../..\hal\include/device/stm32g431.h **** 
11544:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11546:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11547:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11548:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHRB =           // DAC channel2 8-bit right-aligned 
11549:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11550:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R2_RESET_VALUE = 0x0;
11551:../../..\hal\include/device/stm32g431.h **** 
11552:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC1DHR =            // DAC channel1 12-bit right-aligne
11554:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11555:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC2DHR =            // DAC channel2 12-bit right-aligne
11557:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11558:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12RD_RESET_VALUE = 0x0;
11559:../../..\hal\include/device/stm32g431.h **** 
11560:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC1DHR =            // DAC channel1 12-bit left-aligned
11562:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11563:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC2DHR =            // DAC channel2 12-bit left-aligned
11565:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11566:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12LD_RESET_VALUE = 0x0;
11567:../../..\hal\include/device/stm32g431.h **** 
11568:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11570:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11571:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11573:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11574:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8RD_RESET_VALUE = 0x0;
11575:../../..\hal\include/device/stm32g431.h **** 
11576:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DOR =            // DAC channel1 data output These bits
11578:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11579:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DORB =           // DAC channel1 data output (12 bits)
11581:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11582:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR1_RESET_VALUE = 0x0;
11583:../../..\hal\include/device/stm32g431.h **** 
11584:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DOR =            // DAC channel2 data output These bits
11586:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11587:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DORB =           // DAC channel2 data output (12 bits)
11589:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11590:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR2_RESET_VALUE = 0x0;
11591:../../..\hal\include/device/stm32g431.h **** 
11592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC1RDY = 0x800;      // DAC channel1 ready status bit, Read-w
11593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT1 = 0x1000;    // DAC channel1 output register status b
11594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR1 = 0x2000;     // DAC channel1 DMA underrun flag This b
11595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG1 = 0x4000;   // DAC Channel 1 calibration offset stat
11596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST1 = 0x8000;       // DAC Channel 1 busy writing sample tim
11597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC2RDY = 0x8000000;  // DAC channel 2 ready status bit, Read-
11598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT2 = 0x10000000;// DAC channel 2 output register status 
11599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR2 = 0x20000000; // DAC channel2 DMA underrun flag This b
11600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG2 = 0x40000000;// DAC Channel 2 calibration offset sta
11601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST2 = 0x80000000;   // DAC Channel 2 busy writing sample tim
11602:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SR_RESET_VALUE = 0x0;
11603:../../..\hal\include/device/stm32g431.h **** 
11604:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM1 =              // DAC Channel 1 offset trimming value 
11606:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
11607:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM2 =              // DAC Channel 2 offset trimming value 
11609:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
11610:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CCR_RESET_VALUE = 0x0;
11611:../../..\hal\include/device/stm32g431.h **** 
11612:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE1 =               // DAC Channel 1 mode These bits can be
11614:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
11615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE1 = 0x100;   // DAC Channel1 DMA double data mode
11616:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT1 = 0x200;   // Enable signed format for DAC channel
11617:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_HFSEL =               // High frequency interface mode select
11619:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
11620:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE2 =               // DAC Channel 2 mode These bits can be
11622:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
11623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE2 = 0x1000000;// DAC Channel2 DMA double data mode
11624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT2 = 0x2000000;// Enable signed format for DAC channe
11625:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_MCR_RESET_VALUE = 0x0;
11626:../../..\hal\include/device/stm32g431.h **** 
11627:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR1_TSAMPLE1 =            // DAC Channel 1 sample Time (only va
11629:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11630:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR1_RESET_VALUE = 0x0;
11631:../../..\hal\include/device/stm32g431.h **** 
11632:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR2_TSAMPLE2 =            // DAC Channel 2 sample Time (only va
11634:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11635:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR2_RESET_VALUE = 0x0;
11636:../../..\hal\include/device/stm32g431.h **** 
11637:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD1 =              // DAC Channel 1 hold Time (only valid
11639:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11640:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD2 =              // DAC Channel 2 hold time (only valid
11642:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3ff>::value<X>();
11643:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHHR_RESET_VALUE = 0x10001;
11644:../../..\hal\include/device/stm32g431.h **** 
11645:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH1 =           // DAC Channel 1 refresh Time (only va
11647:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11648:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH2 =           // DAC Channel 2 refresh Time (only va
11650:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
11651:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHRR_RESET_VALUE = 0x10001;
11652:../../..\hal\include/device/stm32g431.h **** 
11653:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STRSTDATA1 =          // DAC Channel 1 Sawtooth reset value 
11655:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11656:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STDIR1 = 0x1000;      // DAC Channel1 Sawtooth direction set
11657:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11658:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STINCDATA1 =          // DAC CH1 Sawtooth increment value (1
11659:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11660:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR1_RESET_VALUE = 0x0;
11661:../../..\hal\include/device/stm32g431.h **** 
11662:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11663:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STRSTDATA2 =          // DAC Channel 2 Sawtooth reset value 
11664:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STDIR2 = 0x1000;      // DAC Channel2 Sawtooth direction set
11666:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11667:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STINCDATA2 =          // DAC CH2 Sawtooth increment value (1
11668:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11669:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR2_RESET_VALUE = 0x0;
11670:../../..\hal\include/device/stm32g431.h **** 
11671:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11672:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL1 =       // DAC Channel 1 Sawtooth Reset trig
11673:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
11674:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL1 =       // DAC Channel 1 Sawtooth Increment 
11676:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11677:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL2 =       // DAC Channel 1 Sawtooth Reset trig
11679:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
11680:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11681:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL2 =       // DAC Channel 2 Sawtooth Increment 
11682:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11683:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STMODR_RESET_VALUE = 0x0;
11684:../../..\hal\include/device/stm32g431.h **** };
11685:../../..\hal\include/device/stm32g431.h **** 
11686:../../..\hal\include/device/stm32g431.h **** static dac3_t& DAC3 = *reinterpret_cast<dac3_t*>(0x50001000);
11687:../../..\hal\include/device/stm32g431.h **** 
11688:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DAC3
11689:../../..\hal\include/device/stm32g431.h **** 
11690:../../..\hal\include/device/stm32g431.h **** 
11691:../../..\hal\include/device/stm32g431.h **** ////
11692:../../..\hal\include/device/stm32g431.h **** //
11693:../../..\hal\include/device/stm32g431.h **** //    Digital-to-analog converter
11694:../../..\hal\include/device/stm32g431.h **** //
11695:../../..\hal\include/device/stm32g431.h **** ////
11696:../../..\hal\include/device/stm32g431.h **** 
11697:../../..\hal\include/device/stm32g431.h **** struct dac4_t
11698:../../..\hal\include/device/stm32g431.h **** {
11699:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CR;               // [Read-write] DAC control register
11700:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SWTRGR;           // [Write-only] DAC software trigger register
11701:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R1;          // [Read-write] DAC channel1 12-bit right-aligned da
11702:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L1;          // [Read-write] DAC channel1 12-bit left aligned dat
11703:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R1;           // [Read-write] DAC channel1 8-bit right aligned dat
11704:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12R2;          // [Read-write] DAC channel2 12-bit right aligned da
11705:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12L2;          // [Read-write] DAC channel2 12-bit left aligned dat
11706:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8R2;           // [Read-write] DAC channel2 8-bit right-aligned dat
11707:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12RD;          // [Read-write] Dual DAC 12-bit right-aligned data h
11708:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR12LD;          // [Read-write] DUAL DAC 12-bit left aligned data ho
11709:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DHR8RD;           // [Read-write] DUAL DAC 8-bit right aligned data ho
11710:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR1;             // [Read-only] DAC channel1 data output register
11711:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_DOR2;             // [Read-only] DAC channel2 data output register
11712:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SR;               // DAC status register
11713:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_CCR;              // [Read-write] DAC calibration control register
11714:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_MCR;              // [Read-write] DAC mode control register
11715:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR1;            // [Read-write] DAC Sample and Hold sample time regi
11716:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHSR2;            // [Read-write] DAC Sample and Hold sample time regi
11717:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHHR;             // [Read-write] DAC Sample and Hold hold time regist
11718:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_SHRR;             // [Read-write] DAC Sample and Hold refresh time reg
11719:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _0;
11720:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR1;             // [Read-write] Sawtooth register
11721:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STR2;             // [Read-write] Sawtooth register
11722:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DAC_STMODR;           // [Read-write] Sawtooth Mode register
11723:../../..\hal\include/device/stm32g431.h **** 
11724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN1 = 0x1;            // DAC channel1 enable This bit is set a
11725:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN1 = 0x2;           // DAC channel1 trigger enable
11726:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL1 =               // DAC channel1 trigger selection These 
11728:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0xf>::value<X>();
11729:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE1 =               // DAC channel1 noise/triangle wave gene
11731:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
11732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP1 =               // DAC channel1 mask/amplitude selector 
11734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11735:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN1 = 0x1000;      // DAC channel1 DMA enable This bit is s
11736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE1 = 0x2000;   // DAC channel1 DMA Underrun Interrupt e
11737:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN1 = 0x4000;        // DAC Channel 1 calibration enable This
11738:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_EN2 = 0x10000;        // DAC channel2 enable This bit is set a
11739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TEN2 = 0x20000;       // DAC channel2 trigger enable
11740:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11741:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_TSEL2 =               // DAC channel2 trigger selection These 
11742:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
11743:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11744:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_WAVE2 =               // DAC channel2 noise/triangle wave gene
11745:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
11746:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11747:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_MAMP2 =               // DAC channel2 mask/amplitude selector 
11748:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAEN2 = 0x10000000;  // DAC channel2 DMA enable This bit is s
11750:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_DMAUDRIE2 = 0x20000000;// DAC channel2 DMA underrun interrupt 
11751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CR_CEN2 = 0x40000000;    // DAC Channel 2 calibration enable This
11752:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CR_RESET_VALUE = 0x0;
11753:../../..\hal\include/device/stm32g431.h **** 
11754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG1 = 0x1;        // DAC channel1 software trigger Thi
11755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIG2 = 0x2;        // DAC channel2 software trigger Thi
11756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB1 = 0x10000;   // DAC channel1 software trigger B
11757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SWTRGR_SWTRIGB2 = 0x20000;   // DAC channel2 software trigger B
11758:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SWTRGR_RESET_VALUE = 0x0;
11759:../../..\hal\include/device/stm32g431.h **** 
11760:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11761:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHR =            // DAC channel1 12-bit right-aligne
11762:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11763:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11764:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R1_DACC1DHRB =           // DAC channel1 12-bit right-aligne
11765:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11766:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R1_RESET_VALUE = 0x0;
11767:../../..\hal\include/device/stm32g431.h **** 
11768:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHR =            // DAC channel1 12-bit left-aligned
11770:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11771:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L1_DACC1DHRB =           // DAC channel1 12-bit left-aligned
11773:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11774:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L1_RESET_VALUE = 0x0;
11775:../../..\hal\include/device/stm32g431.h **** 
11776:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11778:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11779:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R1_DACC1DHRB =           // DAC channel1 8-bit right-aligned 
11781:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11782:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R1_RESET_VALUE = 0x0;
11783:../../..\hal\include/device/stm32g431.h **** 
11784:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHR =            // DAC channel2 12-bit right-aligne
11786:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11787:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12R2_DACC2DHRB =           // DAC channel2 12-bit right-aligne
11789:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11790:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12R2_RESET_VALUE = 0x0;
11791:../../..\hal\include/device/stm32g431.h **** 
11792:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11793:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHR =            // DAC channel2 12-bit left-aligned
11794:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11795:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12L2_DACC2DHRB =           // DAC channel2 12-bit left-aligned
11797:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11798:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12L2_RESET_VALUE = 0x0;
11799:../../..\hal\include/device/stm32g431.h **** 
11800:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11802:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11803:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8R2_DACC2DHRB =           // DAC channel2 8-bit right-aligned 
11805:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11806:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8R2_RESET_VALUE = 0x0;
11807:../../..\hal\include/device/stm32g431.h **** 
11808:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11809:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC1DHR =            // DAC channel1 12-bit right-aligne
11810:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11811:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11812:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12RD_DACC2DHR =            // DAC channel2 12-bit right-aligne
11813:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11814:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12RD_RESET_VALUE = 0x0;
11815:../../..\hal\include/device/stm32g431.h **** 
11816:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC1DHR =            // DAC channel1 12-bit left-aligned
11818:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
11819:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR12LD_DACC2DHR =            // DAC channel2 12-bit left-aligned
11821:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xfff>::value<X>();
11822:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR12LD_RESET_VALUE = 0x0;
11823:../../..\hal\include/device/stm32g431.h **** 
11824:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC1DHR =            // DAC channel1 8-bit right-aligned 
11826:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11827:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DHR8RD_DACC2DHR =            // DAC channel2 8-bit right-aligned 
11829:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
11830:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DHR8RD_RESET_VALUE = 0x0;
11831:../../..\hal\include/device/stm32g431.h **** 
11832:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DOR =            // DAC channel1 data output These bits
11834:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11835:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR1_DACC1DORB =           // DAC channel1 data output (12 bits)
11837:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11838:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR1_RESET_VALUE = 0x0;
11839:../../..\hal\include/device/stm32g431.h **** 
11840:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DOR =            // DAC channel2 data output These bits
11842:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11843:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_DOR2_DACC2DORB =           // DAC channel2 data output (12 bits)
11845:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
11846:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_DOR2_RESET_VALUE = 0x0;
11847:../../..\hal\include/device/stm32g431.h **** 
11848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC1RDY = 0x800;      // DAC channel1 ready status bit, Read-w
11849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT1 = 0x1000;    // DAC channel1 output register status b
11850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR1 = 0x2000;     // DAC channel1 DMA underrun flag This b
11851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG1 = 0x4000;   // DAC Channel 1 calibration offset stat
11852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST1 = 0x8000;       // DAC Channel 1 busy writing sample tim
11853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DAC2RDY = 0x8000000;  // DAC channel 2 ready status bit, Read-
11854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DORSTAT2 = 0x10000000;// DAC channel 2 output register status 
11855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_DMAUDR2 = 0x20000000; // DAC channel2 DMA underrun flag This b
11856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_CAL_FLAG2 = 0x40000000;// DAC Channel 2 calibration offset sta
11857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SR_BWST2 = 0x80000000;   // DAC Channel 2 busy writing sample tim
11858:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SR_RESET_VALUE = 0x0;
11859:../../..\hal\include/device/stm32g431.h **** 
11860:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM1 =              // DAC Channel 1 offset trimming value 
11862:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
11863:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_CCR_OTRIM2 =              // DAC Channel 2 offset trimming value 
11865:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
11866:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_CCR_RESET_VALUE = 0x0;
11867:../../..\hal\include/device/stm32g431.h **** 
11868:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE1 =               // DAC Channel 1 mode These bits can be
11870:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
11871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE1 = 0x100;   // DAC Channel1 DMA double data mode
11872:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT1 = 0x200;   // Enable signed format for DAC channel
11873:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_HFSEL =               // High frequency interface mode select
11875:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
11876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_MODE2 =               // DAC Channel 2 mode These bits can be
11878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
11879:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_DMADOUBLE2 = 0x1000000;// DAC Channel2 DMA double data mode
11880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_MCR_SINFORMAT2 = 0x2000000;// Enable signed format for DAC channe
11881:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_MCR_RESET_VALUE = 0x0;
11882:../../..\hal\include/device/stm32g431.h **** 
11883:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11884:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR1_TSAMPLE1 =            // DAC Channel 1 sample Time (only va
11885:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11886:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR1_RESET_VALUE = 0x0;
11887:../../..\hal\include/device/stm32g431.h **** 
11888:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHSR2_TSAMPLE2 =            // DAC Channel 2 sample Time (only va
11890:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11891:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHSR2_RESET_VALUE = 0x0;
11892:../../..\hal\include/device/stm32g431.h **** 
11893:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD1 =              // DAC Channel 1 hold Time (only valid
11895:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
11896:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHHR_THOLD2 =              // DAC Channel 2 hold time (only valid
11898:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3ff>::value<X>();
11899:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHHR_RESET_VALUE = 0x10001;
11900:../../..\hal\include/device/stm32g431.h **** 
11901:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH1 =           // DAC Channel 1 refresh Time (only va
11903:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
11904:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11905:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_SHRR_TREFRESH2 =           // DAC Channel 2 refresh Time (only va
11906:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
11907:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_SHRR_RESET_VALUE = 0x10001;
11908:../../..\hal\include/device/stm32g431.h **** 
11909:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STRSTDATA1 =          // DAC Channel 1 Sawtooth reset value 
11911:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STDIR1 = 0x1000;      // DAC Channel1 Sawtooth direction set
11913:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11914:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR1_STINCDATA1 =          // DAC CH1 Sawtooth increment value (1
11915:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11916:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR1_RESET_VALUE = 0x0;
11917:../../..\hal\include/device/stm32g431.h **** 
11918:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11919:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STRSTDATA2 =          // DAC Channel 2 Sawtooth reset value 
11920:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
11921:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STDIR2 = 0x1000;      // DAC Channel2 Sawtooth direction set
11922:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STR2_STINCDATA2 =          // DAC CH2 Sawtooth increment value (1
11924:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
11925:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STR2_RESET_VALUE = 0x0;
11926:../../..\hal\include/device/stm32g431.h **** 
11927:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL1 =       // DAC Channel 1 Sawtooth Reset trig
11929:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
11930:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL1 =       // DAC Channel 1 Sawtooth Increment 
11932:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
11933:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11934:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STRSTTRIGSEL2 =       // DAC Channel 1 Sawtooth Reset trig
11935:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
11936:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
11937:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DAC_STMODR_STINCTRIGSEL2 =       // DAC Channel 2 Sawtooth Increment 
11938:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
11939:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DAC_STMODR_RESET_VALUE = 0x0;
11940:../../..\hal\include/device/stm32g431.h **** };
11941:../../..\hal\include/device/stm32g431.h **** 
11942:../../..\hal\include/device/stm32g431.h **** static dac4_t& DAC4 = *reinterpret_cast<dac4_t*>(0x50001400);
11943:../../..\hal\include/device/stm32g431.h **** 
11944:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_DAC4
11945:../../..\hal\include/device/stm32g431.h **** 
11946:../../..\hal\include/device/stm32g431.h **** 
11947:../../..\hal\include/device/stm32g431.h **** ////
11948:../../..\hal\include/device/stm32g431.h **** //
11949:../../..\hal\include/device/stm32g431.h **** //    Analog-to-Digital Converter
11950:../../..\hal\include/device/stm32g431.h **** //
11951:../../..\hal\include/device/stm32g431.h **** ////
11952:../../..\hal\include/device/stm32g431.h **** 
11953:../../..\hal\include/device/stm32g431.h **** struct adc1_t
11954:../../..\hal\include/device/stm32g431.h **** {
11955:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-write] interrupt and status register
11956:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IER;                  // [Read-write] interrupt enable register
11957:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] control register
11958:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR;                 // [Read-write] configuration register
11959:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR2;                // [Read-write] configuration register
11960:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMPR1;                // [Read-write] sample time register 1
11961:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMPR2;                // [Read-write] sample time register 2
11962:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
11963:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR1;                  // [Read-write] watchdog threshold register 1
11964:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR2;                  // [Read-write] watchdog threshold register
11965:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR3;                  // [Read-write] watchdog threshold register 3
11966:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
11967:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR1;                 // [Read-write] regular sequence register 1
11968:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR2;                 // [Read-write] regular sequence register 2
11969:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR3;                 // [Read-write] regular sequence register 3
11970:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR4;                 // [Read-write] regular sequence register 4
11971:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-only] regular Data Register
11972:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _2;
11973:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JSQR;                 // [Read-write] injected sequence register
11974:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _3;
11975:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR1;                 // [Read-write] offset register 1
11976:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR2;                 // [Read-write] offset register 2
11977:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR3;                 // [Read-write] offset register 3
11978:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR4;                 // [Read-write] offset register 4
11979:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _4;
11980:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR1;                 // [Read-only] injected data register 1
11981:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR2;                 // [Read-only] injected data register 2
11982:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR3;                 // [Read-only] injected data register 3
11983:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR4;                 // [Read-only] injected data register 4
11984:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _5;
11985:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AWD2CR;               // [Read-write] Analog Watchdog 2 Configuration Regi
11986:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AWD3CR;               // [Read-write] Analog Watchdog 3 Configuration Regi
11987:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _6;
11988:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIFSEL;               // Differential Mode Selection Register 2
11989:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CALFACT;              // [Read-write] Calibration Factors
11990:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _7;
11991:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GCOMP;                // [Read-write] Gain compensation Register
11992:../../..\hal\include/device/stm32g431.h **** 
11993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JQOVF = 0x400;        // JQOVF
11994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD3 = 0x200;         // AWD3
11995:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD2 = 0x100;         // AWD2
11996:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD1 = 0x80;          // AWD1
11997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JEOS = 0x40;          // JEOS
11998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JEOC = 0x20;          // JEOC
11999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_OVR = 0x10;           // OVR
12000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOS = 0x8;            // EOS
12001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOC = 0x4;            // EOC
12002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOSMP = 0x2;          // EOSMP
12003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADRDY = 0x1;          // ADRDY
12004:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
12005:../../..\hal\include/device/stm32g431.h **** 
12006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JQOVFIE = 0x400;      // JQOVFIE
12007:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD3IE = 0x200;       // AWD3IE
12008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD2IE = 0x100;       // AWD2IE
12009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD1IE = 0x80;        // AWD1IE
12010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JEOSIE = 0x40;        // JEOSIE
12011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JEOCIE = 0x20;        // JEOCIE
12012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_OVRIE = 0x10;         // OVRIE
12013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOSIE = 0x8;          // EOSIE
12014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOCIE = 0x4;          // EOCIE
12015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOSMPIE = 0x2;        // EOSMPIE
12016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ADRDYIE = 0x1;        // ADRDYIE
12017:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IER_RESET_VALUE = 0x0;
12018:../../..\hal\include/device/stm32g431.h **** 
12019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADCAL = 0x80000000;   // ADCAL
12020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADCALDIF = 0x40000000;// ADCALDIF
12021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DEEPPWD = 0x20000000; // DEEPPWD
12022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADVREGEN = 0x10000000;// ADVREGEN
12023:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_JADSTP = 0x20;        // JADSTP
12024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADSTP = 0x10;         // ADSTP
12025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_JADSTART = 0x8;       // JADSTART
12026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADSTART = 0x4;        // ADSTART
12027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADDIS = 0x2;          // ADDIS
12028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADEN = 0x1;           // ADEN
12029:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x20000000;
12030:../../..\hal\include/device/stm32g431.h **** 
12031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JQDIS = 0x80000000;   // Injected Queue disable
12032:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWDCH1CH =            // AWDCH1CH (5 bits)
12034:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12035:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JAUTO = 0x2000000;    // JAUTO
12036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JAWD1EN = 0x1000000;  // JAWD1EN
12037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWD1EN = 0x800000;    // AWD1EN
12038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWD1SGL = 0x400000;   // AWD1SGL
12039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JQM = 0x200000;       // JQM
12040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JDISCEN = 0x100000;   // JDISCEN
12041:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DISCNUM =             // DISCNUM (3 bits)
12043:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
12044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DISCEN = 0x10000;     // DISCEN
12045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_ALIGN = 0x8000;       // ALIGN
12046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AUTDLY = 0x4000;      // AUTDLY
12047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_CONT = 0x2000;        // CONT
12048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_OVRMOD = 0x1000;      // OVRMOD
12049:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_EXTEN =               // EXTEN (2 bits)
12051:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
12052:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_EXTSEL =              // EXTSEL (4 bits)
12054:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0xf>::value<X>();
12055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_ALIGN_5 = 0x20;       // ALIGN_5
12056:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12057:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_RES =                 // RES (2 bits)
12058:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
12059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DMACFG = 0x2;         // DMACFG
12060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DMAEN = 0x1;          // DMAEN
12061:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR_RESET_VALUE = 0x80000000;
12062:../../..\hal\include/device/stm32g431.h **** 
12063:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SMPTRIG = 0x8000000;  // SMPTRIG
12064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_BULB = 0x4000000;     // BULB
12065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SWTRIG = 0x2000000;   // SWTRIG
12066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_GCOMP = 0x10000;      // GCOMP
12067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_ROVSM = 0x400;        // EXTEN
12068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_TROVS = 0x200;        // Triggered Regular Oversampling
12069:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_OVSS =                // ALIGN (4 bits)
12071:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0xf>::value<X>();
12072:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_OVSR =                // RES (3 bits)
12074:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x7>::value<X>();
12075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_JOVSE = 0x2;          // DMACFG
12076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_ROVSE = 0x1;          // DMAEN
12077:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR2_RESET_VALUE = 0x0;
12078:../../..\hal\include/device/stm32g431.h **** 
12079:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP9 =                // SMP9 (3 bits)
12081:../../..\hal\include/device/stm32g431.h ****         bit_field_t<27, 0x7>::value<X>();
12082:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP8 =                // SMP8 (3 bits)
12084:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
12085:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP7 =                // SMP7 (3 bits)
12087:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x7>::value<X>();
12088:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP6 =                // SMP6 (3 bits)
12090:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x7>::value<X>();
12091:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP5 =                // SMP5 (3 bits)
12093:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x7>::value<X>();
12094:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP4 =                // SMP4 (3 bits)
12096:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12097:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP3 =                // SMP3 (3 bits)
12099:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x7>::value<X>();
12100:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP2 =                // SMP2 (3 bits)
12102:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x7>::value<X>();
12103:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP1 =                // SMP1 (3 bits)
12105:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
12106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMPPLUS = 0x80000000; // Addition of one clock cycle to the sam
12107:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP0 =                // SMP0 (3 bits)
12109:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
12110:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMPR1_RESET_VALUE = 0x0;
12111:../../..\hal\include/device/stm32g431.h **** 
12112:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP18 =               // SMP18 (3 bits)
12114:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
12115:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12116:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP17 =               // SMP17 (3 bits)
12117:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x7>::value<X>();
12118:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP16 =               // SMP16 (3 bits)
12120:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x7>::value<X>();
12121:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12122:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP15 =               // SMP15 (3 bits)
12123:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x7>::value<X>();
12124:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12125:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP14 =               // SMP14 (3 bits)
12126:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12127:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12128:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP13 =               // SMP13 (3 bits)
12129:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x7>::value<X>();
12130:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12131:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP12 =               // SMP12 (3 bits)
12132:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x7>::value<X>();
12133:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP11 =               // SMP11 (3 bits)
12135:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
12136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP10 =               // SMP10 (3 bits)
12138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
12139:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMPR2_RESET_VALUE = 0x0;
12140:../../..\hal\include/device/stm32g431.h **** 
12141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_HT1 =                 // HT1 (12 bits)
12143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
12144:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_AWDFILT =             // AWDFILT (3 bits)
12146:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12147:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_LT1 =                 // LT1 (12 bits)
12149:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12150:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR1_RESET_VALUE = 0xfff0000;
12151:../../..\hal\include/device/stm32g431.h **** 
12152:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR2_HT2 =                 // HT2 (8 bits)
12154:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
12155:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR2_LT2 =                 // LT2 (8 bits)
12157:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12158:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR2_RESET_VALUE = 0xff0000;
12159:../../..\hal\include/device/stm32g431.h **** 
12160:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR3_HT3 =                 // HT3 (8 bits)
12162:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
12163:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12164:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR3_LT3 =                 // LT3 (8 bits)
12165:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12166:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR3_RESET_VALUE = 0xff0000;
12167:../../..\hal\include/device/stm32g431.h **** 
12168:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ4 =                 // SQ4 (5 bits)
12170:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12171:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12172:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ3 =                 // SQ3 (5 bits)
12173:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12174:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ2 =                 // SQ2 (5 bits)
12176:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12177:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ1 =                 // SQ1 (5 bits)
12179:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12180:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_L =                   // Regular channel sequence length (4 bits
12182:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
12183:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR1_RESET_VALUE = 0x0;
12184:../../..\hal\include/device/stm32g431.h **** 
12185:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12186:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ9 =                 // SQ9 (5 bits)
12187:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12188:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ8 =                 // SQ8 (5 bits)
12190:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12191:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ7 =                 // SQ7 (5 bits)
12193:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ6 =                 // SQ6 (5 bits)
12196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12197:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ5 =                 // SQ5 (5 bits)
12199:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12200:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR2_RESET_VALUE = 0x0;
12201:../../..\hal\include/device/stm32g431.h **** 
12202:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12203:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ14 =                // SQ14 (5 bits)
12204:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12205:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12206:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ13 =                // SQ13 (5 bits)
12207:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12208:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ12 =                // SQ12 (5 bits)
12210:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12211:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ11 =                // SQ11 (5 bits)
12213:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12214:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12215:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ10 =                // SQ10 (5 bits)
12216:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12217:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR3_RESET_VALUE = 0x0;
12218:../../..\hal\include/device/stm32g431.h **** 
12219:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR4_SQ16 =                // SQ16 (5 bits)
12221:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12222:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12223:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR4_SQ15 =                // SQ15 (5 bits)
12224:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12225:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR4_RESET_VALUE = 0x0;
12226:../../..\hal\include/device/stm32g431.h **** 
12227:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12228:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_RDATA =               // Regular Data converted (16 bits)
12229:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12230:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
12231:../../..\hal\include/device/stm32g431.h **** 
12232:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ4 =                // JSQ4 (5 bits)
12234:../../..\hal\include/device/stm32g431.h ****         bit_field_t<27, 0x1f>::value<X>();
12235:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ3 =                // JSQ3 (5 bits)
12237:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x1f>::value<X>();
12238:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ2 =                // JSQ2 (5 bits)
12240:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x1f>::value<X>();
12241:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12242:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ1 =                // JSQ1 (5 bits)
12243:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x1f>::value<X>();
12244:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JEXTEN =              // JEXTEN (2 bits)
12246:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x3>::value<X>();
12247:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JEXTSEL =             // JEXTSEL (5 bits)
12249:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x1f>::value<X>();
12250:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12251:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JL =                  // JL (2 bits)
12252:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
12253:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JSQR_RESET_VALUE = 0x0;
12254:../../..\hal\include/device/stm32g431.h **** 
12255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12256:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12258:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_SATEN = 0x2000000;    // SATEN
12260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSETPOS = 0x1000000;// OFFSETPOS
12261:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12262:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1 =             // OFFSET1 (12 bits)
12263:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12264:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR1_RESET_VALUE = 0x0;
12265:../../..\hal\include/device/stm32g431.h **** 
12266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12267:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12269:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12270:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_SATEN = 0x2000000;    // SATEN
12271:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSETPOS = 0x1000000;// OFFSETPOS
12272:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12273:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1 =             // OFFSET1 (12 bits)
12274:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12275:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR2_RESET_VALUE = 0x0;
12276:../../..\hal\include/device/stm32g431.h **** 
12277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12278:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12280:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_SATEN = 0x2000000;    // SATEN
12282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSETPOS = 0x1000000;// OFFSETPOS
12283:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12284:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1 =             // OFFSET1 (12 bits)
12285:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12286:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR3_RESET_VALUE = 0x0;
12287:../../..\hal\include/device/stm32g431.h **** 
12288:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12289:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12290:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12291:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_SATEN = 0x2000000;    // SATEN
12293:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSETPOS = 0x1000000;// OFFSETPOS
12294:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1 =             // OFFSET1 (12 bits)
12296:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12297:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR4_RESET_VALUE = 0x0;
12298:../../..\hal\include/device/stm32g431.h **** 
12299:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12300:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR1_JDATA1 =              // JDATA1 (16 bits)
12301:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12302:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR1_RESET_VALUE = 0x0;
12303:../../..\hal\include/device/stm32g431.h **** 
12304:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR2_JDATA2 =              // JDATA2 (16 bits)
12306:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12307:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR2_RESET_VALUE = 0x0;
12308:../../..\hal\include/device/stm32g431.h **** 
12309:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR3_JDATA3 =              // JDATA3 (16 bits)
12311:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12312:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR3_RESET_VALUE = 0x0;
12313:../../..\hal\include/device/stm32g431.h **** 
12314:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR4_JDATA4 =              // JDATA4 (16 bits)
12316:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12317:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR4_RESET_VALUE = 0x0;
12318:../../..\hal\include/device/stm32g431.h **** 
12319:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12320:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AWD2CR_AWD2CH =              // AWD2CH (19 bits)
12321:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ffff>::value<X>();
12322:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AWD2CR_RESET_VALUE = 0x0;
12323:../../..\hal\include/device/stm32g431.h **** 
12324:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12325:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AWD3CR_AWD3CH =              // AWD3CH (19 bits)
12326:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ffff>::value<X>();
12327:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AWD3CR_RESET_VALUE = 0x0;
12328:../../..\hal\include/device/stm32g431.h **** 
12329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIFSEL_DIFSEL_0 = 0x1;       // Differential mode for channels 0, Rea
12330:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIFSEL_DIFSEL_1_18 =         // Differential mode for channels 15 to 
12332:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3ffff>::value<X>();
12333:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIFSEL_RESET_VALUE = 0x0;
12334:../../..\hal\include/device/stm32g431.h **** 
12335:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALFACT_CALFACT_D =           // CALFACT_D (7 bits)
12337:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
12338:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALFACT_CALFACT_S =           // CALFACT_S (7 bits)
12340:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
12341:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CALFACT_RESET_VALUE = 0x0;
12342:../../..\hal\include/device/stm32g431.h **** 
12343:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GCOMP_GCOMPCOEFF =          // GCOMPCOEFF (14 bits)
12345:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3fff>::value<X>();
12346:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GCOMP_RESET_VALUE = 0x0;
12347:../../..\hal\include/device/stm32g431.h **** 
12348:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t ADC1_2 = 18; // ADC1 and ADC2 global interrupt
12349:../../..\hal\include/device/stm32g431.h **** };
12350:../../..\hal\include/device/stm32g431.h **** 
12351:../../..\hal\include/device/stm32g431.h **** static adc1_t& ADC1 = *reinterpret_cast<adc1_t*>(0x50000000);
12352:../../..\hal\include/device/stm32g431.h **** 
12353:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_ADC1
12354:../../..\hal\include/device/stm32g431.h **** 
12355:../../..\hal\include/device/stm32g431.h **** 
12356:../../..\hal\include/device/stm32g431.h **** ////
12357:../../..\hal\include/device/stm32g431.h **** //
12358:../../..\hal\include/device/stm32g431.h **** //    Analog-to-Digital Converter
12359:../../..\hal\include/device/stm32g431.h **** //
12360:../../..\hal\include/device/stm32g431.h **** ////
12361:../../..\hal\include/device/stm32g431.h **** 
12362:../../..\hal\include/device/stm32g431.h **** struct adc2_t
12363:../../..\hal\include/device/stm32g431.h **** {
12364:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-write] interrupt and status register
12365:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IER;                  // [Read-write] interrupt enable register
12366:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] control register
12367:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR;                 // [Read-write] configuration register
12368:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR2;                // [Read-write] configuration register
12369:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMPR1;                // [Read-write] sample time register 1
12370:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SMPR2;                // [Read-write] sample time register 2
12371:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
12372:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR1;                  // [Read-write] watchdog threshold register 1
12373:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR2;                  // [Read-write] watchdog threshold register
12374:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TR3;                  // [Read-write] watchdog threshold register 3
12375:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _1;
12376:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR1;                 // [Read-write] regular sequence register 1
12377:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR2;                 // [Read-write] regular sequence register 2
12378:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR3;                 // [Read-write] regular sequence register 3
12379:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SQR4;                 // [Read-write] regular sequence register 4
12380:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DR;                   // [Read-only] regular Data Register
12381:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _2;
12382:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JSQR;                 // [Read-write] injected sequence register
12383:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _3;
12384:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR1;                 // [Read-write] offset register 1
12385:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR2;                 // [Read-write] offset register 2
12386:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR3;                 // [Read-write] offset register 3
12387:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    OFR4;                 // [Read-write] offset register 4
12388:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _4;
12389:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR1;                 // [Read-only] injected data register 1
12390:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR2;                 // [Read-only] injected data register 2
12391:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR3;                 // [Read-only] injected data register 3
12392:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    JDR4;                 // [Read-only] injected data register 4
12393:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _5;
12394:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AWD2CR;               // [Read-write] Analog Watchdog 2 Configuration Regi
12395:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AWD3CR;               // [Read-write] Analog Watchdog 3 Configuration Regi
12396:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _6;
12397:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DIFSEL;               // Differential Mode Selection Register 2
12398:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CALFACT;              // [Read-write] Calibration Factors
12399:../../..\hal\include/device/stm32g431.h ****     reserved_t<2>        _7;
12400:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    GCOMP;                // [Read-write] Gain compensation Register
12401:../../..\hal\include/device/stm32g431.h **** 
12402:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JQOVF = 0x400;        // JQOVF
12403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD3 = 0x200;         // AWD3
12404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD2 = 0x100;         // AWD2
12405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_AWD1 = 0x80;          // AWD1
12406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JEOS = 0x40;          // JEOS
12407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_JEOC = 0x20;          // JEOC
12408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_OVR = 0x10;           // OVR
12409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOS = 0x8;            // EOS
12410:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOC = 0x4;            // EOC
12411:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_EOSMP = 0x2;          // EOSMP
12412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ADRDY = 0x1;          // ADRDY
12413:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
12414:../../..\hal\include/device/stm32g431.h **** 
12415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JQOVFIE = 0x400;      // JQOVFIE
12416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD3IE = 0x200;       // AWD3IE
12417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD2IE = 0x100;       // AWD2IE
12418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_AWD1IE = 0x80;        // AWD1IE
12419:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JEOSIE = 0x40;        // JEOSIE
12420:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_JEOCIE = 0x20;        // JEOCIE
12421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_OVRIE = 0x10;         // OVRIE
12422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOSIE = 0x8;          // EOSIE
12423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOCIE = 0x4;          // EOCIE
12424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_EOSMPIE = 0x2;        // EOSMPIE
12425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ADRDYIE = 0x1;        // ADRDYIE
12426:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IER_RESET_VALUE = 0x0;
12427:../../..\hal\include/device/stm32g431.h **** 
12428:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADCAL = 0x80000000;   // ADCAL
12429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADCALDIF = 0x40000000;// ADCALDIF
12430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DEEPPWD = 0x20000000; // DEEPPWD
12431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADVREGEN = 0x10000000;// ADVREGEN
12432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_JADSTP = 0x20;        // JADSTP
12433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADSTP = 0x10;         // ADSTP
12434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_JADSTART = 0x8;       // JADSTART
12435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADSTART = 0x4;        // ADSTART
12436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADDIS = 0x2;          // ADDIS
12437:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ADEN = 0x1;           // ADEN
12438:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x20000000;
12439:../../..\hal\include/device/stm32g431.h **** 
12440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JQDIS = 0x80000000;   // Injected Queue disable
12441:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12442:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWDCH1CH =            // AWDCH1CH (5 bits)
12443:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12444:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JAUTO = 0x2000000;    // JAUTO
12445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JAWD1EN = 0x1000000;  // JAWD1EN
12446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWD1EN = 0x800000;    // AWD1EN
12447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AWD1SGL = 0x400000;   // AWD1SGL
12448:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JQM = 0x200000;       // JQM
12449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_JDISCEN = 0x100000;   // JDISCEN
12450:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DISCNUM =             // DISCNUM (3 bits)
12452:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
12453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DISCEN = 0x10000;     // DISCEN
12454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_ALIGN = 0x8000;       // ALIGN
12455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_AUTDLY = 0x4000;      // AUTDLY
12456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_CONT = 0x2000;        // CONT
12457:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_OVRMOD = 0x1000;      // OVRMOD
12458:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_EXTEN =               // EXTEN (2 bits)
12460:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
12461:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_EXTSEL =              // EXTSEL (4 bits)
12463:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0xf>::value<X>();
12464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_ALIGN_5 = 0x20;       // ALIGN_5
12465:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_RES =                 // RES (2 bits)
12467:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
12468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DMACFG = 0x2;         // DMACFG
12469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_DMAEN = 0x1;          // DMAEN
12470:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR_RESET_VALUE = 0x80000000;
12471:../../..\hal\include/device/stm32g431.h **** 
12472:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SMPTRIG = 0x8000000;  // SMPTRIG
12473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_BULB = 0x4000000;     // BULB
12474:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_SWTRIG = 0x2000000;   // SWTRIG
12475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_GCOMP = 0x10000;      // GCOMP
12476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_ROVSM = 0x400;        // EXTEN
12477:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_TROVS = 0x200;        // Triggered Regular Oversampling
12478:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12479:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_OVSS =                // ALIGN (4 bits)
12480:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0xf>::value<X>();
12481:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12482:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_OVSR =                // RES (3 bits)
12483:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x7>::value<X>();
12484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_JOVSE = 0x2;          // DMACFG
12485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR2_ROVSE = 0x1;          // DMAEN
12486:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR2_RESET_VALUE = 0x0;
12487:../../..\hal\include/device/stm32g431.h **** 
12488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP9 =                // SMP9 (3 bits)
12490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<27, 0x7>::value<X>();
12491:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP8 =                // SMP8 (3 bits)
12493:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
12494:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP7 =                // SMP7 (3 bits)
12496:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x7>::value<X>();
12497:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12498:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP6 =                // SMP6 (3 bits)
12499:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x7>::value<X>();
12500:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP5 =                // SMP5 (3 bits)
12502:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x7>::value<X>();
12503:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12504:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP4 =                // SMP4 (3 bits)
12505:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12506:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP3 =                // SMP3 (3 bits)
12508:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x7>::value<X>();
12509:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12510:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP2 =                // SMP2 (3 bits)
12511:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x7>::value<X>();
12512:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP1 =                // SMP1 (3 bits)
12514:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
12515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMPPLUS = 0x80000000; // Addition of one clock cycle to the sam
12516:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12517:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR1_SMP0 =                // SMP0 (3 bits)
12518:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
12519:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMPR1_RESET_VALUE = 0x0;
12520:../../..\hal\include/device/stm32g431.h **** 
12521:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12522:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP18 =               // SMP18 (3 bits)
12523:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
12524:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP17 =               // SMP17 (3 bits)
12526:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x7>::value<X>();
12527:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP16 =               // SMP16 (3 bits)
12529:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x7>::value<X>();
12530:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP15 =               // SMP15 (3 bits)
12532:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x7>::value<X>();
12533:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP14 =               // SMP14 (3 bits)
12535:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12536:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP13 =               // SMP13 (3 bits)
12538:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x7>::value<X>();
12539:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP12 =               // SMP12 (3 bits)
12541:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x7>::value<X>();
12542:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP11 =               // SMP11 (3 bits)
12544:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x7>::value<X>();
12545:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SMPR2_SMP10 =               // SMP10 (3 bits)
12547:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
12548:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SMPR2_RESET_VALUE = 0x0;
12549:../../..\hal\include/device/stm32g431.h **** 
12550:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_HT1 =                 // HT1 (12 bits)
12552:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xfff>::value<X>();
12553:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_AWDFILT =             // AWDFILT (3 bits)
12555:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
12556:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR1_LT1 =                 // LT1 (12 bits)
12558:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12559:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR1_RESET_VALUE = 0xfff0000;
12560:../../..\hal\include/device/stm32g431.h **** 
12561:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12562:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR2_HT2 =                 // HT2 (8 bits)
12563:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
12564:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR2_LT2 =                 // LT2 (8 bits)
12566:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12567:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR2_RESET_VALUE = 0xff0000;
12568:../../..\hal\include/device/stm32g431.h **** 
12569:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR3_HT3 =                 // HT3 (8 bits)
12571:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
12572:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TR3_LT3 =                 // LT3 (8 bits)
12574:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12575:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TR3_RESET_VALUE = 0xff0000;
12576:../../..\hal\include/device/stm32g431.h **** 
12577:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ4 =                 // SQ4 (5 bits)
12579:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12580:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ3 =                 // SQ3 (5 bits)
12582:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12583:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ2 =                 // SQ2 (5 bits)
12585:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12586:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_SQ1 =                 // SQ1 (5 bits)
12588:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12589:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR1_L =                   // Regular channel sequence length (4 bits
12591:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
12592:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR1_RESET_VALUE = 0x0;
12593:../../..\hal\include/device/stm32g431.h **** 
12594:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ9 =                 // SQ9 (5 bits)
12596:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12597:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ8 =                 // SQ8 (5 bits)
12599:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12600:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ7 =                 // SQ7 (5 bits)
12602:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12603:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ6 =                 // SQ6 (5 bits)
12605:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12606:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR2_SQ5 =                 // SQ5 (5 bits)
12608:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12609:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR2_RESET_VALUE = 0x0;
12610:../../..\hal\include/device/stm32g431.h **** 
12611:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ14 =                // SQ14 (5 bits)
12613:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x1f>::value<X>();
12614:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ13 =                // SQ13 (5 bits)
12616:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x1f>::value<X>();
12617:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ12 =                // SQ12 (5 bits)
12619:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x1f>::value<X>();
12620:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ11 =                // SQ11 (5 bits)
12622:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12623:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR3_SQ10 =                // SQ10 (5 bits)
12625:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12626:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR3_RESET_VALUE = 0x0;
12627:../../..\hal\include/device/stm32g431.h **** 
12628:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR4_SQ16 =                // SQ16 (5 bits)
12630:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
12631:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SQR4_SQ15 =                // SQ15 (5 bits)
12633:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12634:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SQR4_RESET_VALUE = 0x0;
12635:../../..\hal\include/device/stm32g431.h **** 
12636:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DR_RDATA =               // Regular Data converted (16 bits)
12638:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12639:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DR_RESET_VALUE = 0x0;
12640:../../..\hal\include/device/stm32g431.h **** 
12641:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ4 =                // JSQ4 (5 bits)
12643:../../..\hal\include/device/stm32g431.h ****         bit_field_t<27, 0x1f>::value<X>();
12644:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ3 =                // JSQ3 (5 bits)
12646:../../..\hal\include/device/stm32g431.h ****         bit_field_t<21, 0x1f>::value<X>();
12647:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ2 =                // JSQ2 (5 bits)
12649:../../..\hal\include/device/stm32g431.h ****         bit_field_t<15, 0x1f>::value<X>();
12650:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JSQ1 =                // JSQ1 (5 bits)
12652:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x1f>::value<X>();
12653:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JEXTEN =              // JEXTEN (2 bits)
12655:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x3>::value<X>();
12656:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12657:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JEXTSEL =             // JEXTSEL (5 bits)
12658:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x1f>::value<X>();
12659:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JSQR_JL =                  // JL (2 bits)
12661:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
12662:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JSQR_RESET_VALUE = 0x0;
12663:../../..\hal\include/device/stm32g431.h **** 
12664:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12665:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12666:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12667:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12668:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_SATEN = 0x2000000;    // SATEN
12669:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSETPOS = 0x1000000;// OFFSETPOS
12670:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12671:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR1_OFFSET1 =             // OFFSET1 (12 bits)
12672:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12673:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR1_RESET_VALUE = 0x0;
12674:../../..\hal\include/device/stm32g431.h **** 
12675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12676:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12678:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12679:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_SATEN = 0x2000000;    // SATEN
12680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSETPOS = 0x1000000;// OFFSETPOS
12681:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR2_OFFSET1 =             // OFFSET1 (12 bits)
12683:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12684:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR2_RESET_VALUE = 0x0;
12685:../../..\hal\include/device/stm32g431.h **** 
12686:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12687:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12689:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_SATEN = 0x2000000;    // SATEN
12691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSETPOS = 0x1000000;// OFFSETPOS
12692:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12693:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR3_OFFSET1 =             // OFFSET1 (12 bits)
12694:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12695:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR3_RESET_VALUE = 0x0;
12696:../../..\hal\include/device/stm32g431.h **** 
12697:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1_EN = 0x80000000;// OFFSET1_EN
12698:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1_CH =          // OFFSET1_CH (5 bits)
12700:../../..\hal\include/device/stm32g431.h ****         bit_field_t<26, 0x1f>::value<X>();
12701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_SATEN = 0x2000000;    // SATEN
12702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSETPOS = 0x1000000;// OFFSETPOS
12703:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t OFR4_OFFSET1 =             // OFFSET1 (12 bits)
12705:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfff>::value<X>();
12706:../../..\hal\include/device/stm32g431.h ****     static const uint32_t OFR4_RESET_VALUE = 0x0;
12707:../../..\hal\include/device/stm32g431.h **** 
12708:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR1_JDATA1 =              // JDATA1 (16 bits)
12710:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12711:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR1_RESET_VALUE = 0x0;
12712:../../..\hal\include/device/stm32g431.h **** 
12713:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12714:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR2_JDATA2 =              // JDATA2 (16 bits)
12715:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12716:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR2_RESET_VALUE = 0x0;
12717:../../..\hal\include/device/stm32g431.h **** 
12718:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12719:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR3_JDATA3 =              // JDATA3 (16 bits)
12720:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12721:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR3_RESET_VALUE = 0x0;
12722:../../..\hal\include/device/stm32g431.h **** 
12723:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t JDR4_JDATA4 =              // JDATA4 (16 bits)
12725:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12726:../../..\hal\include/device/stm32g431.h ****     static const uint32_t JDR4_RESET_VALUE = 0x0;
12727:../../..\hal\include/device/stm32g431.h **** 
12728:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AWD2CR_AWD2CH =              // AWD2CH (19 bits)
12730:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ffff>::value<X>();
12731:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AWD2CR_RESET_VALUE = 0x0;
12732:../../..\hal\include/device/stm32g431.h **** 
12733:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12734:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AWD3CR_AWD3CH =              // AWD3CH (19 bits)
12735:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ffff>::value<X>();
12736:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AWD3CR_RESET_VALUE = 0x0;
12737:../../..\hal\include/device/stm32g431.h **** 
12738:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIFSEL_DIFSEL_0 = 0x1;       // Differential mode for channels 0, Rea
12739:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12740:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DIFSEL_DIFSEL_1_18 =         // Differential mode for channels 15 to 
12741:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3ffff>::value<X>();
12742:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DIFSEL_RESET_VALUE = 0x0;
12743:../../..\hal\include/device/stm32g431.h **** 
12744:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12745:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALFACT_CALFACT_D =           // CALFACT_D (7 bits)
12746:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
12747:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12748:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALFACT_CALFACT_S =           // CALFACT_S (7 bits)
12749:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
12750:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CALFACT_RESET_VALUE = 0x0;
12751:../../..\hal\include/device/stm32g431.h **** 
12752:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t GCOMP_GCOMPCOEFF =          // GCOMPCOEFF (14 bits)
12754:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3fff>::value<X>();
12755:../../..\hal\include/device/stm32g431.h ****     static const uint32_t GCOMP_RESET_VALUE = 0x0;
12756:../../..\hal\include/device/stm32g431.h **** };
12757:../../..\hal\include/device/stm32g431.h **** 
12758:../../..\hal\include/device/stm32g431.h **** static adc2_t& ADC2 = *reinterpret_cast<adc2_t*>(0x50000100);
12759:../../..\hal\include/device/stm32g431.h **** 
12760:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_ADC2
12761:../../..\hal\include/device/stm32g431.h **** 
12762:../../..\hal\include/device/stm32g431.h **** 
12763:../../..\hal\include/device/stm32g431.h **** ////
12764:../../..\hal\include/device/stm32g431.h **** //
12765:../../..\hal\include/device/stm32g431.h **** //    Analog-to-Digital Converter
12766:../../..\hal\include/device/stm32g431.h **** //
12767:../../..\hal\include/device/stm32g431.h **** ////
12768:../../..\hal\include/device/stm32g431.h **** 
12769:../../..\hal\include/device/stm32g431.h **** struct adc12_common_t
12770:../../..\hal\include/device/stm32g431.h **** {
12771:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CSR;                  // [Read-only] ADC Common status register
12772:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
12773:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR;                  // [Read-write] ADC common control register
12774:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CDR;                  // [Read-only] ADC common regular data register for 
12775:../../..\hal\include/device/stm32g431.h **** 
12776:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_ADDRDY_MST = 0x1;     // ADDRDY_MST
12777:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOSMP_MST = 0x2;      // EOSMP_MST
12778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOC_MST = 0x4;        // EOC_MST
12779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOS_MST = 0x8;        // EOS_MST
12780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_OVR_MST = 0x10;       // OVR_MST
12781:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOC_MST = 0x20;      // JEOC_MST
12782:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOS_MST = 0x40;      // JEOS_MST
12783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD1_MST = 0x80;      // AWD1_MST
12784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD2_MST = 0x100;     // AWD2_MST
12785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD3_MST = 0x200;     // AWD3_MST
12786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JQOVF_MST = 0x400;    // JQOVF_MST
12787:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_ADRDY_SLV = 0x10000;  // ADRDY_SLV
12788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOSMP_SLV = 0x20000;  // EOSMP_SLV
12789:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOC_SLV = 0x40000;    // End of regular conversion of the slave A
12790:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOS_SLV = 0x80000;    // End of regular sequence flag of the slav
12791:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_OVR_SLV = 0x100000;   // Overrun flag of the slave ADC
12792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOC_SLV = 0x200000;  // End of injected conversion flag of the s
12793:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOS_SLV = 0x400000;  // End of injected sequence flag of the sla
12794:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD1_SLV = 0x800000;  // Analog watchdog 1 flag of the slave ADC
12795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD2_SLV = 0x1000000; // Analog watchdog 2 flag of the slave ADC
12796:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD3_SLV = 0x2000000; // Analog watchdog 3 flag of the slave ADC
12797:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JQOVF_SLV = 0x4000000;// Injected Context Queue Overflow flag of 
12798:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CSR_RESET_VALUE = 0x0;
12799:../../..\hal\include/device/stm32g431.h **** 
12800:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12801:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DUAL =                // Dual ADC mode selection (5 bits)
12802:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12803:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12804:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DELAY =               // Delay between 2 sampling phases (4 bits)
12805:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
12806:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DMACFG = 0x2000;      // DMA configuration (for multi-ADC mode)
12807:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_MDMA =                // Direct memory access mode for multi ADC 
12809:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
12810:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CKMODE =              // ADC clock mode (2 bits)
12812:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
12813:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_VREFEN = 0x400000;    // VREFINT enable
12814:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CH17SEL = 0x800000;   // CH17 selection
12815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CH18SEL = 0x1000000;  // CH18 selection
12816:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_PRESC =               // ADC prescaler (4 bits)
12818:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
12819:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR_RESET_VALUE = 0x0;
12820:../../..\hal\include/device/stm32g431.h **** 
12821:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CDR_RDATA_SLV =           // Regular data of the slave ADC (16 bits)
12823:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
12824:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CDR_RDATA_MST =           // Regular data of the master ADC (16 bits)
12826:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12827:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CDR_RESET_VALUE = 0x0;
12828:../../..\hal\include/device/stm32g431.h **** };
12829:../../..\hal\include/device/stm32g431.h **** 
12830:../../..\hal\include/device/stm32g431.h **** static adc12_common_t& ADC12_Common = *reinterpret_cast<adc12_common_t*>(0x50000200);
12831:../../..\hal\include/device/stm32g431.h **** 
12832:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_ADC12_Common
12833:../../..\hal\include/device/stm32g431.h **** 
12834:../../..\hal\include/device/stm32g431.h **** 
12835:../../..\hal\include/device/stm32g431.h **** ////
12836:../../..\hal\include/device/stm32g431.h **** //
12837:../../..\hal\include/device/stm32g431.h **** //    Analog-to-Digital Converter
12838:../../..\hal\include/device/stm32g431.h **** //
12839:../../..\hal\include/device/stm32g431.h **** ////
12840:../../..\hal\include/device/stm32g431.h **** 
12841:../../..\hal\include/device/stm32g431.h **** struct adc345_common_t
12842:../../..\hal\include/device/stm32g431.h **** {
12843:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CSR;                  // [Read-only] ADC Common status register
12844:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
12845:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR;                  // [Read-write] ADC common control register
12846:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CDR;                  // [Read-only] ADC common regular data register for 
12847:../../..\hal\include/device/stm32g431.h **** 
12848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_ADDRDY_MST = 0x1;     // ADDRDY_MST
12849:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOSMP_MST = 0x2;      // EOSMP_MST
12850:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOC_MST = 0x4;        // EOC_MST
12851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOS_MST = 0x8;        // EOS_MST
12852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_OVR_MST = 0x10;       // OVR_MST
12853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOC_MST = 0x20;      // JEOC_MST
12854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOS_MST = 0x40;      // JEOS_MST
12855:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD1_MST = 0x80;      // AWD1_MST
12856:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD2_MST = 0x100;     // AWD2_MST
12857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD3_MST = 0x200;     // AWD3_MST
12858:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JQOVF_MST = 0x400;    // JQOVF_MST
12859:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_ADRDY_SLV = 0x10000;  // ADRDY_SLV
12860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOSMP_SLV = 0x20000;  // EOSMP_SLV
12861:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOC_SLV = 0x40000;    // End of regular conversion of the slave A
12862:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_EOS_SLV = 0x80000;    // End of regular sequence flag of the slav
12863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_OVR_SLV = 0x100000;   // Overrun flag of the slave ADC
12864:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOC_SLV = 0x200000;  // End of injected conversion flag of the s
12865:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JEOS_SLV = 0x400000;  // End of injected sequence flag of the sla
12866:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD1_SLV = 0x800000;  // Analog watchdog 1 flag of the slave ADC
12867:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD2_SLV = 0x1000000; // Analog watchdog 2 flag of the slave ADC
12868:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_AWD3_SLV = 0x2000000; // Analog watchdog 3 flag of the slave ADC
12869:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_JQOVF_SLV = 0x4000000;// Injected Context Queue Overflow flag of 
12870:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CSR_RESET_VALUE = 0x0;
12871:../../..\hal\include/device/stm32g431.h **** 
12872:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12873:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DUAL =                // Dual ADC mode selection (5 bits)
12874:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
12875:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12876:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DELAY =               // Delay between 2 sampling phases (4 bits)
12877:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
12878:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DMACFG = 0x2000;      // DMA configuration (for multi-ADC mode)
12879:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_MDMA =                // Direct memory access mode for multi ADC 
12881:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
12882:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12883:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CKMODE =              // ADC clock mode (2 bits)
12884:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
12885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_VREFEN = 0x400000;    // VREFINT enable
12886:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CH17SEL = 0x800000;   // CH17 selection
12887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_CH18SEL = 0x1000000;  // CH18 selection
12888:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_PRESC =               // ADC prescaler (4 bits)
12890:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0xf>::value<X>();
12891:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR_RESET_VALUE = 0x0;
12892:../../..\hal\include/device/stm32g431.h **** 
12893:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12894:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CDR_RDATA_SLV =           // Regular data of the slave ADC (16 bits)
12895:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
12896:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12897:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CDR_RDATA_MST =           // Regular data of the master ADC (16 bits)
12898:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12899:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CDR_RESET_VALUE = 0x0;
12900:../../..\hal\include/device/stm32g431.h **** };
12901:../../..\hal\include/device/stm32g431.h **** 
12902:../../..\hal\include/device/stm32g431.h **** static adc345_common_t& ADC345_Common = *reinterpret_cast<adc345_common_t*>(0x50000700);
12903:../../..\hal\include/device/stm32g431.h **** 
12904:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_ADC345_Common
12905:../../..\hal\include/device/stm32g431.h **** 
12906:../../..\hal\include/device/stm32g431.h **** 
12907:../../..\hal\include/device/stm32g431.h **** ////
12908:../../..\hal\include/device/stm32g431.h **** //
12909:../../..\hal\include/device/stm32g431.h **** //    Filter Math Accelerator
12910:../../..\hal\include/device/stm32g431.h **** //
12911:../../..\hal\include/device/stm32g431.h **** ////
12912:../../..\hal\include/device/stm32g431.h **** 
12913:../../..\hal\include/device/stm32g431.h **** struct fmac_t
12914:../../..\hal\include/device/stm32g431.h **** {
12915:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    X1BUFCFG;             // [Read-write] FMAC X1 Buffer Configuration registe
12916:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    X2BUFCFG;             // [Read-write] FMAC X2 Buffer Configuration registe
12917:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    YBUFCFG;              // [Read-write] FMAC Y Buffer Configuration register
12918:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PARAM;                // [Read-write] FMAC Parameter register
12919:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] FMAC Control register
12920:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-only] FMAC Status register
12921:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WDATA;                // [Write-only] FMAC Write Data register
12922:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDATA;                // [Read-only] FMAC Read Data register
12923:../../..\hal\include/device/stm32g431.h **** 
12924:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12925:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t X1BUFCFG_X1_BASE =             // X1_BASE (8 bits)
12926:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12927:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12928:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t X1BUFCFG_X1_BUF_SIZE =         // X1_BUF_SIZE (8 bits)
12929:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
12930:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t X1BUFCFG_FULL_WM =             // FULL_WM (2 bits)
12932:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
12933:../../..\hal\include/device/stm32g431.h ****     static const uint32_t X1BUFCFG_RESET_VALUE = 0x0;
12934:../../..\hal\include/device/stm32g431.h **** 
12935:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12936:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t X2BUFCFG_X2_BASE =             // X1_BASE (8 bits)
12937:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12938:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t X2BUFCFG_X2_BUF_SIZE =         // X1_BUF_SIZE (8 bits)
12940:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
12941:../../..\hal\include/device/stm32g431.h ****     static const uint32_t X2BUFCFG_RESET_VALUE = 0x0;
12942:../../..\hal\include/device/stm32g431.h **** 
12943:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12944:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t YBUFCFG_Y_BASE =              // X1_BASE (8 bits)
12945:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12946:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12947:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t YBUFCFG_Y_BUF_SIZE =          // X1_BUF_SIZE (8 bits)
12948:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
12949:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12950:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t YBUFCFG_EMPTY_WM =            // EMPTY_WM (2 bits)
12951:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3>::value<X>();
12952:../../..\hal\include/device/stm32g431.h ****     static const uint32_t YBUFCFG_RESET_VALUE = 0x0;
12953:../../..\hal\include/device/stm32g431.h **** 
12954:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PARAM_START = 0x80000000;   // START
12955:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12956:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PARAM_FUNC =                // FUNC (7 bits)
12957:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7f>::value<X>();
12958:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12959:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PARAM_R =                   // R (8 bits)
12960:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
12961:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12962:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PARAM_Q =                   // Q (8 bits)
12963:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
12964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PARAM_P =                   // P (8 bits)
12966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
12967:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PARAM_RESET_VALUE = 0x0;
12968:../../..\hal\include/device/stm32g431.h **** 
12969:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RESET = 0x10000;      // RESET
12970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CLIPEN = 0x8000;      // CLIPEN
12971:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DMAWEN = 0x200;       // DMAWEN
12972:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_DMAREN = 0x100;       // DMAREN
12973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SATIEN = 0x10;        // SATIEN
12974:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_UNFLIEN = 0x8;        // UNFLIEN
12975:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_OVFLIEN = 0x4;        // OVFLIEN
12976:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_WIEN = 0x2;           // WIEN
12977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RIEN = 0x1;           // RIEN
12978:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
12979:../../..\hal\include/device/stm32g431.h **** 
12980:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_YEMPTY = 0x1;         // YEMPTY
12981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_X1FULL = 0x2;         // X1FULL
12982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_OVFL = 0x100;         // OVFL
12983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_UNFL = 0x200;         // UNFL
12984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_SAT = 0x400;          // SAT
12985:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
12986:../../..\hal\include/device/stm32g431.h **** 
12987:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12988:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t WDATA_WDATA =               // WDATA (16 bits)
12989:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12990:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WDATA_RESET_VALUE = 0x0;
12991:../../..\hal\include/device/stm32g431.h **** 
12992:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
12993:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RDATA_RDATA =               // RDATA (16 bits)
12994:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
12995:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDATA_RESET_VALUE = 0x0;
12996:../../..\hal\include/device/stm32g431.h **** 
12997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t FMAC = 101; // FMAC
12998:../../..\hal\include/device/stm32g431.h **** };
12999:../../..\hal\include/device/stm32g431.h **** 
13000:../../..\hal\include/device/stm32g431.h **** static fmac_t& FMAC = *reinterpret_cast<fmac_t*>(0x40021400);
13001:../../..\hal\include/device/stm32g431.h **** 
13002:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FMAC
13003:../../..\hal\include/device/stm32g431.h **** 
13004:../../..\hal\include/device/stm32g431.h **** 
13005:../../..\hal\include/device/stm32g431.h **** ////
13006:../../..\hal\include/device/stm32g431.h **** //
13007:../../..\hal\include/device/stm32g431.h **** //    CORDIC Co-processor
13008:../../..\hal\include/device/stm32g431.h **** //
13009:../../..\hal\include/device/stm32g431.h **** ////
13010:../../..\hal\include/device/stm32g431.h **** 
13011:../../..\hal\include/device/stm32g431.h **** struct cordic_t
13012:../../..\hal\include/device/stm32g431.h **** {
13013:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CSR;                  // [Read-write] CORDIC Control Status register
13014:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    WDATA;                // [Read-write] FMAC Write Data register
13015:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RDATA;                // [Read-only] FMAC Read Data register
13016:../../..\hal\include/device/stm32g431.h **** 
13017:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_FUNC =                // FUNC (4 bits)
13019:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
13020:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_PRECISION =           // PRECISION (4 bits)
13022:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
13023:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_SCALE =               // SCALE (3 bits)
13025:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
13026:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_IEN = 0x10000;        // IEN
13027:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_DMAREN = 0x20000;     // DMAREN
13028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_DMAWEN = 0x40000;     // DMAWEN
13029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_NRES = 0x80000;       // NRES
13030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_NARGS = 0x100000;     // NARGS
13031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_RESSIZE = 0x200000;   // RESSIZE
13032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_ARGSIZE = 0x400000;   // ARGSIZE
13033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CSR_RRDY = 0x80000000;    // RRDY
13034:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CSR_RESET_VALUE = 0x0;
13035:../../..\hal\include/device/stm32g431.h **** 
13036:../../..\hal\include/device/stm32g431.h **** 
13037:../../..\hal\include/device/stm32g431.h ****     static const uint32_t WDATA_RESET_VALUE = 0x0;
13038:../../..\hal\include/device/stm32g431.h **** 
13039:../../..\hal\include/device/stm32g431.h **** 
13040:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RDATA_RESET_VALUE = 0x0;
13041:../../..\hal\include/device/stm32g431.h **** 
13042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t CORDIC = 100; // Cordic
13043:../../..\hal\include/device/stm32g431.h **** };
13044:../../..\hal\include/device/stm32g431.h **** 
13045:../../..\hal\include/device/stm32g431.h **** static cordic_t& CORDIC = *reinterpret_cast<cordic_t*>(0x40020c00);
13046:../../..\hal\include/device/stm32g431.h **** 
13047:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_CORDIC
13048:../../..\hal\include/device/stm32g431.h **** 
13049:../../..\hal\include/device/stm32g431.h **** 
13050:../../..\hal\include/device/stm32g431.h **** ////
13051:../../..\hal\include/device/stm32g431.h **** //
13052:../../..\hal\include/device/stm32g431.h **** //    Serial audio interface
13053:../../..\hal\include/device/stm32g431.h **** //
13054:../../..\hal\include/device/stm32g431.h **** ////
13055:../../..\hal\include/device/stm32g431.h **** 
13056:../../..\hal\include/device/stm32g431.h **** struct sai_t
13057:../../..\hal\include/device/stm32g431.h **** {
13058:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ACR1;                 // [Read-write] AConfiguration register 1
13059:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ACR2;                 // [Read-write] AConfiguration register 2
13060:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFRCR;                // [Read-write] AFRCR
13061:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ASLOTR;               // [Read-write] ASlot register
13062:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AIM;                  // [Read-write] AInterrupt mask register2
13063:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ASR;                  // [Read-write] AStatus register
13064:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ACLRFR;               // [Read-write] AClear flag register
13065:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ADR;                  // [Read-write] AData register
13066:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BCR1;                 // [Read-write] BConfiguration register 1
13067:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BCR2;                 // [Read-write] BConfiguration register 2
13068:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BFRCR;                // [Read-write] BFRCR
13069:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSLOTR;               // [Read-write] BSlot register
13070:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BIM;                  // [Read-write] BInterrupt mask register2
13071:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BSR;                  // [Read-only] BStatus register
13072:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BCLRFR;               // [Write-only] BClear flag register
13073:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BDR;                  // [Read-write] BData register
13074:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDMCR;                // [Read-write] PDM control register
13075:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PDMDLY;               // [Read-write] PDM delay register
13076:../../..\hal\include/device/stm32g431.h **** 
13077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_MCKEN = 0x8000000;    // MCKEN
13078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_OSR = 0x4000000;      // OSR
13079:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_MCJDIV =              // Master clock divider (6 bits)
13081:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3f>::value<X>();
13082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_NODIV = 0x80000;      // No divider
13083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_DMAEN = 0x20000;      // DMA enable
13084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_SAIAEN = 0x10000;     // Audio block A enable
13085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_OutDri = 0x2000;      // Output drive
13086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_MONO = 0x1000;        // Mono mode
13087:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_SYNCEN =              // Synchronization enable (2 bits)
13089:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
13090:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_CKSTR = 0x200;        // Clock strobing edge
13091:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_LSBFIRST = 0x100;     // Least significant bit first
13092:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_DS =                  // Data size (3 bits)
13094:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x7>::value<X>();
13095:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_PRTCFG =              // Protocol configuration (2 bits)
13097:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
13098:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR1_MODE =                // Audio block mode (2 bits)
13100:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
13101:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ACR1_RESET_VALUE = 0x40;
13102:../../..\hal\include/device/stm32g431.h **** 
13103:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13104:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_COMP =                // Companding mode (2 bits)
13105:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
13106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_CPL = 0x2000;         // Complement bit
13107:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13108:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_MUTECN =              // Mute counter (6 bits)
13109:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x3f>::value<X>();
13110:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_MUTEVAL = 0x40;       // Mute value
13111:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_MUTE = 0x20;          // Mute
13112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_TRIS = 0x10;          // Tristate management on data line
13113:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_FFLUS = 0x8;          // FIFO flush
13114:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACR2_FTH =                 // FIFO threshold (3 bits)
13116:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
13117:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ACR2_RESET_VALUE = 0x0;
13118:../../..\hal\include/device/stm32g431.h **** 
13119:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRCR_FSOFF = 0x40000;      // Frame synchronization offset
13120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRCR_FSPOL = 0x20000;      // Frame synchronization polarity
13121:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRCR_FSDEF = 0x10000;      // Frame synchronization definition
13122:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRCR_FSALL =               // Frame synchronization active level len
13124:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
13125:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AFRCR_FRL =                 // Frame length (8 bits)
13127:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
13128:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFRCR_RESET_VALUE = 0x7;
13129:../../..\hal\include/device/stm32g431.h **** 
13130:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13131:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASLOTR_SLOTEN =              // Slot enable (16 bits)
13132:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
13133:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASLOTR_NBSLOT =              // Number of slots in an audio frame (4 
13135:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
13136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASLOTR_SLOTSZ =              // Slot size (2 bits)
13138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
13139:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASLOTR_FBOFF =               // First bit offset (5 bits)
13141:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
13142:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ASLOTR_RESET_VALUE = 0x0;
13143:../../..\hal\include/device/stm32g431.h **** 
13144:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_LFSDET = 0x40;        // Late frame synchronization detection int
13145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_AFSDETIE = 0x20;      // Anticipated frame synchronization detect
13146:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_CNRDYIE = 0x10;       // Codec not ready interrupt enable
13147:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_FREQIE = 0x8;         // FIFO request interrupt enable
13148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_WCKCFG = 0x4;         // Wrong clock configuration interrupt enab
13149:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_MUTEDET = 0x2;        // Mute detection interrupt enable
13150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIM_OVRUDRIE = 0x1;       // Overrun/underrun interrupt enable
13151:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AIM_RESET_VALUE = 0x0;
13152:../../..\hal\include/device/stm32g431.h **** 
13153:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13154:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_FLVL =                // FIFO level threshold (3 bits)
13155:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
13156:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_LFSDET = 0x40;        // Late frame synchronization detection
13157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_AFSDET = 0x20;        // Anticipated frame synchronization detect
13158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_CNRDY = 0x10;         // Codec not ready
13159:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_FREQ = 0x8;           // FIFO request
13160:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_WCKCFG = 0x4;         // Wrong clock configuration flag. This bit
13161:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_MUTEDET = 0x2;        // Mute detection
13162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ASR_OVRUDR = 0x1;         // Overrun / underrun
13163:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ASR_RESET_VALUE = 0x0;
13164:../../..\hal\include/device/stm32g431.h **** 
13165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_LFSDET = 0x40;        // Clear late frame synchronization dete
13166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_CAFSDET = 0x20;       // Clear anticipated frame synchronizati
13167:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_CNRDY = 0x10;         // Clear codec not ready flag
13168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_WCKCFG = 0x4;         // Clear wrong clock configuration flag
13169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_MUTEDET = 0x2;        // Mute detection flag
13170:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACLRFR_OVRUDR = 0x1;         // Clear overrun / underrun
13171:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ACLRFR_RESET_VALUE = 0x0;
13172:../../..\hal\include/device/stm32g431.h **** 
13173:../../..\hal\include/device/stm32g431.h **** 
13174:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ADR_RESET_VALUE = 0x0;
13175:../../..\hal\include/device/stm32g431.h **** 
13176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_MCKEN = 0x8000000;    // MCKEN
13177:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_OSR = 0x4000000;      // OSR
13178:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_MCJDIV =              // Master clock divider (6 bits)
13180:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x3f>::value<X>();
13181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_NODIV = 0x80000;      // No divider
13182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_DMAEN = 0x20000;      // DMA enable
13183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_SAIBEN = 0x10000;     // Audio block B enable
13184:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_OutDri = 0x2000;      // Output drive
13185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_MONO = 0x1000;        // Mono mode
13186:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13187:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_SYNCEN =              // Synchronization enable (2 bits)
13188:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
13189:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_CKSTR = 0x200;        // Clock strobing edge
13190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_LSBFIRST = 0x100;     // Least significant bit first
13191:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13192:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_DS =                  // Data size (3 bits)
13193:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x7>::value<X>();
13194:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13195:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_PRTCFG =              // Protocol configuration (2 bits)
13196:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
13197:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13198:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR1_MODE =                // Audio block mode (2 bits)
13199:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
13200:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BCR1_RESET_VALUE = 0x40;
13201:../../..\hal\include/device/stm32g431.h **** 
13202:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13203:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_COMP =                // Companding mode (2 bits)
13204:../../..\hal\include/device/stm32g431.h ****         bit_field_t<14, 0x3>::value<X>();
13205:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_CPL = 0x2000;         // Complement bit
13206:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_MUTECN =              // Mute counter (6 bits)
13208:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x3f>::value<X>();
13209:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_MUTEVAL = 0x40;       // Mute value
13210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_MUTE = 0x20;          // Mute
13211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_TRIS = 0x10;          // Tristate management on data line
13212:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_FFLUS = 0x8;          // FIFO flush
13213:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCR2_FTH =                 // FIFO threshold (3 bits)
13215:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
13216:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BCR2_RESET_VALUE = 0x0;
13217:../../..\hal\include/device/stm32g431.h **** 
13218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BFRCR_FSOFF = 0x40000;      // Frame synchronization offset
13219:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BFRCR_FSPOL = 0x20000;      // Frame synchronization polarity
13220:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BFRCR_FSDEF = 0x10000;      // Frame synchronization definition
13221:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13222:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BFRCR_FSALL =               // Frame synchronization active level len
13223:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
13224:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13225:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BFRCR_FRL =                 // Frame length (8 bits)
13226:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
13227:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BFRCR_RESET_VALUE = 0x7;
13228:../../..\hal\include/device/stm32g431.h **** 
13229:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13230:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSLOTR_SLOTEN =              // Slot enable (16 bits)
13231:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
13232:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13233:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSLOTR_NBSLOT =              // Number of slots in an audio frame (4 
13234:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xf>::value<X>();
13235:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13236:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSLOTR_SLOTSZ =              // Slot size (2 bits)
13237:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
13238:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13239:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSLOTR_FBOFF =               // First bit offset (5 bits)
13240:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
13241:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSLOTR_RESET_VALUE = 0x0;
13242:../../..\hal\include/device/stm32g431.h **** 
13243:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_LFSDETIE = 0x40;      // Late frame synchronization detection int
13244:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_AFSDETIE = 0x20;      // Anticipated frame synchronization detect
13245:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_CNRDYIE = 0x10;       // Codec not ready interrupt enable
13246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_FREQIE = 0x8;         // FIFO request interrupt enable
13247:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_WCKCFG = 0x4;         // Wrong clock configuration interrupt enab
13248:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_MUTEDET = 0x2;        // Mute detection interrupt enable
13249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BIM_OVRUDRIE = 0x1;       // Overrun/underrun interrupt enable
13250:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BIM_RESET_VALUE = 0x0;
13251:../../..\hal\include/device/stm32g431.h **** 
13252:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13253:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_FLVL =                // FIFO level threshold (3 bits)
13254:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
13255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_LFSDET = 0x40;        // Late frame synchronization detection
13256:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_AFSDET = 0x20;        // Anticipated frame synchronization detect
13257:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_CNRDY = 0x10;         // Codec not ready
13258:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_FREQ = 0x8;           // FIFO request
13259:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_WCKCFG = 0x4;         // Wrong clock configuration flag
13260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_MUTEDET = 0x2;        // Mute detection
13261:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BSR_OVRUDR = 0x1;         // Overrun / underrun
13262:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BSR_RESET_VALUE = 0x0;
13263:../../..\hal\include/device/stm32g431.h **** 
13264:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_LFSDET = 0x40;        // Clear late frame synchronization dete
13265:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_CAFSDET = 0x20;       // Clear anticipated frame synchronizati
13266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_CNRDY = 0x10;         // Clear codec not ready flag
13267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_WCKCFG = 0x4;         // Clear wrong clock configuration flag
13268:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_MUTEDET = 0x2;        // Mute detection flag
13269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BCLRFR_OVRUDR = 0x1;         // Clear overrun / underrun
13270:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BCLRFR_RESET_VALUE = 0x0;
13271:../../..\hal\include/device/stm32g431.h **** 
13272:../../..\hal\include/device/stm32g431.h **** 
13273:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BDR_RESET_VALUE = 0x0;
13274:../../..\hal\include/device/stm32g431.h **** 
13275:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_PDMEN = 0x1;          // PDMEN
13276:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_MICNBR =              // MICNBR (2 bits)
13278:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
13279:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_CKEN1 = 0x100;        // CKEN1
13280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_CKEN2 = 0x200;        // CKEN2
13281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_CKEN3 = 0x400;        // CKEN3
13282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMCR_CKEN4 = 0x800;        // CKEN4
13283:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDMCR_RESET_VALUE = 0x0;
13284:../../..\hal\include/device/stm32g431.h **** 
13285:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13286:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM1L =              // DLYM1L (3 bits)
13287:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
13288:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM1R =              // DLYM1R (3 bits)
13290:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
13291:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM2L =              // DLYM2L (3 bits)
13293:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
13294:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM2R =              // DLYM2R (3 bits)
13296:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7>::value<X>();
13297:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13298:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM3L =              // DLYM3L (3 bits)
13299:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7>::value<X>();
13300:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13301:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM3R =              // DLYM3R (3 bits)
13302:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x7>::value<X>();
13303:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM4L =              // DLYM4L (3 bits)
13305:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
13306:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13307:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PDMDLY_DLYM4R =              // DLYM4R (3 bits)
13308:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x7>::value<X>();
13309:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PDMDLY_RESET_VALUE = 0x0;
13310:../../..\hal\include/device/stm32g431.h **** 
13311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t SAI = 76; // SAI
13312:../../..\hal\include/device/stm32g431.h **** };
13313:../../..\hal\include/device/stm32g431.h **** 
13314:../../..\hal\include/device/stm32g431.h **** static sai_t& SAI = *reinterpret_cast<sai_t*>(0x40015400);
13315:../../..\hal\include/device/stm32g431.h **** 
13316:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SAI
13317:../../..\hal\include/device/stm32g431.h **** 
13318:../../..\hal\include/device/stm32g431.h **** 
13319:../../..\hal\include/device/stm32g431.h **** ////
13320:../../..\hal\include/device/stm32g431.h **** //
13321:../../..\hal\include/device/stm32g431.h **** //    Tamper and backup registers
13322:../../..\hal\include/device/stm32g431.h **** //
13323:../../..\hal\include/device/stm32g431.h **** ////
13324:../../..\hal\include/device/stm32g431.h **** 
13325:../../..\hal\include/device/stm32g431.h **** struct tamp_t
13326:../../..\hal\include/device/stm32g431.h **** {
13327:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR1;                  // [Read-write] control register 1
13328:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR2;                  // [Read-write] control register 2
13329:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
13330:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FLTCR;                // [Read-write] TAMP filter control register
13331:../../..\hal\include/device/stm32g431.h ****     reserved_t<7>        _1;
13332:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IER;                  // [Read-write] TAMP interrupt enable register
13333:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-only] TAMP status register
13334:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MISR;                 // [Read-only] TAMP masked interrupt status register
13335:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
13336:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SCR;                  // [Read-write] TAMP status clear register
13337:../../..\hal\include/device/stm32g431.h ****     reserved_t<48>       _3;
13338:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP0R;                // [Read-write] TAMP backup register
13339:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP1R;                // [Read-write] TAMP backup register
13340:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP2R;                // [Read-write] TAMP backup register
13341:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP3R;                // [Read-write] TAMP backup register
13342:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP4R;                // [Read-write] TAMP backup register
13343:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP5R;                // [Read-write] TAMP backup register
13344:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP6R;                // [Read-write] TAMP backup register
13345:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP7R;                // [Read-write] TAMP backup register
13346:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP8R;                // [Read-write] TAMP backup register
13347:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP9R;                // [Read-write] TAMP backup register
13348:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP10R;               // [Read-write] TAMP backup register
13349:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP11R;               // [Read-write] TAMP backup register
13350:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP12R;               // [Read-write] TAMP backup register
13351:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP13R;               // [Read-write] TAMP backup register
13352:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP14R;               // [Read-write] TAMP backup register
13353:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP15R;               // [Read-write] TAMP backup register
13354:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP16R;               // [Read-write] TAMP backup register
13355:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP17R;               // [Read-write] TAMP backup register
13356:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP18R;               // [Read-write] TAMP backup register
13357:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP19R;               // [Read-write] TAMP backup register
13358:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP20R;               // [Read-write] TAMP backup register
13359:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP21R;               // [Read-write] TAMP backup register
13360:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP22R;               // [Read-write] TAMP backup register
13361:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP23R;               // [Read-write] TAMP backup register
13362:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP24R;               // [Read-write] TAMP backup register
13363:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP25R;               // [Read-write] TAMP backup register
13364:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP26R;               // [Read-write] TAMP backup register
13365:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP27R;               // [Read-write] TAMP backup register
13366:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP28R;               // [Read-write] TAMP backup register
13367:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP29R;               // [Read-write] TAMP backup register
13368:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP30R;               // [Read-write] TAMP backup register
13369:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BKP31R;               // [Read-write] TAMP backup register
13370:../../..\hal\include/device/stm32g431.h **** 
13371:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TAMP1E = 0x1;         // TAMP1E
13372:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TAMP2E = 0x2;         // TAMP2E
13373:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_TAMP3E = 0x4;         // TAMP2E
13374:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ITAMP3E = 0x40000;    // ITAMP3E
13375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ITAMP4E = 0x80000;    // ITAMP4E
13376:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ITAMP5E = 0x100000;   // ITAMP5E
13377:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR1_ITAMP6E = 0x200000;   // ITAMP6E
13378:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR1_RESET_VALUE = 0xffff0000;
13379:../../..\hal\include/device/stm32g431.h **** 
13380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP1NOER = 0x1;      // TAMP1NOER
13381:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP2NOER = 0x2;      // TAMP2NOER
13382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP3NOER = 0x4;      // TAMP3NOER
13383:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP1MSK = 0x10000;   // TAMP1MSK
13384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP2MSK = 0x20000;   // TAMP2MSK
13385:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP3MSK = 0x40000;   // TAMP3MSK
13386:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP1TRG = 0x1000000; // TAMP1TRG
13387:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP2TRG = 0x2000000; // TAMP2TRG
13388:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR2_TAMP3TRG = 0x4000000; // TAMP3TRG
13389:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR2_RESET_VALUE = 0x0;
13390:../../..\hal\include/device/stm32g431.h **** 
13391:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13392:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FLTCR_TAMPFREQ =            // TAMPFREQ (3 bits)
13393:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
13394:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13395:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FLTCR_TAMPFLT =             // TAMPFLT (2 bits)
13396:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
13397:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13398:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FLTCR_TAMPPRCH =            // TAMPPRCH (2 bits)
13399:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
13400:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FLTCR_TAMPPUDIS = 0x80;     // TAMPPUDIS
13401:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FLTCR_RESET_VALUE = 0x0;
13402:../../..\hal\include/device/stm32g431.h **** 
13403:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_TAMP1IE = 0x1;        // TAMP1IE
13404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_TAMP2IE = 0x2;        // TAMP2IE
13405:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_TAMP3IE = 0x4;        // TAMP3IE
13406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ITAMP3IE = 0x40000;   // ITAMP3IE
13407:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ITAMP4IE = 0x80000;   // ITAMP4IE
13408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ITAMP5IE = 0x100000;  // ITAMP5IE
13409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IER_ITAMP6IE = 0x200000;  // ITAMP6IE
13410:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IER_RESET_VALUE = 0x0;
13411:../../..\hal\include/device/stm32g431.h **** 
13412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TAMP1F = 0x1;         // TAMP1F
13413:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TAMP2F = 0x2;         // TAMP2F
13414:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TAMP3F = 0x4;         // TAMP3F
13415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ITAMP3F = 0x40000;    // ITAMP3F
13416:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ITAMP4F = 0x80000;    // ITAMP4F
13417:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ITAMP5F = 0x100000;   // ITAMP5F
13418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_ITAMP6F = 0x200000;   // ITAMP6F
13419:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
13420:../../..\hal\include/device/stm32g431.h **** 
13421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_TAMP1MF = 0x1;        // TAMP1MF:
13422:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_TAMP2MF = 0x2;        // TAMP2MF
13423:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_TAMP3MF = 0x4;        // TAMP3MF
13424:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ITAMP3MF = 0x40000;   // ITAMP3MF
13425:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ITAMP4MF = 0x80000;   // ITAMP4MF
13426:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ITAMP5MF = 0x100000;  // ITAMP5MF
13427:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t MISR_ITAMP6MF = 0x200000;  // ITAMP6MF
13428:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MISR_RESET_VALUE = 0x0;
13429:../../..\hal\include/device/stm32g431.h **** 
13430:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CTAMP1F = 0x1;        // CTAMP1F
13431:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CTAMP2F = 0x2;        // CTAMP2F
13432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CTAMP3F = 0x4;        // CTAMP3F
13433:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CITAMP3F = 0x40000;   // CITAMP3F
13434:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CITAMP4F = 0x80000;   // CITAMP4F
13435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CITAMP5F = 0x100000;  // CITAMP5F
13436:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_CITAMP6F = 0x200000;  // CITAMP6F
13437:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SCR_RESET_VALUE = 0x0;
13438:../../..\hal\include/device/stm32g431.h **** 
13439:../../..\hal\include/device/stm32g431.h **** 
13440:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP0R_RESET_VALUE = 0x0;
13441:../../..\hal\include/device/stm32g431.h **** 
13442:../../..\hal\include/device/stm32g431.h **** 
13443:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP1R_RESET_VALUE = 0x0;
13444:../../..\hal\include/device/stm32g431.h **** 
13445:../../..\hal\include/device/stm32g431.h **** 
13446:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP2R_RESET_VALUE = 0x0;
13447:../../..\hal\include/device/stm32g431.h **** 
13448:../../..\hal\include/device/stm32g431.h **** 
13449:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP3R_RESET_VALUE = 0x0;
13450:../../..\hal\include/device/stm32g431.h **** 
13451:../../..\hal\include/device/stm32g431.h **** 
13452:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP4R_RESET_VALUE = 0x0;
13453:../../..\hal\include/device/stm32g431.h **** 
13454:../../..\hal\include/device/stm32g431.h **** 
13455:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP5R_RESET_VALUE = 0x0;
13456:../../..\hal\include/device/stm32g431.h **** 
13457:../../..\hal\include/device/stm32g431.h **** 
13458:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP6R_RESET_VALUE = 0x0;
13459:../../..\hal\include/device/stm32g431.h **** 
13460:../../..\hal\include/device/stm32g431.h **** 
13461:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP7R_RESET_VALUE = 0x0;
13462:../../..\hal\include/device/stm32g431.h **** 
13463:../../..\hal\include/device/stm32g431.h **** 
13464:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP8R_RESET_VALUE = 0x0;
13465:../../..\hal\include/device/stm32g431.h **** 
13466:../../..\hal\include/device/stm32g431.h **** 
13467:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP9R_RESET_VALUE = 0x0;
13468:../../..\hal\include/device/stm32g431.h **** 
13469:../../..\hal\include/device/stm32g431.h **** 
13470:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP10R_RESET_VALUE = 0x0;
13471:../../..\hal\include/device/stm32g431.h **** 
13472:../../..\hal\include/device/stm32g431.h **** 
13473:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP11R_RESET_VALUE = 0x0;
13474:../../..\hal\include/device/stm32g431.h **** 
13475:../../..\hal\include/device/stm32g431.h **** 
13476:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP12R_RESET_VALUE = 0x0;
13477:../../..\hal\include/device/stm32g431.h **** 
13478:../../..\hal\include/device/stm32g431.h **** 
13479:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP13R_RESET_VALUE = 0x0;
13480:../../..\hal\include/device/stm32g431.h **** 
13481:../../..\hal\include/device/stm32g431.h **** 
13482:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP14R_RESET_VALUE = 0x0;
13483:../../..\hal\include/device/stm32g431.h **** 
13484:../../..\hal\include/device/stm32g431.h **** 
13485:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP15R_RESET_VALUE = 0x0;
13486:../../..\hal\include/device/stm32g431.h **** 
13487:../../..\hal\include/device/stm32g431.h **** 
13488:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP16R_RESET_VALUE = 0x0;
13489:../../..\hal\include/device/stm32g431.h **** 
13490:../../..\hal\include/device/stm32g431.h **** 
13491:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP17R_RESET_VALUE = 0x0;
13492:../../..\hal\include/device/stm32g431.h **** 
13493:../../..\hal\include/device/stm32g431.h **** 
13494:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP18R_RESET_VALUE = 0x0;
13495:../../..\hal\include/device/stm32g431.h **** 
13496:../../..\hal\include/device/stm32g431.h **** 
13497:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP19R_RESET_VALUE = 0x0;
13498:../../..\hal\include/device/stm32g431.h **** 
13499:../../..\hal\include/device/stm32g431.h **** 
13500:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP20R_RESET_VALUE = 0x0;
13501:../../..\hal\include/device/stm32g431.h **** 
13502:../../..\hal\include/device/stm32g431.h **** 
13503:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP21R_RESET_VALUE = 0x0;
13504:../../..\hal\include/device/stm32g431.h **** 
13505:../../..\hal\include/device/stm32g431.h **** 
13506:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP22R_RESET_VALUE = 0x0;
13507:../../..\hal\include/device/stm32g431.h **** 
13508:../../..\hal\include/device/stm32g431.h **** 
13509:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP23R_RESET_VALUE = 0x0;
13510:../../..\hal\include/device/stm32g431.h **** 
13511:../../..\hal\include/device/stm32g431.h **** 
13512:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP24R_RESET_VALUE = 0x0;
13513:../../..\hal\include/device/stm32g431.h **** 
13514:../../..\hal\include/device/stm32g431.h **** 
13515:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP25R_RESET_VALUE = 0x0;
13516:../../..\hal\include/device/stm32g431.h **** 
13517:../../..\hal\include/device/stm32g431.h **** 
13518:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP26R_RESET_VALUE = 0x0;
13519:../../..\hal\include/device/stm32g431.h **** 
13520:../../..\hal\include/device/stm32g431.h **** 
13521:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP27R_RESET_VALUE = 0x0;
13522:../../..\hal\include/device/stm32g431.h **** 
13523:../../..\hal\include/device/stm32g431.h **** 
13524:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP28R_RESET_VALUE = 0x0;
13525:../../..\hal\include/device/stm32g431.h **** 
13526:../../..\hal\include/device/stm32g431.h **** 
13527:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP29R_RESET_VALUE = 0x0;
13528:../../..\hal\include/device/stm32g431.h **** 
13529:../../..\hal\include/device/stm32g431.h **** 
13530:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP30R_RESET_VALUE = 0x0;
13531:../../..\hal\include/device/stm32g431.h **** 
13532:../../..\hal\include/device/stm32g431.h **** 
13533:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BKP31R_RESET_VALUE = 0x0;
13534:../../..\hal\include/device/stm32g431.h **** };
13535:../../..\hal\include/device/stm32g431.h **** 
13536:../../..\hal\include/device/stm32g431.h **** static tamp_t& TAMP = *reinterpret_cast<tamp_t*>(0x40002400);
13537:../../..\hal\include/device/stm32g431.h **** 
13538:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_TAMP
13539:../../..\hal\include/device/stm32g431.h **** 
13540:../../..\hal\include/device/stm32g431.h **** 
13541:../../..\hal\include/device/stm32g431.h **** ////
13542:../../..\hal\include/device/stm32g431.h **** //
13543:../../..\hal\include/device/stm32g431.h **** //    Floting point unit
13544:../../..\hal\include/device/stm32g431.h **** //
13545:../../..\hal\include/device/stm32g431.h **** ////
13546:../../..\hal\include/device/stm32g431.h **** 
13547:../../..\hal\include/device/stm32g431.h **** struct fpu_t
13548:../../..\hal\include/device/stm32g431.h **** {
13549:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FPCCR;                // [Read-write] Floating-point context control regis
13550:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FPCAR;                // [Read-write] Floating-point context address regis
13551:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FPSCR;                // [Read-write] Floating-point status control regist
13552:../../..\hal\include/device/stm32g431.h **** 
13553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_LSPACT = 0x1;         // LSPACT
13554:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_USER = 0x2;           // USER
13555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_THREAD = 0x8;         // THREAD
13556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_HFRDY = 0x10;         // HFRDY
13557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_MMRDY = 0x20;         // MMRDY
13558:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_BFRDY = 0x40;         // BFRDY
13559:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_MONRDY = 0x100;       // MONRDY
13560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_LSPEN = 0x40000000;   // LSPEN
13561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCCR_ASPEN = 0x80000000;   // ASPEN
13562:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FPCCR_RESET_VALUE = 0x0;
13563:../../..\hal\include/device/stm32g431.h **** 
13564:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPCAR_ADDRESS =             // Location of unpopulated floating-point
13566:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x1fffffff>::value<X>();
13567:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FPCAR_RESET_VALUE = 0x0;
13568:../../..\hal\include/device/stm32g431.h **** 
13569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_IOC = 0x1;            // Invalid operation cumulative exception
13570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_DZC = 0x2;            // Division by zero cumulative exception 
13571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_OFC = 0x4;            // Overflow cumulative exception bit
13572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_UFC = 0x8;            // Underflow cumulative exception bit
13573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_IXC = 0x10;           // Inexact cumulative exception bit
13574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_IDC = 0x80;           // Input denormal cumulative exception bi
13575:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_RMode =               // Rounding Mode control field (2 bits)
13577:../../..\hal\include/device/stm32g431.h ****         bit_field_t<22, 0x3>::value<X>();
13578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_FZ = 0x1000000;       // Flush-to-zero mode control bit:
13579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_DN = 0x2000000;       // Default NaN mode control bit
13580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_AHP = 0x4000000;      // Alternative half-precision control bit
13581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_V = 0x10000000;       // Overflow condition code flag
13582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_C = 0x20000000;       // Carry condition code flag
13583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_Z = 0x40000000;       // Zero condition code flag
13584:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FPSCR_N = 0x80000000;       // Negative condition code flag
13585:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FPSCR_RESET_VALUE = 0x0;
13586:../../..\hal\include/device/stm32g431.h **** 
13587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t FPU = 81; // Floating point unit interrupt
13588:../../..\hal\include/device/stm32g431.h **** };
13589:../../..\hal\include/device/stm32g431.h **** 
13590:../../..\hal\include/device/stm32g431.h **** static fpu_t& FPU = *reinterpret_cast<fpu_t*>(0xe000ef34);
13591:../../..\hal\include/device/stm32g431.h **** 
13592:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FPU
13593:../../..\hal\include/device/stm32g431.h **** 
13594:../../..\hal\include/device/stm32g431.h **** 
13595:../../..\hal\include/device/stm32g431.h **** ////
13596:../../..\hal\include/device/stm32g431.h **** //
13597:../../..\hal\include/device/stm32g431.h **** //    Memory protection unit
13598:../../..\hal\include/device/stm32g431.h **** //
13599:../../..\hal\include/device/stm32g431.h **** ////
13600:../../..\hal\include/device/stm32g431.h **** 
13601:../../..\hal\include/device/stm32g431.h **** struct mpu_t
13602:../../..\hal\include/device/stm32g431.h **** {
13603:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TYPER;                // [Read-only] MPU type register
13604:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CTRL;                 // [Read-only] MPU control register
13605:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RNR;                  // [Read-write] MPU region number register
13606:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RBAR;                 // [Read-write] MPU region base address register
13607:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RASR;                 // [Read-write] MPU region attribute and size regist
13608:../../..\hal\include/device/stm32g431.h **** 
13609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TYPER_SEPARATE = 0x1;       // Separate flag
13610:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TYPER_DREGION =             // Number of MPU data regions (8 bits)
13612:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
13613:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TYPER_IREGION =             // Number of MPU instruction regions (8 b
13615:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
13616:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TYPER_RESET_VALUE = 0x800;
13617:../../..\hal\include/device/stm32g431.h **** 
13618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_ENABLE = 0x1;         // Enables the MPU
13619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_HFNMIENA = 0x2;       // Enables the operation of MPU during har
13620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_PRIVDEFENA = 0x4;     // Enable priviliged software access to de
13621:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CTRL_RESET_VALUE = 0x0;
13622:../../..\hal\include/device/stm32g431.h **** 
13623:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RNR_REGION =              // MPU region (8 bits)
13625:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
13626:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RNR_RESET_VALUE = 0x0;
13627:../../..\hal\include/device/stm32g431.h **** 
13628:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RBAR_REGION =              // MPU region field (4 bits)
13630:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
13631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RBAR_VALID = 0x10;         // MPU region number valid
13632:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RBAR_ADDR =                // Region base address field (27 bits)
13634:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x7ffffff>::value<X>();
13635:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RBAR_RESET_VALUE = 0x0;
13636:../../..\hal\include/device/stm32g431.h **** 
13637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_ENABLE = 0x1;         // Region enable bit.
13638:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_SIZE =                // Size of the MPU protection region (5 bi
13640:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x1f>::value<X>();
13641:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_SRD =                 // Subregion disable bits (8 bits)
13643:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
13644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_B = 0x10000;          // memory attribute
13645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_C = 0x20000;          // memory attribute
13646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_S = 0x40000;          // Shareable memory attribute
13647:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13648:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_TEX =                 // memory attribute (3 bits)
13649:../../..\hal\include/device/stm32g431.h ****         bit_field_t<19, 0x7>::value<X>();
13650:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_AP =                  // Access permission (3 bits)
13652:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
13653:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RASR_XN = 0x10000000;      // Instruction access disable bit
13654:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RASR_RESET_VALUE = 0x0;
13655:../../..\hal\include/device/stm32g431.h **** };
13656:../../..\hal\include/device/stm32g431.h **** 
13657:../../..\hal\include/device/stm32g431.h **** static mpu_t& MPU = *reinterpret_cast<mpu_t*>(0xe000e084);
13658:../../..\hal\include/device/stm32g431.h **** 
13659:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_MPU
13660:../../..\hal\include/device/stm32g431.h **** 
13661:../../..\hal\include/device/stm32g431.h **** 
13662:../../..\hal\include/device/stm32g431.h **** ////
13663:../../..\hal\include/device/stm32g431.h **** //
13664:../../..\hal\include/device/stm32g431.h **** //    SysTick timer
13665:../../..\hal\include/device/stm32g431.h **** //
13666:../../..\hal\include/device/stm32g431.h **** ////
13667:../../..\hal\include/device/stm32g431.h **** 
13668:../../..\hal\include/device/stm32g431.h **** struct stk_t
13669:../../..\hal\include/device/stm32g431.h **** {
13670:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CTRL;                 // [Read-write] SysTick control and status register
13671:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    LOAD;                 // [Read-write] SysTick reload value register
13672:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    VAL;                  // [Read-write] SysTick current value register
13673:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CALIB;                // [Read-write] SysTick calibration value register
13674:../../..\hal\include/device/stm32g431.h **** 
13675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_ENABLE = 0x1;         // Counter enable
13676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_TICKINT = 0x2;        // SysTick exception request enable
13677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_CLKSOURCE = 0x4;      // Clock source selection
13678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CTRL_COUNTFLAG = 0x10000;  // COUNTFLAG
13679:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CTRL_RESET_VALUE = 0x0;
13680:../../..\hal\include/device/stm32g431.h **** 
13681:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t LOAD_RELOAD =              // RELOAD value (24 bits)
13683:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
13684:../../..\hal\include/device/stm32g431.h ****     static const uint32_t LOAD_RESET_VALUE = 0x0;
13685:../../..\hal\include/device/stm32g431.h **** 
13686:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13687:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VAL_CURRENT =             // Current counter value (24 bits)
13688:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
13689:../../..\hal\include/device/stm32g431.h ****     static const uint32_t VAL_RESET_VALUE = 0x0;
13690:../../..\hal\include/device/stm32g431.h **** 
13691:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13692:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALIB_TENMS =               // Calibration value (24 bits)
13693:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffffff>::value<X>();
13694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALIB_SKEW = 0x40000000;    // SKEW flag: Indicates whether the TENMS
13695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CALIB_NOREF = 0x80000000;   // NOREF flag. Reads as zero
13696:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CALIB_RESET_VALUE = 0x0;
13697:../../..\hal\include/device/stm32g431.h **** };
13698:../../..\hal\include/device/stm32g431.h **** 
13699:../../..\hal\include/device/stm32g431.h **** static stk_t& STK = *reinterpret_cast<stk_t*>(0xe000e010);
13700:../../..\hal\include/device/stm32g431.h **** 
13701:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_STK
13702:../../..\hal\include/device/stm32g431.h **** 
13703:../../..\hal\include/device/stm32g431.h **** 
13704:../../..\hal\include/device/stm32g431.h **** ////
13705:../../..\hal\include/device/stm32g431.h **** //
13706:../../..\hal\include/device/stm32g431.h **** //    System control block
13707:../../..\hal\include/device/stm32g431.h **** //
13708:../../..\hal\include/device/stm32g431.h **** ////
13709:../../..\hal\include/device/stm32g431.h **** 
13710:../../..\hal\include/device/stm32g431.h **** struct scb_t
13711:../../..\hal\include/device/stm32g431.h **** {
13712:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPUID;                // [Read-only] CPUID base register
13713:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICSR;                 // [Read-write] Interrupt control and state register
13714:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    VTOR;                 // [Read-write] Vector table offset register
13715:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AIRCR;                // [Read-write] Application interrupt and reset cont
13716:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SCR;                  // [Read-write] System control register
13717:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCR;                  // [Read-write] Configuration and control register
13718:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SHPR1;                // [Read-write] System handler priority registers
13719:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SHPR2;                // [Read-write] System handler priority registers
13720:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SHPR3;                // [Read-write] System handler priority registers
13721:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SHCRS;                // [Read-write] System handler control and state reg
13722:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFSR_UFSR_BFSR_MMFSR; // [Read-write] Configurable fault status register
13723:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    HFSR;                 // [Read-write] Hard fault status register
13724:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
13725:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    MMFAR;                // [Read-write] Memory management fault address regi
13726:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BFAR;                 // [Read-write] Bus fault address register
13727:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    AFSR;                 // [Read-write] Auxiliary fault status register
13728:../../..\hal\include/device/stm32g431.h **** 
13729:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13730:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPUID_Revision =            // Revision number (4 bits)
13731:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
13732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPUID_PartNo =              // Part number of the processor (12 bits)
13734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xfff>::value<X>();
13735:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPUID_Constant =            // Reads as 0xF (4 bits)
13737:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
13738:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPUID_Variant =             // Variant number (4 bits)
13740:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
13741:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13742:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPUID_Implementer =         // Implementer code (8 bits)
13743:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
13744:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPUID_RESET_VALUE = 0x410fc241;
13745:../../..\hal\include/device/stm32g431.h **** 
13746:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13747:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_VECTACTIVE =          // Active vector (9 bits)
13748:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
13749:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_RETTOBASE = 0x800;    // Return to base level
13750:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13751:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_VECTPENDING =         // Pending vector (7 bits)
13752:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x7f>::value<X>();
13753:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_ISRPENDING = 0x400000;// Interrupt pending flag
13754:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_PENDSTCLR = 0x2000000;// SysTick exception clear-pending bit
13755:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_PENDSTSET = 0x4000000;// SysTick exception set-pending bit
13756:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_PENDSVCLR = 0x8000000;// PendSV clear-pending bit
13757:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_PENDSVSET = 0x10000000;// PendSV set-pending bit
13758:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICSR_NMIPENDSET = 0x80000000;// NMI set-pending bit.
13759:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICSR_RESET_VALUE = 0x0;
13760:../../..\hal\include/device/stm32g431.h **** 
13761:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13762:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t VTOR_TBLOFF =              // Vector table base offset field (21 bits
13763:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x1fffff>::value<X>();
13764:../../..\hal\include/device/stm32g431.h ****     static const uint32_t VTOR_RESET_VALUE = 0x0;
13765:../../..\hal\include/device/stm32g431.h **** 
13766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_VECTRESET = 0x1;      // VECTRESET
13767:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_VECTCLRACTIVE = 0x2;  // VECTCLRACTIVE
13768:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_SYSRESETREQ = 0x4;    // SYSRESETREQ
13769:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13770:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_PRIGROUP =            // PRIGROUP (3 bits)
13771:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
13772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_ENDIANESS = 0x8000;   // ENDIANESS
13773:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t AIRCR_VECTKEYSTAT =         // Register key (16 bits)
13775:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
13776:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AIRCR_RESET_VALUE = 0x0;
13777:../../..\hal\include/device/stm32g431.h **** 
13778:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_SLEEPONEXIT = 0x2;    // SLEEPONEXIT
13779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_SLEEPDEEP = 0x4;      // SLEEPDEEP
13780:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SCR_SEVEONPEND = 0x10;    // Send Event on Pending bit
13781:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SCR_RESET_VALUE = 0x0;
13782:../../..\hal\include/device/stm32g431.h **** 
13783:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_NONBASETHRDENA = 0x1; // Configures how the processor enters Thre
13784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_USERSETMPEND = 0x2;   // USERSETMPEND
13785:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_UNALIGN__TRP = 0x8;   // UNALIGN_ TRP
13786:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_DIV_0_TRP = 0x10;     // DIV_0_TRP
13787:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_BFHFNMIGN = 0x100;    // BFHFNMIGN
13788:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCR_STKALIGN = 0x200;     // STKALIGN
13789:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCR_RESET_VALUE = 0x0;
13790:../../..\hal\include/device/stm32g431.h **** 
13791:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13792:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR1_PRI_4 =               // Priority of system handler 4 (8 bits)
13793:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
13794:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13795:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR1_PRI_5 =               // Priority of system handler 5 (8 bits)
13796:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
13797:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13798:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR1_PRI_6 =               // Priority of system handler 6 (8 bits)
13799:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
13800:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SHPR1_RESET_VALUE = 0x0;
13801:../../..\hal\include/device/stm32g431.h **** 
13802:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13803:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR2_PRI_11 =              // Priority of system handler 11 (8 bits)
13804:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
13805:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SHPR2_RESET_VALUE = 0x0;
13806:../../..\hal\include/device/stm32g431.h **** 
13807:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13808:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR3_PRI_14 =              // Priority of system handler 14 (8 bits)
13809:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
13810:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13811:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHPR3_PRI_15 =              // Priority of system handler 15 (8 bits)
13812:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
13813:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SHPR3_RESET_VALUE = 0x0;
13814:../../..\hal\include/device/stm32g431.h **** 
13815:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_MEMFAULTACT = 0x1;    // Memory management fault exception acti
13816:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_BUSFAULTACT = 0x2;    // Bus fault exception active bit
13817:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_USGFAULTACT = 0x8;    // Usage fault exception active bit
13818:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_SVCALLACT = 0x80;     // SVC call active bit
13819:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_MONITORACT = 0x100;   // Debug monitor active bit
13820:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_PENDSVACT = 0x400;    // PendSV exception active bit
13821:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_SYSTICKACT = 0x800;   // SysTick exception active bit
13822:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_USGFAULTPENDED = 0x1000;// Usage fault exception pending bit
13823:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_MEMFAULTPENDED = 0x2000;// Memory management fault exception pe
13824:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_BUSFAULTPENDED = 0x4000;// Bus fault exception pending bit
13825:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_SVCALLPENDED = 0x8000;// SVC call pending bit
13826:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_MEMFAULTENA = 0x10000;// Memory management fault enable bit
13827:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_BUSFAULTENA = 0x20000;// Bus fault enable bit
13828:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SHCRS_USGFAULTENA = 0x40000;// Usage fault enable bit
13829:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SHCRS_RESET_VALUE = 0x0;
13830:../../..\hal\include/device/stm32g431.h **** 
13831:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_IACCVIOL = 0x2;       // Instruction access viol
13832:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_MUNSTKERR = 0x8;      // Memory manager fault on
13833:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_MSTKERR = 0x10;       // Memory manager fault on
13834:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_MLSPERR = 0x20;       // MLSPERR
13835:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_MMARVALID = 0x80;     // Memory Management Fault
13836:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_IBUSERR = 0x100;      // Instruction bus error
13837:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_PRECISERR = 0x200;    // Precise data bus error
13838:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_IMPRECISERR = 0x400;  // Imprecise data bus erro
13839:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_UNSTKERR = 0x800;     // Bus fault on unstacking
13840:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_STKERR = 0x1000;      // Bus fault on stacking f
13841:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_LSPERR = 0x2000;      // Bus fault on floating-p
13842:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_BFARVALID = 0x8000;   // Bus Fault Address Regis
13843:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_UNDEFINSTR = 0x10000; // Undefined instruction u
13844:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_INVSTATE = 0x20000;   // Invalid state usage fau
13845:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_INVPC = 0x40000;      // Invalid PC load usage f
13846:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_NOCP = 0x80000;       // No coprocessor usage fa
13847:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_UNALIGNED = 0x1000000;// Unaligned access usage 
13848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFSR_UFSR_BFSR_MMFSR_DIVBYZERO = 0x2000000;// Divide by zero usage fa
13849:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFSR_UFSR_BFSR_MMFSR_RESET_VALUE = 0x0;
13850:../../..\hal\include/device/stm32g431.h **** 
13851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HFSR_VECTTBL = 0x2;        // Vector table hard fault
13852:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HFSR_FORCED = 0x40000000;  // Forced hard fault
13853:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HFSR_DEBUG_VT = 0x80000000;// Reserved for Debug use
13854:../../..\hal\include/device/stm32g431.h ****     static const uint32_t HFSR_RESET_VALUE = 0x0;
13855:../../..\hal\include/device/stm32g431.h **** 
13856:../../..\hal\include/device/stm32g431.h **** 
13857:../../..\hal\include/device/stm32g431.h ****     static const uint32_t MMFAR_RESET_VALUE = 0x0;
13858:../../..\hal\include/device/stm32g431.h **** 
13859:../../..\hal\include/device/stm32g431.h **** 
13860:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BFAR_RESET_VALUE = 0x0;
13861:../../..\hal\include/device/stm32g431.h **** 
13862:../../..\hal\include/device/stm32g431.h **** 
13863:../../..\hal\include/device/stm32g431.h ****     static const uint32_t AFSR_RESET_VALUE = 0x0;
13864:../../..\hal\include/device/stm32g431.h **** };
13865:../../..\hal\include/device/stm32g431.h **** 
13866:../../..\hal\include/device/stm32g431.h **** static scb_t& SCB = *reinterpret_cast<scb_t*>(0xe000e040);
13867:../../..\hal\include/device/stm32g431.h **** 
13868:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SCB
13869:../../..\hal\include/device/stm32g431.h **** 
13870:../../..\hal\include/device/stm32g431.h **** 
13871:../../..\hal\include/device/stm32g431.h **** ////
13872:../../..\hal\include/device/stm32g431.h **** //
13873:../../..\hal\include/device/stm32g431.h **** //    Nested Vectored Interrupt Controller
13874:../../..\hal\include/device/stm32g431.h **** //
13875:../../..\hal\include/device/stm32g431.h **** ////
13876:../../..\hal\include/device/stm32g431.h **** 
13877:../../..\hal\include/device/stm32g431.h **** struct nvic_t
13878:../../..\hal\include/device/stm32g431.h **** {
13879:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISER0;                // [Read-write] Interrupt Set-Enable Register
13880:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISER1;                // [Read-write] Interrupt Set-Enable Register
13881:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISER2;                // [Read-write] Interrupt Set-Enable Register
13882:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISER3;                // [Read-write] Interrupt Set-Enable Register
13883:../../..\hal\include/device/stm32g431.h ****     reserved_t<28>       _0;
13884:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICER0;                // [Read-write] Interrupt Clear-Enable Register
13885:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICER1;                // [Read-write] Interrupt Clear-Enable Register
13886:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICER2;                // [Read-write] Interrupt Clear-Enable Register
13887:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICER3;                // [Read-write] Interrupt Clear-Enable Register
13888:../../..\hal\include/device/stm32g431.h ****     reserved_t<28>       _1;
13889:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISPR0;                // [Read-write] Interrupt Set-Pending Register
13890:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISPR1;                // [Read-write] Interrupt Set-Pending Register
13891:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISPR2;                // [Read-write] Interrupt Set-Pending Register
13892:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISPR3;                // [Read-write] Interrupt Set-Pending Register
13893:../../..\hal\include/device/stm32g431.h ****     reserved_t<28>       _2;
13894:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICPR0;                // [Read-write] Interrupt Clear-Pending Register
13895:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICPR1;                // [Read-write] Interrupt Clear-Pending Register
13896:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICPR2;                // [Read-write] Interrupt Clear-Pending Register
13897:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICPR3;                // [Read-write] Interrupt Clear-Pending Register
13898:../../..\hal\include/device/stm32g431.h ****     reserved_t<28>       _3;
13899:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IABR0;                // [Read-only] Interrupt Active Bit Register
13900:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IABR1;                // [Read-only] Interrupt Active Bit Register
13901:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IABR2;                // [Read-only] Interrupt Active Bit Register
13902:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IABR3;                // [Read-only] Interrupt Active Bit Register
13903:../../..\hal\include/device/stm32g431.h ****     reserved_t<60>       _4;
13904:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR0;                 // [Read-write] Interrupt Priority Register
13905:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR1;                 // [Read-write] Interrupt Priority Register
13906:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR2;                 // [Read-write] Interrupt Priority Register
13907:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR3;                 // [Read-write] Interrupt Priority Register
13908:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR4;                 // [Read-write] Interrupt Priority Register
13909:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR5;                 // [Read-write] Interrupt Priority Register
13910:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR6;                 // [Read-write] Interrupt Priority Register
13911:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR7;                 // [Read-write] Interrupt Priority Register
13912:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR8;                 // [Read-write] Interrupt Priority Register
13913:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR9;                 // [Read-write] Interrupt Priority Register
13914:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR10;                // [Read-write] Interrupt Priority Register
13915:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR11;                // [Read-write] Interrupt Priority Register
13916:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR12;                // [Read-write] Interrupt Priority Register
13917:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR13;                // [Read-write] Interrupt Priority Register
13918:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR14;                // [Read-write] Interrupt Priority Register
13919:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR15;                // [Read-write] Interrupt Priority Register
13920:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR16;                // [Read-write] Interrupt Priority Register
13921:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR17;                // [Read-write] Interrupt Priority Register
13922:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR18;                // [Read-write] Interrupt Priority Register
13923:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR19;                // [Read-write] Interrupt Priority Register
13924:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR20;                // [Read-write] Interrupt Priority Register
13925:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR21;                // [Read-write] Interrupt Priority Register
13926:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR22;                // [Read-write] Interrupt Priority Register
13927:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR23;                // [Read-write] Interrupt Priority Register
13928:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR24;                // [Read-write] Interrupt Priority Register
13929:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IPR25;                // [Read-write] Interrupt Priority Register
13930:../../..\hal\include/device/stm32g431.h ****     reserved_t<678>      _5;
13931:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    STIR;                 // [Read-write] Software trigger interrupt register
13932:../../..\hal\include/device/stm32g431.h **** 
13933:../../..\hal\include/device/stm32g431.h **** 
13934:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISER0_RESET_VALUE = 0x0;
13935:../../..\hal\include/device/stm32g431.h **** 
13936:../../..\hal\include/device/stm32g431.h **** 
13937:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISER1_RESET_VALUE = 0x0;
13938:../../..\hal\include/device/stm32g431.h **** 
13939:../../..\hal\include/device/stm32g431.h **** 
13940:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISER2_RESET_VALUE = 0x0;
13941:../../..\hal\include/device/stm32g431.h **** 
13942:../../..\hal\include/device/stm32g431.h **** 
13943:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISER3_RESET_VALUE = 0x0;
13944:../../..\hal\include/device/stm32g431.h **** 
13945:../../..\hal\include/device/stm32g431.h **** 
13946:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICER0_RESET_VALUE = 0x0;
13947:../../..\hal\include/device/stm32g431.h **** 
13948:../../..\hal\include/device/stm32g431.h **** 
13949:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICER1_RESET_VALUE = 0x0;
13950:../../..\hal\include/device/stm32g431.h **** 
13951:../../..\hal\include/device/stm32g431.h **** 
13952:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICER2_RESET_VALUE = 0x0;
13953:../../..\hal\include/device/stm32g431.h **** 
13954:../../..\hal\include/device/stm32g431.h **** 
13955:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICER3_RESET_VALUE = 0x0;
13956:../../..\hal\include/device/stm32g431.h **** 
13957:../../..\hal\include/device/stm32g431.h **** 
13958:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISPR0_RESET_VALUE = 0x0;
13959:../../..\hal\include/device/stm32g431.h **** 
13960:../../..\hal\include/device/stm32g431.h **** 
13961:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISPR1_RESET_VALUE = 0x0;
13962:../../..\hal\include/device/stm32g431.h **** 
13963:../../..\hal\include/device/stm32g431.h **** 
13964:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISPR2_RESET_VALUE = 0x0;
13965:../../..\hal\include/device/stm32g431.h **** 
13966:../../..\hal\include/device/stm32g431.h **** 
13967:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISPR3_RESET_VALUE = 0x0;
13968:../../..\hal\include/device/stm32g431.h **** 
13969:../../..\hal\include/device/stm32g431.h **** 
13970:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICPR0_RESET_VALUE = 0x0;
13971:../../..\hal\include/device/stm32g431.h **** 
13972:../../..\hal\include/device/stm32g431.h **** 
13973:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICPR1_RESET_VALUE = 0x0;
13974:../../..\hal\include/device/stm32g431.h **** 
13975:../../..\hal\include/device/stm32g431.h **** 
13976:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICPR2_RESET_VALUE = 0x0;
13977:../../..\hal\include/device/stm32g431.h **** 
13978:../../..\hal\include/device/stm32g431.h **** 
13979:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICPR3_RESET_VALUE = 0x0;
13980:../../..\hal\include/device/stm32g431.h **** 
13981:../../..\hal\include/device/stm32g431.h **** 
13982:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IABR0_RESET_VALUE = 0x0;
13983:../../..\hal\include/device/stm32g431.h **** 
13984:../../..\hal\include/device/stm32g431.h **** 
13985:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IABR1_RESET_VALUE = 0x0;
13986:../../..\hal\include/device/stm32g431.h **** 
13987:../../..\hal\include/device/stm32g431.h **** 
13988:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IABR2_RESET_VALUE = 0x0;
13989:../../..\hal\include/device/stm32g431.h **** 
13990:../../..\hal\include/device/stm32g431.h **** 
13991:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IABR3_RESET_VALUE = 0x0;
13992:../../..\hal\include/device/stm32g431.h **** 
13993:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR0_IPR_N0 =              // IPR_N0 (8 bits)
13995:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
13996:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
13997:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR0_IPR_N1 =              // IPR_N1 (8 bits)
13998:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
13999:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR0_IPR_N2 =              // IPR_N2 (8 bits)
14001:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14002:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR0_IPR_N3 =              // IPR_N3 (8 bits)
14004:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14005:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR0_RESET_VALUE = 0x0;
14006:../../..\hal\include/device/stm32g431.h **** 
14007:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR1_IPR_N0 =              // IPR_N0 (8 bits)
14009:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14010:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR1_IPR_N1 =              // IPR_N1 (8 bits)
14012:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14013:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR1_IPR_N2 =              // IPR_N2 (8 bits)
14015:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14016:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR1_IPR_N3 =              // IPR_N3 (8 bits)
14018:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14019:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR1_RESET_VALUE = 0x0;
14020:../../..\hal\include/device/stm32g431.h **** 
14021:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR2_IPR_N0 =              // IPR_N0 (8 bits)
14023:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14024:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR2_IPR_N1 =              // IPR_N1 (8 bits)
14026:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14027:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR2_IPR_N2 =              // IPR_N2 (8 bits)
14029:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14030:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR2_IPR_N3 =              // IPR_N3 (8 bits)
14032:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14033:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR2_RESET_VALUE = 0x0;
14034:../../..\hal\include/device/stm32g431.h **** 
14035:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR3_IPR_N0 =              // IPR_N0 (8 bits)
14037:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14038:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR3_IPR_N1 =              // IPR_N1 (8 bits)
14040:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14041:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR3_IPR_N2 =              // IPR_N2 (8 bits)
14043:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14044:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR3_IPR_N3 =              // IPR_N3 (8 bits)
14046:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14047:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR3_RESET_VALUE = 0x0;
14048:../../..\hal\include/device/stm32g431.h **** 
14049:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR4_IPR_N0 =              // IPR_N0 (8 bits)
14051:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14052:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR4_IPR_N1 =              // IPR_N1 (8 bits)
14054:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14055:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR4_IPR_N2 =              // IPR_N2 (8 bits)
14057:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14058:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14059:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR4_IPR_N3 =              // IPR_N3 (8 bits)
14060:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14061:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR4_RESET_VALUE = 0x0;
14062:../../..\hal\include/device/stm32g431.h **** 
14063:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR5_IPR_N0 =              // IPR_N0 (8 bits)
14065:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14066:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR5_IPR_N1 =              // IPR_N1 (8 bits)
14068:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14069:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR5_IPR_N2 =              // IPR_N2 (8 bits)
14071:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14072:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR5_IPR_N3 =              // IPR_N3 (8 bits)
14074:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14075:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR5_RESET_VALUE = 0x0;
14076:../../..\hal\include/device/stm32g431.h **** 
14077:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR6_IPR_N0 =              // IPR_N0 (8 bits)
14079:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14080:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR6_IPR_N1 =              // IPR_N1 (8 bits)
14082:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14083:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR6_IPR_N2 =              // IPR_N2 (8 bits)
14085:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14086:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR6_IPR_N3 =              // IPR_N3 (8 bits)
14088:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14089:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR6_RESET_VALUE = 0x0;
14090:../../..\hal\include/device/stm32g431.h **** 
14091:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR7_IPR_N0 =              // IPR_N0 (8 bits)
14093:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14094:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14095:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR7_IPR_N1 =              // IPR_N1 (8 bits)
14096:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14097:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14098:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR7_IPR_N2 =              // IPR_N2 (8 bits)
14099:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14100:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14101:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR7_IPR_N3 =              // IPR_N3 (8 bits)
14102:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14103:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR7_RESET_VALUE = 0x0;
14104:../../..\hal\include/device/stm32g431.h **** 
14105:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14106:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR8_IPR_N0 =              // IPR_N0 (8 bits)
14107:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14108:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14109:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR8_IPR_N1 =              // IPR_N1 (8 bits)
14110:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14111:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR8_IPR_N2 =              // IPR_N2 (8 bits)
14113:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14114:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR8_IPR_N3 =              // IPR_N3 (8 bits)
14116:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14117:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR8_RESET_VALUE = 0x0;
14118:../../..\hal\include/device/stm32g431.h **** 
14119:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR9_IPR_N0 =              // IPR_N0 (8 bits)
14121:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14122:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14123:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR9_IPR_N1 =              // IPR_N1 (8 bits)
14124:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14125:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14126:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR9_IPR_N2 =              // IPR_N2 (8 bits)
14127:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14128:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14129:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR9_IPR_N3 =              // IPR_N3 (8 bits)
14130:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14131:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR9_RESET_VALUE = 0x0;
14132:../../..\hal\include/device/stm32g431.h **** 
14133:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14134:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR10_IPR_N0 =              // IPR_N0 (8 bits)
14135:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR10_IPR_N1 =              // IPR_N1 (8 bits)
14138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14139:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14140:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR10_IPR_N2 =              // IPR_N2 (8 bits)
14141:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14142:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14143:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR10_IPR_N3 =              // IPR_N3 (8 bits)
14144:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14145:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR10_RESET_VALUE = 0x0;
14146:../../..\hal\include/device/stm32g431.h **** 
14147:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR11_IPR_N0 =              // IPR_N0 (8 bits)
14149:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14150:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR11_IPR_N1 =              // IPR_N1 (8 bits)
14152:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14153:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14154:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR11_IPR_N2 =              // IPR_N2 (8 bits)
14155:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14156:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14157:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR11_IPR_N3 =              // IPR_N3 (8 bits)
14158:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14159:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR11_RESET_VALUE = 0x0;
14160:../../..\hal\include/device/stm32g431.h **** 
14161:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14162:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR12_IPR_N0 =              // IPR_N0 (8 bits)
14163:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14164:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14165:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR12_IPR_N1 =              // IPR_N1 (8 bits)
14166:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14167:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14168:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR12_IPR_N2 =              // IPR_N2 (8 bits)
14169:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14170:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR12_IPR_N3 =              // IPR_N3 (8 bits)
14172:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14173:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR12_RESET_VALUE = 0x0;
14174:../../..\hal\include/device/stm32g431.h **** 
14175:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14176:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR13_IPR_N0 =              // IPR_N0 (8 bits)
14177:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14178:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14179:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR13_IPR_N1 =              // IPR_N1 (8 bits)
14180:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14181:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14182:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR13_IPR_N2 =              // IPR_N2 (8 bits)
14183:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14184:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14185:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR13_IPR_N3 =              // IPR_N3 (8 bits)
14186:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14187:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR13_RESET_VALUE = 0x0;
14188:../../..\hal\include/device/stm32g431.h **** 
14189:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14190:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR14_IPR_N0 =              // IPR_N0 (8 bits)
14191:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14192:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14193:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR14_IPR_N1 =              // IPR_N1 (8 bits)
14194:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14195:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14196:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR14_IPR_N2 =              // IPR_N2 (8 bits)
14197:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14198:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14199:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR14_IPR_N3 =              // IPR_N3 (8 bits)
14200:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14201:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR14_RESET_VALUE = 0x0;
14202:../../..\hal\include/device/stm32g431.h **** 
14203:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14204:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR15_IPR_N0 =              // IPR_N0 (8 bits)
14205:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14206:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14207:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR15_IPR_N1 =              // IPR_N1 (8 bits)
14208:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14209:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14210:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR15_IPR_N2 =              // IPR_N2 (8 bits)
14211:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14212:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14213:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR15_IPR_N3 =              // IPR_N3 (8 bits)
14214:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14215:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR15_RESET_VALUE = 0x0;
14216:../../..\hal\include/device/stm32g431.h **** 
14217:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14218:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR16_IPR_N0 =              // IPR_N0 (8 bits)
14219:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR16_IPR_N1 =              // IPR_N1 (8 bits)
14222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14223:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14224:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR16_IPR_N2 =              // IPR_N2 (8 bits)
14225:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14226:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14227:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR16_IPR_N3 =              // IPR_N3 (8 bits)
14228:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14229:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR16_RESET_VALUE = 0x0;
14230:../../..\hal\include/device/stm32g431.h **** 
14231:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14232:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR17_IPR_N0 =              // IPR_N0 (8 bits)
14233:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14234:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14235:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR17_IPR_N1 =              // IPR_N1 (8 bits)
14236:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14237:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14238:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR17_IPR_N2 =              // IPR_N2 (8 bits)
14239:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14240:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14241:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR17_IPR_N3 =              // IPR_N3 (8 bits)
14242:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14243:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR17_RESET_VALUE = 0x0;
14244:../../..\hal\include/device/stm32g431.h **** 
14245:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14246:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR18_IPR_N0 =              // IPR_N0 (8 bits)
14247:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14248:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14249:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR18_IPR_N1 =              // IPR_N1 (8 bits)
14250:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14251:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14252:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR18_IPR_N2 =              // IPR_N2 (8 bits)
14253:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14254:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14255:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR18_IPR_N3 =              // IPR_N3 (8 bits)
14256:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14257:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR18_RESET_VALUE = 0x0;
14258:../../..\hal\include/device/stm32g431.h **** 
14259:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14260:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR19_IPR_N0 =              // IPR_N0 (8 bits)
14261:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14262:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14263:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR19_IPR_N1 =              // IPR_N1 (8 bits)
14264:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14265:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14266:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR19_IPR_N2 =              // IPR_N2 (8 bits)
14267:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14268:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14269:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR19_IPR_N3 =              // IPR_N3 (8 bits)
14270:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14271:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR19_RESET_VALUE = 0x0;
14272:../../..\hal\include/device/stm32g431.h **** 
14273:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14274:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR20_IPR_N0 =              // IPR_N0 (8 bits)
14275:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14276:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR20_IPR_N1 =              // IPR_N1 (8 bits)
14278:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14279:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR20_IPR_N2 =              // IPR_N2 (8 bits)
14281:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14282:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IPR20_IPR_N3 =              // IPR_N3 (8 bits)
14284:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xff>::value<X>();
14285:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR20_RESET_VALUE = 0x0;
14286:../../..\hal\include/device/stm32g431.h **** 
14287:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR21_RESET_VALUE = 0x0;
14288:../../..\hal\include/device/stm32g431.h **** 
14289:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR22_RESET_VALUE = 0x0;
14290:../../..\hal\include/device/stm32g431.h **** 
14291:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR23_RESET_VALUE = 0x0;
14292:../../..\hal\include/device/stm32g431.h **** 
14293:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR24_RESET_VALUE = 0x0;
14294:../../..\hal\include/device/stm32g431.h **** 
14295:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IPR25_RESET_VALUE = 0x0;
14296:../../..\hal\include/device/stm32g431.h **** 
14297:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14298:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t STIR_INTID =               // Software generated interrupt ID (9 bits
14299:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1ff>::value<X>();
14300:../../..\hal\include/device/stm32g431.h ****     static const uint32_t STIR_RESET_VALUE = 0x0;
14301:../../..\hal\include/device/stm32g431.h **** };
14302:../../..\hal\include/device/stm32g431.h **** 
14303:../../..\hal\include/device/stm32g431.h **** static nvic_t& NVIC = *reinterpret_cast<nvic_t*>(0xe000e100);
14304:../../..\hal\include/device/stm32g431.h **** 
14305:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_NVIC
14306:../../..\hal\include/device/stm32g431.h **** 
14307:../../..\hal\include/device/stm32g431.h **** 
14308:../../..\hal\include/device/stm32g431.h **** ////
14309:../../..\hal\include/device/stm32g431.h **** //
14310:../../..\hal\include/device/stm32g431.h **** //    Floating point unit CPACR
14311:../../..\hal\include/device/stm32g431.h **** //
14312:../../..\hal\include/device/stm32g431.h **** ////
14313:../../..\hal\include/device/stm32g431.h **** 
14314:../../..\hal\include/device/stm32g431.h **** struct fpu_cpacr_t
14315:../../..\hal\include/device/stm32g431.h **** {
14316:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CPACR;                // [Read-write] Coprocessor access control register
14317:../../..\hal\include/device/stm32g431.h **** 
14318:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CPACR_CP =                  // CP (4 bits)
14320:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
14321:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CPACR_RESET_VALUE = 0x0;
14322:../../..\hal\include/device/stm32g431.h **** };
14323:../../..\hal\include/device/stm32g431.h **** 
14324:../../..\hal\include/device/stm32g431.h **** static fpu_cpacr_t& FPU_CPACR = *reinterpret_cast<fpu_cpacr_t*>(0xe000ed88);
14325:../../..\hal\include/device/stm32g431.h **** 
14326:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FPU_CPACR
14327:../../..\hal\include/device/stm32g431.h **** 
14328:../../..\hal\include/device/stm32g431.h **** 
14329:../../..\hal\include/device/stm32g431.h **** ////
14330:../../..\hal\include/device/stm32g431.h **** //
14331:../../..\hal\include/device/stm32g431.h **** //    System control block ACTLR
14332:../../..\hal\include/device/stm32g431.h **** //
14333:../../..\hal\include/device/stm32g431.h **** ////
14334:../../..\hal\include/device/stm32g431.h **** 
14335:../../..\hal\include/device/stm32g431.h **** struct scb_actrl_t
14336:../../..\hal\include/device/stm32g431.h **** {
14337:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ACTRL;                // [Read-write] Auxiliary control register
14338:../../..\hal\include/device/stm32g431.h **** 
14339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACTRL_DISMCYCINT = 0x1;     // DISMCYCINT
14340:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACTRL_DISDEFWBUF = 0x2;     // DISDEFWBUF
14341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACTRL_DISFOLD = 0x4;        // DISFOLD
14342:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACTRL_DISFPCA = 0x100;      // DISFPCA
14343:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ACTRL_DISOOFP = 0x200;      // DISOOFP
14344:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ACTRL_RESET_VALUE = 0x0;
14345:../../..\hal\include/device/stm32g431.h **** };
14346:../../..\hal\include/device/stm32g431.h **** 
14347:../../..\hal\include/device/stm32g431.h **** static scb_actrl_t& SCB_ACTRL = *reinterpret_cast<scb_actrl_t*>(0xe000e008);
14348:../../..\hal\include/device/stm32g431.h **** 
14349:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_SCB_ACTRL
14350:../../..\hal\include/device/stm32g431.h **** 
14351:../../..\hal\include/device/stm32g431.h **** 
14352:../../..\hal\include/device/stm32g431.h **** ////
14353:../../..\hal\include/device/stm32g431.h **** //
14354:../../..\hal\include/device/stm32g431.h **** //    FDCAN
14355:../../..\hal\include/device/stm32g431.h **** //
14356:../../..\hal\include/device/stm32g431.h **** ////
14357:../../..\hal\include/device/stm32g431.h **** 
14358:../../..\hal\include/device/stm32g431.h **** struct fdcan_t
14359:../../..\hal\include/device/stm32g431.h **** {
14360:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CREL;                 // [Read-only] FDCAN Core Release Register
14361:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ENDN;                 // [Read-only] FDCAN Core Release Register
14362:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
14363:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DBTP;                 // This register is only writable if bits CCCR.CCE a
14364:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TEST;                 // [Read-write] Write access to the Test Register ha
14365:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RWD;                  // The RAM Watchdog monitors the READY output of the
14366:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCCR;                 // [Read-write] For details about setting and resett
14367:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    NBTP;                 // [Read-write] FDCAN_NBTP
14368:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSCC;                 // [Read-write] FDCAN Timestamp Counter Configuratio
14369:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSCV;                 // [Read-only] FDCAN Timestamp Counter Value Registe
14370:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TOCC;                 // FDCAN Timeout Counter Configuration Register
14371:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TOCV;                 // [Read-only] FDCAN Timeout Counter Value Register
14372:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _1;
14373:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-only] FDCAN Error Counter Register
14374:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSR;                  // FDCAN Protocol Status Register
14375:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDCR;                 // [Read-write] FDCAN Transmitter Delay Compensation
14376:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
14377:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IR;                   // [Read-write] The flags are set when one of the li
14378:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IE;                   // [Read-write] The settings in the Interrupt Enable
14379:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ILS;                  // [Read-write] The Interrupt Line Select register a
14380:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ILE;                  // [Read-write] Each of the two interrupt lines to t
14381:../../..\hal\include/device/stm32g431.h ****     reserved_t<8>        _3;
14382:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXGFC;                // Global settings for Message ID filtering. The Glo
14383:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    XIDAM;                // [Read-write] FDCAN Extended ID and Mask Register
14384:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    HPMS;                 // [Read-only] This register is updated every time a
14385:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
14386:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF0S;                // [Read-write] FDCAN Rx FIFO 0 Status Register
14387:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF0A;                // [Read-write] CAN Rx FIFO 0 Acknowledge Register
14388:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF1S;                // [Read-only] FDCAN Rx FIFO 1 Status Register
14389:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF1A;                // [Read-write] FDCAN Rx FIFO 1 Acknowledge Register
14390:../../..\hal\include/device/stm32g431.h ****     reserved_t<8>        _5;
14391:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBC;                 // [Read-write] FDCAN Tx Buffer Configuration Regist
14392:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXFQS;                // [Read-only] The Tx FIFO/Queue status is related t
14393:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBRP;                // [Read-only] FDCAN Tx Buffer Request Pending Regis
14394:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBAR;                // [Read-write] FDCAN Tx Buffer Add Request Register
14395:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCR;                // [Read-write] FDCAN Tx Buffer Cancellation Request
14396:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBTO;                // [Read-only] FDCAN Tx Buffer Transmission Occurred
14397:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCF;                // [Read-only] FDCAN Tx Buffer Cancellation Finished
14398:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBTIE;               // [Read-write] FDCAN Tx Buffer Transmission Interru
14399:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCIE;               // [Read-write] FDCAN Tx Buffer Cancellation Finishe
14400:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXEFS;                // [Read-only] FDCAN Tx Event FIFO Status Register
14401:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXEFA;                // [Read-write] FDCAN Tx Event FIFO Acknowledge Regi
14402:../../..\hal\include/device/stm32g431.h ****     reserved_t<5>        _6;
14403:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CKDIV;                // [Read-write] FDCAN CFG clock divider register
14404:../../..\hal\include/device/stm32g431.h **** 
14405:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14406:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_DAY =                 // DAY (8 bits)
14407:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14408:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14409:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_MON =                 // MON (8 bits)
14410:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14411:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14412:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_YEAR =                // YEAR (4 bits)
14413:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
14414:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14415:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_SUBSTEP =             // SUBSTEP (4 bits)
14416:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
14417:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14418:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_STEP =                // STEP (4 bits)
14419:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
14420:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14421:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_REL =                 // REL (4 bits)
14422:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
14423:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CREL_RESET_VALUE = 0x11111111;
14424:../../..\hal\include/device/stm32g431.h **** 
14425:../../..\hal\include/device/stm32g431.h **** 
14426:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ENDN_RESET_VALUE = 0x87654321;
14427:../../..\hal\include/device/stm32g431.h **** 
14428:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14429:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DSJW =                // DSJW (4 bits), Read-write
14430:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
14431:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14432:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DTSEG2 =              // DTSEG2 (4 bits), Read-write
14433:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
14434:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14435:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DTSEG1 =              // DTSEG1 (5 bits), Write-only
14436:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
14437:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14438:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DBRP =                // DBRP (5 bits), Read-write
14439:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
14440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_TDC = 0x800000;       // TDC, Read-only
14441:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DBTP_RESET_VALUE = 0xa33;
14442:../../..\hal\include/device/stm32g431.h **** 
14443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_LBCK = 0x10;          // LBCK
14444:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_TX =                  // TX (2 bits)
14446:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
14447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_RX = 0x80;            // RX
14448:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TEST_RESET_VALUE = 0x0;
14449:../../..\hal\include/device/stm32g431.h **** 
14450:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RWD_WDC =                 // WDC (8 bits), Read-write
14452:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14453:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14454:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RWD_WDV =                 // WDV (8 bits), Read-only
14455:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14456:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RWD_RESET_VALUE = 0x0;
14457:../../..\hal\include/device/stm32g431.h **** 
14458:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_INIT = 0x1;           // INIT
14459:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CCE = 0x2;            // CCE
14460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_ASM = 0x4;            // ASM
14461:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CSA = 0x8;            // CSA
14462:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CSR = 0x10;           // CSR
14463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_MON = 0x20;           // MON
14464:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_DAR = 0x40;           // DAR
14465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_TEST = 0x80;          // TEST
14466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_FDOE = 0x100;         // FDOE
14467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_BRSE = 0x200;         // BRSE
14468:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_PXHD = 0x1000;        // PXHD
14469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_EFBI = 0x2000;        // EFBI
14470:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_TXP = 0x4000;         // TXP
14471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_NISO = 0x8000;        // NISO
14472:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCCR_RESET_VALUE = 0x1;
14473:../../..\hal\include/device/stm32g431.h **** 
14474:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_TSEG2 =               // TSEG2 (7 bits)
14476:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14477:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14478:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NTSEG1 =              // NTSEG1 (8 bits)
14479:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14480:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14481:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NBRP =                // NBRP (9 bits)
14482:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1ff>::value<X>();
14483:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14484:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NSJW =                // NSJW (7 bits)
14485:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7f>::value<X>();
14486:../../..\hal\include/device/stm32g431.h ****     static const uint32_t NBTP_RESET_VALUE = 0xa33;
14487:../../..\hal\include/device/stm32g431.h **** 
14488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCC_TSS =                 // TSS (2 bits)
14490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
14491:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14492:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCC_TCP =                 // TCP (4 bits)
14493:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
14494:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSCC_RESET_VALUE = 0x0;
14495:../../..\hal\include/device/stm32g431.h **** 
14496:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14497:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCV_TSC =                 // TSC (16 bits)
14498:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
14499:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSCV_RESET_VALUE = 0x0;
14500:../../..\hal\include/device/stm32g431.h **** 
14501:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_ETOC = 0x1;           // ETOC, Read-write
14502:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_TOS =                 // TOS (2 bits), Write-only
14504:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
14505:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_TOP =                 // TOP (16 bits), Read-write
14507:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
14508:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TOCC_RESET_VALUE = 0xffff0000;
14509:../../..\hal\include/device/stm32g431.h **** 
14510:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCV_TOC =                 // TOC (16 bits)
14512:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
14513:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TOCV_RESET_VALUE = 0xffff;
14514:../../..\hal\include/device/stm32g431.h **** 
14515:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_TEC =                 // TEC (8 bits)
14517:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14518:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14519:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_TREC =                // TREC (7 bits)
14520:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
14521:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_RP = 0x8000;          // RP
14522:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_CEL =                 // CEL (8 bits)
14524:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14525:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
14526:../../..\hal\include/device/stm32g431.h **** 
14527:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14528:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_LEC =                 // LEC (3 bits), Read-write
14529:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
14530:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_ACT =                 // ACT (2 bits), Write-only
14532:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
14533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_EP = 0x20;            // EP, Read-write
14534:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_EW = 0x40;            // EW, Read-write
14535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_BO = 0x80;            // BO, Read-write
14536:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14537:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_DLEC =                // DLEC (3 bits), Write-only
14538:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
14539:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_RESI = 0x800;         // RESI, Read-write
14540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_RBRS = 0x1000;        // RBRS, Read-write
14541:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_REDL = 0x2000;        // REDL, Read-write
14542:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_PXE = 0x4000;         // PXE, Read-write
14543:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14544:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_TDCV =                // TDCV (7 bits), Read-write
14545:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
14546:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSR_RESET_VALUE = 0x707;
14547:../../..\hal\include/device/stm32g431.h **** 
14548:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDCR_TDCF =                // TDCF (7 bits)
14550:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14551:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14552:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDCR_TDCO =                // TDCO (7 bits)
14553:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
14554:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDCR_RESET_VALUE = 0x0;
14555:../../..\hal\include/device/stm32g431.h **** 
14556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0N = 0x1;           // RF0N
14557:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0W = 0x2;           // RF0W
14558:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0F = 0x4;           // RF0F
14559:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0L = 0x8;           // RF0L
14560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1N = 0x10;          // RF1N
14561:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1W = 0x20;          // RF1W
14562:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1F = 0x40;          // RF1F
14563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1L = 0x80;          // RF1L
14564:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_HPM = 0x100;          // HPM
14565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TC = 0x200;           // TC
14566:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TCF = 0x400;          // TCF
14567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TFE = 0x800;          // TFE
14568:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFN = 0x1000;        // TEFN
14569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFW = 0x2000;        // TEFW
14570:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFF = 0x4000;        // TEFF
14571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFL = 0x8000;        // TEFL
14572:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TSW = 0x10000;        // TSW
14573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_MRAF = 0x20000;       // MRAF
14574:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TOO = 0x40000;        // TOO
14575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_DRX = 0x80000;        // DRX
14576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_ELO = 0x400000;       // ELO
14577:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_EP = 0x800000;        // EP
14578:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_EW = 0x1000000;       // EW
14579:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_BO = 0x2000000;       // BO
14580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_WDI = 0x4000000;      // WDI
14581:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_PEA = 0x8000000;      // PEA
14582:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_PED = 0x10000000;     // PED
14583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_ARA = 0x20000000;     // ARA
14584:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IR_RESET_VALUE = 0x0;
14585:../../..\hal\include/device/stm32g431.h **** 
14586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0NE = 0x1;          // RF0NE
14587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0WE = 0x2;          // RF0WE
14588:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0FE = 0x4;          // RF0FE
14589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0LE = 0x8;          // RF0LE
14590:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1NE = 0x10;         // RF1NE
14591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1WE = 0x20;         // RF1WE
14592:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1FE = 0x40;         // RF1FE
14593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1LE = 0x80;         // RF1LE
14594:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_HPME = 0x100;         // HPME
14595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TCE = 0x200;          // TCE
14596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TCFE = 0x400;         // TCFE
14597:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TFEE = 0x800;         // TFEE
14598:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFNE = 0x1000;       // TEFNE
14599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFWE = 0x2000;       // TEFWE
14600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFFE = 0x4000;       // TEFFE
14601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFLE = 0x8000;       // TEFLE
14602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TSWE = 0x10000;       // TSWE
14603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_MRAFE = 0x20000;      // MRAFE
14604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TOOE = 0x40000;       // TOOE
14605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_DRX = 0x80000;        // DRX
14606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BECE = 0x100000;      // BECE
14607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BEUE = 0x200000;      // BEUE
14608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_ELOE = 0x400000;      // ELOE
14609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_EPE = 0x800000;       // EPE
14610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_EWE = 0x1000000;      // EWE
14611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BOE = 0x2000000;      // BOE
14612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_WDIE = 0x4000000;     // WDIE
14613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_PEAE = 0x8000000;     // PEAE
14614:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_PEDE = 0x10000000;    // PEDE
14615:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_ARAE = 0x20000000;    // ARAE
14616:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IE_RESET_VALUE = 0x0;
14617:../../..\hal\include/device/stm32g431.h **** 
14618:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0NL = 0x1;          // RF0NL
14619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0WL = 0x2;          // RF0WL
14620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0FL = 0x4;          // RF0FL
14621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0LL = 0x8;          // RF0LL
14622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1NL = 0x10;         // RF1NL
14623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1WL = 0x20;         // RF1WL
14624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1FL = 0x40;         // RF1FL
14625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1LL = 0x80;         // RF1LL
14626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_HPML = 0x100;         // HPML
14627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TCL = 0x200;          // TCL
14628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TCFL = 0x400;         // TCFL
14629:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TFEL = 0x800;         // TFEL
14630:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFNL = 0x1000;       // TEFNL
14631:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFWL = 0x2000;       // TEFWL
14632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFFL = 0x4000;       // TEFFL
14633:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFLL = 0x8000;       // TEFLL
14634:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TSWL = 0x10000;       // TSWL
14635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_MRAFL = 0x20000;      // MRAFL
14636:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TOOL = 0x40000;       // TOOL
14637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_DRXL = 0x80000;       // DRXL
14638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BECL = 0x100000;      // BECL
14639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BEUL = 0x200000;      // BEUL
14640:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_ELOL = 0x400000;      // ELOL
14641:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_EPL = 0x800000;       // EPL
14642:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_EWL = 0x1000000;      // EWL
14643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BOL = 0x2000000;      // BOL
14644:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_WDIL = 0x4000000;     // WDIL
14645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_PEAL = 0x8000000;     // PEAL
14646:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_PEDL = 0x10000000;    // PEDL
14647:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_ARAL = 0x20000000;    // ARAL
14648:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ILS_RESET_VALUE = 0x0;
14649:../../..\hal\include/device/stm32g431.h **** 
14650:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILE_EINT0 = 0x1;          // EINT0
14651:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILE_EINT1 = 0x2;          // EINT1
14652:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ILE_RESET_VALUE = 0x0;
14653:../../..\hal\include/device/stm32g431.h **** 
14654:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_RRFE = 0x1;           // RRFE, Read-write
14655:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_RRFS = 0x2;           // RRFS, Read-write
14656:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14657:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_ANFE =                // ANFE (2 bits), Write-only
14658:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
14659:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14660:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_ANFS =                // ANFS (2 bits), Write-only
14661:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
14662:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXGFC_RESET_VALUE = 0x0;
14663:../../..\hal\include/device/stm32g431.h **** 
14664:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14665:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t XIDAM_EIDM =                // EIDM (29 bits)
14666:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1fffffff>::value<X>();
14667:../../..\hal\include/device/stm32g431.h ****     static const uint32_t XIDAM_RESET_VALUE = 0x1fffffff;
14668:../../..\hal\include/device/stm32g431.h **** 
14669:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14670:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_BIDX =                // BIDX (6 bits)
14671:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
14672:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_MSI =                 // MSI (2 bits)
14674:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
14675:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_FIDX =                // FIDX (7 bits)
14677:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
14678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_FLST = 0x8000;        // FLST
14679:../../..\hal\include/device/stm32g431.h ****     static const uint32_t HPMS_RESET_VALUE = 0x0;
14680:../../..\hal\include/device/stm32g431.h **** 
14681:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14682:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0FL =                // F0FL (7 bits)
14683:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14684:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0GI =                // F0GI (6 bits)
14686:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3f>::value<X>();
14687:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0PI =                // F0PI (6 bits)
14689:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
14690:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0F = 0x1000000;      // F0F
14691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_RF0L = 0x2000000;     // RF0L
14692:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF0S_RESET_VALUE = 0x0;
14693:../../..\hal\include/device/stm32g431.h **** 
14694:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14695:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0A_F0AI =                // F0AI (6 bits)
14696:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
14697:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF0A_RESET_VALUE = 0x0;
14698:../../..\hal\include/device/stm32g431.h **** 
14699:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1FL =                // F1FL (7 bits)
14701:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14702:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1GI =                // F1GI (6 bits)
14704:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3f>::value<X>();
14705:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14706:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1PI =                // F1PI (6 bits)
14707:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
14708:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1F = 0x1000000;      // F1F
14709:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_RF1L = 0x2000000;     // RF1L
14710:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14711:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_DMS =                 // DMS (2 bits)
14712:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
14713:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF1S_RESET_VALUE = 0x0;
14714:../../..\hal\include/device/stm32g431.h **** 
14715:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14716:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1A_F1AI =                // F1AI (6 bits)
14717:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
14718:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF1A_RESET_VALUE = 0x0;
14719:../../..\hal\include/device/stm32g431.h **** 
14720:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14721:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TBSA =                // TBSA (14 bits)
14722:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3fff>::value<X>();
14723:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14724:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_NDTB =                // NDTB (6 bits)
14725:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
14726:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14727:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TFQS =                // TFQS (6 bits)
14728:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3f>::value<X>();
14729:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TFQM = 0x40000000;    // TFQM
14730:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBC_RESET_VALUE = 0x0;
14731:../../..\hal\include/device/stm32g431.h **** 
14732:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14733:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFFL =                // TFFL (6 bits)
14734:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
14735:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14736:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFGI =                // TFGI (5 bits)
14737:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
14738:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14739:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFQPI =               // TFQPI (5 bits)
14740:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
14741:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFQF = 0x200000;      // TFQF
14742:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXFQS_RESET_VALUE = 0x0;
14743:../../..\hal\include/device/stm32g431.h **** 
14744:../../..\hal\include/device/stm32g431.h **** 
14745:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBRP_RESET_VALUE = 0x0;
14746:../../..\hal\include/device/stm32g431.h **** 
14747:../../..\hal\include/device/stm32g431.h **** 
14748:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBAR_RESET_VALUE = 0x0;
14749:../../..\hal\include/device/stm32g431.h **** 
14750:../../..\hal\include/device/stm32g431.h **** 
14751:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCR_RESET_VALUE = 0x0;
14752:../../..\hal\include/device/stm32g431.h **** 
14753:../../..\hal\include/device/stm32g431.h **** 
14754:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBTO_RESET_VALUE = 0x0;
14755:../../..\hal\include/device/stm32g431.h **** 
14756:../../..\hal\include/device/stm32g431.h **** 
14757:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCF_RESET_VALUE = 0x0;
14758:../../..\hal\include/device/stm32g431.h **** 
14759:../../..\hal\include/device/stm32g431.h **** 
14760:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBTIE_RESET_VALUE = 0x0;
14761:../../..\hal\include/device/stm32g431.h **** 
14762:../../..\hal\include/device/stm32g431.h **** 
14763:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCIE_RESET_VALUE = 0x0;
14764:../../..\hal\include/device/stm32g431.h **** 
14765:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14766:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFFL =                // EFFL (6 bits)
14767:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
14768:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14769:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFGI =                // EFGI (5 bits)
14770:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
14771:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14772:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFPI =                // EFPI (5 bits)
14773:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
14774:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFF = 0x1000000;      // EFF
14775:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_TEFL = 0x2000000;     // TEFL
14776:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXEFS_RESET_VALUE = 0x0;
14777:../../..\hal\include/device/stm32g431.h **** 
14778:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14779:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFA_EFAI =                // EFAI (5 bits)
14780:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
14781:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXEFA_RESET_VALUE = 0x0;
14782:../../..\hal\include/device/stm32g431.h **** 
14783:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14784:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CKDIV_PDIV =                // input clock divider. the APB clock cou
14785:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
14786:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CKDIV_RESET_VALUE = 0x0;
14787:../../..\hal\include/device/stm32g431.h **** };
14788:../../..\hal\include/device/stm32g431.h **** 
14789:../../..\hal\include/device/stm32g431.h **** static fdcan_t& FDCAN = *reinterpret_cast<fdcan_t*>(0x4000a400);
14790:../../..\hal\include/device/stm32g431.h **** 
14791:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FDCAN
14792:../../..\hal\include/device/stm32g431.h **** 
14793:../../..\hal\include/device/stm32g431.h **** 
14794:../../..\hal\include/device/stm32g431.h **** ////
14795:../../..\hal\include/device/stm32g431.h **** //
14796:../../..\hal\include/device/stm32g431.h **** //    FDCAN
14797:../../..\hal\include/device/stm32g431.h **** //
14798:../../..\hal\include/device/stm32g431.h **** ////
14799:../../..\hal\include/device/stm32g431.h **** 
14800:../../..\hal\include/device/stm32g431.h **** struct fdcan1_t
14801:../../..\hal\include/device/stm32g431.h **** {
14802:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CREL;                 // [Read-only] FDCAN Core Release Register
14803:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ENDN;                 // [Read-only] FDCAN Core Release Register
14804:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
14805:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DBTP;                 // This register is only writable if bits CCCR.CCE a
14806:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TEST;                 // [Read-write] Write access to the Test Register ha
14807:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RWD;                  // The RAM Watchdog monitors the READY output of the
14808:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CCCR;                 // [Read-write] For details about setting and resett
14809:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    NBTP;                 // [Read-write] FDCAN_NBTP
14810:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSCC;                 // [Read-write] FDCAN Timestamp Counter Configuratio
14811:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TSCV;                 // [Read-only] FDCAN Timestamp Counter Value Registe
14812:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TOCC;                 // FDCAN Timeout Counter Configuration Register
14813:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TOCV;                 // [Read-only] FDCAN Timeout Counter Value Register
14814:../../..\hal\include/device/stm32g431.h ****     reserved_t<4>        _1;
14815:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ECR;                  // [Read-only] FDCAN Error Counter Register
14816:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    PSR;                  // FDCAN Protocol Status Register
14817:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TDCR;                 // [Read-write] FDCAN Transmitter Delay Compensation
14818:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _2;
14819:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IR;                   // [Read-write] The flags are set when one of the li
14820:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IE;                   // [Read-write] The settings in the Interrupt Enable
14821:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ILS;                  // [Read-write] The Interrupt Line Select register a
14822:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ILE;                  // [Read-write] Each of the two interrupt lines to t
14823:../../..\hal\include/device/stm32g431.h ****     reserved_t<8>        _3;
14824:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXGFC;                // Global settings for Message ID filtering. The Glo
14825:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    XIDAM;                // [Read-write] FDCAN Extended ID and Mask Register
14826:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    HPMS;                 // [Read-only] This register is updated every time a
14827:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _4;
14828:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF0S;                // [Read-write] FDCAN Rx FIFO 0 Status Register
14829:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF0A;                // [Read-write] CAN Rx FIFO 0 Acknowledge Register
14830:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF1S;                // [Read-only] FDCAN Rx FIFO 1 Status Register
14831:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXF1A;                // [Read-write] FDCAN Rx FIFO 1 Acknowledge Register
14832:../../..\hal\include/device/stm32g431.h ****     reserved_t<8>        _5;
14833:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBC;                 // [Read-write] FDCAN Tx Buffer Configuration Regist
14834:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXFQS;                // [Read-only] The Tx FIFO/Queue status is related t
14835:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBRP;                // [Read-only] FDCAN Tx Buffer Request Pending Regis
14836:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBAR;                // [Read-write] FDCAN Tx Buffer Add Request Register
14837:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCR;                // [Read-write] FDCAN Tx Buffer Cancellation Request
14838:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBTO;                // [Read-only] FDCAN Tx Buffer Transmission Occurred
14839:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCF;                // [Read-only] FDCAN Tx Buffer Cancellation Finished
14840:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBTIE;               // [Read-write] FDCAN Tx Buffer Transmission Interru
14841:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXBCIE;               // [Read-write] FDCAN Tx Buffer Cancellation Finishe
14842:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXEFS;                // [Read-only] FDCAN Tx Event FIFO Status Register
14843:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXEFA;                // [Read-write] FDCAN Tx Event FIFO Acknowledge Regi
14844:../../..\hal\include/device/stm32g431.h ****     reserved_t<5>        _6;
14845:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CKDIV;                // [Read-write] FDCAN CFG clock divider register
14846:../../..\hal\include/device/stm32g431.h **** 
14847:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14848:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_DAY =                 // DAY (8 bits)
14849:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14850:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14851:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_MON =                 // MON (8 bits)
14852:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14853:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14854:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_YEAR =                // YEAR (4 bits)
14855:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
14856:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14857:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_SUBSTEP =             // SUBSTEP (4 bits)
14858:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0xf>::value<X>();
14859:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14860:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_STEP =                // STEP (4 bits)
14861:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0xf>::value<X>();
14862:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14863:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CREL_REL =                 // REL (4 bits)
14864:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0xf>::value<X>();
14865:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CREL_RESET_VALUE = 0x11111111;
14866:../../..\hal\include/device/stm32g431.h **** 
14867:../../..\hal\include/device/stm32g431.h **** 
14868:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ENDN_RESET_VALUE = 0x87654321;
14869:../../..\hal\include/device/stm32g431.h **** 
14870:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14871:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DSJW =                // DSJW (4 bits), Read-write
14872:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
14873:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14874:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DTSEG2 =              // DTSEG2 (4 bits), Read-write
14875:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0xf>::value<X>();
14876:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14877:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DTSEG1 =              // DTSEG1 (5 bits), Write-only
14878:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
14879:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14880:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_DBRP =                // DBRP (5 bits), Read-write
14881:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
14882:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DBTP_TDC = 0x800000;       // TDC, Read-only
14883:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DBTP_RESET_VALUE = 0xa33;
14884:../../..\hal\include/device/stm32g431.h **** 
14885:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_LBCK = 0x10;          // LBCK
14886:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14887:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_TX =                  // TX (2 bits)
14888:../../..\hal\include/device/stm32g431.h ****         bit_field_t<5, 0x3>::value<X>();
14889:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TEST_RX = 0x80;            // RX
14890:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TEST_RESET_VALUE = 0x0;
14891:../../..\hal\include/device/stm32g431.h **** 
14892:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14893:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RWD_WDC =                 // WDC (8 bits), Read-write
14894:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14895:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14896:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RWD_WDV =                 // WDV (8 bits), Read-only
14897:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14898:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RWD_RESET_VALUE = 0x0;
14899:../../..\hal\include/device/stm32g431.h **** 
14900:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_INIT = 0x1;           // INIT
14901:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CCE = 0x2;            // CCE
14902:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_ASM = 0x4;            // ASM
14903:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CSA = 0x8;            // CSA
14904:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_CSR = 0x10;           // CSR
14905:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_MON = 0x20;           // MON
14906:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_DAR = 0x40;           // DAR
14907:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_TEST = 0x80;          // TEST
14908:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_FDOE = 0x100;         // FDOE
14909:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_BRSE = 0x200;         // BRSE
14910:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_PXHD = 0x1000;        // PXHD
14911:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_EFBI = 0x2000;        // EFBI
14912:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_TXP = 0x4000;         // TXP
14913:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CCCR_NISO = 0x8000;        // NISO
14914:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CCCR_RESET_VALUE = 0x1;
14915:../../..\hal\include/device/stm32g431.h **** 
14916:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14917:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_TSEG2 =               // TSEG2 (7 bits)
14918:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14919:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14920:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NTSEG1 =              // NTSEG1 (8 bits)
14921:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0xff>::value<X>();
14922:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14923:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NBRP =                // NBRP (9 bits)
14924:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1ff>::value<X>();
14925:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14926:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t NBTP_NSJW =                // NSJW (7 bits)
14927:../../..\hal\include/device/stm32g431.h ****         bit_field_t<25, 0x7f>::value<X>();
14928:../../..\hal\include/device/stm32g431.h ****     static const uint32_t NBTP_RESET_VALUE = 0xa33;
14929:../../..\hal\include/device/stm32g431.h **** 
14930:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14931:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCC_TSS =                 // TSS (2 bits)
14932:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
14933:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14934:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCC_TCP =                 // TCP (4 bits)
14935:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xf>::value<X>();
14936:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSCC_RESET_VALUE = 0x0;
14937:../../..\hal\include/device/stm32g431.h **** 
14938:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14939:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TSCV_TSC =                 // TSC (16 bits)
14940:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
14941:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TSCV_RESET_VALUE = 0x0;
14942:../../..\hal\include/device/stm32g431.h **** 
14943:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_ETOC = 0x1;           // ETOC, Read-write
14944:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14945:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_TOS =                 // TOS (2 bits), Write-only
14946:../../..\hal\include/device/stm32g431.h ****         bit_field_t<1, 0x3>::value<X>();
14947:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14948:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCC_TOP =                 // TOP (16 bits), Read-write
14949:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
14950:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TOCC_RESET_VALUE = 0xffff0000;
14951:../../..\hal\include/device/stm32g431.h **** 
14952:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14953:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TOCV_TOC =                 // TOC (16 bits)
14954:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
14955:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TOCV_RESET_VALUE = 0xffff;
14956:../../..\hal\include/device/stm32g431.h **** 
14957:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14958:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_TEC =                 // TEC (8 bits)
14959:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
14960:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14961:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_TREC =                // TREC (7 bits)
14962:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
14963:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_RP = 0x8000;          // RP
14964:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14965:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ECR_CEL =                 // CEL (8 bits)
14966:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
14967:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ECR_RESET_VALUE = 0x0;
14968:../../..\hal\include/device/stm32g431.h **** 
14969:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14970:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_LEC =                 // LEC (3 bits), Read-write
14971:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
14972:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14973:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_ACT =                 // ACT (2 bits), Write-only
14974:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x3>::value<X>();
14975:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_EP = 0x20;            // EP, Read-write
14976:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_EW = 0x40;            // EW, Read-write
14977:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_BO = 0x80;            // BO, Read-write
14978:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14979:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_DLEC =                // DLEC (3 bits), Write-only
14980:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7>::value<X>();
14981:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_RESI = 0x800;         // RESI, Read-write
14982:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_RBRS = 0x1000;        // RBRS, Read-write
14983:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_REDL = 0x2000;        // REDL, Read-write
14984:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_PXE = 0x4000;         // PXE, Read-write
14985:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14986:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t PSR_TDCV =                // TDCV (7 bits), Read-write
14987:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x7f>::value<X>();
14988:../../..\hal\include/device/stm32g431.h ****     static const uint32_t PSR_RESET_VALUE = 0x707;
14989:../../..\hal\include/device/stm32g431.h **** 
14990:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14991:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDCR_TDCF =                // TDCF (7 bits)
14992:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
14993:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
14994:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TDCR_TDCO =                // TDCO (7 bits)
14995:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
14996:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TDCR_RESET_VALUE = 0x0;
14997:../../..\hal\include/device/stm32g431.h **** 
14998:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0N = 0x1;           // RF0N
14999:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0W = 0x2;           // RF0W
15000:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0F = 0x4;           // RF0F
15001:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF0L = 0x8;           // RF0L
15002:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1N = 0x10;          // RF1N
15003:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1W = 0x20;          // RF1W
15004:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1F = 0x40;          // RF1F
15005:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_RF1L = 0x80;          // RF1L
15006:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_HPM = 0x100;          // HPM
15007:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TC = 0x200;           // TC
15008:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TCF = 0x400;          // TCF
15009:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TFE = 0x800;          // TFE
15010:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFN = 0x1000;        // TEFN
15011:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFW = 0x2000;        // TEFW
15012:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFF = 0x4000;        // TEFF
15013:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TEFL = 0x8000;        // TEFL
15014:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TSW = 0x10000;        // TSW
15015:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_MRAF = 0x20000;       // MRAF
15016:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_TOO = 0x40000;        // TOO
15017:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_DRX = 0x80000;        // DRX
15018:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_ELO = 0x400000;       // ELO
15019:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_EP = 0x800000;        // EP
15020:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_EW = 0x1000000;       // EW
15021:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_BO = 0x2000000;       // BO
15022:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_WDI = 0x4000000;      // WDI
15023:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_PEA = 0x8000000;      // PEA
15024:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_PED = 0x10000000;     // PED
15025:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IR_ARA = 0x20000000;     // ARA
15026:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IR_RESET_VALUE = 0x0;
15027:../../..\hal\include/device/stm32g431.h **** 
15028:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0NE = 0x1;          // RF0NE
15029:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0WE = 0x2;          // RF0WE
15030:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0FE = 0x4;          // RF0FE
15031:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF0LE = 0x8;          // RF0LE
15032:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1NE = 0x10;         // RF1NE
15033:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1WE = 0x20;         // RF1WE
15034:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1FE = 0x40;         // RF1FE
15035:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_RF1LE = 0x80;         // RF1LE
15036:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_HPME = 0x100;         // HPME
15037:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TCE = 0x200;          // TCE
15038:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TCFE = 0x400;         // TCFE
15039:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TFEE = 0x800;         // TFEE
15040:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFNE = 0x1000;       // TEFNE
15041:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFWE = 0x2000;       // TEFWE
15042:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFFE = 0x4000;       // TEFFE
15043:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TEFLE = 0x8000;       // TEFLE
15044:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TSWE = 0x10000;       // TSWE
15045:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_MRAFE = 0x20000;      // MRAFE
15046:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_TOOE = 0x40000;       // TOOE
15047:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_DRX = 0x80000;        // DRX
15048:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BECE = 0x100000;      // BECE
15049:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BEUE = 0x200000;      // BEUE
15050:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_ELOE = 0x400000;      // ELOE
15051:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_EPE = 0x800000;       // EPE
15052:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_EWE = 0x1000000;      // EWE
15053:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_BOE = 0x2000000;      // BOE
15054:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_WDIE = 0x4000000;     // WDIE
15055:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_PEAE = 0x8000000;     // PEAE
15056:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_PEDE = 0x10000000;    // PEDE
15057:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IE_ARAE = 0x20000000;    // ARAE
15058:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IE_RESET_VALUE = 0x0;
15059:../../..\hal\include/device/stm32g431.h **** 
15060:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0NL = 0x1;          // RF0NL
15061:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0WL = 0x2;          // RF0WL
15062:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0FL = 0x4;          // RF0FL
15063:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF0LL = 0x8;          // RF0LL
15064:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1NL = 0x10;         // RF1NL
15065:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1WL = 0x20;         // RF1WL
15066:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1FL = 0x40;         // RF1FL
15067:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_RF1LL = 0x80;         // RF1LL
15068:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_HPML = 0x100;         // HPML
15069:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TCL = 0x200;          // TCL
15070:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TCFL = 0x400;         // TCFL
15071:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TFEL = 0x800;         // TFEL
15072:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFNL = 0x1000;       // TEFNL
15073:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFWL = 0x2000;       // TEFWL
15074:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFFL = 0x4000;       // TEFFL
15075:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TEFLL = 0x8000;       // TEFLL
15076:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TSWL = 0x10000;       // TSWL
15077:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_MRAFL = 0x20000;      // MRAFL
15078:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_TOOL = 0x40000;       // TOOL
15079:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_DRXL = 0x80000;       // DRXL
15080:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BECL = 0x100000;      // BECL
15081:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BEUL = 0x200000;      // BEUL
15082:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_ELOL = 0x400000;      // ELOL
15083:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_EPL = 0x800000;       // EPL
15084:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_EWL = 0x1000000;      // EWL
15085:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_BOL = 0x2000000;      // BOL
15086:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_WDIL = 0x4000000;     // WDIL
15087:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_PEAL = 0x8000000;     // PEAL
15088:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_PEDL = 0x10000000;    // PEDL
15089:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILS_ARAL = 0x20000000;    // ARAL
15090:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ILS_RESET_VALUE = 0x0;
15091:../../..\hal\include/device/stm32g431.h **** 
15092:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILE_EINT0 = 0x1;          // EINT0
15093:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ILE_EINT1 = 0x2;          // EINT1
15094:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ILE_RESET_VALUE = 0x0;
15095:../../..\hal\include/device/stm32g431.h **** 
15096:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_RRFE = 0x1;           // RRFE, Read-write
15097:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_RRFS = 0x2;           // RRFS, Read-write
15098:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15099:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_ANFE =                // ANFE (2 bits), Write-only
15100:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3>::value<X>();
15101:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15102:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXGFC_ANFS =                // ANFS (2 bits), Write-only
15103:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15104:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXGFC_RESET_VALUE = 0x0;
15105:../../..\hal\include/device/stm32g431.h **** 
15106:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15107:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t XIDAM_EIDM =                // EIDM (29 bits)
15108:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1fffffff>::value<X>();
15109:../../..\hal\include/device/stm32g431.h ****     static const uint32_t XIDAM_RESET_VALUE = 0x1fffffff;
15110:../../..\hal\include/device/stm32g431.h **** 
15111:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15112:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_BIDX =                // BIDX (6 bits)
15113:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15114:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15115:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_MSI =                 // MSI (2 bits)
15116:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x3>::value<X>();
15117:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15118:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_FIDX =                // FIDX (7 bits)
15119:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
15120:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t HPMS_FLST = 0x8000;        // FLST
15121:../../..\hal\include/device/stm32g431.h ****     static const uint32_t HPMS_RESET_VALUE = 0x0;
15122:../../..\hal\include/device/stm32g431.h **** 
15123:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15124:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0FL =                // F0FL (7 bits)
15125:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
15126:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15127:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0GI =                // F0GI (6 bits)
15128:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3f>::value<X>();
15129:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15130:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0PI =                // F0PI (6 bits)
15131:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
15132:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_F0F = 0x1000000;      // F0F
15133:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0S_RF0L = 0x2000000;     // RF0L
15134:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF0S_RESET_VALUE = 0x0;
15135:../../..\hal\include/device/stm32g431.h **** 
15136:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15137:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF0A_F0AI =                // F0AI (6 bits)
15138:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15139:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF0A_RESET_VALUE = 0x0;
15140:../../..\hal\include/device/stm32g431.h **** 
15141:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15142:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1FL =                // F1FL (7 bits)
15143:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
15144:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15145:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1GI =                // F1GI (6 bits)
15146:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x3f>::value<X>();
15147:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15148:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1PI =                // F1PI (6 bits)
15149:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
15150:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_F1F = 0x1000000;      // F1F
15151:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_RF1L = 0x2000000;     // RF1L
15152:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15153:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1S_DMS =                 // DMS (2 bits)
15154:../../..\hal\include/device/stm32g431.h ****         bit_field_t<30, 0x3>::value<X>();
15155:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF1S_RESET_VALUE = 0x0;
15156:../../..\hal\include/device/stm32g431.h **** 
15157:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15158:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXF1A_F1AI =                // F1AI (6 bits)
15159:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15160:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXF1A_RESET_VALUE = 0x0;
15161:../../..\hal\include/device/stm32g431.h **** 
15162:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15163:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TBSA =                // TBSA (14 bits)
15164:../../..\hal\include/device/stm32g431.h ****         bit_field_t<2, 0x3fff>::value<X>();
15165:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15166:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_NDTB =                // NDTB (6 bits)
15167:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3f>::value<X>();
15168:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15169:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TFQS =                // TFQS (6 bits)
15170:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x3f>::value<X>();
15171:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXBC_TFQM = 0x40000000;    // TFQM
15172:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBC_RESET_VALUE = 0x0;
15173:../../..\hal\include/device/stm32g431.h **** 
15174:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15175:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFFL =                // TFFL (6 bits)
15176:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15177:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15178:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFGI =                // TFGI (5 bits)
15179:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
15180:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15181:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFQPI =               // TFQPI (5 bits)
15182:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
15183:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXFQS_TFQF = 0x200000;      // TFQF
15184:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXFQS_RESET_VALUE = 0x0;
15185:../../..\hal\include/device/stm32g431.h **** 
15186:../../..\hal\include/device/stm32g431.h **** 
15187:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBRP_RESET_VALUE = 0x0;
15188:../../..\hal\include/device/stm32g431.h **** 
15189:../../..\hal\include/device/stm32g431.h **** 
15190:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBAR_RESET_VALUE = 0x0;
15191:../../..\hal\include/device/stm32g431.h **** 
15192:../../..\hal\include/device/stm32g431.h **** 
15193:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCR_RESET_VALUE = 0x0;
15194:../../..\hal\include/device/stm32g431.h **** 
15195:../../..\hal\include/device/stm32g431.h **** 
15196:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBTO_RESET_VALUE = 0x0;
15197:../../..\hal\include/device/stm32g431.h **** 
15198:../../..\hal\include/device/stm32g431.h **** 
15199:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCF_RESET_VALUE = 0x0;
15200:../../..\hal\include/device/stm32g431.h **** 
15201:../../..\hal\include/device/stm32g431.h **** 
15202:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBTIE_RESET_VALUE = 0x0;
15203:../../..\hal\include/device/stm32g431.h **** 
15204:../../..\hal\include/device/stm32g431.h **** 
15205:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXBCIE_RESET_VALUE = 0x0;
15206:../../..\hal\include/device/stm32g431.h **** 
15207:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15208:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFFL =                // EFFL (6 bits)
15209:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15210:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15211:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFGI =                // EFGI (5 bits)
15212:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x1f>::value<X>();
15213:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15214:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFPI =                // EFPI (5 bits)
15215:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x1f>::value<X>();
15216:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_EFF = 0x1000000;      // EFF
15217:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFS_TEFL = 0x2000000;     // TEFL
15218:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXEFS_RESET_VALUE = 0x0;
15219:../../..\hal\include/device/stm32g431.h **** 
15220:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15221:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXEFA_EFAI =                // EFAI (5 bits)
15222:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x1f>::value<X>();
15223:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXEFA_RESET_VALUE = 0x0;
15224:../../..\hal\include/device/stm32g431.h **** 
15225:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15226:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CKDIV_PDIV =                // input clock divider. the APB clock cou
15227:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15228:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CKDIV_RESET_VALUE = 0x0;
15229:../../..\hal\include/device/stm32g431.h **** };
15230:../../..\hal\include/device/stm32g431.h **** 
15231:../../..\hal\include/device/stm32g431.h **** static fdcan1_t& FDCAN1 = *reinterpret_cast<fdcan1_t*>(0x40006400);
15232:../../..\hal\include/device/stm32g431.h **** 
15233:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_FDCAN1
15234:../../..\hal\include/device/stm32g431.h **** 
15235:../../..\hal\include/device/stm32g431.h **** 
15236:../../..\hal\include/device/stm32g431.h **** ////
15237:../../..\hal\include/device/stm32g431.h **** //
15238:../../..\hal\include/device/stm32g431.h **** //    UCPD1
15239:../../..\hal\include/device/stm32g431.h **** //
15240:../../..\hal\include/device/stm32g431.h **** ////
15241:../../..\hal\include/device/stm32g431.h **** 
15242:../../..\hal\include/device/stm32g431.h **** struct ucpd1_t
15243:../../..\hal\include/device/stm32g431.h **** {
15244:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFG1;                 // [Read-write] UCPD configuration register 1
15245:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFG2;                 // [Read-write] UCPD configuration register 2
15246:../../..\hal\include/device/stm32g431.h ****     reserved_t<1>        _0;
15247:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // [Read-write] UCPD configuration register 2
15248:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    IMR;                  // [Read-write] UCPD Interrupt Mask Register
15249:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    SR;                   // [Read-write] UCPD Status Register
15250:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Read-write] UCPD Interrupt Clear Register
15251:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TX_ORDSET;            // [Read-write] UCPD Tx Ordered Set Type Register
15252:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TX_PAYSZ;             // [Read-write] UCPD Tx Paysize Register
15253:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    TXDR;                 // [Read-write] UCPD Tx Data Register
15254:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RX_ORDSET;            // [Read-only] UCPD Rx Ordered Set Register
15255:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RX_PAYSZ;             // [Read-only] UCPD Rx Paysize Register
15256:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RXDR;                 // [Read-only] UCPD Rx Data Register
15257:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RX_ORDEXT1;           // [Read-write] UCPD Rx Ordered Set Extension Regist
15258:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    RX_ORDEXT2;           // [Read-write] UCPD Rx Ordered Set Extension Regist
15259:../../..\hal\include/device/stm32g431.h **** 
15260:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15261:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_HBITCLKDIV =          // HBITCLKDIV (6 bits)
15262:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3f>::value<X>();
15263:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15264:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_IFRGAP =              // IFRGAP (5 bits)
15265:../../..\hal\include/device/stm32g431.h ****         bit_field_t<6, 0x1f>::value<X>();
15266:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15267:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_TRANSWIN =            // TRANSWIN (5 bits)
15268:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x1f>::value<X>();
15269:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15270:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_PSC_USBPDCLK =        // PSC_USBPDCLK (3 bits)
15271:../../..\hal\include/device/stm32g431.h ****         bit_field_t<17, 0x7>::value<X>();
15272:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15273:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_RXORDSETEN =          // RXORDSETEN (9 bits)
15274:../../..\hal\include/device/stm32g431.h ****         bit_field_t<20, 0x1ff>::value<X>();
15275:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_TXDMAEN = 0x20000000; // TXDMAEN
15276:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_RXDMAEN = 0x40000000; // RXDMAEN
15277:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG1_UCPDEN = 0x80000000;  // UCPDEN
15278:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFG1_RESET_VALUE = 0x0;
15279:../../..\hal\include/device/stm32g431.h **** 
15280:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG2_RXFILTDIS = 0x1;      // RXFILTDIS
15281:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG2_RXFILT2N3 = 0x2;      // RXFILT2N3
15282:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG2_FORCECLK = 0x4;       // FORCECLK
15283:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFG2_WUPEN = 0x8;          // WUPEN
15284:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFG2_RESET_VALUE = 0x0;
15285:../../..\hal\include/device/stm32g431.h **** 
15286:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15287:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TXMODE =              // TXMODE (2 bits)
15288:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3>::value<X>();
15289:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TXSEND = 0x4;         // TXSEND
15290:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TXHRST = 0x8;         // TXHRST
15291:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RXMODE = 0x10;        // RXMODE
15292:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PHYRXEN = 0x20;       // PHYRXEN
15293:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_PHYCCSEL = 0x40;      // PHYCCSEL
15294:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15295:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ANASUBMODE =          // ANASUBMODE (2 bits)
15296:../../..\hal\include/device/stm32g431.h ****         bit_field_t<7, 0x3>::value<X>();
15297:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ANAMODE = 0x200;      // ANAMODE
15298:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15299:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CCENABLE =            // CCENABLE (2 bits)
15300:../../..\hal\include/device/stm32g431.h ****         bit_field_t<10, 0x3>::value<X>();
15301:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_FRSRXEN = 0x10000;    // FRSRXEN
15302:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_FRSTX = 0x20000;      // FRSTX
15303:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_RDCH = 0x40000;       // RDCH
15304:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CC1TCDIS = 0x100000;  // CC1TCDIS
15305:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CC2TCDIS = 0x200000;  // CC2TCDIS
15306:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x0;
15307:../../..\hal\include/device/stm32g431.h **** 
15308:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TXISIE = 0x1;         // TXISIE
15309:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TXMSGDISCIE = 0x2;    // TXMSGDISCIE
15310:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TXMSGSENTIE = 0x4;    // TXMSGSENTIE
15311:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TXMSGABTIE = 0x8;     // TXMSGABTIE
15312:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_HRSTDISCIE = 0x10;    // HRSTDISCIE
15313:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_HRSTSENTIE = 0x20;    // HRSTSENTIE
15314:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TXUNDIE = 0x40;       // TXUNDIE
15315:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_RXNEIE = 0x100;       // RXNEIE
15316:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_RXORDDETIE = 0x200;   // RXORDDETIE
15317:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_RXHRSTDETIE = 0x400;  // RXHRSTDETIE
15318:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_RXOVRIE = 0x800;      // RXOVRIE
15319:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_RXMSGENDIE = 0x1000;  // RXMSGENDIE
15320:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TYPECEVT1IE = 0x4000; // TYPECEVT1IE
15321:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_TYPECEVT2IE = 0x8000; // TYPECEVT2IE
15322:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t IMR_FRSEVTIE = 0x100000;  // FRSEVTIE
15323:../../..\hal\include/device/stm32g431.h ****     static const uint32_t IMR_RESET_VALUE = 0x0;
15324:../../..\hal\include/device/stm32g431.h **** 
15325:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXIS = 0x1;           // TXIS
15326:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXMSGDISC = 0x2;      // TXMSGDISC
15327:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXMSGSENT = 0x4;      // TXMSGSENT
15328:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXMSGABT = 0x8;       // TXMSGABT
15329:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_HRSTDISC = 0x10;      // HRSTDISC
15330:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_HRSTSENT = 0x20;      // HRSTSENT
15331:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TXUND = 0x40;         // TXUND
15332:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXNE = 0x100;         // RXNE
15333:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXORDDET = 0x200;     // RXORDDET
15334:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXHRSTDET = 0x400;    // RXHRSTDET
15335:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXOVR = 0x800;        // RXOVR
15336:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXMSGEND = 0x1000;    // RXMSGEND
15337:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_RXERR = 0x2000;       // RXERR
15338:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TYPECEVT1 = 0x4000;   // TYPECEVT1
15339:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TYPECEVT2 = 0x8000;   // TYPECEVT2
15340:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15341:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TYPEC_VSTATE_CC1 =    // TYPEC_VSTATE_CC1 (2 bits)
15342:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0x3>::value<X>();
15343:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15344:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_TYPEC_VSTATE_CC2 =    // TYPEC_VSTATE_CC2 (2 bits)
15345:../../..\hal\include/device/stm32g431.h ****         bit_field_t<18, 0x3>::value<X>();
15346:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t SR_FRSEVT = 0x100000;    // FRSEVT
15347:../../..\hal\include/device/stm32g431.h ****     static const uint32_t SR_RESET_VALUE = 0x0;
15348:../../..\hal\include/device/stm32g431.h **** 
15349:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXMSGDISCCF = 0x2;    // TXMSGDISCCF
15350:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXMSGSENTCF = 0x4;    // TXMSGSENTCF
15351:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXMSGABTCF = 0x8;     // TXMSGABTCF
15352:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_HRSTDISCCF = 0x10;    // HRSTDISCCF
15353:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_HRSTSENTCF = 0x20;    // HRSTSENTCF
15354:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TXUNDCF = 0x40;       // TXUNDCF
15355:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RXORDDETCF = 0x200;   // RXORDDETCF
15356:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RXHRSTDETCF = 0x400;  // RXHRSTDETCF
15357:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RXOVRCF = 0x800;      // RXOVRCF
15358:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_RXMSGENDCF = 0x1000;  // RXMSGENDCF
15359:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TYPECEVT1CF = 0x4000; // TYPECEVT1CF
15360:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_TYPECEVT2CF = 0x8000; // TYPECEVT2CF
15361:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_FRSEVTCF = 0x100000;  // FRSEVTCF
15362:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
15363:../../..\hal\include/device/stm32g431.h **** 
15364:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15365:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TX_ORDSET_TXORDSET =            // TXORDSET (20 bits)
15366:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfffff>::value<X>();
15367:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TX_ORDSET_RESET_VALUE = 0x0;
15368:../../..\hal\include/device/stm32g431.h **** 
15369:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15370:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TX_PAYSZ_TXPAYSZ =             // TXPAYSZ (10 bits)
15371:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
15372:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TX_PAYSZ_RESET_VALUE = 0x0;
15373:../../..\hal\include/device/stm32g431.h **** 
15374:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15375:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t TXDR_TXDATA =              // TXDATA (8 bits)
15376:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
15377:../../..\hal\include/device/stm32g431.h ****     static const uint32_t TXDR_RESET_VALUE = 0x0;
15378:../../..\hal\include/device/stm32g431.h **** 
15379:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15380:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_ORDSET_RXORDSET =            // RXORDSET (3 bits)
15381:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7>::value<X>();
15382:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_ORDSET_RXSOP3OF4 = 0x8;      // RXSOP3OF4
15383:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15384:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_ORDSET_RXSOPKINVALID =       // RXSOPKINVALID (3 bits)
15385:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x7>::value<X>();
15386:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RX_ORDSET_RESET_VALUE = 0x0;
15387:../../..\hal\include/device/stm32g431.h **** 
15388:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15389:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_PAYSZ_RXPAYSZ =             // RXPAYSZ (10 bits)
15390:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x3ff>::value<X>();
15391:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RX_PAYSZ_RESET_VALUE = 0x0;
15392:../../..\hal\include/device/stm32g431.h **** 
15393:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15394:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RXDR_RXDATA =              // RXDATA (8 bits)
15395:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xff>::value<X>();
15396:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RXDR_RESET_VALUE = 0x0;
15397:../../..\hal\include/device/stm32g431.h **** 
15398:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15399:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_ORDEXT1_RXSOPX1 =             // RXSOPX1 (20 bits)
15400:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfffff>::value<X>();
15401:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RX_ORDEXT1_RESET_VALUE = 0x0;
15402:../../..\hal\include/device/stm32g431.h **** 
15403:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15404:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t RX_ORDEXT2_RXSOPX2 =             // RXSOPX2 (20 bits)
15405:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xfffff>::value<X>();
15406:../../..\hal\include/device/stm32g431.h ****     static const uint32_t RX_ORDEXT2_RESET_VALUE = 0x0;
15407:../../..\hal\include/device/stm32g431.h **** 
15408:../../..\hal\include/device/stm32g431.h ****     static constexpr uint8_t UCPD1 = 63; // UCPD1
15409:../../..\hal\include/device/stm32g431.h **** };
15410:../../..\hal\include/device/stm32g431.h **** 
15411:../../..\hal\include/device/stm32g431.h **** static ucpd1_t& UCPD1 = *reinterpret_cast<ucpd1_t*>(0x4000a000);
15412:../../..\hal\include/device/stm32g431.h **** 
15413:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_UCPD1
15414:../../..\hal\include/device/stm32g431.h **** 
15415:../../..\hal\include/device/stm32g431.h **** 
15416:../../..\hal\include/device/stm32g431.h **** ////
15417:../../..\hal\include/device/stm32g431.h **** //
15418:../../..\hal\include/device/stm32g431.h **** //    USB_FS_device
15419:../../..\hal\include/device/stm32g431.h **** //
15420:../../..\hal\include/device/stm32g431.h **** ////
15421:../../..\hal\include/device/stm32g431.h **** 
15422:../../..\hal\include/device/stm32g431.h **** struct usb_fs_device_t
15423:../../..\hal\include/device/stm32g431.h **** {
15424:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP0R;                 // [Read-write] USB endpoint n register
15425:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP1R;                 // [Read-write] USB endpoint n register
15426:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP2R;                 // [Read-write] USB endpoint n register
15427:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP3R;                 // [Read-write] USB endpoint n register
15428:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP4R;                 // [Read-write] USB endpoint n register
15429:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP5R;                 // [Read-write] USB endpoint n register
15430:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP6R;                 // [Read-write] USB endpoint n register
15431:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    EP7R;                 // [Read-write] USB endpoint n register
15432:../../..\hal\include/device/stm32g431.h ****     reserved_t<8>        _0;
15433:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CNTR;                 // [Read-write] USB control register
15434:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISTR;                 // [Read-write] USB interrupt status register
15435:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    FNR;                  // [Read-only] USB frame number register
15436:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    DADDR;                // [Read-write] USB device address
15437:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    BTABLE;               // [Read-write] Buffer table address
15438:../../..\hal\include/device/stm32g431.h **** 
15439:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15440:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_EA =                  // EA (4 bits)
15441:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15442:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15443:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_STAT_TX =             // STAT_TX (2 bits)
15444:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15445:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_DTOG_TX = 0x40;       // DTOG_TX
15446:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_CTR_TX = 0x80;        // CTR_TX
15447:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_EP_KIND = 0x100;      // EP_KIND
15448:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15449:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_EP_TYPE =             // EP_TYPE (2 bits)
15450:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15451:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_SETUP = 0x800;        // SETUP
15452:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15453:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_STAT_RX =             // STAT_RX (2 bits)
15454:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15455:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_DTOG_RX = 0x4000;     // DTOG_RX
15456:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP0R_CTR_RX = 0x8000;      // CTR_RX
15457:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP0R_RESET_VALUE = 0x0;
15458:../../..\hal\include/device/stm32g431.h **** 
15459:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15460:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_EA =                  // EA (4 bits)
15461:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15462:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15463:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_STAT_TX =             // STAT_TX (2 bits)
15464:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15465:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_DTOG_TX = 0x40;       // DTOG_TX
15466:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_CTR_TX = 0x80;        // CTR_TX
15467:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_EP_KIND = 0x100;      // EP_KIND
15468:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15469:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_EP_TYPE =             // EP_TYPE (2 bits)
15470:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15471:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_SETUP = 0x800;        // SETUP
15472:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15473:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_STAT_RX =             // STAT_RX (2 bits)
15474:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15475:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_DTOG_RX = 0x4000;     // DTOG_RX
15476:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP1R_CTR_RX = 0x8000;      // CTR_RX
15477:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP1R_RESET_VALUE = 0x0;
15478:../../..\hal\include/device/stm32g431.h **** 
15479:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15480:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_EA =                  // EA (4 bits)
15481:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15482:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15483:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_STAT_TX =             // STAT_TX (2 bits)
15484:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15485:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_DTOG_TX = 0x40;       // DTOG_TX
15486:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_CTR_TX = 0x80;        // CTR_TX
15487:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_EP_KIND = 0x100;      // EP_KIND
15488:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15489:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_EP_TYPE =             // EP_TYPE (2 bits)
15490:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15491:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_SETUP = 0x800;        // SETUP
15492:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15493:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_STAT_RX =             // STAT_RX (2 bits)
15494:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15495:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_DTOG_RX = 0x4000;     // DTOG_RX
15496:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP2R_CTR_RX = 0x8000;      // CTR_RX
15497:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP2R_RESET_VALUE = 0x0;
15498:../../..\hal\include/device/stm32g431.h **** 
15499:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15500:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_EA =                  // EA (4 bits)
15501:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15502:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15503:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_STAT_TX =             // STAT_TX (2 bits)
15504:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15505:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_DTOG_TX = 0x40;       // DTOG_TX
15506:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_CTR_TX = 0x80;        // CTR_TX
15507:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_EP_KIND = 0x100;      // EP_KIND
15508:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15509:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_EP_TYPE =             // EP_TYPE (2 bits)
15510:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15511:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_SETUP = 0x800;        // SETUP
15512:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15513:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_STAT_RX =             // STAT_RX (2 bits)
15514:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15515:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_DTOG_RX = 0x4000;     // DTOG_RX
15516:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP3R_CTR_RX = 0x8000;      // CTR_RX
15517:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP3R_RESET_VALUE = 0x0;
15518:../../..\hal\include/device/stm32g431.h **** 
15519:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15520:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_EA =                  // EA (4 bits)
15521:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15522:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15523:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_STAT_TX =             // STAT_TX (2 bits)
15524:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15525:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_DTOG_TX = 0x40;       // DTOG_TX
15526:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_CTR_TX = 0x80;        // CTR_TX
15527:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_EP_KIND = 0x100;      // EP_KIND
15528:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15529:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_EP_TYPE =             // EP_TYPE (2 bits)
15530:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15531:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_SETUP = 0x800;        // SETUP
15532:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15533:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_STAT_RX =             // STAT_RX (2 bits)
15534:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15535:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_DTOG_RX = 0x4000;     // DTOG_RX
15536:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP4R_CTR_RX = 0x8000;      // CTR_RX
15537:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP4R_RESET_VALUE = 0x0;
15538:../../..\hal\include/device/stm32g431.h **** 
15539:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15540:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_EA =                  // EA (4 bits)
15541:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15542:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15543:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_STAT_TX =             // STAT_TX (2 bits)
15544:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15545:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_DTOG_TX = 0x40;       // DTOG_TX
15546:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_CTR_TX = 0x80;        // CTR_TX
15547:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_EP_KIND = 0x100;      // EP_KIND
15548:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15549:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_EP_TYPE =             // EP_TYPE (2 bits)
15550:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15551:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_SETUP = 0x800;        // SETUP
15552:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15553:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_STAT_RX =             // STAT_RX (2 bits)
15554:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15555:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_DTOG_RX = 0x4000;     // DTOG_RX
15556:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP5R_CTR_RX = 0x8000;      // CTR_RX
15557:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP5R_RESET_VALUE = 0x0;
15558:../../..\hal\include/device/stm32g431.h **** 
15559:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15560:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_EA =                  // EA (4 bits)
15561:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15562:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15563:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_STAT_TX =             // STAT_TX (2 bits)
15564:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15565:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_DTOG_TX = 0x40;       // DTOG_TX
15566:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_CTR_TX = 0x80;        // CTR_TX
15567:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_EP_KIND = 0x100;      // EP_KIND
15568:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15569:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_EP_TYPE =             // EP_TYPE (2 bits)
15570:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15571:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_SETUP = 0x800;        // SETUP
15572:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15573:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_STAT_RX =             // STAT_RX (2 bits)
15574:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15575:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_DTOG_RX = 0x4000;     // DTOG_RX
15576:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP6R_CTR_RX = 0x8000;      // CTR_RX
15577:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP6R_RESET_VALUE = 0x0;
15578:../../..\hal\include/device/stm32g431.h **** 
15579:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15580:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_EA =                  // EA (4 bits)
15581:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15582:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15583:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_STAT_TX =             // STAT_TX (2 bits)
15584:../../..\hal\include/device/stm32g431.h ****         bit_field_t<4, 0x3>::value<X>();
15585:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_DTOG_TX = 0x40;       // DTOG_TX
15586:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_CTR_TX = 0x80;        // CTR_TX
15587:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_EP_KIND = 0x100;      // EP_KIND
15588:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15589:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_EP_TYPE =             // EP_TYPE (2 bits)
15590:../../..\hal\include/device/stm32g431.h ****         bit_field_t<9, 0x3>::value<X>();
15591:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_SETUP = 0x800;        // SETUP
15592:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15593:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_STAT_RX =             // STAT_RX (2 bits)
15594:../../..\hal\include/device/stm32g431.h ****         bit_field_t<12, 0x3>::value<X>();
15595:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_DTOG_RX = 0x4000;     // DTOG_RX
15596:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t EP7R_CTR_RX = 0x8000;      // CTR_RX
15597:../../..\hal\include/device/stm32g431.h ****     static const uint32_t EP7R_RESET_VALUE = 0x0;
15598:../../..\hal\include/device/stm32g431.h **** 
15599:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_FRES = 0x1;           // FRES
15600:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_PDWN = 0x2;           // PDWN
15601:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_LP_MODE = 0x4;        // LP_MODE
15602:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_FSUSP = 0x8;          // FSUSP
15603:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_RESUME = 0x10;        // RESUME
15604:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_L1RESUME = 0x20;      // L1RESUME
15605:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_L1REQM = 0x80;        // L1REQM
15606:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_ESOFM = 0x100;        // ESOFM
15607:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_SOFM = 0x200;         // SOFM
15608:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_RESETM = 0x400;       // RESETM
15609:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_SUSPM = 0x800;        // SUSPM
15610:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_WKUPM = 0x1000;       // WKUPM
15611:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_ERRM = 0x2000;        // ERRM
15612:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_PMAOVRM = 0x4000;     // PMAOVRM
15613:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CNTR_CTRM = 0x8000;        // CTRM
15614:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CNTR_RESET_VALUE = 0x0;
15615:../../..\hal\include/device/stm32g431.h **** 
15616:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15617:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_EP_ID =               // EP_ID (4 bits)
15618:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xf>::value<X>();
15619:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_DIR = 0x10;           // DIR
15620:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_L1REQ = 0x80;         // L1REQ
15621:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_ESOF = 0x100;         // ESOF
15622:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_SOF = 0x200;          // SOF
15623:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_RESET = 0x400;        // RESET
15624:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_SUSP = 0x800;         // SUSP
15625:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_WKUP = 0x1000;        // WKUP
15626:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_ERR = 0x2000;         // ERR
15627:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_PMAOVR = 0x4000;      // PMAOVR
15628:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISTR_CTR = 0x8000;         // CTR
15629:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISTR_RESET_VALUE = 0x0;
15630:../../..\hal\include/device/stm32g431.h **** 
15631:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15632:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FNR_FN =                  // FN (11 bits)
15633:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7ff>::value<X>();
15634:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15635:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FNR_LSOF =                // LSOF (2 bits)
15636:../../..\hal\include/device/stm32g431.h ****         bit_field_t<11, 0x3>::value<X>();
15637:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FNR_LCK = 0x2000;         // LCK
15638:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FNR_RXDM = 0x4000;        // RXDM
15639:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t FNR_RXDP = 0x8000;        // RXDP
15640:../../..\hal\include/device/stm32g431.h ****     static const uint32_t FNR_RESET_VALUE = 0x0;
15641:../../..\hal\include/device/stm32g431.h **** 
15642:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15643:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DADDR_ADD =                 // ADD (7 bits)
15644:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0x7f>::value<X>();
15645:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t DADDR_EF = 0x80;            // EF
15646:../../..\hal\include/device/stm32g431.h ****     static const uint32_t DADDR_RESET_VALUE = 0x0;
15647:../../..\hal\include/device/stm32g431.h **** 
15648:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15649:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t BTABLE_BTABLE =              // BTABLE (13 bits)
15650:../../..\hal\include/device/stm32g431.h ****         bit_field_t<3, 0x1fff>::value<X>();
15651:../../..\hal\include/device/stm32g431.h ****     static const uint32_t BTABLE_RESET_VALUE = 0x0;
15652:../../..\hal\include/device/stm32g431.h **** };
15653:../../..\hal\include/device/stm32g431.h **** 
15654:../../..\hal\include/device/stm32g431.h **** static usb_fs_device_t& USB_FS_device = *reinterpret_cast<usb_fs_device_t*>(0x40005c00);
15655:../../..\hal\include/device/stm32g431.h **** 
15656:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_USB_FS_device
15657:../../..\hal\include/device/stm32g431.h **** 
15658:../../..\hal\include/device/stm32g431.h **** 
15659:../../..\hal\include/device/stm32g431.h **** ////
15660:../../..\hal\include/device/stm32g431.h **** //
15661:../../..\hal\include/device/stm32g431.h **** //    CRS
15662:../../..\hal\include/device/stm32g431.h **** //
15663:../../..\hal\include/device/stm32g431.h **** ////
15664:../../..\hal\include/device/stm32g431.h **** 
15665:../../..\hal\include/device/stm32g431.h **** struct crs_t
15666:../../..\hal\include/device/stm32g431.h **** {
15667:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CR;                   // CRS control register
15668:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    CFGR;                 // [Read-write] This register can be written only wh
15669:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ISR;                  // [Read-only] CRS interrupt and status register
15670:../../..\hal\include/device/stm32g431.h ****     volatile uint32_t    ICR;                  // [Read-write] CRS interrupt flag clear register
15671:../../..\hal\include/device/stm32g431.h **** 
15672:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SYNCOKIE = 0x1;       // SYNC event OK interrupt enable, Read-writ
15673:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SYNCWARNIE = 0x2;     // SYNC warning interrupt enable, Read-write
15674:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ERRIE = 0x4;          // Synchronization or trimming error interru
15675:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_ESYNCIE = 0x8;        // Expected SYNC interrupt enable, Read-writ
15676:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_CEN = 0x20;           // Frequency error counter enable This bit e
15677:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_AUTOTRIMEN = 0x40;    // Automatic trimming enable This bit enable
15678:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_SWSYNC = 0x80;        // Generate software SYNC event This bit is 
15679:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15680:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CR_TRIM =                // HSI48 oscillator smooth trimming These bi
15681:../../..\hal\include/device/stm32g431.h ****         bit_field_t<8, 0x7f>::value<X>();
15682:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CR_RESET_VALUE = 0x4000;
15683:../../..\hal\include/device/stm32g431.h **** 
15684:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15685:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_RELOAD =              // Counter reload value RELOAD is the valu
15686:../../..\hal\include/device/stm32g431.h ****         bit_field_t<0, 0xffff>::value<X>();
15687:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15688:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_FELIM =               // Frequency error limit FELIM contains th
15689:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xff>::value<X>();
15690:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15691:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_SYNCDIV =             // SYNC divider These bits are set and cle
15692:../../..\hal\include/device/stm32g431.h ****         bit_field_t<24, 0x7>::value<X>();
15693:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15694:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_SYNCSRC =             // SYNC signal source selection These bits
15695:../../..\hal\include/device/stm32g431.h ****         bit_field_t<28, 0x3>::value<X>();
15696:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t CFGR_SYNCPOL = 0x80000000; // SYNC polarity selection This bit is set
15697:../../..\hal\include/device/stm32g431.h ****     static const uint32_t CFGR_RESET_VALUE = 0x2022bb7f;
15698:../../..\hal\include/device/stm32g431.h **** 
15699:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SYNCOKF = 0x1;        // SYNC event OK flag This flag is set by h
15700:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SYNCWARNF = 0x2;      // SYNC warning flag This flag is set by ha
15701:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ERRF = 0x4;           // Error flag This flag is set by hardware 
15702:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_ESYNCF = 0x8;         // Expected SYNC flag This flag is set by h
15703:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SYNCERR = 0x100;      // SYNC error This flag is set by hardware 
15704:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_SYNCMISS = 0x200;     // SYNC missed This flag is set by hardware
15705:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_TRIMOVF = 0x400;      // Trimming overflow or underflow This flag
15706:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FEDIR = 0x8000;       // Frequency error direction FEDIR is the c
15707:../../..\hal\include/device/stm32g431.h ****     template<uint32_t X>
15708:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ISR_FECAP =               // Frequency error capture FECAP is the fre
15709:../../..\hal\include/device/stm32g431.h ****         bit_field_t<16, 0xffff>::value<X>();
15710:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ISR_RESET_VALUE = 0x0;
15711:../../..\hal\include/device/stm32g431.h **** 
15712:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_SYNCOKC = 0x1;        // SYNC event OK clear flag Writing 1 to th
15713:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_SYNCWARNC = 0x2;      // SYNC warning clear flag Writing 1 to thi
15714:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ERRC = 0x4;           // Error clear flag Writing 1 to this bit c
15715:../../..\hal\include/device/stm32g431.h ****     static constexpr uint32_t ICR_ESYNCC = 0x8;         // Expected SYNC clear flag Writing 1 to th
15716:../../..\hal\include/device/stm32g431.h ****     static const uint32_t ICR_RESET_VALUE = 0x0;
15717:../../..\hal\include/device/stm32g431.h **** };
15718:../../..\hal\include/device/stm32g431.h **** 
15719:../../..\hal\include/device/stm32g431.h **** static crs_t& CRS = *reinterpret_cast<crs_t*>(0x40002000);
15720:../../..\hal\include/device/stm32g431.h **** 
15721:../../..\hal\include/device/stm32g431.h **** #define HAVE_PERIPHERAL_CRS
15722:../../..\hal\include/device/stm32g431.h **** 
15723:../../..\hal\include/device/stm32g431.h **** 
15724:../../..\hal\include/device/stm32g431.h **** template<typename PERIPHERAL> struct peripheral_traits {};
15725:../../..\hal\include/device/stm32g431.h **** 
15726:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<crc_t>
15727:../../..\hal\include/device/stm32g431.h **** {
15728:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_CRCEN; }
15729:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_CRCEN; }
15730:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB1RSTR |= rcc_t::AHB1RSTR_CRCRST; }
15731:../../..\hal\include/device/stm32g431.h **** };
15732:../../..\hal\include/device/stm32g431.h **** 
15733:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<wwdg_t>
15734:../../..\hal\include/device/stm32g431.h **** {
15735:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_WWDGEN; }
15736:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_WWDGEN; }
15737:../../..\hal\include/device/stm32g431.h **** };
15738:../../..\hal\include/device/stm32g431.h **** 
15739:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<i2c1_t>
15740:../../..\hal\include/device/stm32g431.h **** {
15741:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_I2C1EN; }
15742:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_I2C1EN; }
15743:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_I2C1RST; }
15744:../../..\hal\include/device/stm32g431.h **** };
15745:../../..\hal\include/device/stm32g431.h **** 
15746:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<i2c2_t>
15747:../../..\hal\include/device/stm32g431.h **** {
15748:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_I2C2EN; }
15749:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_I2C2EN; }
15750:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_I2C2RST; }
15751:../../..\hal\include/device/stm32g431.h **** };
15752:../../..\hal\include/device/stm32g431.h **** 
15753:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<pwr_t>
15754:../../..\hal\include/device/stm32g431.h **** {
15755:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_PWREN; }
15756:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_PWREN; }
15757:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_PWRRST; }
15758:../../..\hal\include/device/stm32g431.h **** };
15759:../../..\hal\include/device/stm32g431.h **** 
15760:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<rng_t>
15761:../../..\hal\include/device/stm32g431.h **** {
15762:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_RNGEN; }
15763:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_RNGEN; }
15764:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_RNGRST; }
15765:../../..\hal\include/device/stm32g431.h **** };
15766:../../..\hal\include/device/stm32g431.h **** 
15767:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpioa_t>
15768:../../..\hal\include/device/stm32g431.h **** {
15769:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOAEN; }
15770:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOAEN; }
15771:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOARST; }
15772:../../..\hal\include/device/stm32g431.h **** };
15773:../../..\hal\include/device/stm32g431.h **** 
15774:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpiob_t>
15775:../../..\hal\include/device/stm32g431.h **** {
15776:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOBEN; }
15777:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOBEN; }
15778:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOBRST; }
15779:../../..\hal\include/device/stm32g431.h **** };
15780:../../..\hal\include/device/stm32g431.h **** 
15781:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpioc_t>
15782:../../..\hal\include/device/stm32g431.h **** {
15783:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOCEN; }
15784:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOCEN; }
15785:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOCRST; }
15786:../../..\hal\include/device/stm32g431.h **** };
15787:../../..\hal\include/device/stm32g431.h **** 
15788:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpiod_t>
15789:../../..\hal\include/device/stm32g431.h **** {
15790:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIODEN; }
15791:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIODEN; }
15792:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIODRST; }
15793:../../..\hal\include/device/stm32g431.h **** };
15794:../../..\hal\include/device/stm32g431.h **** 
15795:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpioe_t>
15796:../../..\hal\include/device/stm32g431.h **** {
15797:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOEEN; }
15798:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOEEN; }
15799:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOERST; }
15800:../../..\hal\include/device/stm32g431.h **** };
15801:../../..\hal\include/device/stm32g431.h **** 
15802:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpiof_t>
15803:../../..\hal\include/device/stm32g431.h **** {
15804:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOFEN; }
15805:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOFEN; }
15806:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOFRST; }
15807:../../..\hal\include/device/stm32g431.h **** };
15808:../../..\hal\include/device/stm32g431.h **** 
15809:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<gpiog_t>
15810:../../..\hal\include/device/stm32g431.h **** {
15811:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB2ENR |= rcc_t::AHB2ENR_GPIOGEN; }
15812:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOGEN; }
15813:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_GPIOGRST; }
15814:../../..\hal\include/device/stm32g431.h **** };
15815:../../..\hal\include/device/stm32g431.h **** 
15816:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim15_t>
15817:../../..\hal\include/device/stm32g431.h **** {
15818:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_TIM15EN; }
15819:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_TIM15EN; }
15820:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_TIM15RST; }
15821:../../..\hal\include/device/stm32g431.h **** };
15822:../../..\hal\include/device/stm32g431.h **** 
15823:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim16_t>
15824:../../..\hal\include/device/stm32g431.h **** {
15825:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_TIM16EN; }
15826:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_TIM16EN; }
15827:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_TIM16RST; }
15828:../../..\hal\include/device/stm32g431.h **** };
15829:../../..\hal\include/device/stm32g431.h **** 
15830:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim17_t>
15831:../../..\hal\include/device/stm32g431.h **** {
15832:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_TIM17EN; }
15833:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_TIM17EN; }
15834:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_TIM17RST; }
15835:../../..\hal\include/device/stm32g431.h **** };
15836:../../..\hal\include/device/stm32g431.h **** 
15837:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim1_t>
15838:../../..\hal\include/device/stm32g431.h **** {
15839:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_TIM1EN; }
15840:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_TIM1EN; }
15841:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_TIM1RST; }
15842:../../..\hal\include/device/stm32g431.h **** };
15843:../../..\hal\include/device/stm32g431.h **** 
15844:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim8_t>
15845:../../..\hal\include/device/stm32g431.h **** {
15846:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_TIM8EN; }
15847:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_TIM8EN; }
15848:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_TIM8RST; }
15849:../../..\hal\include/device/stm32g431.h **** };
15850:../../..\hal\include/device/stm32g431.h **** 
15851:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim2_t>
15852:../../..\hal\include/device/stm32g431.h **** {
15853:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_TIM2EN; }
15854:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_TIM2EN; }
15855:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_TIM2RST; }
15856:../../..\hal\include/device/stm32g431.h **** };
15857:../../..\hal\include/device/stm32g431.h **** 
15858:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim3_t>
15859:../../..\hal\include/device/stm32g431.h **** {
15860:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_TIM3EN; }
15861:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_TIM3EN; }
15862:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_TIM3RST; }
15863:../../..\hal\include/device/stm32g431.h **** };
15864:../../..\hal\include/device/stm32g431.h **** 
15865:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim4_t>
15866:../../..\hal\include/device/stm32g431.h **** {
15867:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_TIM4EN; }
15868:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_TIM4EN; }
15869:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_TIM4RST; }
15870:../../..\hal\include/device/stm32g431.h **** };
15871:../../..\hal\include/device/stm32g431.h **** 
15872:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim6_t>
15873:../../..\hal\include/device/stm32g431.h **** {
15874:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_TIM6EN; }
15875:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_TIM6EN; }
15876:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_TIM6RST; }
15877:../../..\hal\include/device/stm32g431.h **** };
15878:../../..\hal\include/device/stm32g431.h **** 
15879:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<tim7_t>
15880:../../..\hal\include/device/stm32g431.h **** {
15881:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_TIM7EN; }
15882:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_TIM7EN; }
15883:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_TIM7RST; }
15884:../../..\hal\include/device/stm32g431.h **** };
15885:../../..\hal\include/device/stm32g431.h **** 
15886:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<usart1_t>
15887:../../..\hal\include/device/stm32g431.h **** {
15888:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_USART1EN; }
15889:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_USART1EN; }
15890:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_USART1RST; }
15891:../../..\hal\include/device/stm32g431.h **** };
15892:../../..\hal\include/device/stm32g431.h **** 
15893:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<usart2_t>
15894:../../..\hal\include/device/stm32g431.h **** {
15895:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_USART2EN; }
15896:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART2EN; }
15897:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_USART2RST; }
15898:../../..\hal\include/device/stm32g431.h **** };
15899:../../..\hal\include/device/stm32g431.h **** 
15900:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<usart3_t>
15901:../../..\hal\include/device/stm32g431.h **** {
15902:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_USART3EN; }
15903:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART3EN; }
15904:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_USART3RST; }
15905:../../..\hal\include/device/stm32g431.h **** };
15906:../../..\hal\include/device/stm32g431.h **** 
15907:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<uart4_t>
15908:../../..\hal\include/device/stm32g431.h **** {
15909:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_UART4EN; }
15910:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_UART4EN; }
15911:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_UART4RST; }
15912:../../..\hal\include/device/stm32g431.h **** };
15913:../../..\hal\include/device/stm32g431.h **** 
15914:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<lpuart1_t>
15915:../../..\hal\include/device/stm32g431.h **** {
15916:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR2 |= rcc_t::APB1ENR2_LPUART1EN; }
15917:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR2 &= ~rcc_t::APB1ENR2_LPUART1EN; }
15918:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR2 |= rcc_t::APB1RSTR2_LPUART1RST; }
15919:../../..\hal\include/device/stm32g431.h **** };
15920:../../..\hal\include/device/stm32g431.h **** 
15921:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<spi1_t>
15922:../../..\hal\include/device/stm32g431.h **** {
15923:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_SPI1EN; }
15924:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_SPI1EN; }
15925:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_SPI1RST; }
15926:../../..\hal\include/device/stm32g431.h **** };
15927:../../..\hal\include/device/stm32g431.h **** 
15928:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<spi3_t>
15929:../../..\hal\include/device/stm32g431.h **** {
15930:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_SPI3RST; }
15931:../../..\hal\include/device/stm32g431.h **** };
15932:../../..\hal\include/device/stm32g431.h **** 
15933:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<spi2_t>
15934:../../..\hal\include/device/stm32g431.h **** {
15935:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_SPI2EN; }
15936:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_SPI2EN; }
15937:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_SPI2RST; }
15938:../../..\hal\include/device/stm32g431.h **** };
15939:../../..\hal\include/device/stm32g431.h **** 
15940:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dma1_t>
15941:../../..\hal\include/device/stm32g431.h **** {
15942:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_DMA1EN; }
15943:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_DMA1EN; }
15944:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB1RSTR |= rcc_t::AHB1RSTR_DMA1RST; }
15945:../../..\hal\include/device/stm32g431.h **** };
15946:../../..\hal\include/device/stm32g431.h **** 
15947:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dma2_t>
15948:../../..\hal\include/device/stm32g431.h **** {
15949:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_DMA2EN; }
15950:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_DMA2EN; }
15951:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB1RSTR |= rcc_t::AHB1RSTR_DMA2RST; }
15952:../../..\hal\include/device/stm32g431.h **** };
15953:../../..\hal\include/device/stm32g431.h **** 
15954:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dmamux_t>
15955:../../..\hal\include/device/stm32g431.h **** {
15956:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_DMAMUXEN; }
15957:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_DMAMUXEN; }
15958:../../..\hal\include/device/stm32g431.h **** };
15959:../../..\hal\include/device/stm32g431.h **** 
15960:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<syscfg_t>
15961:../../..\hal\include/device/stm32g431.h **** {
15962:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB2ENR |= rcc_t::APB2ENR_SYSCFGEN; }
15963:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB2ENR &= ~rcc_t::APB2ENR_SYSCFGEN; }
15964:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB2RSTR |= rcc_t::APB2RSTR_SYSCFGRST; }
15965:../../..\hal\include/device/stm32g431.h **** };
15966:../../..\hal\include/device/stm32g431.h **** 
15967:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dac2_t>
15968:../../..\hal\include/device/stm32g431.h **** {
15969:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_DAC2RST; }
15970:../../..\hal\include/device/stm32g431.h **** };
15971:../../..\hal\include/device/stm32g431.h **** 
15972:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dac3_t>
15973:../../..\hal\include/device/stm32g431.h **** {
15974:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_DAC3RST; }
15975:../../..\hal\include/device/stm32g431.h **** };
15976:../../..\hal\include/device/stm32g431.h **** 
15977:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<dac4_t>
15978:../../..\hal\include/device/stm32g431.h **** {
15979:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB2RSTR |= rcc_t::AHB2RSTR_DAC4RST; }
15980:../../..\hal\include/device/stm32g431.h **** };
15981:../../..\hal\include/device/stm32g431.h **** 
15982:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<fmac_t>
15983:../../..\hal\include/device/stm32g431.h **** {
15984:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_FMACEN; }
15985:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_FMACEN; }
15986:../../..\hal\include/device/stm32g431.h **** };
15987:../../..\hal\include/device/stm32g431.h **** 
15988:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<cordic_t>
15989:../../..\hal\include/device/stm32g431.h **** {
15990:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.AHB1ENR |= rcc_t::AHB1ENR_CORDICEN; }
15991:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB1ENR &= ~rcc_t::AHB1ENR_CORDICEN; }
15992:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.AHB1RSTR |= rcc_t::AHB1RSTR_CORDICRST; }
15993:../../..\hal\include/device/stm32g431.h **** };
15994:../../..\hal\include/device/stm32g431.h **** 
15995:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<fdcan_t>
15996:../../..\hal\include/device/stm32g431.h **** {
15997:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_FDCANEN; }
15998:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_FDCANEN; }
15999:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_FDCANRST; }
16000:../../..\hal\include/device/stm32g431.h **** };
16001:../../..\hal\include/device/stm32g431.h **** 
16002:../../..\hal\include/device/stm32g431.h **** template<> struct peripheral_traits<crs_t>
16003:../../..\hal\include/device/stm32g431.h **** {
16004:../../..\hal\include/device/stm32g431.h ****     static void enable() { RCC.APB1ENR1 |= rcc_t::APB1ENR1_CRSEN; }
16005:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_CRSEN; }
16006:../../..\hal\include/device/stm32g431.h ****     static void reset() { RCC.APB1RSTR1 |= rcc_t::APB1RSTR1_CRSRST; }
16007:../../..\hal\include/device/stm32g431.h **** };
16008:../../..\hal\include/device/stm32g431.h **** 
16009:../../..\hal\include/device/stm32g431.h **** }
16010:../../..\hal\include/device/stm32g431.h **** 
16011:../../..\hal\include/device/stm32g431.h **** struct interrupt
16012:../../..\hal\include/device/stm32g431.h **** {
16013:../../..\hal\include/device/stm32g431.h ****     static inline void enable() { __asm volatile ("cpsie i"); }
16014:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
  53              		.loc 4 16014 24 view .LVU4
  54              	.LBB104:
  55              		.loc 4 16014 36 view .LVU5
  56              	.LBE104:
  57              	.LBE103:
  58              	.LBE107:
  59              	.LBE113:
  60              	.LBE116:
  61              		.loc 1 114 24 is_stmt 0 view .LVU6
  62 0000 10B5     		push	{r4, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 4, -8
  65              		.cfi_offset 14, -4
  66              	.LBB117:
  67              	.LBB114:
  68              	.LBB108:
  69              	.LBB106:
  70              	.LBB105:
  71              		.loc 4 16014 62 view .LVU7
  72              		.syntax unified
  73              	@ 16014 "../../..\hal\include/device/stm32g431.h" 1
  74 0002 72B6     		cpsid i
  75              	@ 0 "" 2
  76              	.LVL1:
  77              		.loc 4 16014 62 view .LVU8
  78              		.thumb
  79              		.syntax unified
  80              	.LBE105:
  81              	.LBE106:
  82              	.LBE108:
  10:../../..\hal\include/fifo.h ****     {
  11:../../..\hal\include/fifo.h ****         hal::critical_section_t cs;         // enter critical section
  12:../../..\hal\include/fifo.h **** 
  13:../../..\hal\include/fifo.h ****         if (m_ridx == m_widx)
  83              		.loc 2 13 20 view .LVU9
  84 0004 0C4A     		ldr	r2, .L5
  85 0006 0D49     		ldr	r1, .L5+4
  86 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  87              		.loc 2 13 9 view .LVU10
  88 000a 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
  89 000c 9C42     		cmp	r4, r3
  90 000e 0FD0     		beq	.L3
  14:../../..\hal\include/fifo.h ****             return false;
  15:../../..\hal\include/fifo.h ****         x = m_buf[m_ridx++ & mask];
  91              		.loc 2 15 28 view .LVU11
  92 0010 5C1C     		adds	r4, r3, #1
  93 0012 1470     		strb	r4, [r2]
  94 0014 03F00F03 		and	r3, r3, #15
  95              		.loc 2 15 18 view .LVU12
  96 0018 094C     		ldr	r4, .L5+8
  97 001a E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
  98              		.loc 2 15 9 view .LVU13
  99 001c 0370     		strb	r3, [r0]
  16:../../..\hal\include/fifo.h ****         if (m_ridx == m_widx)               // rebase indices
 100              		.loc 2 16 9 view .LVU14
 101 001e 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 102              	.LVL2:
 103              		.loc 2 16 9 view .LVU15
 104 0020 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 105 0022 9842     		cmp	r0, r3
 106 0024 02D1     		bne	.L4
  17:../../..\hal\include/fifo.h ****             m_ridx = m_widx = 0;
 107              		.loc 2 17 13 view .LVU16
 108 0026 0023     		movs	r3, #0
 109 0028 0B70     		strb	r3, [r1]
 110 002a 1370     		strb	r3, [r2]
 111              	.L4:
  18:../../..\hal\include/fifo.h ****         return true;
 112              		.loc 2 18 16 view .LVU17
 113 002c 0120     		movs	r0, #1
 114 002e 00E0     		b	.L2
 115              	.LVL3:
 116              	.L3:
  14:../../..\hal\include/fifo.h ****         x = m_buf[m_ridx++ & mask];
 117              		.loc 2 14 20 view .LVU18
 118 0030 0020     		movs	r0, #0
 119              	.LVL4:
 120              	.L2:
 121              	.LBB109:
 122              	.LBI109:
  97:../../..\hal\include/hal.h ****     ~critical_section_t() { interrupt::enable(); }
 123              		.loc 3 97 5 is_stmt 1 view .LVU19
 124              	.LBE109:
 125              	.LBE114:
 126              	.LBE117:
 127              		.loc 3 97 29 view .LVU20
 128              	.LBB118:
 129              	.LBB115:
 130              	.LBB112:
 131              	.LBB110:
 132              	.LBI110:
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 133              		.loc 4 16013 24 view .LVU21
 134              	.LBB111:
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 135              		.loc 4 16013 35 view .LVU22
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 136              		.loc 4 16013 61 is_stmt 0 view .LVU23
 137              		.syntax unified
 138              	@ 16013 "../../..\hal\include/device/stm32g431.h" 1
 139 0032 62B6     		cpsie i
 140              	@ 0 "" 2
 141              	.LVL5:
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 142              		.loc 4 16013 61 view .LVU24
 143              		.thumb
 144              		.syntax unified
 145              	.LBE111:
 146              	.LBE110:
 147              	.LBE112:
 148              	.LBE115:
 149              	.LBE118:
 115:../../..\hal\include/usart.h ****     {
 116:../../..\hal\include/usart.h ****         return fifo::get(c);
 117:../../..\hal\include/usart.h ****     }
 150              		.loc 1 117 5 view .LVU25
 151 0034 10BD     		pop	{r4, pc}
 152              	.L6:
 153 0036 00BF     		.align	2
 154              	.L5:
 155 0038 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE6m_ridxE
 156 003c 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE6m_widxE
 157 0040 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE5m_bufE
 158              		.cfi_endproc
 159              	.LFE670:
 161              		.section	.text._ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5writeEPKcm,"axG",%progbit
 162              		.align	1
 163              		.weak	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5writeEPKcm
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5writeEPKcm:
 170              	.LVL6:
 171              	.LFB671:
  99:../../..\hal\include/usart.h ****     {
 172              		.loc 1 99 21 is_stmt 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              	.LBB119:
 177              	.LBB120:
 178              	.LBB121:
 179              	.LBB122:
 180              	.LBB123:
 118:../../..\hal\include/usart.h **** 
 119:../../..\hal\include/usart.h ****     __attribute__((always_inline))
 120:../../..\hal\include/usart.h ****     static inline bool tx_empty()
 121:../../..\hal\include/usart.h ****     {
 122:../../..\hal\include/usart.h ****         return USART().ISR & _::ISR_TXE;
 181              		.loc 1 122 24 is_stmt 0 view .LVU27
 182 0000 074A     		ldr	r2, .L13
 183              	.LBE123:
 184              	.LBE122:
 185              	.LBE121:
 186              	.LBE120:
 187              	.LBE119:
  99:../../..\hal\include/usart.h ****     {
 188              		.loc 1 99 21 view .LVU28
 189 0002 30B5     		push	{r4, r5, lr}
 190              		.cfi_def_cfa_offset 12
 191              		.cfi_offset 4, -12
 192              		.cfi_offset 5, -8
 193              		.cfi_offset 14, -4
  99:../../..\hal\include/usart.h ****     {
 194              		.loc 1 99 21 view .LVU29
 195 0004 0346     		mov	r3, r0
 196 0006 4418     		adds	r4, r0, r1
 197              	.LVL7:
 198              	.L10:
 199              	.LBB131:
 101:../../..\hal\include/usart.h ****             write(*buf++);
 200              		.loc 1 101 32 discriminator 3 view .LVU30
 201 0008 A342     		cmp	r3, r4
 202 000a 06D0     		beq	.L8
 102:../../..\hal\include/usart.h ****         return len;
 203              		.loc 1 102 18 discriminator 2 view .LVU31
 204 000c 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 205              	.LVL8:
 206              	.LBB129:
 207              	.LBI120:
  87:../../..\hal\include/usart.h ****     {
 208              		.loc 1 87 24 is_stmt 1 discriminator 2 view .LVU32
 209              	.L9:
 210              	.LBB127:
 211              	.LBB125:
 212              	.LBI122:
 120:../../..\hal\include/usart.h ****     {
 213              		.loc 1 120 24 view .LVU33
 214              	.LBE125:
 215              	.LBE127:
 216              	.LBE129:
 217              	.LBE131:
  28:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
 218              		.loc 1 28 32 view .LVU34
 219              	.LBB132:
 220              	.LBB130:
 221              	.LBB128:
 222              	.LBB126:
 223              	.LBB124:
 224              		.loc 1 122 24 is_stmt 0 view .LVU35
 225 0010 D569     		ldr	r5, [r2, #28]
 226              	.LBE124:
 227              	.LBE126:
  89:../../..\hal\include/usart.h ****         USART2.TDR = x;
 228              		.loc 1 89 16 view .LVU36
 229 0012 2D06     		lsls	r5, r5, #24
 230 0014 FCD5     		bpl	.L9
  90:../../..\hal\include/usart.h ****     }
 231              		.loc 1 90 9 view .LVU37
 232 0016 9062     		str	r0, [r2, #40]
 233              	.LVL9:
  90:../../..\hal\include/usart.h ****     }
 234              		.loc 1 90 9 view .LVU38
 235              	.LBE128:
 236              	.LBE130:
 101:../../..\hal\include/usart.h ****             write(*buf++);
 237              		.loc 1 101 9 view .LVU39
 238 0018 F6E7     		b	.L10
 239              	.LVL10:
 240              	.L8:
 101:../../..\hal\include/usart.h ****             write(*buf++);
 241              		.loc 1 101 9 view .LVU40
 242              	.LBE132:
 104:../../..\hal\include/usart.h **** 
 243              		.loc 1 104 5 view .LVU41
 244 001a 0846     		mov	r0, r1
 245 001c 30BD     		pop	{r4, r5, pc}
 246              	.L14:
 247 001e 00BF     		.align	2
 248              	.L13:
 249 0020 00440040 		.word	1073759232
 250              		.cfi_endproc
 251              	.LFE671:
 253              		.section	.text._ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv,"axG",%progbits,_ZN11stm
 254              		.align	1
 255              		.weak	_ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 259              		.fpu fpv4-sp-d16
 261              	_ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv:
 262              	.LFB37:
15769:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOAEN; }
 263              		.loc 4 15769 17 is_stmt 1 view -0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
15769:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOAEN; }
 268              		.loc 4 15769 28 view .LVU43
15769:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOAEN; }
 269              		.loc 4 15769 40 is_stmt 0 view .LVU44
 270 0000 024A     		ldr	r2, .L16
 271 0002 D36C     		ldr	r3, [r2, #76]
 272 0004 43F00103 		orr	r3, r3, #1
 273 0008 D364     		str	r3, [r2, #76]
15769:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.AHB2ENR &= ~rcc_t::AHB2ENR_GPIOAEN; }
 274              		.loc 4 15769 67 view .LVU45
 275 000a 7047     		bx	lr
 276              	.L17:
 277              		.align	2
 278              	.L16:
 279 000c 00100240 		.word	1073876992
 280              		.cfi_endproc
 281              	.LFE37:
 283              		.section	.text._read_r,"ax",%progbits
 284              		.align	1
 285              		.global	_read_r
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu fpv4-sp-d16
 291              	_read_r:
 292              	.LVL11:
 293              	.LFB640:
 294              		.file 5 "../../..\\hal\\include/redirect.h"
   1:../../..\hal\include/redirect.h **** #pragma once
   2:../../..\hal\include/redirect.h **** 
   3:../../..\hal\include/redirect.h **** #include <cstdio>
   4:../../..\hal\include/redirect.h **** 
   5:../../..\hal\include/redirect.h **** using hal::sys_tick;
   6:../../..\hal\include/redirect.h **** using namespace hal::gpio;
   7:../../..\hal\include/redirect.h **** using namespace hal::usart;
   8:../../..\hal\include/redirect.h **** 
   9:../../..\hal\include/redirect.h **** typedef usart_t<2, PA2, PA3> serial;
  10:../../..\hal\include/redirect.h **** typedef output_t<PA5> ld4;
  11:../../..\hal\include/redirect.h **** 
  12:../../..\hal\include/redirect.h **** class stdio_t
  13:../../..\hal\include/redirect.h **** {
  14:../../..\hal\include/redirect.h **** public:
  15:../../..\hal\include/redirect.h ****     template<typename T>
  16:../../..\hal\include/redirect.h ****     static void bind_stdin() { m_0 = T::read; }
  17:../../..\hal\include/redirect.h **** 
  18:../../..\hal\include/redirect.h ****     template<typename T>
  19:../../..\hal\include/redirect.h ****     static void bind_stdout() { m_1 = T::write; }
  20:../../..\hal\include/redirect.h **** 
  21:../../..\hal\include/redirect.h ****     template<typename T>
  22:../../..\hal\include/redirect.h ****     static void bind_stderr() { m_2 = T::write; }
  23:../../..\hal\include/redirect.h **** 
  24:../../..\hal\include/redirect.h ****     template<typename T>
  25:../../..\hal\include/redirect.h ****     static void bind()
  26:../../..\hal\include/redirect.h ****     {
  27:../../..\hal\include/redirect.h ****         bind_stdin<T>();
  28:../../..\hal\include/redirect.h ****         bind_stdout<T>();
  29:../../..\hal\include/redirect.h ****         bind_stderr<T>();
  30:../../..\hal\include/redirect.h ****     }
  31:../../..\hal\include/redirect.h **** 
  32:../../..\hal\include/redirect.h **** public:
  33:../../..\hal\include/redirect.h ****     static bool (*m_0)(char& c);
  34:../../..\hal\include/redirect.h ****     static uint32_t (*m_1)(const char *buf, uint32_t len);
  35:../../..\hal\include/redirect.h ****     static uint32_t (*m_2)(const char *buf, uint32_t len);
  36:../../..\hal\include/redirect.h **** };
  37:../../..\hal\include/redirect.h **** 
  38:../../..\hal\include/redirect.h **** bool (*stdio_t::m_0)(char& c) = 0;
  39:../../..\hal\include/redirect.h **** uint32_t (*stdio_t::m_1)(const char *buf, uint32_t len) = 0;
  40:../../..\hal\include/redirect.h **** uint32_t (*stdio_t::m_2)(const char *buf, uint32_t len) = 0;
  41:../../..\hal\include/redirect.h **** 
  42:../../..\hal\include/redirect.h **** extern "C" long _read_r(void *reent, int fd, void *buf, size_t cnt)
  43:../../..\hal\include/redirect.h **** {
 295              		.loc 5 43 1 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
  44:../../..\hal\include/redirect.h ****     char *p = reinterpret_cast<char*>(buf);
 299              		.loc 5 44 5 view .LVU47
  43:../../..\hal\include/redirect.h ****     char *p = reinterpret_cast<char*>(buf);
 300              		.loc 5 43 1 is_stmt 0 view .LVU48
 301 0000 38B5     		push	{r3, r4, r5, lr}
 302              		.cfi_def_cfa_offset 16
 303              		.cfi_offset 3, -16
 304              		.cfi_offset 4, -12
 305              		.cfi_offset 5, -8
 306              		.cfi_offset 14, -4
  43:../../..\hal\include/redirect.h ****     char *p = reinterpret_cast<char*>(buf);
 307              		.loc 5 43 1 view .LVU49
 308 0002 1546     		mov	r5, r2
 309              	.LVL12:
  45:../../..\hal\include/redirect.h **** 
  46:../../..\hal\include/redirect.h ****     switch (fd)
 310              		.loc 5 46 5 is_stmt 1 view .LVU50
 311 0004 51B9     		cbnz	r1, .L21
  47:../../..\hal\include/redirect.h ****     {
  48:../../..\hal\include/redirect.h ****     case 0:
 312              		.loc 5 48 5 view .LVU51
  49:../../..\hal\include/redirect.h ****         if (!stdio_t::m_0 || !cnt)
 313              		.loc 5 49 9 view .LVU52
 314              		.loc 5 49 13 is_stmt 0 view .LVU53
 315 0006 074C     		ldr	r4, .L26
 316              		.loc 5 49 9 view .LVU54
 317 0008 2068     		ldr	r0, [r4]
 318              	.LVL13:
 319              		.loc 5 49 9 view .LVU55
 320 000a 30B1     		cbz	r0, .L18
 321              		.loc 5 49 27 discriminator 1 view .LVU56
 322 000c 43B1     		cbz	r3, .L23
 323              	.LVL14:
 324              	.L20:
  50:../../..\hal\include/redirect.h ****             return 0;
  51:../../..\hal\include/redirect.h ****         while (!stdio_t::m_0(*p));   // busy-wait until we get a character
 325              		.loc 5 51 9 is_stmt 1 view .LVU57
 326              		.loc 5 51 29 is_stmt 0 view .LVU58
 327 000e 2368     		ldr	r3, [r4]
 328 0010 2846     		mov	r0, r5
 329 0012 9847     		blx	r3
 330              	.LVL15:
 331              		.loc 5 51 16 view .LVU59
 332 0014 0028     		cmp	r0, #0
 333 0016 FAD0     		beq	.L20
  52:../../..\hal\include/redirect.h ****         return 1;
 334              		.loc 5 52 16 view .LVU60
 335 0018 0120     		movs	r0, #1
 336              	.L18:
  53:../../..\hal\include/redirect.h ****     default:
  54:../../..\hal\include/redirect.h ****         return 0;
  55:../../..\hal\include/redirect.h ****     }
  56:../../..\hal\include/redirect.h **** }
 337              		.loc 5 56 1 view .LVU61
 338 001a 38BD     		pop	{r3, r4, r5, pc}
 339              	.LVL16:
 340              	.L21:
  54:../../..\hal\include/redirect.h ****     }
 341              		.loc 5 54 16 view .LVU62
 342 001c 0020     		movs	r0, #0
 343              	.LVL17:
  54:../../..\hal\include/redirect.h ****     }
 344              		.loc 5 54 16 view .LVU63
 345 001e FCE7     		b	.L18
 346              	.L23:
 347 0020 1846     		mov	r0, r3
 348 0022 FAE7     		b	.L18
 349              	.L27:
 350              		.align	2
 351              	.L26:
 352 0024 00000000 		.word	.LANCHOR0
 353              		.cfi_endproc
 354              	.LFE640:
 356              		.section	.text._write_r,"ax",%progbits
 357              		.align	1
 358              		.global	_write_r
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu fpv4-sp-d16
 364              	_write_r:
 365              	.LVL18:
 366              	.LFB641:
  57:../../..\hal\include/redirect.h **** 
  58:../../..\hal\include/redirect.h **** extern "C" long _write_r(struct _reent *ptr, int fd, const void *buf, size_t cnt)
  59:../../..\hal\include/redirect.h **** {
 367              		.loc 5 59 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
  60:../../..\hal\include/redirect.h ****     const char *p = reinterpret_cast<const char*>(buf);
 372              		.loc 5 60 5 view .LVU65
  61:../../..\hal\include/redirect.h **** 
  62:../../..\hal\include/redirect.h ****     switch (fd)
 373              		.loc 5 62 5 is_stmt 0 view .LVU66
 374 0000 0129     		cmp	r1, #1
  59:../../..\hal\include/redirect.h ****     const char *p = reinterpret_cast<const char*>(buf);
 375              		.loc 5 59 1 view .LVU67
 376 0002 10B4     		push	{r4}
 377              		.cfi_def_cfa_offset 4
 378              		.cfi_offset 4, -4
  59:../../..\hal\include/redirect.h ****     const char *p = reinterpret_cast<const char*>(buf);
 379              		.loc 5 59 1 view .LVU68
 380 0004 1046     		mov	r0, r2
 381              	.LVL19:
 382              		.loc 5 62 5 is_stmt 1 view .LVU69
 383 0006 05D0     		beq	.L29
 384 0008 0229     		cmp	r1, #2
 385 000a 0CD0     		beq	.L30
  63:../../..\hal\include/redirect.h ****     {
  64:../../..\hal\include/redirect.h ****         case 1: return stdio_t::m_1 ? stdio_t::m_1(p, cnt) : cnt;
  65:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
  66:../../..\hal\include/redirect.h ****         default: return 0;
 386              		.loc 5 66 25 is_stmt 0 view .LVU70
 387 000c 0020     		movs	r0, #0
 388              	.LVL20:
 389              	.L28:
  67:../../..\hal\include/redirect.h ****     }
  68:../../..\hal\include/redirect.h **** }
 390              		.loc 5 68 1 view .LVU71
 391 000e 5DF8044B 		ldr	r4, [sp], #4
 392              		.cfi_remember_state
 393              		.cfi_restore 4
 394              		.cfi_def_cfa_offset 0
 395 0012 7047     		bx	lr
 396              	.LVL21:
 397              	.L29:
 398              		.cfi_restore_state
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 399              		.loc 5 64 9 is_stmt 1 view .LVU72
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 400              		.loc 5 64 17 view .LVU73
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 401              		.loc 5 64 62 is_stmt 0 view .LVU74
 402 0014 084A     		ldr	r2, .L39
 403 0016 1268     		ldr	r2, [r2]
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 404              		.loc 5 64 37 view .LVU75
 405 0018 1AB1     		cbz	r2, .L32
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 406              		.loc 5 64 51 discriminator 1 view .LVU76
 407 001a 1946     		mov	r1, r3
 408              	.LVL22:
 409              		.loc 5 68 1 discriminator 1 view .LVU77
 410 001c 5DF8044B 		ldr	r4, [sp], #4
 411              		.cfi_remember_state
 412              		.cfi_restore 4
 413              		.cfi_def_cfa_offset 0
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 414              		.loc 5 64 51 discriminator 1 view .LVU78
 415 0020 1047     		bx	r2
 416              	.LVL23:
 417              	.L32:
 418              		.cfi_restore_state
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 419              		.loc 5 64 37 discriminator 2 view .LVU79
 420 0022 1846     		mov	r0, r3
 421              	.LVL24:
  64:../../..\hal\include/redirect.h ****         case 2: return stdio_t::m_2 ? stdio_t::m_2(p, cnt) : cnt;
 422              		.loc 5 64 37 discriminator 2 view .LVU80
 423 0024 F3E7     		b	.L28
 424              	.LVL25:
 425              	.L30:
  65:../../..\hal\include/redirect.h ****         default: return 0;
 426              		.loc 5 65 9 is_stmt 1 view .LVU81
  65:../../..\hal\include/redirect.h ****         default: return 0;
 427              		.loc 5 65 17 view .LVU82
  65:../../..\hal\include/redirect.h ****         default: return 0;
 428              		.loc 5 65 62 is_stmt 0 view .LVU83
 429 0026 054A     		ldr	r2, .L39+4
 430 0028 1468     		ldr	r4, [r2]
  65:../../..\hal\include/redirect.h ****         default: return 0;
 431              		.loc 5 65 37 view .LVU84
 432 002a 002C     		cmp	r4, #0
 433 002c F9D0     		beq	.L32
  65:../../..\hal\include/redirect.h ****         default: return 0;
 434              		.loc 5 65 51 discriminator 1 view .LVU85
 435 002e 1946     		mov	r1, r3
 436              	.LVL26:
  65:../../..\hal\include/redirect.h ****         default: return 0;
 437              		.loc 5 65 51 discriminator 1 view .LVU86
 438 0030 2346     		mov	r3, r4
 439              	.LVL27:
 440              		.loc 5 68 1 discriminator 1 view .LVU87
 441 0032 5DF8044B 		ldr	r4, [sp], #4
 442              		.cfi_restore 4
 443              		.cfi_def_cfa_offset 0
  65:../../..\hal\include/redirect.h ****         default: return 0;
 444              		.loc 5 65 51 discriminator 1 view .LVU88
 445 0036 1847     		bx	r3
 446              	.LVL28:
 447              	.L40:
  65:../../..\hal\include/redirect.h ****         default: return 0;
 448              		.loc 5 65 51 discriminator 1 view .LVU89
 449              		.align	2
 450              	.L39:
 451 0038 00000000 		.word	.LANCHOR1
 452 003c 00000000 		.word	.LANCHOR2
 453              		.cfi_endproc
 454              	.LFE641:
 456              		.section	.text._Z7handlerILN9interrupt11interrupt_tE38EEvv,"ax",%progbits
 457              		.align	1
 458              		.global	_Z7handlerILN9interrupt11interrupt_tE38EEvv
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	_Z7handlerILN9interrupt11interrupt_tE38EEvv:
 465              	.LFB647:
 466              		.file 6 "..\\ADC/Main.cpp"
   1:..\ADC/Main.cpp **** #include <stdlib.h>
   2:..\ADC/Main.cpp **** #include <usart.h>
   3:..\ADC/Main.cpp **** #include <redirect.h>
   4:..\ADC/Main.cpp **** #include <cstring>
   5:..\ADC/Main.cpp **** 
   6:..\ADC/Main.cpp **** using hal::sys_tick;
   7:..\ADC/Main.cpp **** using namespace hal::gpio;
   8:..\ADC/Main.cpp **** using namespace hal::usart;
   9:..\ADC/Main.cpp **** 
  10:..\ADC/Main.cpp **** typedef usart_t<2, PA2, PA3> serial;
  11:..\ADC/Main.cpp **** typedef output_t<PA5> ld4;
  12:..\ADC/Main.cpp **** 
  13:..\ADC/Main.cpp **** void loop();
  14:..\ADC/Main.cpp **** 
  15:..\ADC/Main.cpp **** template<> void handler<interrupt::USART2>()
  16:..\ADC/Main.cpp **** {
 467              		.loc 6 16 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
  17:..\ADC/Main.cpp ****     ld4::toggle();
 472              		.loc 6 17 5 view .LVU91
 473              	.LBB147:
 474              	.LBI147:
 475              		.file 7 "../../..\\hal\\include/gpio.h"
   1:../../..\hal\include/gpio.h **** #pragma once
   2:../../..\hal\include/gpio.h **** 
   3:../../..\hal\include/gpio.h **** #include <hal.h>
   4:../../..\hal\include/gpio.h **** 
   5:../../..\hal\include/gpio.h **** namespace hal
   6:../../..\hal\include/gpio.h **** {
   7:../../..\hal\include/gpio.h **** 
   8:../../..\hal\include/gpio.h **** namespace gpio
   9:../../..\hal\include/gpio.h **** {
  10:../../..\hal\include/gpio.h **** 
  11:../../..\hal\include/gpio.h **** using namespace device;
  12:../../..\hal\include/gpio.h **** 
  13:../../..\hal\include/gpio.h **** enum gpio_port_t { PA, PB, PC, PD, PE, PF, PG, PH };
  14:../../..\hal\include/gpio.h **** 
  15:../../..\hal\include/gpio.h **** enum gpio_pin_t
  16:../../..\hal\include/gpio.h ****     { PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7, PA8, PA9, PA10, PA11, PA12, PA13, PA14, PA15
  17:../../..\hal\include/gpio.h ****     , PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7, PB8, PB9, PB10, PB11, PB12, PB13, PB14, PB15
  18:../../..\hal\include/gpio.h ****     , PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7, PC8, PC9, PC10, PC11, PC12, PC13, PC14, PC15
  19:../../..\hal\include/gpio.h ****     , PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7, PD8, PD9, PD10, PD11, PD12, PD13, PD14, PD15
  20:../../..\hal\include/gpio.h ****     , PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7, PE8, PE9, PE10, PE11, PE12, PE13, PE14, PE15
  21:../../..\hal\include/gpio.h ****     , PF0, PF1, PF2, PF3, PF4, PF5, PF6, PF7, PF8, PF9, PF10, PF11, PF12, PF13, PF14, PF15
  22:../../..\hal\include/gpio.h ****     , PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7, PG8, PG9, PG10, PG11, PG12, PG13, PG14, PG15
  23:../../..\hal\include/gpio.h ****     , PH0, PH1, PH2, PH3, PH4, PH5, PH6, PH7, PH8, PH9, PH10, PH11, PH12, PH13, PH14, PH15
  24:../../..\hal\include/gpio.h ****     };
  25:../../..\hal\include/gpio.h **** 
  26:../../..\hal\include/gpio.h **** static inline constexpr gpio_port_t pin_port(gpio_pin_t p)
  27:../../..\hal\include/gpio.h **** {
  28:../../..\hal\include/gpio.h ****     return static_cast<gpio_port_t>(static_cast<int>(p) >> 4);
  29:../../..\hal\include/gpio.h **** }
  30:../../..\hal\include/gpio.h **** 
  31:../../..\hal\include/gpio.h **** static inline constexpr int pin_bit(gpio_pin_t p)
  32:../../..\hal\include/gpio.h **** {
  33:../../..\hal\include/gpio.h ****     return static_cast<int>(p) & 0xf;
  34:../../..\hal\include/gpio.h **** }
  35:../../..\hal\include/gpio.h **** 
  36:../../..\hal\include/gpio.h **** enum output_type_t { push_pull, open_drain };
  37:../../..\hal\include/gpio.h **** enum output_speed_t { low_speed = 0x0, medium_speed = 0x1, high_speed = 0x3 };
  38:../../..\hal\include/gpio.h **** enum input_type_t { floating, pull_up, pull_down };
  39:../../..\hal\include/gpio.h **** 
  40:../../..\hal\include/gpio.h **** template<gpio_port_t PORT> struct port_traits {};
  41:../../..\hal\include/gpio.h **** 
  42:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOA)
  43:../../..\hal\include/gpio.h **** template<> struct port_traits<PA>
  44:../../..\hal\include/gpio.h **** {
  45:../../..\hal\include/gpio.h ****     typedef gpioa_t gpio_t;
  46:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOA; }
  47:../../..\hal\include/gpio.h **** };
  48:../../..\hal\include/gpio.h **** #endif
  49:../../..\hal\include/gpio.h **** 
  50:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOB)
  51:../../..\hal\include/gpio.h **** template<> struct port_traits<PB>
  52:../../..\hal\include/gpio.h **** {
  53:../../..\hal\include/gpio.h ****     typedef gpiob_t gpio_t;
  54:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOB; }
  55:../../..\hal\include/gpio.h **** };
  56:../../..\hal\include/gpio.h **** #endif
  57:../../..\hal\include/gpio.h **** 
  58:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOC)
  59:../../..\hal\include/gpio.h **** template<> struct port_traits<PC>
  60:../../..\hal\include/gpio.h **** {
  61:../../..\hal\include/gpio.h ****     typedef gpioc_t gpio_t;
  62:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOC; }
  63:../../..\hal\include/gpio.h **** };
  64:../../..\hal\include/gpio.h **** #endif
  65:../../..\hal\include/gpio.h **** 
  66:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOD)
  67:../../..\hal\include/gpio.h **** template<> struct port_traits<PD>
  68:../../..\hal\include/gpio.h **** {
  69:../../..\hal\include/gpio.h ****     typedef gpiod_t gpio_t;
  70:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOD; }
  71:../../..\hal\include/gpio.h **** };
  72:../../..\hal\include/gpio.h **** #endif
  73:../../..\hal\include/gpio.h **** 
  74:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOE)
  75:../../..\hal\include/gpio.h **** template<> struct port_traits<PE>
  76:../../..\hal\include/gpio.h **** {
  77:../../..\hal\include/gpio.h ****     typedef gpioe_t gpio_t;
  78:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOE; }
  79:../../..\hal\include/gpio.h **** };
  80:../../..\hal\include/gpio.h **** #endif
  81:../../..\hal\include/gpio.h **** 
  82:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOF)
  83:../../..\hal\include/gpio.h **** template<> struct port_traits<PF>
  84:../../..\hal\include/gpio.h **** {
  85:../../..\hal\include/gpio.h ****     typedef gpiof_t gpio_t;
  86:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOF; }
  87:../../..\hal\include/gpio.h **** };
  88:../../..\hal\include/gpio.h **** #endif
  89:../../..\hal\include/gpio.h **** 
  90:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOG)
  91:../../..\hal\include/gpio.h **** template<> struct port_traits<PG>
  92:../../..\hal\include/gpio.h **** {
  93:../../..\hal\include/gpio.h ****     typedef gpiog_t gpio_t;
  94:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOG; }
  95:../../..\hal\include/gpio.h **** };
  96:../../..\hal\include/gpio.h **** #endif
  97:../../..\hal\include/gpio.h **** 
  98:../../..\hal\include/gpio.h **** #if defined(HAVE_PERIPHERAL_GPIOH)
  99:../../..\hal\include/gpio.h **** template<> struct port_traits<PH>
 100:../../..\hal\include/gpio.h **** {
 101:../../..\hal\include/gpio.h ****     typedef gpioh_t gpio_t;
 102:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return GPIOH; }
 103:../../..\hal\include/gpio.h **** };
 104:../../..\hal\include/gpio.h **** #endif
 105:../../..\hal\include/gpio.h **** 
 106:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN>
 107:../../..\hal\include/gpio.h **** struct pin_t
 108:../../..\hal\include/gpio.h **** {
 109:../../..\hal\include/gpio.h ****     enum moder { input_mode, output_mode, alternate_mode, analog_mode };
 110:../../..\hal\include/gpio.h ****     typedef typename port_traits<pin_port(PIN)>::gpio_t gpio_t;
 111:../../..\hal\include/gpio.h **** 
 112:../../..\hal\include/gpio.h ****     static_assert(pin_bit(PIN) < 16, "pin_t bit out of range");
 113:../../..\hal\include/gpio.h ****  
 114:../../..\hal\include/gpio.h ****     static inline gpio_t& gpio() { return port_traits<pin_port(PIN)>::gpio(); }
 115:../../..\hal\include/gpio.h ****     static const uint8_t bit_pos = pin_bit(PIN);
 116:../../..\hal\include/gpio.h ****     static const uint32_t bit_mask = 1 << bit_pos;
 117:../../..\hal\include/gpio.h **** };
 118:../../..\hal\include/gpio.h **** 
 119:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN>
 120:../../..\hal\include/gpio.h **** class output_t
 121:../../..\hal\include/gpio.h **** {
 122:../../..\hal\include/gpio.h **** public:
 123:../../..\hal\include/gpio.h ****     template<output_type_t output_type = push_pull, output_speed_t speed = low_speed>
 124:../../..\hal\include/gpio.h ****     static inline void setup()
 125:../../..\hal\include/gpio.h ****     {
 126:../../..\hal\include/gpio.h ****         peripheral_traits<typename port_traits<pin_port(PIN)>::gpio_t>::enable();
 127:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 128:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= pin::output_mode << (pin::bit_pos*2);
 129:../../..\hal\include/gpio.h ****         if (speed != low_speed)
 130:../../..\hal\include/gpio.h ****             pin::gpio().OSPEEDR |= speed << (pin::bit_pos*2);
 131:../../..\hal\include/gpio.h ****         if (output_type == open_drain)
 132:../../..\hal\include/gpio.h ****             pin::gpio().OTYPER |= pin::bit_mask;
 133:../../..\hal\include/gpio.h ****     }
 134:../../..\hal\include/gpio.h **** 
 135:../../..\hal\include/gpio.h ****     static inline void set() { pin::gpio().BSRR = pin::bit_mask; }
 136:../../..\hal\include/gpio.h ****     static inline void clear() { pin::gpio().BSRR = pin::bit_mask << 16; }
 137:../../..\hal\include/gpio.h ****     static inline bool read() { return (pin::gpio().ODR & pin::bit_mask) != 0; }
 138:../../..\hal\include/gpio.h ****     static inline bool write(bool x) { x ? set() : clear(); return x; }
 139:../../..\hal\include/gpio.h ****     static inline void toggle() { write(!read()); }
 476              		.loc 7 139 24 view .LVU92
 477              	.LBB148:
 478              	.LBI148:
 137:../../..\hal\include/gpio.h ****     static inline bool write(bool x) { x ? set() : clear(); return x; }
 479              		.loc 7 137 24 view .LVU93
 480              	.LBE148:
 481              	.LBE147:
  46:../../..\hal\include/gpio.h **** };
 482              		.loc 7 46 36 view .LVU94
 483              	.LBB165:
 484              	.LBB151:
 485              	.LBB149:
 137:../../..\hal\include/gpio.h ****     static inline bool write(bool x) { x ? set() : clear(); return x; }
 486              		.loc 7 137 53 is_stmt 0 view .LVU95
 487 0000 4FF09043 		mov	r3, #1207959552
 488              	.LBE149:
 489              	.LBE151:
 490              	.LBE165:
 491              	.LBB166:
 492              	.LBB167:
 493              	.LBB168:
 494              	.LBB169:
  19:../../..\hal\include/fifo.h ****     }
  20:../../..\hal\include/fifo.h **** 
  21:../../..\hal\include/fifo.h ****     inline static void put(T x)             // use in interrupt only
  22:../../..\hal\include/fifo.h ****     {
  23:../../..\hal\include/fifo.h ****         static_assert((BUFSIZE != 0) && !(BUFSIZE & (BUFSIZE - 1)), "buffer size must be a power of
  24:../../..\hal\include/fifo.h **** 
  25:../../..\hal\include/fifo.h ****         if (m_widx < m_ridx + BUFSIZE)      // discard when buffer full
 495              		.loc 2 25 20 view .LVU96
 496 0004 0B49     		ldr	r1, .L46
 497              	.LBE169:
 498              	.LBE168:
 499              	.LBE167:
 500              	.LBE166:
 501              	.LBB177:
 502              	.LBB152:
 503              	.LBB150:
 137:../../..\hal\include/gpio.h ****     static inline bool write(bool x) { x ? set() : clear(); return x; }
 504              		.loc 7 137 53 view .LVU97
 505 0006 5A69     		ldr	r2, [r3, #20]
 506              	.LVL29:
 137:../../..\hal\include/gpio.h ****     static inline bool write(bool x) { x ? set() : clear(); return x; }
 507              		.loc 7 137 53 view .LVU98
 508              	.LBE150:
 509              	.LBE152:
 510              	.LBB153:
 511              	.LBI153:
 138:../../..\hal\include/gpio.h ****     static inline void toggle() { write(!read()); }
 512              		.loc 7 138 24 is_stmt 1 view .LVU99
 513              	.LBB154:
 138:../../..\hal\include/gpio.h ****     static inline void toggle() { write(!read()); }
 514              		.loc 7 138 40 is_stmt 0 view .LVU100
 515 0008 9206     		lsls	r2, r2, #26
 516              	.LVL30:
 517              	.LBB155:
 518              	.LBI155:
 135:../../..\hal\include/gpio.h ****     static inline void clear() { pin::gpio().BSRR = pin::bit_mask << 16; }
 519              		.loc 7 135 24 is_stmt 1 view .LVU101
 520              	.LBE155:
 521              	.LBE154:
 522              	.LBE153:
 523              	.LBE177:
  46:../../..\hal\include/gpio.h **** };
 524              		.loc 7 46 36 view .LVU102
 525              	.LBB178:
 526              	.LBB163:
 527              	.LBB161:
 528              	.LBB157:
 529              	.LBB156:
 135:../../..\hal\include/gpio.h ****     static inline void clear() { pin::gpio().BSRR = pin::bit_mask << 16; }
 530              		.loc 7 135 32 is_stmt 0 view .LVU103
 531 000a 54BF     		ite	pl
 532 000c 2022     		movpl	r2, #32
 533              	.LBE156:
 534              	.LBE157:
 535              	.LBB158:
 536              	.LBI158:
 136:../../..\hal\include/gpio.h ****     static inline bool read() { return (pin::gpio().ODR & pin::bit_mask) != 0; }
 537              		.loc 7 136 24 is_stmt 1 view .LVU104
 538              	.LBE158:
 539              	.LBE161:
 540              	.LBE163:
 541              	.LBE178:
  46:../../..\hal\include/gpio.h **** };
 542              		.loc 7 46 36 view .LVU105
 543              	.LBB179:
 544              	.LBB164:
 545              	.LBB162:
 546              	.LBB160:
 547              	.LBB159:
 136:../../..\hal\include/gpio.h ****     static inline bool read() { return (pin::gpio().ODR & pin::bit_mask) != 0; }
 548              		.loc 7 136 34 is_stmt 0 view .LVU106
 549 000e 4FF40012 		movmi	r2, #2097152
 550 0012 9A61     		str	r2, [r3, #24]
 136:../../..\hal\include/gpio.h ****     static inline bool read() { return (pin::gpio().ODR & pin::bit_mask) != 0; }
 551              		.loc 7 136 34 view .LVU107
 552              	.LBE159:
 553              	.LBE160:
 554              	.LBE162:
 555              	.LBE164:
 556              	.LBE179:
  18:..\ADC/Main.cpp ****     serial::isr();
 557              		.loc 6 18 5 is_stmt 1 view .LVU108
 558              	.LBB180:
 559              	.LBI166:
 108:../../..\hal\include/usart.h ****     {
 560              		.loc 1 108 24 view .LVU109
 561              	.LBB176:
 562              	.LBB173:
 563              	.LBB170:
 564              		.loc 2 25 20 is_stmt 0 view .LVU110
 565 0014 084A     		ldr	r2, .L46+4
 566              	.LBE170:
 567              	.LBE173:
 110:../../..\hal\include/usart.h ****     }
 568              		.loc 1 110 26 view .LVU111
 569 0016 094B     		ldr	r3, .L46+8
 570              	.LBB174:
 571              	.LBB171:
 572              		.loc 2 25 20 view .LVU112
 573 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 574              	.LBE171:
 575              	.LBE174:
 110:../../..\hal\include/usart.h ****     }
 576              		.loc 1 110 26 view .LVU113
 577 001a 586A     		ldr	r0, [r3, #36]
 578              	.LVL31:
 579              	.LBB175:
 580              	.LBI168:
  21:../../..\hal\include/fifo.h ****     {
 581              		.loc 2 21 24 is_stmt 1 view .LVU114
 582              	.LBB172:
 583              		.loc 2 25 20 is_stmt 0 view .LVU115
 584 001c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 585 001e 0F32     		adds	r2, r2, #15
 586              		.loc 2 25 9 view .LVU116
 587 0020 9A42     		cmp	r2, r3
 588 0022 05DB     		blt	.L41
  26:../../..\hal\include/fifo.h ****             m_buf[m_widx++ & mask] = x;
 589              		.loc 2 26 28 view .LVU117
 590 0024 5A1C     		adds	r2, r3, #1
 591 0026 0A70     		strb	r2, [r1]
 592 0028 03F00F03 		and	r3, r3, #15
 593              	.LBE172:
 594              	.LBE175:
 110:../../..\hal\include/usart.h ****     }
 595              		.loc 1 110 18 view .LVU118
 596 002c 044A     		ldr	r2, .L46+12
 597 002e D054     		strb	r0, [r2, r3]
 598              	.LVL32:
 599              	.L41:
 110:../../..\hal\include/usart.h ****     }
 600              		.loc 1 110 18 view .LVU119
 601              	.LBE176:
 602              	.LBE180:
  19:..\ADC/Main.cpp **** }
 603              		.loc 6 19 1 view .LVU120
 604 0030 7047     		bx	lr
 605              	.L47:
 606 0032 00BF     		.align	2
 607              	.L46:
 608 0034 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE6m_widxE
 609 0038 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE6m_ridxE
 610 003c 00440040 		.word	1073759232
 611 0040 00000000 		.word	_ZN6fifo_tIcLh2ELh16EE5m_bufE
 612              		.cfi_endproc
 613              	.LFE647:
 615              		.section	.text._Z4loopv,"ax",%progbits
 616              		.align	1
 617              		.global	_Z4loopv
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 621              		.fpu fpv4-sp-d16
 623              	_Z4loopv:
 624              	.LFB649:
  20:..\ADC/Main.cpp **** 
  21:..\ADC/Main.cpp **** extern "C" int ll_main();
  22:..\ADC/Main.cpp **** extern "C" uint16_t runConversion();
  23:..\ADC/Main.cpp **** 
  24:..\ADC/Main.cpp **** int main()
  25:..\ADC/Main.cpp **** {
  26:..\ADC/Main.cpp ****     ld4::setup();
  27:..\ADC/Main.cpp ****     serial::setup<230400>();
  28:..\ADC/Main.cpp ****     hal::nvic<interrupt::USART2>::enable();
  29:..\ADC/Main.cpp ****     interrupt::enable();
  30:..\ADC/Main.cpp **** 
  31:..\ADC/Main.cpp ****     stdio_t::bind<serial>();
  32:..\ADC/Main.cpp ****     printf("Welcome to the STM32G431!\n");
  33:..\ADC/Main.cpp **** 
  34:..\ADC/Main.cpp ****     ll_main();
  35:..\ADC/Main.cpp **** 
  36:..\ADC/Main.cpp ****     for (;;)
  37:..\ADC/Main.cpp ****         loop();
  38:..\ADC/Main.cpp **** }
  39:..\ADC/Main.cpp **** 
  40:..\ADC/Main.cpp **** void loop()
  41:..\ADC/Main.cpp **** {
 625              		.loc 6 41 1 is_stmt 1 view -0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 256
 628              		@ frame_needed = 0, uses_anonymous_args = 0
  42:..\ADC/Main.cpp ****     char buf[256];
 629              		.loc 6 42 5 view .LVU122
  43:..\ADC/Main.cpp **** 
  44:..\ADC/Main.cpp ****     printf("> \n");
 630              		.loc 6 44 5 view .LVU123
  41:..\ADC/Main.cpp ****     char buf[256];
 631              		.loc 6 41 1 is_stmt 0 view .LVU124
 632 0000 10B5     		push	{r4, lr}
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 4, -8
 635              		.cfi_offset 14, -4
 636              		.loc 6 44 11 view .LVU125
 637 0002 0F48     		ldr	r0, .L53
  41:..\ADC/Main.cpp ****     char buf[256];
 638              		.loc 6 41 1 view .LVU126
 639 0004 C0B0     		sub	sp, sp, #256
 640              		.cfi_def_cfa_offset 264
 641              		.loc 6 44 11 view .LVU127
 642 0006 FFF7FEFF 		bl	puts
 643              	.LVL33:
  45:..\ADC/Main.cpp ****     if (fgets(buf, sizeof(buf), stdin))
 644              		.loc 6 45 5 is_stmt 1 view .LVU128
 645              	.LBB181:
 646              		.loc 6 45 14 is_stmt 0 view .LVU129
 647 000a 0E4B     		ldr	r3, .L53+4
 648 000c 1B68     		ldr	r3, [r3]
 649 000e 4FF48071 		mov	r1, #256
 650 0012 5A68     		ldr	r2, [r3, #4]
 651 0014 6846     		mov	r0, sp
 652 0016 FFF7FEFF 		bl	fgets
 653              	.LVL34:
 654              		.loc 6 45 5 view .LVU130
 655 001a 70B1     		cbz	r0, .L48
 656              	.LBB182:
  46:..\ADC/Main.cpp ****     {
  47:..\ADC/Main.cpp ****         uint16_t x = runConversion();
 657              		.loc 6 47 9 is_stmt 1 view .LVU131
 658              		.loc 6 47 35 is_stmt 0 view .LVU132
 659 001c FFF7FEFF 		bl	runConversion
 660              	.LVL35:
  48:..\ADC/Main.cpp **** 
  49:..\ADC/Main.cpp ****         buf[strcspn(buf, "\r\n")] = 0;
 661              		.loc 6 49 20 view .LVU133
 662 0020 0949     		ldr	r1, .L53+8
  47:..\ADC/Main.cpp **** 
 663              		.loc 6 47 35 view .LVU134
 664 0022 0446     		mov	r4, r0
 665              	.LVL36:
 666              		.loc 6 49 9 is_stmt 1 view .LVU135
 667              		.loc 6 49 20 is_stmt 0 view .LVU136
 668 0024 6846     		mov	r0, sp
 669 0026 FFF7FEFF 		bl	strcspn
 670              	.LVL37:
 671              		.loc 6 49 35 view .LVU137
 672 002a 0023     		movs	r3, #0
 673 002c 0DF80030 		strb	r3, [sp, r0]
  50:..\ADC/Main.cpp ****         printf("got = '%s' and %d\n", buf, x);
 674              		.loc 6 50 9 is_stmt 1 view .LVU138
 675              		.loc 6 50 15 is_stmt 0 view .LVU139
 676 0030 2246     		mov	r2, r4
 677 0032 6946     		mov	r1, sp
 678 0034 0548     		ldr	r0, .L53+12
 679 0036 FFF7FEFF 		bl	printf
 680              	.LVL38:
 681              	.L48:
 682              		.loc 6 50 15 view .LVU140
 683              	.LBE182:
 684              	.LBE181:
  51:..\ADC/Main.cpp ****     }
  52:..\ADC/Main.cpp **** }
 685              		.loc 6 52 1 view .LVU141
 686 003a 40B0     		add	sp, sp, #256
 687              		.cfi_def_cfa_offset 8
 688              		@ sp needed
 689 003c 10BD     		pop	{r4, pc}
 690              	.L54:
 691 003e 00BF     		.align	2
 692              	.L53:
 693 0040 00000000 		.word	.LC0
 694 0044 00000000 		.word	_impure_ptr
 695 0048 03000000 		.word	.LC1
 696 004c 06000000 		.word	.LC2
 697              		.cfi_endproc
 698              	.LFE649:
 700              		.section	.text._ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5setupILm230400ELh8ELh1ELb
 701              		.align	1
 702              		.weak	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5setupILm230400ELh8ELh1ELb0ELNS2_14
 703              		.syntax unified
 704              		.thumb
 705              		.thumb_func
 706              		.fpu fpv4-sp-d16
 708              	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5setupILm230400ELh8ELh1ELb0ELNS2_14output_
 709              	.LFB653:
  67:../../..\hal\include/usart.h ****     {
 710              		.loc 1 67 24 is_stmt 1 view -0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              	.LBB191:
 715              	.LBI191:
 140:../../..\hal\include/gpio.h **** 
 141:../../..\hal\include/gpio.h **** private:
 142:../../..\hal\include/gpio.h ****     typedef pin_t<PIN> pin;
 143:../../..\hal\include/gpio.h **** };
 144:../../..\hal\include/gpio.h **** 
 145:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN>
 146:../../..\hal\include/gpio.h **** class input_t
 147:../../..\hal\include/gpio.h **** {
 148:../../..\hal\include/gpio.h **** public:
 149:../../..\hal\include/gpio.h ****     template<input_type_t input_type = floating>
 150:../../..\hal\include/gpio.h ****     static inline void setup()
 151:../../..\hal\include/gpio.h ****     {
 152:../../..\hal\include/gpio.h ****         peripheral_traits<typename port_traits<pin_port(PIN)>::gpio_t>::enable();
 153:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 154:../../..\hal\include/gpio.h ****         // pin::gpio().MODER |= pin::input_mode << (pin::bit_pos*2); redundant since == 0
 155:../../..\hal\include/gpio.h ****         if (input_type != floating)
 156:../../..\hal\include/gpio.h ****             pin::gpio().PUPDR |= input_type << (pin::bit_pos*2);
 157:../../..\hal\include/gpio.h ****     }
 158:../../..\hal\include/gpio.h **** 
 159:../../..\hal\include/gpio.h ****     static inline bool read() { return (pin::gpio().IDR & pin::bit_mask) != 0; }
 160:../../..\hal\include/gpio.h **** 
 161:../../..\hal\include/gpio.h **** private:
 162:../../..\hal\include/gpio.h ****     typedef pin_t<PIN> pin;
 163:../../..\hal\include/gpio.h **** };
 164:../../..\hal\include/gpio.h **** 
 165:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN>
 166:../../..\hal\include/gpio.h **** class analog_t
 167:../../..\hal\include/gpio.h **** {
 168:../../..\hal\include/gpio.h **** public:
 169:../../..\hal\include/gpio.h ****     template<input_type_t input_type = floating>
 170:../../..\hal\include/gpio.h ****     static inline void setup()
 171:../../..\hal\include/gpio.h ****     {
 172:../../..\hal\include/gpio.h ****         peripheral_traits<typename port_traits<pin_port(PIN)>::gpio_t>::enable();
 173:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= 0x3 << (pin::bit_pos*2);
 174:../../..\hal\include/gpio.h ****         static_assert(input_type != pull_up, "only floating or pull-down modes allowed for analog p
 175:../../..\hal\include/gpio.h ****         if (input_type != floating)
 176:../../..\hal\include/gpio.h ****             pin::gpio().PUPDR |= input_type << (pin::bit_pos*2);
 177:../../..\hal\include/gpio.h ****     }
 178:../../..\hal\include/gpio.h **** 
 179:../../..\hal\include/gpio.h **** private:
 180:../../..\hal\include/gpio.h ****     typedef pin_t<PIN> pin;
 181:../../..\hal\include/gpio.h **** };
 182:../../..\hal\include/gpio.h **** 
 183:../../..\hal\include/gpio.h **** namespace internal
 184:../../..\hal\include/gpio.h **** {
 185:../../..\hal\include/gpio.h **** 
 186:../../..\hal\include/gpio.h **** enum alt_fun_t { AF0, AF1, AF2, AF3, AF4, AF5, AF6, AF7, AF8, AF9, AF10, AF11, AF12, AF13, AF14, AF
 187:../../..\hal\include/gpio.h **** 
 188:../../..\hal\include/gpio.h **** enum alternate_function_t
 189:../../..\hal\include/gpio.h ****     { CAN_RX
 190:../../..\hal\include/gpio.h ****     , CAN_TX
 191:../../..\hal\include/gpio.h ****     , CEC
 192:../../..\hal\include/gpio.h ****     , COMP1_OUT
 193:../../..\hal\include/gpio.h ****     , COMP2_OUT
 194:../../..\hal\include/gpio.h ****     , COMP3_OUT
 195:../../..\hal\include/gpio.h ****     , COMP4_OUT
 196:../../..\hal\include/gpio.h ****     , CRS_SYNC
 197:../../..\hal\include/gpio.h ****     , EVENT_OUT
 198:../../..\hal\include/gpio.h ****     , EVENTOUT
 199:../../..\hal\include/gpio.h ****     , FDCAN1_RX
 200:../../..\hal\include/gpio.h ****     , FDCAN1_TX
 201:../../..\hal\include/gpio.h ****     , I2C1_SCL
 202:../../..\hal\include/gpio.h ****     , I2C1_SDA
 203:../../..\hal\include/gpio.h ****     , I2C1_SMBA
 204:../../..\hal\include/gpio.h ****     , I2C2_SCL
 205:../../..\hal\include/gpio.h ****     , I2C2_SDA
 206:../../..\hal\include/gpio.h ****     , I2C2_SMBA
 207:../../..\hal\include/gpio.h ****     , I2C3_SCL
 208:../../..\hal\include/gpio.h ****     , I2C3_SDA
 209:../../..\hal\include/gpio.h ****     , I2C3_SMBA
 210:../../..\hal\include/gpio.h ****     , I2S_CKIN
 211:../../..\hal\include/gpio.h ****     , I2S1_CK
 212:../../..\hal\include/gpio.h ****     , I2S1_MCK
 213:../../..\hal\include/gpio.h ****     , I2S1_SD
 214:../../..\hal\include/gpio.h ****     , I2S1_WS
 215:../../..\hal\include/gpio.h ****     , I2S2_CK
 216:../../..\hal\include/gpio.h ****     , I2S2_MCK
 217:../../..\hal\include/gpio.h ****     , I2S2_SD
 218:../../..\hal\include/gpio.h ****     , I2S2_WS
 219:../../..\hal\include/gpio.h ****     , I2S3_CK
 220:../../..\hal\include/gpio.h ****     , I2S3_MCK
 221:../../..\hal\include/gpio.h ****     , I2S3_SD
 222:../../..\hal\include/gpio.h ****     , I2S3_WS
 223:../../..\hal\include/gpio.h ****     , I2SCKIN
 224:../../..\hal\include/gpio.h ****     , IR_OUT
 225:../../..\hal\include/gpio.h ****     , JTCK
 226:../../..\hal\include/gpio.h ****     , JTDI
 227:../../..\hal\include/gpio.h ****     , JTDO
 228:../../..\hal\include/gpio.h ****     , JTDO_TRACESWO
 229:../../..\hal\include/gpio.h ****     , JTMS
 230:../../..\hal\include/gpio.h ****     , JTRST
 231:../../..\hal\include/gpio.h ****     , LPTIM1_ETR
 232:../../..\hal\include/gpio.h ****     , LPTIM1_IN1
 233:../../..\hal\include/gpio.h ****     , LPTIM1_IN2
 234:../../..\hal\include/gpio.h ****     , LPTIM1_OUT
 235:../../..\hal\include/gpio.h ****     , LPUART1_CTS
 236:../../..\hal\include/gpio.h ****     , LPUART1_RTS_DE
 237:../../..\hal\include/gpio.h ****     , LPUART1_RX
 238:../../..\hal\include/gpio.h ****     , LPUART1_TX
 239:../../..\hal\include/gpio.h ****     , MCO
 240:../../..\hal\include/gpio.h ****     , OSC_EN
 241:../../..\hal\include/gpio.h ****     , OSC32_EN
 242:../../..\hal\include/gpio.h ****     , RTC_OUT2
 243:../../..\hal\include/gpio.h ****     , RTC_REFIN
 244:../../..\hal\include/gpio.h ****     , SAI1_CK1
 245:../../..\hal\include/gpio.h ****     , SAI1_CK2
 246:../../..\hal\include/gpio.h ****     , SAI1_D1
 247:../../..\hal\include/gpio.h ****     , SAI1_D2
 248:../../..\hal\include/gpio.h ****     , SAI1_D3
 249:../../..\hal\include/gpio.h ****     , SAI1_FS_A
 250:../../..\hal\include/gpio.h ****     , SAI1_FS_B
 251:../../..\hal\include/gpio.h ****     , SAI1_MCLK_A
 252:../../..\hal\include/gpio.h ****     , SAI1_MCLK_B
 253:../../..\hal\include/gpio.h ****     , SAI1_SCK_A
 254:../../..\hal\include/gpio.h ****     , SAI1_SCK_B
 255:../../..\hal\include/gpio.h ****     , SAI1_SD_A
 256:../../..\hal\include/gpio.h ****     , SAI1_SD_B
 257:../../..\hal\include/gpio.h ****     , SPI1_MISO
 258:../../..\hal\include/gpio.h ****     , SPI1_MOSI
 259:../../..\hal\include/gpio.h ****     , SPI1_NSS
 260:../../..\hal\include/gpio.h ****     , SPI1_SCK
 261:../../..\hal\include/gpio.h ****     , SPI2_MISO
 262:../../..\hal\include/gpio.h ****     , SPI2_MOSI
 263:../../..\hal\include/gpio.h ****     , SPI2_NSS
 264:../../..\hal\include/gpio.h ****     , SPI2_SCK
 265:../../..\hal\include/gpio.h ****     , SPI3_MISO
 266:../../..\hal\include/gpio.h ****     , SPI3_MOSI
 267:../../..\hal\include/gpio.h ****     , SPI3_NSS
 268:../../..\hal\include/gpio.h ****     , SPI3_SCK
 269:../../..\hal\include/gpio.h ****     , SWCLK
 270:../../..\hal\include/gpio.h ****     , SWCLK_JTCK
 271:../../..\hal\include/gpio.h ****     , SWDIO
 272:../../..\hal\include/gpio.h ****     , SWDIO_JTMS
 273:../../..\hal\include/gpio.h ****     , TIM1_BKIN
 274:../../..\hal\include/gpio.h ****     , TIM1_BKIN2
 275:../../..\hal\include/gpio.h ****     , TIM1_CH1
 276:../../..\hal\include/gpio.h ****     , TIM1_CH1N
 277:../../..\hal\include/gpio.h ****     , TIM1_CH2
 278:../../..\hal\include/gpio.h ****     , TIM1_CH2N
 279:../../..\hal\include/gpio.h ****     , TIM1_CH3
 280:../../..\hal\include/gpio.h ****     , TIM1_CH3N
 281:../../..\hal\include/gpio.h ****     , TIM1_CH4
 282:../../..\hal\include/gpio.h ****     , TIM1_CH4N
 283:../../..\hal\include/gpio.h ****     , TIM1_ETR
 284:../../..\hal\include/gpio.h ****     , TIM14_CH1
 285:../../..\hal\include/gpio.h ****     , TIM15_BKIN
 286:../../..\hal\include/gpio.h ****     , TIM15_CH1
 287:../../..\hal\include/gpio.h ****     , TIM15_CH1N
 288:../../..\hal\include/gpio.h ****     , TIM15_CH2
 289:../../..\hal\include/gpio.h ****     , TIM16_BKIN
 290:../../..\hal\include/gpio.h ****     , TIM16_CH1
 291:../../..\hal\include/gpio.h ****     , TIM16_CH1N
 292:../../..\hal\include/gpio.h ****     , TIM17_BKIN
 293:../../..\hal\include/gpio.h ****     , TIM17_CH1
 294:../../..\hal\include/gpio.h ****     , TIM17_CH1N
 295:../../..\hal\include/gpio.h ****     , TIM2_CH1
 296:../../..\hal\include/gpio.h ****     , TIM2_CH1_ETR
 297:../../..\hal\include/gpio.h ****     , TIM2_CH2
 298:../../..\hal\include/gpio.h ****     , TIM2_CH3
 299:../../..\hal\include/gpio.h ****     , TIM2_CH4
 300:../../..\hal\include/gpio.h ****     , TIM2_ETR
 301:../../..\hal\include/gpio.h ****     , TIM3_CH1
 302:../../..\hal\include/gpio.h ****     , TIM3_CH2
 303:../../..\hal\include/gpio.h ****     , TIM3_CH3
 304:../../..\hal\include/gpio.h ****     , TIM3_CH4
 305:../../..\hal\include/gpio.h ****     , TIM3_ETR
 306:../../..\hal\include/gpio.h ****     , TIM4_CH1
 307:../../..\hal\include/gpio.h ****     , TIM4_CH2
 308:../../..\hal\include/gpio.h ****     , TIM4_CH3
 309:../../..\hal\include/gpio.h ****     , TIM4_CH4
 310:../../..\hal\include/gpio.h ****     , TIM4_ETR
 311:../../..\hal\include/gpio.h ****     , TIM8_BKIN
 312:../../..\hal\include/gpio.h ****     , TIM8_BKIN2
 313:../../..\hal\include/gpio.h ****     , TIM8_CH1
 314:../../..\hal\include/gpio.h ****     , TIM8_CH1N
 315:../../..\hal\include/gpio.h ****     , TIM8_CH2
 316:../../..\hal\include/gpio.h ****     , TIM8_CH2N
 317:../../..\hal\include/gpio.h ****     , TIM8_CH3
 318:../../..\hal\include/gpio.h ****     , TIM8_CH3N
 319:../../..\hal\include/gpio.h ****     , TIM8_CH4
 320:../../..\hal\include/gpio.h ****     , TIM8_CH4N
 321:../../..\hal\include/gpio.h ****     , TIM8_ETR
 322:../../..\hal\include/gpio.h ****     , TRACECK
 323:../../..\hal\include/gpio.h ****     , TRACED0
 324:../../..\hal\include/gpio.h ****     , TRACED1
 325:../../..\hal\include/gpio.h ****     , TRACED2
 326:../../..\hal\include/gpio.h ****     , TRACED3
 327:../../..\hal\include/gpio.h ****     , TRACESWO
 328:../../..\hal\include/gpio.h ****     , TSC_G1_IO1
 329:../../..\hal\include/gpio.h ****     , TSC_G1_IO2
 330:../../..\hal\include/gpio.h ****     , TSC_G1_IO3
 331:../../..\hal\include/gpio.h ****     , TSC_G1_IO4
 332:../../..\hal\include/gpio.h ****     , TSC_G2_IO1
 333:../../..\hal\include/gpio.h ****     , TSC_G2_IO2
 334:../../..\hal\include/gpio.h ****     , TSC_G2_IO3
 335:../../..\hal\include/gpio.h ****     , TSC_G2_IO4
 336:../../..\hal\include/gpio.h ****     , TSC_G3_IO1
 337:../../..\hal\include/gpio.h ****     , TSC_G3_IO2
 338:../../..\hal\include/gpio.h ****     , TSC_G3_IO3
 339:../../..\hal\include/gpio.h ****     , TSC_G3_IO4
 340:../../..\hal\include/gpio.h ****     , TSC_G4_IO1
 341:../../..\hal\include/gpio.h ****     , TSC_G4_IO2
 342:../../..\hal\include/gpio.h ****     , TSC_G4_IO3
 343:../../..\hal\include/gpio.h ****     , TSC_G4_IO4
 344:../../..\hal\include/gpio.h ****     , TSC_G5_IO1
 345:../../..\hal\include/gpio.h ****     , TSC_G5_IO2
 346:../../..\hal\include/gpio.h ****     , TSC_G5_IO3
 347:../../..\hal\include/gpio.h ****     , TSC_G5_IO4
 348:../../..\hal\include/gpio.h ****     , TSC_G6_IO1
 349:../../..\hal\include/gpio.h ****     , TSC_G6_IO2
 350:../../..\hal\include/gpio.h ****     , TSC_G6_IO3
 351:../../..\hal\include/gpio.h ****     , TSC_G6_IO4
 352:../../..\hal\include/gpio.h ****     , TSC_SYNC
 353:../../..\hal\include/gpio.h ****     , UART4_CTS
 354:../../..\hal\include/gpio.h ****     , UART4_RTS_DE
 355:../../..\hal\include/gpio.h ****     , UART4_RX
 356:../../..\hal\include/gpio.h ****     , UART4_TX
 357:../../..\hal\include/gpio.h ****     , UCPD1_FRSTX
 358:../../..\hal\include/gpio.h ****     , USART1_CK
 359:../../..\hal\include/gpio.h ****     , USART1_CTS
 360:../../..\hal\include/gpio.h ****     , USART1_RTS
 361:../../..\hal\include/gpio.h ****     , USART1_RTS_DE
 362:../../..\hal\include/gpio.h ****     , USART1_RTS_DE_CK
 363:../../..\hal\include/gpio.h ****     , USART1_RX
 364:../../..\hal\include/gpio.h ****     , USART1_TX
 365:../../..\hal\include/gpio.h ****     , USART2_CK
 366:../../..\hal\include/gpio.h ****     , USART2_CTS
 367:../../..\hal\include/gpio.h ****     , USART2_RTS
 368:../../..\hal\include/gpio.h ****     , USART2_RTS_DE
 369:../../..\hal\include/gpio.h ****     , USART2_RTS_DE_CK
 370:../../..\hal\include/gpio.h ****     , USART2_RX
 371:../../..\hal\include/gpio.h ****     , USART2_TX
 372:../../..\hal\include/gpio.h ****     , USART3_CK
 373:../../..\hal\include/gpio.h ****     , USART3_CTS
 374:../../..\hal\include/gpio.h ****     , USART3_RTS_DE
 375:../../..\hal\include/gpio.h ****     , USART3_RTS_DE_CK
 376:../../..\hal\include/gpio.h ****     , USART3_RX
 377:../../..\hal\include/gpio.h ****     , USART3_TX
 378:../../..\hal\include/gpio.h ****     , USART4_CTS
 379:../../..\hal\include/gpio.h ****     , USART4_RTS
 380:../../..\hal\include/gpio.h ****     , USART4_RTS_DE_CK
 381:../../..\hal\include/gpio.h ****     , USART4_RX
 382:../../..\hal\include/gpio.h ****     , USART4_TX
 383:../../..\hal\include/gpio.h ****     , USART6_RX
 384:../../..\hal\include/gpio.h ****     , USART6_TX
 385:../../..\hal\include/gpio.h ****     , USB_CRS_SYNC
 386:../../..\hal\include/gpio.h ****     };
 387:../../..\hal\include/gpio.h **** 
 388:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN, alternate_function_t ALT>
 389:../../..\hal\include/gpio.h **** struct alt_fun_traits {};
 390:../../..\hal\include/gpio.h **** 
 391:../../..\hal\include/gpio.h **** #define ALT_FUN_TRAIT(PIN, ALT_FUN, AFNO)           \
 392:../../..\hal\include/gpio.h **** template<> struct alt_fun_traits<PIN, ALT_FUN>      \
 393:../../..\hal\include/gpio.h **** {                                                   \
 394:../../..\hal\include/gpio.h ****     static inline alt_fun_t AF() { return AFNO; }   \
 395:../../..\hal\include/gpio.h **** }
 396:../../..\hal\include/gpio.h **** 
 397:../../..\hal\include/gpio.h **** #if defined(STM32F051)
 398:../../..\hal\include/gpio.h **** #include "gpio/stm32f051.h"
 399:../../..\hal\include/gpio.h **** #elif defined(STM32G070)
 400:../../..\hal\include/gpio.h **** #include "gpio/stm32g070.h"
 401:../../..\hal\include/gpio.h **** #elif defined(STM32G431)
 402:../../..\hal\include/gpio.h **** #include "gpio/stm32g431.h"
 403:../../..\hal\include/gpio.h **** #endif
 404:../../..\hal\include/gpio.h **** 
 405:../../..\hal\include/gpio.h **** template<gpio_pin_t PIN, alternate_function_t ALT>
 406:../../..\hal\include/gpio.h **** class alternate_t
 407:../../..\hal\include/gpio.h **** {
 408:../../..\hal\include/gpio.h **** public:
 409:../../..\hal\include/gpio.h ****     template<output_speed_t speed = low_speed>
 410:../../..\hal\include/gpio.h ****     static inline void setup()
 716              		.loc 7 410 24 view .LVU143
 717              	.LBE191:
  67:../../..\hal\include/usart.h ****     {
 718              		.loc 1 67 24 is_stmt 0 view .LVU144
 719 0000 10B5     		push	{r4, lr}
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 4, -8
 722              		.cfi_offset 14, -4
 723              	.LBB197:
 724              	.LBB192:
 411:../../..\hal\include/gpio.h ****     {
 412:../../..\hal\include/gpio.h ****         peripheral_traits<typename port_traits<pin_port(PIN)>::gpio_t>::enable();
 413:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 725              		.loc 7 413 27 view .LVU145
 726 0002 4FF09044 		mov	r4, #1207959552
 412:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 727              		.loc 7 412 79 view .LVU146
 728 0006 FFF7FEFF 		bl	_ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv
 729              	.LVL39:
 730              	.LBE192:
 731              	.LBE197:
  46:../../..\hal\include/gpio.h **** };
 732              		.loc 7 46 36 is_stmt 1 view .LVU147
 733              	.LBB198:
 734              	.LBB193:
 735              		.loc 7 413 27 is_stmt 0 view .LVU148
 736 000a 2368     		ldr	r3, [r4]
 737 000c 23F03003 		bic	r3, r3, #48
 738              		.loc 7 413 9 view .LVU149
 739 0010 2360     		str	r3, [r4]
 740              	.LBE193:
 741              	.LBE198:
  46:../../..\hal\include/gpio.h **** };
 742              		.loc 7 46 36 is_stmt 1 view .LVU150
 743              	.LBB199:
 744              	.LBB194:
 414:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= pin::alternate_mode << (pin::bit_pos*2);
 745              		.loc 7 414 27 is_stmt 0 view .LVU151
 746 0012 2368     		ldr	r3, [r4]
 747 0014 43F02003 		orr	r3, r3, #32
 748              		.loc 7 414 9 view .LVU152
 749 0018 2360     		str	r3, [r4]
 750              	.LBE194:
 751              	.LBE199:
  46:../../..\hal\include/gpio.h **** };
 752              		.loc 7 46 36 is_stmt 1 view .LVU153
 753              	.LBB200:
 754              	.LBB195:
 415:../../..\hal\include/gpio.h ****         if (speed != low_speed)
 416:../../..\hal\include/gpio.h ****             pin::gpio().OSPEEDR |= speed << (pin::bit_pos*2);
 755              		.loc 7 416 33 is_stmt 0 view .LVU154
 756 001a A368     		ldr	r3, [r4, #8]
 757 001c 43F03003 		orr	r3, r3, #48
 758              		.loc 7 416 13 view .LVU155
 759 0020 A360     		str	r3, [r4, #8]
 760              	.LBE195:
 761              	.LBE200:
 762              		.file 8 "../../..\\hal\\include/gpio/stm32g431.h"
   1:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, TIM2_CH1, AF1);
   2:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, USART2_CTS, AF7);
   3:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, COMP1_OUT, AF8);
   4:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, TIM8_BKIN, AF9);
   5:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, TIM8_ETR, AF10);
   6:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, TIM2_ETR, AF14);
   7:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA0, EVENT_OUT, AF15);
   8:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA1, RTC_REFIN, AF0);
   9:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA1, TIM2_CH2, AF1);
  10:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA1, USART2_RTS_DE, AF7);
  11:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA1, TIM15_CH1N, AF9);
  12:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA1, EVENT_OUT, AF15);
  13:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, TIM2_CH3, AF1);
  14:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, USART2_TX, AF7);
 763              		.loc 8 14 1 is_stmt 1 view .LVU156
  46:../../..\hal\include/gpio.h **** };
 764              		.loc 7 46 36 view .LVU157
 765              	.LBB201:
 766              	.LBB196:
 417:../../..\hal\include/gpio.h ****         if (pin::bit_pos < 8)
 418:../../..\hal\include/gpio.h ****             pin::gpio().AFRL |= alt_fun_traits<PIN, ALT>::AF() << (pin::bit_pos*4);
 767              		.loc 7 418 13 is_stmt 0 view .LVU158
 768 0022 236A     		ldr	r3, [r4, #32]
 769              		.loc 7 418 30 view .LVU159
 770 0024 43F4E063 		orr	r3, r3, #1792
 771              		.loc 7 418 13 view .LVU160
 772 0028 2362     		str	r3, [r4, #32]
 773              	.LBE196:
 774              	.LBE201:
 775              	.LBB202:
 776              	.LBI202:
 419:../../..\hal\include/gpio.h ****         else
 420:../../..\hal\include/gpio.h ****             pin::gpio().AFRH |= alt_fun_traits<PIN, ALT>::AF() << ((pin::bit_pos-8)*4);
 421:../../..\hal\include/gpio.h ****     }
 422:../../..\hal\include/gpio.h **** 
 423:../../..\hal\include/gpio.h ****     template<input_type_t input_type = floating>
 424:../../..\hal\include/gpio.h ****     static inline void setup()
 777              		.loc 7 424 24 is_stmt 1 view .LVU161
 778              	.LBB203:
 425:../../..\hal\include/gpio.h ****     {
 426:../../..\hal\include/gpio.h ****         peripheral_traits<typename port_traits<pin_port(PIN)>::gpio_t>::enable();
 779              		.loc 7 426 79 is_stmt 0 view .LVU162
 780 002a FFF7FEFF 		bl	_ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv
 781              	.LVL40:
 782              	.LBE203:
 783              	.LBE202:
  46:../../..\hal\include/gpio.h **** };
 784              		.loc 7 46 36 is_stmt 1 view .LVU163
 785              	.LBB209:
 786              	.LBB204:
 427:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 787              		.loc 7 427 27 is_stmt 0 view .LVU164
 788 002e 2368     		ldr	r3, [r4]
 789              	.LBE204:
 790              	.LBE209:
 791              	.LBB210:
 792              	.LBB211:
15895:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART2EN; }
 793              		.loc 4 15895 41 view .LVU165
 794 0030 124A     		ldr	r2, .L56
 795              	.LBE211:
 796              	.LBE210:
 797              	.LBB213:
 798              	.LBB205:
 799              		.loc 7 427 27 view .LVU166
 800 0032 23F0C003 		bic	r3, r3, #192
 801              		.loc 7 427 9 view .LVU167
 802 0036 2360     		str	r3, [r4]
 803              	.LBE205:
 804              	.LBE213:
  46:../../..\hal\include/gpio.h **** };
 805              		.loc 7 46 36 is_stmt 1 view .LVU168
 806              	.LBB214:
 807              	.LBB206:
 428:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= pin::alternate_mode << (pin::bit_pos*2);
 808              		.loc 7 428 27 is_stmt 0 view .LVU169
 809 0038 2368     		ldr	r3, [r4]
 810 003a 43F08003 		orr	r3, r3, #128
 811              		.loc 7 428 9 view .LVU170
 812 003e 2360     		str	r3, [r4]
 813              	.LBE206:
 814              	.LBE214:
  46:../../..\hal\include/gpio.h **** };
 815              		.loc 7 46 36 is_stmt 1 view .LVU171
 816              	.LBB215:
 817              	.LBB207:
 429:../../..\hal\include/gpio.h ****         if (input_type != floating)
 430:../../..\hal\include/gpio.h ****             pin::gpio().PUPDR |= input_type << (pin::bit_pos*2);
 818              		.loc 7 430 31 is_stmt 0 view .LVU172
 819 0040 E368     		ldr	r3, [r4, #12]
 820 0042 43F04003 		orr	r3, r3, #64
 821              		.loc 7 430 13 view .LVU173
 822 0046 E360     		str	r3, [r4, #12]
 823              	.LBE207:
 824              	.LBE215:
  15:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, COMP2_OUT, AF8);
  16:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, TIM15_CH1, AF9);
  17:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, LPUART1_TX, AF12);
  18:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, UCPD1_FRSTX, AF14);
  19:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA2, EVENT_OUT, AF15);
  20:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA3, TIM2_CH4, AF1);
  21:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA3, SAI1_CK1, AF3);
  22:../../..\hal\include/gpio/stm32g431.h **** ALT_FUN_TRAIT(PA3, USART2_RX, AF7);
 825              		.loc 8 22 1 is_stmt 1 view .LVU174
  46:../../..\hal\include/gpio.h **** };
 826              		.loc 7 46 36 view .LVU175
 827              	.LBB216:
 828              	.LBB208:
 431:../../..\hal\include/gpio.h ****         if (pin::bit_pos < 8)
 432:../../..\hal\include/gpio.h ****             pin::gpio().AFRL |= alt_fun_traits<PIN, ALT>::AF() << (pin::bit_pos*4);
 829              		.loc 7 432 13 is_stmt 0 view .LVU176
 830 0048 236A     		ldr	r3, [r4, #32]
 831              		.loc 7 432 30 view .LVU177
 832 004a 43F4E043 		orr	r3, r3, #28672
 833              		.loc 7 432 13 view .LVU178
 834 004e 2362     		str	r3, [r4, #32]
 835              	.LBE208:
 836              	.LBE216:
 837              	.LBB217:
 838              	.LBI210:
15895:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART2EN; }
 839              		.loc 4 15895 17 is_stmt 1 view .LVU179
 840              	.LBB212:
15895:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART2EN; }
 841              		.loc 4 15895 28 view .LVU180
15895:../../..\hal\include/device/stm32g431.h ****     static void disable() { RCC.APB1ENR1 &= ~rcc_t::APB1ENR1_USART2EN; }
 842              		.loc 4 15895 41 is_stmt 0 view .LVU181
 843 0050 936D     		ldr	r3, [r2, #88]
 844 0052 43F40033 		orr	r3, r3, #131072
 845 0056 9365     		str	r3, [r2, #88]
 846              	.LBE212:
 847              	.LBE217:
 848              	.LBB218:
 849              	.LBI218:
  48:../../..\hal\include/hal.h **** 
 850              		.loc 3 48 21 is_stmt 1 view .LVU182
 851              	.LBB219:
  48:../../..\hal\include/hal.h **** 
 852              		.loc 3 48 30 view .LVU183
  48:../../..\hal\include/hal.h **** 
 853              		.loc 3 48 37 is_stmt 0 view .LVU184
 854 0058 094B     		ldr	r3, .L56+4
 855              	.LBE219:
 856              	.LBE218:
  75:../../..\hal\include/usart.h ****         USART().CR1 |= _::CR1_RESET_VALUE               // reset control register 1
 857              		.loc 1 75 41 view .LVU185
 858 005a 1A68     		ldr	r2, [r3]
 859 005c 4FF46133 		mov	r3, #230400
 860 0060 B2FBF3F2 		udiv	r2, r2, r3
  28:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
 861              		.loc 1 28 32 is_stmt 1 view .LVU186
  75:../../..\hal\include/usart.h ****         USART().CR1 |= _::CR1_RESET_VALUE               // reset control register 1
 862              		.loc 1 75 9 is_stmt 0 view .LVU187
 863 0064 074B     		ldr	r3, .L56+8
 864 0066 DA60     		str	r2, [r3, #12]
  28:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
 865              		.loc 1 28 32 is_stmt 1 view .LVU188
  76:../../..\hal\include/usart.h ****                     | _::CR1_TE                         // enable transmitter
 866              		.loc 1 76 21 is_stmt 0 view .LVU189
 867 0068 1A68     		ldr	r2, [r3]
 868 006a 42F02D02 		orr	r2, r2, #45
  76:../../..\hal\include/usart.h ****                     | _::CR1_TE                         // enable transmitter
 869              		.loc 1 76 9 view .LVU190
 870 006e 1A60     		str	r2, [r3]
  28:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
 871              		.loc 1 28 32 is_stmt 1 view .LVU191
  82:../../..\hal\include/usart.h ****         USART().CR3 |= _::CR3_RESET_VALUE;              // reset control register 3
 872              		.loc 1 82 9 is_stmt 0 view .LVU192
 873 0070 5A68     		ldr	r2, [r3, #4]
 874 0072 5A60     		str	r2, [r3, #4]
  28:../../..\hal\include/usart.h ****     static const gpio::internal::alternate_function_t tx = gpio::internal::USART2_TX;
 875              		.loc 1 28 32 is_stmt 1 view .LVU193
  83:../../..\hal\include/usart.h ****     }
 876              		.loc 1 83 9 is_stmt 0 view .LVU194
 877 0074 9A68     		ldr	r2, [r3, #8]
 878 0076 9A60     		str	r2, [r3, #8]
  84:../../..\hal\include/usart.h **** 
 879              		.loc 1 84 5 view .LVU195
 880 0078 10BD     		pop	{r4, pc}
 881              	.L57:
 882 007a 00BF     		.align	2
 883              	.L56:
 884 007c 00100240 		.word	1073876992
 885 0080 00000000 		.word	_ZN3hal9sys_clock6m_freqE
 886 0084 00440040 		.word	1073759232
 887              		.cfi_endproc
 888              	.LFE653:
 890              		.section	.text.startup.main,"ax",%progbits
 891              		.align	1
 892              		.global	main
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu fpv4-sp-d16
 898              	main:
 899              	.LFB648:
  25:..\ADC/Main.cpp ****     ld4::setup();
 900              		.loc 6 25 1 is_stmt 1 view -0
 901              		.cfi_startproc
 902              		@ Volatile: function does not return.
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
  26:..\ADC/Main.cpp ****     serial::setup<230400>();
 905              		.loc 6 26 5 view .LVU197
 906              	.LBB234:
 907              	.LBI234:
 124:../../..\hal\include/gpio.h ****     {
 908              		.loc 7 124 24 view .LVU198
 909              	.LBE234:
  25:..\ADC/Main.cpp ****     ld4::setup();
 910              		.loc 6 25 1 is_stmt 0 view .LVU199
 911 0000 08B5     		push	{r3, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 3, -8
 914              		.cfi_offset 14, -4
 915              	.LBB238:
 916              	.LBB235:
 126:../../..\hal\include/gpio.h ****         pin::gpio().MODER &= ~(0x3 << (pin::bit_pos*2));
 917              		.loc 7 126 79 view .LVU200
 918 0002 FFF7FEFF 		bl	_ZN11stm32g431xx17peripheral_traitsINS_7gpioa_tEE6enableEv
 919              	.LVL41:
 920              	.LBE235:
 921              	.LBE238:
  46:../../..\hal\include/gpio.h **** };
 922              		.loc 7 46 36 is_stmt 1 view .LVU201
 923              	.LBB239:
 924              	.LBB236:
 127:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= pin::output_mode << (pin::bit_pos*2);
 925              		.loc 7 127 27 is_stmt 0 view .LVU202
 926 0006 4FF09043 		mov	r3, #1207959552
 927 000a 1A68     		ldr	r2, [r3]
 928 000c 22F44062 		bic	r2, r2, #3072
 127:../../..\hal\include/gpio.h ****         pin::gpio().MODER |= pin::output_mode << (pin::bit_pos*2);
 929              		.loc 7 127 9 view .LVU203
 930 0010 1A60     		str	r2, [r3]
 931              	.LBE236:
 932              	.LBE239:
  46:../../..\hal\include/gpio.h **** };
 933              		.loc 7 46 36 is_stmt 1 view .LVU204
 934              	.LBB240:
 935              	.LBB237:
 128:../../..\hal\include/gpio.h ****         if (speed != low_speed)
 936              		.loc 7 128 27 is_stmt 0 view .LVU205
 937 0012 1A68     		ldr	r2, [r3]
 938 0014 42F48062 		orr	r2, r2, #1024
 128:../../..\hal\include/gpio.h ****         if (speed != low_speed)
 939              		.loc 7 128 9 view .LVU206
 940 0018 1A60     		str	r2, [r3]
 941              	.LBE237:
 942              	.LBE240:
  27:..\ADC/Main.cpp ****     hal::nvic<interrupt::USART2>::enable();
 943              		.loc 6 27 5 is_stmt 1 view .LVU207
  27:..\ADC/Main.cpp ****     hal::nvic<interrupt::USART2>::enable();
 944              		.loc 6 27 26 is_stmt 0 view .LVU208
 945 001a FFF7FEFF 		bl	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5setupILm230400ELh8ELh1ELb0ELNS2_14out
 946              	.LVL42:
  28:..\ADC/Main.cpp ****     interrupt::enable();
 947              		.loc 6 28 5 is_stmt 1 view .LVU209
 948              	.LBB241:
 949              	.LBI241:
  76:../../..\hal\include/hal.h **** };
 950              		.loc 3 76 17 view .LVU210
 951              	.LBB242:
  76:../../..\hal\include/hal.h **** };
 952              		.loc 3 76 47 is_stmt 0 view .LVU211
 953 001e 0B4A     		ldr	r2, .L60
 954 0020 5368     		ldr	r3, [r2, #4]
 955 0022 43F04003 		orr	r3, r3, #64
  76:../../..\hal\include/hal.h **** };
 956              		.loc 3 76 28 view .LVU212
 957 0026 5360     		str	r3, [r2, #4]
 958              	.LBE242:
 959              	.LBE241:
  29:..\ADC/Main.cpp **** 
 960              		.loc 6 29 5 is_stmt 1 view .LVU213
 961              	.LBB243:
 962              	.LBI243:
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 963              		.loc 4 16013 24 view .LVU214
 964              	.LBB244:
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 965              		.loc 4 16013 35 view .LVU215
16013:../../..\hal\include/device/stm32g431.h ****     static inline void disable() { __asm volatile ("cpsid i"); }
 966              		.loc 4 16013 61 is_stmt 0 view .LVU216
 967              		.syntax unified
 968              	@ 16013 "../../..\hal\include/device/stm32g431.h" 1
 969 0028 62B6     		cpsie i
 970              	@ 0 "" 2
 971              		.thumb
 972              		.syntax unified
 973              	.LBE244:
 974              	.LBE243:
  31:..\ADC/Main.cpp ****     printf("Welcome to the STM32G431!\n");
 975              		.loc 6 31 5 is_stmt 1 view .LVU217
 976              	.LBB245:
 977              	.LBI245:
  25:../../..\hal\include/redirect.h ****     {
 978              		.loc 5 25 17 view .LVU218
 979              	.LBB246:
 980              	.LBI246:
  16:../../..\hal\include/redirect.h **** 
 981              		.loc 5 16 17 view .LVU219
 982              	.LBB247:
  16:../../..\hal\include/redirect.h **** 
 983              		.loc 5 16 32 is_stmt 0 view .LVU220
 984 002a 094B     		ldr	r3, .L60+4
 985 002c 094A     		ldr	r2, .L60+8
 986 002e 1A60     		str	r2, [r3]
 987              	.LBE247:
 988              	.LBE246:
 989              	.LBB248:
 990              	.LBI248:
  19:../../..\hal\include/redirect.h **** 
 991              		.loc 5 19 17 is_stmt 1 view .LVU221
 992              	.LBB249:
  19:../../..\hal\include/redirect.h **** 
 993              		.loc 5 19 33 is_stmt 0 view .LVU222
 994 0030 094A     		ldr	r2, .L60+12
 995 0032 0A4B     		ldr	r3, .L60+16
 996 0034 1360     		str	r3, [r2]
 997              	.LBE249:
 998              	.LBE248:
 999              	.LBB250:
 1000              	.LBI250:
  22:../../..\hal\include/redirect.h **** 
 1001              		.loc 5 22 17 is_stmt 1 view .LVU223
 1002              	.LBB251:
  22:../../..\hal\include/redirect.h **** 
 1003              		.loc 5 22 33 is_stmt 0 view .LVU224
 1004 0036 0A4A     		ldr	r2, .L60+20
 1005              	.LBE251:
 1006              	.LBE250:
 1007              	.LBE245:
  32:..\ADC/Main.cpp **** 
 1008              		.loc 6 32 11 view .LVU225
 1009 0038 0A48     		ldr	r0, .L60+24
 1010              	.LBB254:
 1011              	.LBB253:
 1012              	.LBB252:
  22:../../..\hal\include/redirect.h **** 
 1013              		.loc 5 22 33 view .LVU226
 1014 003a 1360     		str	r3, [r2]
 1015              	.LBE252:
 1016              	.LBE253:
 1017              	.LBE254:
  32:..\ADC/Main.cpp **** 
 1018              		.loc 6 32 5 is_stmt 1 view .LVU227
  32:..\ADC/Main.cpp **** 
 1019              		.loc 6 32 11 is_stmt 0 view .LVU228
 1020 003c FFF7FEFF 		bl	puts
 1021              	.LVL43:
  34:..\ADC/Main.cpp **** 
 1022              		.loc 6 34 5 is_stmt 1 view .LVU229
  34:..\ADC/Main.cpp **** 
 1023              		.loc 6 34 12 is_stmt 0 view .LVU230
 1024 0040 FFF7FEFF 		bl	ll_main
 1025              	.LVL44:
 1026              	.L59:
  36:..\ADC/Main.cpp ****         loop();
 1027              		.loc 6 36 5 is_stmt 1 discriminator 1 view .LVU231
  37:..\ADC/Main.cpp **** }
 1028              		.loc 6 37 9 discriminator 1 view .LVU232
  37:..\ADC/Main.cpp **** }
 1029              		.loc 6 37 13 is_stmt 0 discriminator 1 view .LVU233
 1030 0044 FFF7FEFF 		bl	_Z4loopv
 1031              	.LVL45:
 1032 0048 FCE7     		b	.L59
 1033              	.L61:
 1034 004a 00BF     		.align	2
 1035              	.L60:
 1036 004c 00E100E0 		.word	-536813312
 1037 0050 00000000 		.word	.LANCHOR0
 1038 0054 00000000 		.word	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE4readERc
 1039 0058 00000000 		.word	.LANCHOR1
 1040 005c 00000000 		.word	_ZN3hal5usart7usart_tILi2ELNS_4gpio10gpio_pin_tE2ELS3_3EE5writeEPKcm
 1041 0060 00000000 		.word	.LANCHOR2
 1042 0064 00000000 		.word	.LC3
 1043              		.cfi_endproc
 1044              	.LFE648:
 1046              		.weak	_ZN6fifo_tIcLh2ELh16EE6m_ridxE
 1047              		.section	.bss._ZN6fifo_tIcLh2ELh16EE6m_ridxE,"awG",%nobits,_ZN6fifo_tIcLh2ELh16EE6m_ridxE,comdat
 1050              	_ZN6fifo_tIcLh2ELh16EE6m_ridxE:
 1051 0000 00       		.space	1
 1052              		.weak	_ZN6fifo_tIcLh2ELh16EE6m_widxE
 1053              		.section	.bss._ZN6fifo_tIcLh2ELh16EE6m_widxE,"awG",%nobits,_ZN6fifo_tIcLh2ELh16EE6m_widxE,comdat
 1056              	_ZN6fifo_tIcLh2ELh16EE6m_widxE:
 1057 0000 00       		.space	1
 1058              		.weak	_ZN6fifo_tIcLh2ELh16EE5m_bufE
 1059              		.section	.bss._ZN6fifo_tIcLh2ELh16EE5m_bufE,"awG",%nobits,_ZN6fifo_tIcLh2ELh16EE5m_bufE,comdat
 1062              	_ZN6fifo_tIcLh2ELh16EE5m_bufE:
 1063 0000 00000000 		.space	16
 1063      00000000 
 1063      00000000 
 1063      00000000 
 1064              		.global	_ZN7stdio_t3m_2E
 1065              		.global	_ZN7stdio_t3m_1E
 1066              		.global	_ZN7stdio_t3m_0E
 1067              		.section	.bss._ZN7stdio_t3m_0E,"aw",%nobits
 1068              		.align	2
 1069              		.set	.LANCHOR0,. + 0
 1072              	_ZN7stdio_t3m_0E:
 1073 0000 00000000 		.space	4
 1074              		.section	.bss._ZN7stdio_t3m_1E,"aw",%nobits
 1075              		.align	2
 1076              		.set	.LANCHOR1,. + 0
 1079              	_ZN7stdio_t3m_1E:
 1080 0000 00000000 		.space	4
 1081              		.section	.bss._ZN7stdio_t3m_2E,"aw",%nobits
 1082              		.align	2
 1083              		.set	.LANCHOR2,. + 0
 1086              	_ZN7stdio_t3m_2E:
 1087 0000 00000000 		.space	4
 1088              		.section	.rodata._Z4loopv.str1.1,"aMS",%progbits,1
 1089              	.LC0:
 1090 0000 3E2000   		.ascii	"> \000"
 1091              	.LC1:
 1092 0003 0D0A00   		.ascii	"\015\012\000"
 1093              	.LC2:
 1094 0006 676F7420 		.ascii	"got = '%s' and %d\012\000"
 1094      3D202725 
 1094      73272061 
 1094      6E642025 
 1094      640A00
 1095              		.section	.rodata.main.str1.1,"aMS",%progbits,1
 1096              	.LC3:
 1097 0000 57656C63 		.ascii	"Welcome to the STM32G431!\000"
 1097      6F6D6520 
 1097      746F2074 
 1097      68652053 
 1097      544D3332 
 1098              		.text
 1099              	.Letext0:
 1100              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\
 1101              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1102              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1103              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1104              		.file 13 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1105              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1106              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\lib\\gcc\\arm-none-eab
 1107              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1108              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1109              		.file 18 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1110              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1111              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1112              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1113              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1114              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1115              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include
 1116              		.file 25 "<built-in>"
