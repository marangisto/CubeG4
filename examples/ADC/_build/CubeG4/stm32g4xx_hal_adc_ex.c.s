   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g4xx_hal_adc_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	LL_ADC_SetChannelSamplingTime:
  26              	.LVL0:
  27              	.LFB191:
  28              		.file 1 "../../..\\CubeG4\\include/stm32g4xx_ll_adc.h"
   1:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
   2:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
   3:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @file    stm32g4xx_ll_adc.h
   4:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @author  MCD Application Team
   5:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
   7:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @attention
   8:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
   9:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
  12:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
  17:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
  18:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  19:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  20:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #ifndef STM32G4xx_LL_ADC_H
  22:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define STM32G4xx_LL_ADC_H
  23:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  24:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #ifdef __cplusplus
  25:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** extern "C" {
  26:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
  27:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  28:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #include "stm32g4xx.h"
  30:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  31:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @addtogroup STM32G4xx_LL_Driver
  32:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  33:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  34:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  35:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3) || defined (ADC4) || defined (ADC5)
  36:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  37:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  39:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  40:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  41:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  44:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  47:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  48:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  49:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  50:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  51:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer register offset                                                */
  52:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  53:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  54:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  55:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  56:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  57:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  58:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  59:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  60:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  61:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  62:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  63:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  64:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  65:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  66:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  67:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ1_Pos)
  68:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ2_Pos)
  69:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ3_Pos)
  70:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ4_Pos)
  71:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ5_Pos)
  72:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ6_Pos)
  73:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ7_Pos)
  74:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ8_Pos)
  75:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ9_Pos)
  76:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS (ADC_SQR3_SQ10_Pos)
  77:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS (ADC_SQR3_SQ11_Pos)
  78:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (ADC_SQR3_SQ12_Pos)
  79:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (ADC_SQR3_SQ13_Pos)
  80:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (ADC_SQR3_SQ14_Pos)
  81:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS (ADC_SQR4_SQ15_Pos)
  82:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS (ADC_SQR4_SQ16_Pos)
  83:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  84:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  85:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  86:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
  87:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
  88:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - data register offset                                                     */
  89:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  90:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  91:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
  92:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  93:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
  94:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
  95:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
  96:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
  97:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  98:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
  99:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 100:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 101:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 102:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 103:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 104:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 105:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 106:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 108:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 109:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 110:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 111:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 112:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 113:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - regular trigger source                                                   */
 114:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - regular trigger edge                                                     */
 115:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 117:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 118:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 120:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 126:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 127:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 132:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 133:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 134:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  (ADC_CFGR_EXTSEL_Pos)
 135:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (ADC_CFGR_EXTEN_Pos)
 136:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 137:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 138:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 139:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 141:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - injected trigger source                                                  */
 142:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - injected trigger edge                                                    */
 143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 144:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 145:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 146:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 147:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 148:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL)  << (4U
 149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 152:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 153:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 154:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 156:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 161:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 162:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  (ADC_JSQR_JEXTSEL_Pos)
 163:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   (ADC_JSQR_JEXTEN_Pos)
 164:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 165:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 166:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 167:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 168:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 169:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 170:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 171:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 172:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 173:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 174:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 175:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 176:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 177:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 178:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (ADC_CFGR_AWD1CH_Pos)
 181:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 185:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 186:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 187:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_2       (0x00080000UL) /* Marker of internal channel for other A
 188:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH | ADC_CHANNEL_ID_INTERNAL_CH
 189:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 190:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 191:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 192:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 193:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 194:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 196:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 197:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 198:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 201:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 206:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 212:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 213:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 214:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 215:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 216:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 217:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 218:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 222:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 226:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 227:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 238:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 240:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 241:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 242:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 246:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 247:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 248:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 249:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 251:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 258:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 259:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 262:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* the relevant bits for:                                                     */
 270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 276:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 277:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 282:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 283:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   selection on groups.                                                     */
 289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 292:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 294:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 298:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 299:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 300:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 303:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 304:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 305:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 306:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 307:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 308:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 309:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 310:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 311:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 316:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 317:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 318:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 323:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 324:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 325:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC registers bits positions */
 328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 329:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 330:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 331:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_TR1_HT1_BITOFFSET_POS          (ADC_TR1_HT1_Pos)
 333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC registers bits groups */
 336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 337:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC internal channels related definitions */
 340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFF75AAUL)) /* Internal voltage referen
 342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3000UL)                     /* Analog voltage reference
 343:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Temperature sensor */
 344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFF75A8UL)) /* Internal temperature sen
 345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFF75CAUL)) /* Internal temperature sen
 346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3000UL)                     /* Analog voltage reference
 349:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 354:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 355:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 356:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a register from a register basis from which an offset
 364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is applied.
 365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Pointer to register address
 368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 372:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 377:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 378:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and multimode
 386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sharing the same ADC common instance):
 390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         disabled.
 392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 393:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 394:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, if ADC group injected is us
 398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 402:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 408:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC multimode conversion data transfer: no transfe
 410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 411:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 413:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 418:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
 419:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 420:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 442:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 446:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 451:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions with prefix "REG").
 467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 487:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 489:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 492:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 494:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 507:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 510:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              data preserved or overwritten.
 515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 520:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions with prefix "INJ").
 527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 547:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 549:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 565:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 567:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 568:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 569:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 570:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 573:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 574:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 575:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 576:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 579:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 580:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 584:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 585:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 586:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 587:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 588:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 589:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 592:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 593:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 594:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 595:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 596:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 597:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 598:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 599:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 600:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 601:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 603:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 604:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 605:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 606:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 607:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 608:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 609:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 610:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 611:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 612:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 613:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 614:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 615:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 616:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 617:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 618:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 619:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 623:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 627:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 628:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 629:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 630:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 631:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 638:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 641:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 642:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 645:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 646:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* DMA transfer.                                                              */
 647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 648:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 655:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 656:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 659:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 662:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 663:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 664:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 665:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 666:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 667:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 671:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 672:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 673:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 674:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 677:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 681:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 682:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 683:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 686:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement pathes all d
 687:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_VSENSESEL)    /*!< ADC measurement path to inte
 689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATSEL)      /*!< ADC measurement path to inte
 690:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 693:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 694:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 697:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000UL)                      /*!< ADC resolution 
 698:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_0)   /*!< ADC resolution 
 699:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_1                 )   /*!< ADC resolution 
 700:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)   /*!< ADC resolution 
 701:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 704:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 705:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 709:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR_ALIGN)       /*!< ADC conversion data alignmen
 710:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 713:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 717:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 718:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 719:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 722:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 723:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 726:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 728:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 729:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 730:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 733:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 734:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 737:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 738:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among AD
 739:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 742:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 743:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)       /*!< ADC offset is negative (among 
 747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC_OFR1_OFFSETPOS) /*!< ADC offset is positive (among 
 748:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 751:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 752:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)          /*!< ADC offset saturation is di
 756:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC_OFR1_SATEN)        /*!< ADC offset saturation is en
 757:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 763:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 769:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 770:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 773:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 774:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 775:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 776:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 778:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 780:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 781:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 782:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 783:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 784:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 785:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 786:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 788:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 790:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 791:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 792:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 793:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC1     (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 794:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC5     (LL_ADC_CHANNEL_4  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 795:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP1             (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 797:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP2             (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 798:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC2        (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC3        (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP4             (LL_ADC_CHANNEL_5  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 801:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP5             (LL_ADC_CHANNEL_3  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 802:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP6             (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 803:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 806:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000UL)                                          
 811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger internal: SW start.
 812:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 814:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 816:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 819:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 822:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3       (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 824:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH1       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 829:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 832:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH3       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 835:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 837:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 843:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 845:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH1       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 848:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 851:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 853:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM7_TRGO      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 857:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_CH1       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 862:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 864:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO     (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO2    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH1      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH2      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH3      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 879:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 882:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG2     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 888:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG4     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 891:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG5     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 894:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG6     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EX
 895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG7     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 900:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG8     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 903:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG9     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 906:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG10    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 909:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 912:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE2     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 915:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM_OUT      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 917:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 920:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 921:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 924:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
 925:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
 926:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
 927:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 930:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 931:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
 932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 934:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)       /*!< ADC conversions sam
 935:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC_CFGR2_BULB)     /*!< ADC conversions sam
 936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                 Note: First convers
 937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC_CFGR2_SMPTRIG)  /*!< ADC conversions sam
 938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                  Trigger rising edg
 939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                  Trigger falling ed
 940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 943:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 944:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 947:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
 948:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
 949:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 952:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 953:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 956:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversio
 957:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                  ADC_CFGR_DMAEN)    /*!< ADC conversio
 958:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMACFG | ADC_CFGR_DMAEN)    /*!< ADC conversio
 959:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 962:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 963:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
 964:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_SAMPLINGTIME_COMMON_CONFIG ADC instance - ADC sampling time common configur
 965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 967:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_DEFAULT      (0x00000000UL)      /*!< ADC sampling time let to d
 968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5 (ADC_SMPR1_SMPPLUS) /*!< ADC additional sampling ti
 969:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 972:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 973:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 974:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 977:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
 978:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
 979:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 982:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 983:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
 987:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
 988:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
 989:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
 990:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
 991:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
 992:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
 993:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
 994:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
 995:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
 996:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
 997:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
 998:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
 999:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1000:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1001:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1002:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1006:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1009:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1010:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1011:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1012:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1013:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1014:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1015:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1016:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1017:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1018:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1021:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1022:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1025:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1026:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1027:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1028:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1029:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1030:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1031:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1032:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1033:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1035:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1037:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1038:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1039:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1040:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1041:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1044:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1045:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1048:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger internal: SW start
1050:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1052:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1054:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1057:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1059:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1061:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1064:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1066:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1069:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1072:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1075:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1077:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH3       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1080:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1083:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1085:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM7_TRGO      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1087:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1089:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1091:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH2       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1094:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1096:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1098:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM16_CH1      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1101:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1104:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH2      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC3/4/5 instances. On this ST
1110:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH4      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC1/2 instances. On this STM3
1113:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1131:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1134:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_
1135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1137:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE3     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1146:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1149:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM_OUT      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1151:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1154:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1158:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1164:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1165:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1168:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1173:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1174:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1177:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1187:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1194:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1198:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1214:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1215:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1218:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (0x00000000UL)                                          
1219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_6CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_12CYCLES_5     (                    ADC_SMPR2_SMP10_1                  
1221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_47CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1232:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1240:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1246:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1249:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1258:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1259:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1262:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1276:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1277:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1282:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1283:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1292:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1294:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1298:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1300:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1303:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1304:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1306:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1307:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1309:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1310:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1316:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1317:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1318:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1323:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1324:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1325:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK)   
1327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_INJ          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1329:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK)   
1330:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_INJ          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1331:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK)   
1333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK)   
1336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1337:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK)   
1339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_INJ          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK)   
1342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_INJ          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
1343:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
1344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK)   
1345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_INJ          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1354:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR1_HT1              ) /*!< ADC analog watchdog thr
1355:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (              ADC_TR1_LT1) /*!< ADC analog watchdog thr
1356:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR1_HT1 | ADC_TR1_LT1) /*!< ADC analog watchdog bot
1357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1364:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                        ADC_TR1_AWDFILT
1366:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                    ADC_TR1_AWDFILT_1                  
1367:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                    ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1368:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC_TR1_AWDFILT_2                                      
1369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC_TR1_AWDFILT_2 |                     ADC_TR1_AWDFILT
1370:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1                  
1371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1372:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1380:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1384:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1387:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1388:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1391:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1392:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1393:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1396:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1401:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                      ADC_CFGR2_OVSR_0)
1402:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                   ADC_CFGR2_OVSR_1                   )
1403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                   ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1404:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC_CFGR2_OVSR_2                                      )
1405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC_CFGR2_OVSR_2                    | ADC_CFGR2_OVSR_0)
1406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1                   )
1407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1408:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1411:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1412:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1415:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1417:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1418:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1419:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1420:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1423:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
1429:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1432:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1433:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1434:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1435:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1437:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1439:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1440:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1444:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1447:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                                     /*!
1448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B (                 ADC_CCR_MDMA_1                 ) /*!
1449:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B   (                 ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1450:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B (ADC_CCR_DMACFG | ADC_CCR_MDMA_1                 ) /*!
1451:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B   (ADC_CCR_DMACFG | ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1452:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE   (0x00000000UL)                                          
1460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES  (                                                      A
1461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES  (                                    ADC_CCR_DELAY_1    
1462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES  (                                    ADC_CCR_DELAY_1 | A
1463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES  (                  ADC_CCR_DELAY_2                      
1464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (                  ADC_CCR_DELAY_2                   | A
1465:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1    
1466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1 | A
1467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (ADC_CCR_DELAY_3                                        
1468:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (ADC_CCR_DELAY_3                                     | A
1469:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1    
1470:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1 | A
1471:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1474:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1478:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1479:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1484:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
1486:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1487:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1488:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not timeout values.
1491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         above each literal definition.
1493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1495:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1496:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1497:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       not timeout values.                                                  */
1498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1500:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1502:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       STM32 serie:                                                         */
1503:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 112/fADC.                   */
1504:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1506:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1507:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1508:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1509:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         cycles                                                             */
1510:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1511:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         configuration.                                                     */
1512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1513:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1515:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1517:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1520:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1522:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tstart_vrefint").                                               */
1523:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1524:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       ( 12UL)  /*!< Delay for internal voltage reference stabi
1525:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1526:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1527:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1528:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tSTART").                                                       */
1529:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1530:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    (120UL)  /*!< Delay for temperature sensor stabilization
1531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1532:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1533:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
1534:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1535:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1536:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1537:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1538:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1544:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1545:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1548:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1549:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1558:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Write a value in ADC register
1561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be written
1563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
1565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1566:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1567:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1568:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Read a value in ADC register
1570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be read
1572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Register value
1573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1574:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1575:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1578:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1579:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1583:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Example:
1587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will return decimal number "4".
1589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number is returned, either defined with number
1591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (                                                                                     \
1639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      )                                                                                     \
1641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                       \
1642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (                                                                                       \
1643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                                       \
1645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1646:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from number in decimal format.
1650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Example:
1651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
1697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
1698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1700:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (                                                                                             
1703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      )                                                                                             
1707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
1708:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (                                                                                               
1709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                                               
1713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC internal channel:
1720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1780:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a value defined from parameter definition of
1790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC registers.
1793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1856:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1858:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is
1868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
1898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC4)                                               \
1924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP6)         ||                    \
1926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC5)                                               \
1931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP5)         ||                    \
1933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC5) ||                    \
1934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP4)         ||                    \
1935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #elif defined(STM32G471xx)
1941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1966:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx)
1967:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1984:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
1985:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example:
1992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
2000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
2001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
2002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
2016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
2017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
2018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
2019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
2020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
2021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
2022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
2023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
2024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
2025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
2026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
2036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
2037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
2038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
2039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
2041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
2042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
2043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
2044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
2046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
2047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
2048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
2049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
2050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
2051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
2052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
2053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
2054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
2055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
2056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
2057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
2058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
2059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
2060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
2061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
2062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
2063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
2064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
2065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
2066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
2067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
2068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
2069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
2070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
2071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
2072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
2073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
2074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
2075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
2076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
2107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
2108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
2109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
2110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
2111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
2112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
2113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
2114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
2115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
2116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
2117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
2118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
2119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
2120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
2121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
2122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
2123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
2124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
2125:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
2126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
2127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
2128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
2129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
2130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
2131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
2132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
2133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
2134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
2135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
2136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
2137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
2138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
2139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
2141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2150:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                  
2153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
2154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                          
2155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)                 
2156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
2157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL) 
2158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2159:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
2165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
2166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            (< ADCx param >,
2170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
2171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            );
2172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
2178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            );
2194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
2200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
2203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
2207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
2208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
2210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
2211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
2212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
2213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
2214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2217:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__)       \
2218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_
2219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationFactor().
2224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential ended to 0x2A:
2226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetCalibrationFactor(
2227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC1,
2228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2232:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC common instance).
2259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         considered as master instances (do not depend to
2263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         any other ADC instance).
2264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC5)
2268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )?                                                                         \
2271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     :                                                                          \
2273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ( ( ((__ADCx__) == ADC4)                                                   \
2274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )?                                                                       \
2275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (ADC3)                                                                   \
2276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (__ADCx__)                                                               \
2278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )                                                                          \
2279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )?                                                                         \
2284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     :                                                                          \
2286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (__ADCx__)                                                                 \
2287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC common register instance
2300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (                                                                        \
2309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC345_COMMON)                                                         \
2310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)  (ADC12_COMMON)
2314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC common instance are disabled.
2318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are disabled.
2329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled.
2331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC4) &&  defined(ADC5)
2334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (                                                                        \
2342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3) |                                               \
2343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC4) |                                               \
2344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC5)  )                                              \
2345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (LL_ADC_IsEnabled(ADC3))                                                 \
2356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC4 && ADC5 */
2358:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2359:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2362:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2363:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (refer to reference manual).
2369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2378:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a resolution to another resolution.
2382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__DATA__)                                                                 \
2401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))   \
2402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))      \
2403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2404:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
2413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                       (unit: digital value).
2414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       __ADC_DATA__,\
2423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         reference VrefInt.
2432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         connected to pin Vref+.
2436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
2439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
2440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
2445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                  \
2457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       (__ADC_RESOLUTION__),                    \
2458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       LL_ADC_RESOLUTION_12B))
2459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  parameters are correct (address and data).
2478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  less accurate than calibrated values),
2481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
2488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
2489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor.
2491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
2511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (refer to device datasheet).
2524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   (unit: digital value)
2529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  datasheet typical values.
2536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12 bits
2546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
2548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "Avg_Slop
2550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "V30" (co
2552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((( (                                                                        \
2570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        -                                                                       \
2574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2580:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2581:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2584:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2585:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2588:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2589:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2594:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2595:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2598:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
2599:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
2600:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
2601:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example:
2612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC register address
2631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t data_reg_addr;
2636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
2639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     /* Retrieve address of register DR */
2640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &(ADCx->DR);
2641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
2642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
2644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     /* Retrieve address of register CDR */
2645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
2647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return data_reg_addr;
2649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
2654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(Register);
2655:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Retrieve address of register DR */
2657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) &(ADCx->DR);
2658:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2659:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2664:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2665:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, if ADC group injected is used, some
2672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must be respected.
2674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
2675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2703:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2704:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
2706:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2731:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2732:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2734:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2735:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2736:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor stabilization time.
2746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a sampling time minimum value is required.
2752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_SetCommonPathInternalCh\n
2755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_SetCommonPathInternalCh
2756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal)
2768:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2769:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2770:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_GetCommonPathInternalCh\n
2778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_GetCommonPathInternalCh
2779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2788:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSE
2790:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2791:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2792:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2795:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without having to perform a new calibration using
2805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         requires their calibration).
2812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         To perform this processing, use helper macro
2816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on group regular.
2821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationFactor\n
2822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationFactor
2823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2831:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t C
2832:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2836:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2837:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2838:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationFactor\n
2847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationFactor
2848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2854:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2861:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2862:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2863:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC resolution.
2865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2880:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2881:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2883:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2884:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC resolution.
2887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2900:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2901:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2902:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
2904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_SetDataAlignment
2911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
2913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2917:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
2918:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_ALIGN, DataAlignment);
2920:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2921:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2922:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
2924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_GetDataAlignment
2927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
2933:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_ALIGN));
2935:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2936:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC low power mode.
2939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
2947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           other conversion.
2949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           applications.
2953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
2954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
2955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
2956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
2957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
2962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
2970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
2971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
2974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
2979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
2981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2985:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
2986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
2988:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2989:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2990:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC low power mode:
2992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
3000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           other conversion.
3002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           applications.
3006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
3007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
3010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
3015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
3024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
3027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3033:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3037:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3038:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or group injected)
3044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           converted data).
3046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are set to 0.
3049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
3120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3123:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3129:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3130:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3131:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or group injected)
3136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
3144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
3146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
3202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
3203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3206:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3212:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         converted data).
3216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are set to 0.
3219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3238:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         force offset state disable or enable
3241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
3270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetState);
3271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset state disabled or enabled.
3276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_EN);
3295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         choose offset sign.
3300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
3325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetSign);
3326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset sign if positive or negative.
3331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSETPOS);
3350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3352:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         choose offset saturation mode.
3355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3374:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3377:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
3380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetSaturation);
3381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3401:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_SATEN);
3405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC gain compensation.
3409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the gain compensation coefficient
3410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         that is applied to raw converted data using the formula:
3411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           DATA = DATA(raw) * (gain compensation coef) / 4096
3412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function enables the gain compensation if given
3413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coefficient is above 0, otherwise it disables it.
3414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Gain compensation when enabled is appied to all channels.
3415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_SetGainCompensation\n
3420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_SetGainCompensation
3421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  GainCompensation This parameter can be:
3423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         0           Gain compensation will be disabled and value set to 0
3424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation will be enabled with specified value
3425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
3428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
3430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCO
3431:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3432:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3433:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC gain compensation value
3435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_GetGainCompensation\n
3436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_GetGainCompensation
3437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
3439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         0           Gain compensation is disabled
3440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation is enabled with returned value
3441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3442:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetGainCompensation(ADC_TypeDef *ADCx)
3443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR2, ADC_CFGR2_GCOMP) == ADC_CFGR2_GCOMP) ? READ_BIT(ADCx->GCOMP, ADC_G
3445:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3446:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3447:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
3448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling time common configuration impacting
3450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_SetSamplingTimeCommonConfig
3456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingTimeCommonConfig This parameter can be one of the following values:
3458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3459:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCom
3463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
3465:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC sampling time common configuration impacting
3469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_GetSamplingTimeCommonConfig
3471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonConfig(ADC_TypeDef *ADCx)
3477:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SMPR1, ADC_SMPR1_SMPPLUS));
3479:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_SMPR1_SMPPLUS */
3481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3482:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
3484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3486:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
3488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3489:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3490:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
3495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
3519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3556:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3557:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3560:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (equivalent to
3569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
3586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3623:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET
3629:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((TriggerSource
3633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****          );
3636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3638:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or external.
3641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
3652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3653:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3654:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3672:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3673:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3674:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3687:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Set sampling mode is appied to all conversion of regular group.
3694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, SamplingMode);
3710:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3711:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3712:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC sampling mode
3714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_GetSamplingMode\n
3715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_GetSamplingMode
3716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3722:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSamplingMode(ADC_TypeDef *ADCx)
3723:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG));
3725:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3726:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are configurable.
3734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             highest channel number).
3752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3781:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3782:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3784:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3785:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3786:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are configurable.
3793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             highest channel number).
3811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3835:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3836:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3838:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3839:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
3844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
3854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
3856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
3868:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
3870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3871:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3872:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
3874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
3876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
3877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
3878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3890:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
3891:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
3893:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3894:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3895:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
3897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
3898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
3899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
3900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
3901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
3902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
3903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
3904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
3905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
3908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
3910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
3916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
3917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
3918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
3919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
3920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
3921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
3922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
3923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
3924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
3925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
3926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
3927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
3928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
3929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
3930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
3931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
3933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
3934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
3935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
3936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
3937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
3938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
3939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
3940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
3941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
3942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
3943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
3944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
3945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
3946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
3947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
3948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
3949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3993:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
3994:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
3996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
3997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
3998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_M
4000:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
4002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4004:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4006:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
4009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
4012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4106:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOF
4109:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
4114:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4115:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4125:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
4128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4135:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4136:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4138:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4139:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4152:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4153:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4156:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4157:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode:
4162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransfer
4185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4192:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4193:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
4195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4196:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4197:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode:
4202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4227:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
4228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
4230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         other devices without this feature have a behavior
4237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         equivalent to data overwritten.
4238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
4245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
4273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
4277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
4284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4349:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (equivalent to
4357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4409:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4410:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4412:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFS
4416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((TriggerSource
4420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****          );
4423:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4425:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****             or external
4428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4437:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
4439:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4440:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4441:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4457:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4471:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4472:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4474:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
4479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4497:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4500:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4502:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function retrieves:
4505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4522:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4523:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
4527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4536:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4537:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
4545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4556:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence rank.
4559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
4564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4626:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence rank.
4639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4709:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                               (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <
4712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
4714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4716:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC group injected.
4725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent trigger.
4728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC group regular.
4733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4749:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4750:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4751:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4761:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4763:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer length
4770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If contexts queue is disabled:
4772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - only 1 sequence can be configured
4773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           and is active perpetually.
4774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If contexts queue is enabled:
4775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           into the queue).
4786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4806:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4809:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4821:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4822:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4824:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4825:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         contexts queue.
4829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer length
4832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         cannot be used):
4837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
4846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
4911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
4912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
4918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
4960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5087:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5095:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1U
5103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JL,
5111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)          |
5112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SequencerNbRanks
5118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****             );
5119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5120:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5121:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
5123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
5127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5129:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         converted:
5136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         setting).
5139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TS_temp, ...).
5141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is required.
5150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
5151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
5230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
  29              		.loc 1 5233 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
5234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_RE
  33              		.loc 1 5238 3 view .LVU1
5233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
  34              		.loc 1 5233 1 is_stmt 0 view .LVU2
  35 0000 30B5     		push	{r4, r5, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 5238 34 view .LVU3
  41 0002 CC0D     		lsrs	r4, r1, #23
  42 0004 04F00404 		and	r4, r4, #4
  43 0008 1430     		adds	r0, r0, #20
  44              	.LVL1:
5239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
  45              		.loc 1 5240 3 is_stmt 1 view .LVU4
  46 000a C1F30451 		ubfx	r1, r1, #20, #5
  47              	.LVL2:
  48              		.loc 1 5240 3 is_stmt 0 view .LVU5
  49 000e 2358     		ldr	r3, [r4, r0]
  50 0010 0725     		movs	r5, #7
  51 0012 8D40     		lsls	r5, r5, r1
  52 0014 23EA0503 		bic	r3, r3, r5
  53 0018 02FA01F1 		lsl	r1, r2, r1
  54 001c 1943     		orrs	r1, r1, r3
  55 001e 2150     		str	r1, [r4, r0]
5241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
  56              		.loc 1 5243 1 view .LVU6
  57 0020 30BD     		pop	{r4, r5, pc}
  58              		.loc 1 5243 1 view .LVU7
  59              		.cfi_endproc
  60              	.LFE191:
  62              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
  63              		.align	1
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
  69              	LL_ADC_IsEnabled:
  70              	.LVL3:
  71              	.LFB223:
5244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5267:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
5331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SM
5335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
5340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
5345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC group regular or injected.
5347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configuration:
5359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             for more details.
5366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
5372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
5373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5398:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
5403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
5410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configuration:
5424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             for more details.
5431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5454:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5457:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
5461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
5465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled.
5473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
5575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
5576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
5577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
5578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
5579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
5580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
5581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
5582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
5583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
5584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
5585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
5586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
5587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
5588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
5589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
5590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
5591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
5592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
5593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
5594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
5595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
5596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
5597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
5598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
5599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
5600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
5601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
5602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
5603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
5604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
5605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
5606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
5607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
5609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5619:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5620:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MA
5626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5627:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5631:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5636:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
5643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
5645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           one channel.
5648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             by bitfield.
5690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5708:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.
5754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5756:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFF
5758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5759:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_
5761:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* or a single channel.                                                     */
5766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
5768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     {
5770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  )
5776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       else
5780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     }
5787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     else
5788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     {
5789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       else
5797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     }
5806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
5807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return AnalogWDMonitChannels;
5809:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         high and low.
5814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
5845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
5846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
5847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
5848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
5849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
5850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
5856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
5857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
5861:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
5863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
5864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "AWDy".                                                                  */
5865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
5866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5868:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
5871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
5872:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         high or low.
5877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
5878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
5879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is not conditioned to
5908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC can be disabled, enabled with or without conversion on going
5910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5928:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                   uint32_t AWDThresholdValue)
5930:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDThresholdsHighLow,
5940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TR
5941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5942:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5943:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         concatenated.
5947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
5948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
5949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         using helper macro:
5950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
5951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
5969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
5970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5971:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5972:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFS
5974:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR1_LT1))
5977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> (((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH
5978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
5979:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5980:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5981:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
5983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
5988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
5989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
5990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
5994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
5995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
5996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
5997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
5998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
5999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6004:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->TR1, ADC_TR1_AWDFILT, FilteringConfig);
6009:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6010:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6011:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
6015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
6020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6029:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6030:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->TR1, ADC_TR1_AWDFILT));
6034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6035:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6039:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6040:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6043:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6044:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6069:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6070:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6072:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6073:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6074:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6094:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6095:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6097:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6098:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6099:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
6111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, oversampling discontinuous mode
6112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6121:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6126:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6141:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6144:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6145:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling
6147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ratio
6150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - shift
6151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Ratio This parameter can be one of the following values:
6159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
6182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Ratio This parameter can be one of the following values:
6190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR));
6202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
6234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro
6245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6267:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
6287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_SetMultiDMATransfer\n
6324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_SetMultiDMATransfer
6325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, MultiDMATransfer);
6338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_GetMultiDMATransfer\n
6371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_GetMultiDMATransfer
6372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
6384:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6385:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6386:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
6407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
6416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6425:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6426:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
6436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
6445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6449:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6450:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6452:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6454:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6459:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6483:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6484:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
6504:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6506:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6513:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
6515:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6517:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC internal voltage regulator enable,
6520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6532:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6553:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6562:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
6564:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6565:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6566:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for
6569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion start.
6571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6583:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADEN);
6590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6592:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6603:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADDIS);
6610:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6611:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6612:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6621:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
  72              		.loc 1 6622 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
6623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
  77              		.loc 1 6623 3 view .LVU9
  78              		.loc 1 6623 12 is_stmt 0 view .LVU10
  79 0000 8068     		ldr	r0, [r0, #8]
  80              	.LVL4:
6624:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
  81              		.loc 1 6624 1 view .LVU11
  82 0002 00F00100 		and	r0, r0, #1
  83 0006 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE223:
  87              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
  88              		.align	1
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu fpv4-sp-d16
  94              	LL_ADC_REG_IsConversionOngoing:
  95              	.LVL5:
  96              	.LFB229:
6625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6626:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
6635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
6641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
6644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
6646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         requires their calibration).
6649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration
6654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
6661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
6668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6676:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6677:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6679:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6680:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6681:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           starts immediately.
6695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTART);
6715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6716:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6717:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6728:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTP);
6735:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6736:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6737:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6743:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6744:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
  97              		.loc 1 6744 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
6745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 102              		.loc 1 6745 3 view .LVU13
 103              		.loc 1 6745 12 is_stmt 0 view .LVU14
 104 0000 8068     		ldr	r0, [r0, #8]
 105              	.LVL6:
6746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 106              		.loc 1 6746 1 view .LVU15
 107 0002 C0F38000 		ubfx	r0, r0, #2, #1
 108 0006 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE229:
 112              		.section	.text.LL_ADC_INJ_IsConversionOngoing,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu fpv4-sp-d16
 119              	LL_ADC_INJ_IsConversionOngoing:
 120              	.LVL7:
 121              	.LFB241:
6747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6748:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6754:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6757:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6758:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6759:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC sampling phase for sampling time trigger mode
6761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
6762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StartSamplingPhase
6771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6774:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartSamplingPhase(ADC_TypeDef *ADCx)
6775:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6778:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC sampling phase for sampling time trigger mode and start conversion
6781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
6782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_StartSamplingPhase has been called to start
6786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the sampling phase
6787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StopSamplingPhase
6793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopSamplingPhase(ADC_TypeDef *ADCx)
6797:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6801:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with feature oversampling).
6806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6813:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6814:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6815:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 12 bits.
6818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6825:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6828:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6829:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6830:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 10 bits.
6833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6841:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6843:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6844:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6845:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 8 bits.
6848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6856:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6858:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 6 bits.
6863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData6
6867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
6869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
6871:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6875:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
6876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
6884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
6885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
6886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         separately).
6887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
6888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
6889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
6892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
6893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
6894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
6895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
6898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
6900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ConversionData)
6901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
6902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
6903:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6904:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6905:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6906:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6909:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6910:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
6911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6913:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6914:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
6916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           starts immediately.
6920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
6926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
6927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
6929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
6933:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTART);
6940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6942:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
6944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
6947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
6949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6952:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
6953:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTP);
6960:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6961:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6962:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
6964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
6965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
6967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
6969:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 122              		.loc 1 6969 1 is_stmt 1 view -0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              		@ link register save eliminated.
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 127              		.loc 1 6970 3 view .LVU17
 128              		.loc 1 6970 12 is_stmt 0 view .LVU18
 129 0000 8068     		ldr	r0, [r0, #8]
 130              	.LVL8:
6971:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 131              		.loc 1 6971 1 view .LVU19
 132 0002 C0F3C000 		ubfx	r0, r0, #3, #1
 133 0006 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE241:
 137              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
 138              		.align	1
 139              		.global	HAL_ADCEx_Calibration_Start
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	HAL_ADCEx_Calibration_Start:
 146              	.LVL9:
 147              	.LFB325:
 148              		.file 2 "../../..\\CubeG4\\src\\stm32g4xx_hal_adc_ex.c"
   1:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
   2:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ******************************************************************************
   3:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @file    stm32g4xx_hal_adc_ex.c
   4:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following
   6:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          peripheral:
   8:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           + Operation functions
   9:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of ADC group injected,
  10:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *                using 2 possible modes: polling, interruption.
  11:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *             ++ Calibration
  12:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *               +++ ADC automatic self-calibration
  13:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *               +++ Calibration factors get or set
  14:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *             ++ Multimode feature when available
  15:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           + Control functions
  16:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *             ++ Channels configuration on ADC group injected
  17:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           + State functions
  18:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *             ++ ADC group injected contexts queue management
  19:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file
  20:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          "stm32g4xx_hal_adc.c".
  21:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
  22:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   @verbatim
  23:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   [..]
  24:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  25:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       available in file of generic functions "stm32g4xx_hal_adc.c".
  26:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   [..]
  27:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   @endverbatim
  28:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ******************************************************************************
  29:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @attention
  30:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
  31:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  32:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * All rights reserved.</center></h2>
  33:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
  34:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  35:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * the "License"; You may not use this file except in compliance with the
  36:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * License. You may obtain a copy of the License at:
  37:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  38:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
  39:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ******************************************************************************
  40:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  41:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  42:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  43:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #include "stm32g4xx_hal.h"
  44:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  45:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @addtogroup STM32G4xx_HAL_Driver
  46:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
  47:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  48:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  49:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  50:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief ADC Extended HAL module driver
  51:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
  52:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  53:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  54:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  55:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  56:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  57:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  58:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  59:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADC Extended Private Constants
  60:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
  61:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  62:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  63:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #define ADC_JSQR_FIELDS  ((ADC_JSQR_JL | ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN |\
  64:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ1  | ADC_JSQR_JSQ2 |\
  65:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ3 | ADC_JSQR_JSQ4 ))  /*!< ADC_JSQR fields of parameters tha
  66:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                                                   once the ADC is enabled */
  67:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  68:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Fixed timeout value for ADC calibration.                                   */
  69:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Values defined to be higher than worst cases: low clock frequency,         */
  70:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* maximum prescalers.                                                        */
  71:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Ex of profile low frequency : f_ADC at f_CPU/3968 (minimum value           */
  72:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* considering both possible ADC clocking scheme:                             */
  73:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*        - ADC clock from synchronous clock with AHB prescaler 512,          */
  74:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*          ADC prescaler 4.                                                  */
  75:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*           Ratio max = 512 *4 = 2048                                        */
  76:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*        - ADC clock from asynchronous clock (PLLP) with prescaler 256.      */
  77:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*          Highest CPU clock PLL (PLLR).                                     */
  78:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*           Ratio max = PLLRmax /PPLPmin * 256 = (VCO/2) / (VCO/31) * 256    */
  79:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*                     = 3968 )                                               */
  80:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Calibration_time MAX = 81 / f_ADC                                          */
  81:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /*                      = 81 / (f_CPU/3938) = 318978 CPU cycles               */
  82:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #define ADC_CALIBRATION_TIMEOUT         (318978UL)   /*!< ADC calibration time-out value (unit: CPU
  83:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  84:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
  85:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @}
  86:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  87:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  88:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
  89:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
  90:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  91:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /* Exported functions --------------------------------------------------------*/
  92:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  93:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADC Extended Exported Functions
  94:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
  95:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
  96:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
  97:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Input and Output operation functions
  98:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief    Extended IO operation functions
  99:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
 100:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** @verbatim
 101:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****  ===============================================================================
 102:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       ##### IO operation functions #####
 103:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****  ===============================================================================
 104:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 105:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 106:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 107:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 108:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 109:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 110:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected.
 111:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected.
 112:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Poll for conversion complete on ADC group injected.
 113:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Get result of ADC group injected channel conversion.
 114:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected and enable interruptions.
 115:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected and disable interruptions.
 116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) When multimode feature is available, start multimode and enable DMA transfer.
 118:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 119:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 120:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 121:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** @endverbatim
 122:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
 123:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 124:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 125:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 127:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 128:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 129:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param  hadc       ADC handle
 130:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param  SingleDiff Selection of single-ended or differential input
 131:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         This parameter can be one of the following values:
 132:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 133:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 134:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 135:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 136:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
 137:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 149              		.loc 2 137 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 8
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 138:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 153              		.loc 2 138 3 view .LVU21
 139:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0UL;
 154              		.loc 2 139 3 view .LVU22
 137:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 155              		.loc 2 137 1 is_stmt 0 view .LVU23
 156 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 157              		.cfi_def_cfa_offset 24
 158              		.cfi_offset 4, -12
 159              		.cfi_offset 5, -8
 160              		.cfi_offset 14, -4
 161              		.loc 2 139 17 view .LVU24
 162 0002 0023     		movs	r3, #0
 163 0004 0193     		str	r3, [sp, #4]
 140:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 141:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 164              		.loc 2 142 3 is_stmt 1 view .LVU25
 143:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 165              		.loc 2 143 3 view .LVU26
 144:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 145:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
 146:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 166              		.loc 2 146 3 view .LVU27
 167              		.loc 2 146 3 view .LVU28
 168 0006 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 169 000a 012B     		cmp	r3, #1
 137:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 170              		.loc 2 137 1 is_stmt 0 view .LVU29
 171 000c 0446     		mov	r4, r0
 172 000e 0D46     		mov	r5, r1
 173              		.loc 2 146 3 view .LVU30
 174 0010 3ED0     		beq	.L12
 175              		.loc 2 146 3 is_stmt 1 discriminator 2 view .LVU31
 176 0012 0123     		movs	r3, #1
 177 0014 80F85830 		strb	r3, [r0, #88]
 147:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 148:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Calibration prerequisite: ADC must be disabled. */
 149:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 150:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable the ADC (if not already disabled) */
 151:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Disable(hadc);
 178              		.loc 2 151 3 discriminator 2 view .LVU32
 179              		.loc 2 151 20 is_stmt 0 discriminator 2 view .LVU33
 180 0018 FFF7FEFF 		bl	ADC_Disable
 181              	.LVL10:
 152:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 153:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 182              		.loc 2 154 3 is_stmt 1 discriminator 2 view .LVU34
 183              		.loc 2 154 6 is_stmt 0 discriminator 2 view .LVU35
 184 001c 0028     		cmp	r0, #0
 185 001e 33D1     		bne	.L7
 155:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 156:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set ADC state */
 157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 186              		.loc 2 157 5 is_stmt 1 view .LVU36
 187 0020 E26D     		ldr	r2, [r4, #92]
 158:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 160:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 161:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Start ADC calibration in mode single-ended or differential */
 162:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 163:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 164:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 165:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 166:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 167:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       wait_loop_index++;
 168:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 188              		.loc 2 168 10 is_stmt 0 view .LVU37
 189 0022 1C49     		ldr	r1, .L14
 157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 190              		.loc 2 157 5 view .LVU38
 191 0024 22F48852 		bic	r2, r2, #4352
 192 0028 22F00202 		bic	r2, r2, #2
 193 002c 42F00202 		orr	r2, r2, #2
 194 0030 E265     		str	r2, [r4, #92]
 162:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 195              		.loc 2 162 5 is_stmt 1 view .LVU39
 196 0032 2268     		ldr	r2, [r4]
 197              	.LVL11:
 198              	.LBB118:
 199              	.LBI118:
6660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 200              		.loc 1 6660 22 view .LVU40
 201              	.LBB119:
6665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
 202              		.loc 1 6665 3 view .LVU41
 203 0034 9368     		ldr	r3, [r2, #8]
 204 0036 23F04043 		bic	r3, r3, #-1073741824
 205 003a 23F03F03 		bic	r3, r3, #63
 206 003e 05F08045 		and	r5, r5, #1073741824
 207              	.LVL12:
6665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
 208              		.loc 1 6665 3 is_stmt 0 view .LVU42
 209 0042 2B43     		orrs	r3, r3, r5
 210 0044 43F00043 		orr	r3, r3, #-2147483648
 211 0048 9360     		str	r3, [r2, #8]
 212              	.L8:
 213              	.LVL13:
6665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
 214              		.loc 1 6665 3 view .LVU43
 215              	.LBE119:
 216              	.LBE118:
 217              	.LBB120:
 218              	.LBI120:
6676:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 219              		.loc 1 6676 26 is_stmt 1 view .LVU44
 220              	.LBB121:
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 221              		.loc 1 6678 3 view .LVU45
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 222              		.loc 1 6678 12 is_stmt 0 view .LVU46
 223 004a 9368     		ldr	r3, [r2, #8]
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 224              		.loc 1 6678 70 view .LVU47
 225 004c 002B     		cmp	r3, #0
 226 004e 11DA     		bge	.L9
 227              	.LVL14:
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 228              		.loc 1 6678 70 view .LVU48
 229              	.LBE121:
 230              	.LBE120:
 167:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 231              		.loc 2 167 7 is_stmt 1 view .LVU49
 167:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 232              		.loc 2 167 22 is_stmt 0 view .LVU50
 233 0050 019B     		ldr	r3, [sp, #4]
 234 0052 0133     		adds	r3, r3, #1
 235 0054 0193     		str	r3, [sp, #4]
 236              		.loc 2 168 7 is_stmt 1 view .LVU51
 237              		.loc 2 168 27 is_stmt 0 view .LVU52
 238 0056 019B     		ldr	r3, [sp, #4]
 239              		.loc 2 168 10 view .LVU53
 240 0058 8B42     		cmp	r3, r1
 241 005a F6D9     		bls	.L8
 169:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 170:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 171:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 242              		.loc 2 171 9 is_stmt 1 view .LVU54
 243 005c E36D     		ldr	r3, [r4, #92]
 244 005e 23F01203 		bic	r3, r3, #18
 245 0062 43F01003 		orr	r3, r3, #16
 246 0066 E365     		str	r3, [r4, #92]
 172:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 173:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 174:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 175:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Process unlocked */
 176:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 247              		.loc 2 176 9 view .LVU55
 248              		.loc 2 176 9 view .LVU56
 249 0068 0023     		movs	r3, #0
 250 006a 84F85830 		strb	r3, [r4, #88]
 177:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 178:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         return HAL_ERROR;
 251              		.loc 2 178 9 view .LVU57
 252              		.loc 2 178 16 is_stmt 0 view .LVU58
 253 006e 0120     		movs	r0, #1
 254              	.LVL15:
 255              	.L6:
 179:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 180:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 181:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 182:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set ADC state */
 183:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 184:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 185:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 186:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 187:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 188:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 189:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 190:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 191:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Note: No need to update variable "tmp_hal_status" here: already set    */
 192:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*       to state "HAL_ERROR" by function disabling the ADC.              */
 193:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 194:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 195:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
 196:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 197:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 198:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
 199:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 200:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 256              		.loc 2 200 1 view .LVU59
 257 0070 03B0     		add	sp, sp, #12
 258              		.cfi_remember_state
 259              		.cfi_def_cfa_offset 12
 260              		@ sp needed
 261 0072 30BD     		pop	{r4, r5, pc}
 262              	.LVL16:
 263              	.L9:
 264              		.cfi_restore_state
 183:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 265              		.loc 2 183 5 is_stmt 1 view .LVU60
 266 0074 E36D     		ldr	r3, [r4, #92]
 267 0076 23F00303 		bic	r3, r3, #3
 268 007a 43F00103 		orr	r3, r3, #1
 269              	.LVL17:
 270              	.L13:
 189:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 271              		.loc 2 189 5 is_stmt 0 view .LVU61
 272 007e E365     		str	r3, [r4, #92]
 196:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 273              		.loc 2 196 3 is_stmt 1 view .LVU62
 196:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 274              		.loc 2 196 3 view .LVU63
 275 0080 0023     		movs	r3, #0
 276 0082 84F85830 		strb	r3, [r4, #88]
 199:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 277              		.loc 2 199 3 view .LVU64
 199:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 278              		.loc 2 199 10 is_stmt 0 view .LVU65
 279 0086 F3E7     		b	.L6
 280              	.LVL18:
 281              	.L7:
 189:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 282              		.loc 2 189 5 is_stmt 1 view .LVU66
 283 0088 E36D     		ldr	r3, [r4, #92]
 284 008a 43F01003 		orr	r3, r3, #16
 285 008e F6E7     		b	.L13
 286              	.LVL19:
 287              	.L12:
 146:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 288              		.loc 2 146 3 is_stmt 0 view .LVU67
 289 0090 0220     		movs	r0, #2
 290              	.LVL20:
 146:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 291              		.loc 2 146 3 view .LVU68
 292 0092 EDE7     		b	.L6
 293              	.L15:
 294              		.align	2
 295              	.L14:
 296 0094 01DE0400 		.word	318977
 297              		.cfi_endproc
 298              	.LFE325:
 300              		.section	.text.HAL_ADCEx_Calibration_GetValue,"ax",%progbits
 301              		.align	1
 302              		.global	HAL_ADCEx_Calibration_GetValue
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu fpv4-sp-d16
 308              	HAL_ADCEx_Calibration_GetValue:
 309              	.LVL21:
 310              	.LFB326:
 201:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 202:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 203:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Get the calibration factor.
 204:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 205:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 206:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 207:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 208:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval Calibration value.
 209:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 210:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
 211:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 311              		.loc 2 211 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 212:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 213:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 316              		.loc 2 213 3 view .LVU70
 214:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 317              		.loc 2 214 3 view .LVU71
 215:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 216:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return the selected ADC calibration value */
 217:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return LL_ADC_GetCalibrationFactor(hadc->Instance, SingleDiff);
 318              		.loc 2 217 3 view .LVU72
 319              		.loc 2 217 10 is_stmt 0 view .LVU73
 320 0000 0368     		ldr	r3, [r0]
 321              	.LVL22:
 322              	.LBB124:
 323              	.LBI124:
2854:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 324              		.loc 1 2854 26 is_stmt 1 view .LVU74
 325              	.LBB125:
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 326              		.loc 1 2860 3 view .LVU75
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 327              		.loc 1 2860 21 is_stmt 0 view .LVU76
 328 0002 D3F8B400 		ldr	r0, [r3, #180]
 329              	.LVL23:
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 330              		.loc 1 2860 21 view .LVU77
 331 0006 0840     		ands	r0, r0, r1
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 332              		.loc 1 2860 147 view .LVU78
 333 0008 090B     		lsrs	r1, r1, #12
 334              	.LVL24:
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 335              		.loc 1 2860 147 view .LVU79
 336 000a 01F01001 		and	r1, r1, #16
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 337              		.loc 1 2860 21 view .LVU80
 338 000e 00F07F10 		and	r0, r0, #8323199
 339              	.LBE125:
 340              	.LBE124:
 218:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 341              		.loc 2 218 1 view .LVU81
 342 0012 C840     		lsrs	r0, r0, r1
 343 0014 7047     		bx	lr
 344              		.cfi_endproc
 345              	.LFE326:
 347              		.section	.text.HAL_ADCEx_Calibration_SetValue,"ax",%progbits
 348              		.align	1
 349              		.global	HAL_ADCEx_Calibration_SetValue
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	HAL_ADCEx_Calibration_SetValue:
 356              	.LVL25:
 357              	.LFB327:
 219:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 220:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 221:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Set the calibration factor to overwrite automatic conversion result.
 222:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         ADC must be enabled and no conversion is ongoing.
 223:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
 224:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 225:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 226:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 227:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
 228:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL state
 229:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 230:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint
 231:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 358              		.loc 2 231 1 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 232:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 362              		.loc 2 232 3 view .LVU83
 233:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 363              		.loc 2 233 3 view .LVU84
 234:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 364              		.loc 2 234 3 view .LVU85
 235:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 236:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 237:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 365              		.loc 2 237 3 view .LVU86
 238:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 366              		.loc 2 238 3 view .LVU87
 239:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_CALFACT(CalibrationFactor));
 367              		.loc 2 239 3 view .LVU88
 240:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 241:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
 242:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 368              		.loc 2 242 3 view .LVU89
 369              		.loc 2 242 3 view .LVU90
 231:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 370              		.loc 2 231 1 is_stmt 0 view .LVU91
 371 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 372              		.cfi_def_cfa_offset 24
 373              		.cfi_offset 3, -24
 374              		.cfi_offset 4, -20
 375              		.cfi_offset 5, -16
 376              		.cfi_offset 6, -12
 377              		.cfi_offset 7, -8
 378              		.cfi_offset 14, -4
 231:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 379              		.loc 2 231 1 view .LVU92
 380 0002 0346     		mov	r3, r0
 381              		.loc 2 242 3 view .LVU93
 382 0004 90F85800 		ldrb	r0, [r0, #88]	@ zero_extendqisi2
 383              	.LVL26:
 384              		.loc 2 242 3 view .LVU94
 385 0008 0128     		cmp	r0, #1
 386 000a 31D0     		beq	.L21
 387              		.loc 2 242 3 is_stmt 1 discriminator 2 view .LVU95
 388 000c 0120     		movs	r0, #1
 389 000e 83F85800 		strb	r0, [r3, #88]
 243:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 244:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Verification of hardware constraints before modifying the calibration    */
 245:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* factors register: ADC must be enabled, no conversion on going.           */
 246:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 390              		.loc 2 246 3 discriminator 2 view .LVU96
 391              		.loc 2 246 44 is_stmt 0 discriminator 2 view .LVU97
 392 0012 1868     		ldr	r0, [r3]
 393 0014 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 394              	.LVL27:
 395 0018 0446     		mov	r4, r0
 396              	.LVL28:
 247:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 397              		.loc 2 247 3 is_stmt 1 discriminator 2 view .LVU98
 398              		.loc 2 247 45 is_stmt 0 discriminator 2 view .LVU99
 399 001a 1868     		ldr	r0, [r3]
 400              	.LVL29:
 401              		.loc 2 247 45 discriminator 2 view .LVU100
 402 001c FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 403              	.LVL30:
 404 0020 0546     		mov	r5, r0
 405              	.LVL31:
 248:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 249:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 406              		.loc 2 249 3 is_stmt 1 discriminator 2 view .LVU101
 407              		.loc 2 249 8 is_stmt 0 discriminator 2 view .LVU102
 408 0022 1868     		ldr	r0, [r3]
 409              	.LVL32:
 410              		.loc 2 249 8 discriminator 2 view .LVU103
 411 0024 FFF7FEFF 		bl	LL_ADC_IsEnabled
 412              	.LVL33:
 413              		.loc 2 249 6 discriminator 2 view .LVU104
 414 0028 C0B1     		cbz	r0, .L19
 250:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_regular == 0UL)
 251:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 415              		.loc 2 251 7 view .LVU105
 416 002a 54EA0500 		orrs	r0, r4, r5
 417 002e 15D1     		bne	.L19
 252:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      )
 253:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 254:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set the selected ADC calibration value */
 255:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_SetCalibrationFactor(hadc->Instance, SingleDiff, CalibrationFactor);
 418              		.loc 2 255 5 is_stmt 1 view .LVU106
 419 0030 1E68     		ldr	r6, [r3]
 420              	.LVL34:
 421              	.LBB128:
 422              	.LBI128:
2831:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 423              		.loc 1 2831 22 view .LVU107
 424              	.LBB129:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 425              		.loc 1 2833 3 view .LVU108
 426 0032 01F07F07 		and	r7, r1, #127
 427 0036 0C0B     		lsrs	r4, r1, #12
 428              	.LVL35:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 429              		.loc 1 2833 3 is_stmt 0 view .LVU109
 430 0038 D6F8B450 		ldr	r5, [r6, #180]
 431              	.LVL36:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 432              		.loc 1 2833 3 view .LVU110
 433 003c 24EA0704 		bic	r4, r4, r7
 434 0040 04F01004 		and	r4, r4, #16
 435 0044 01F07F11 		and	r1, r1, #8323199
 436              	.LVL37:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 437              		.loc 1 2833 3 view .LVU111
 438 0048 A240     		lsls	r2, r2, r4
 439              	.LVL38:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 440              		.loc 1 2833 3 view .LVU112
 441 004a 25EA0101 		bic	r1, r5, r1
 442 004e 0A43     		orrs	r2, r2, r1
 443 0050 C6F8B420 		str	r2, [r6, #180]
 444              	.LVL39:
 445              	.L20:
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 446              		.loc 1 2833 3 view .LVU113
 447              	.LBE129:
 448              	.LBE128:
 256:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 257:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 258:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 259:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC state machine */
 260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 261:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC error code */
 262:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 263:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 264:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 265:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 266:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 267:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 268:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
 269:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 449              		.loc 2 269 3 is_stmt 1 view .LVU114
 450              		.loc 2 269 3 view .LVU115
 451 0054 0022     		movs	r2, #0
 452 0056 83F85820 		strb	r2, [r3, #88]
 270:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 271:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
 272:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 453              		.loc 2 272 3 view .LVU116
 454              	.LVL40:
 455              	.L18:
 273:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 456              		.loc 2 273 1 is_stmt 0 view .LVU117
 457 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 458              	.LVL41:
 459              	.L19:
 260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC error code */
 460              		.loc 2 260 5 is_stmt 1 view .LVU118
 461 005c DA6D     		ldr	r2, [r3, #92]
 462              	.LVL42:
 260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC error code */
 463              		.loc 2 260 5 is_stmt 0 view .LVU119
 464 005e 42F02002 		orr	r2, r2, #32
 465 0062 DA65     		str	r2, [r3, #92]
 262:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 466              		.loc 2 262 5 is_stmt 1 view .LVU120
 467 0064 1A6E     		ldr	r2, [r3, #96]
 468 0066 42F00102 		orr	r2, r2, #1
 469 006a 1A66     		str	r2, [r3, #96]
 265:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 470              		.loc 2 265 5 view .LVU121
 471              	.LVL43:
 265:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 472              		.loc 2 265 20 is_stmt 0 view .LVU122
 473 006c 0120     		movs	r0, #1
 474 006e F1E7     		b	.L20
 475              	.LVL44:
 476              	.L21:
 242:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 477              		.loc 2 242 3 view .LVU123
 478 0070 0220     		movs	r0, #2
 479 0072 F2E7     		b	.L18
 480              		.cfi_endproc
 481              	.LFE327:
 483              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 484              		.align	1
 485              		.global	HAL_ADCEx_InjectedStart
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv4-sp-d16
 491              	HAL_ADCEx_InjectedStart:
 492              	.LVL45:
 493              	.LFB328:
 274:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 275:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 276:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group.
 277:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function: None.
 278:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Case of multimode enabled when multimode feature is available:
 279:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart() API must be called for ADC slave first,
 280:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         then for ADC master.
 281:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 282:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 283:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 284:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 285:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 286:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
 287:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 494              		.loc 2 287 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 288:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 498              		.loc 2 288 3 view .LVU125
 289:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 499              		.loc 2 289 3 view .LVU126
 290:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 291:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 500              		.loc 2 291 3 view .LVU127
 501              	.LBB136:
 502              	.LBI136:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 503              		.loc 1 6284 26 view .LVU128
 504              	.LBB137:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 505              		.loc 1 6286 3 view .LVU129
 506              	.LBE137:
 507              	.LBE136:
 287:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 508              		.loc 2 287 1 is_stmt 0 view .LVU130
 509 0000 38B5     		push	{r3, r4, r5, lr}
 510              		.cfi_def_cfa_offset 16
 511              		.cfi_offset 3, -16
 512              		.cfi_offset 4, -12
 513              		.cfi_offset 5, -8
 514              		.cfi_offset 14, -4
 515              	.LBB141:
 516              	.LBB138:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 517              		.loc 1 6286 21 view .LVU131
 518 0002 324B     		ldr	r3, .L43
 519              	.LBE138:
 520              	.LBE141:
 287:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 521              		.loc 2 287 1 view .LVU132
 522 0004 0446     		mov	r4, r0
 292:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 293:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 294:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 295:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 296:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 297:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 523              		.loc 2 297 7 view .LVU133
 524 0006 0068     		ldr	r0, [r0]
 525              	.LVL46:
 526              	.LBB142:
 527              	.LBB139:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 528              		.loc 1 6286 21 view .LVU134
 529 0008 9D68     		ldr	r5, [r3, #8]
 530              	.LVL47:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 531              		.loc 1 6286 21 view .LVU135
 532              	.LBE139:
 533              	.LBE142:
 295:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 534              		.loc 2 295 3 is_stmt 1 view .LVU136
 535              		.loc 2 297 3 view .LVU137
 536              		.loc 2 297 7 is_stmt 0 view .LVU138
 537 000a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 538              	.LVL48:
 539              		.loc 2 297 6 view .LVU139
 540 000e 0028     		cmp	r0, #0
 541 0010 55D1     		bne	.L37
 298:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 299:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return HAL_BUSY;
 300:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 301:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 302:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 303:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 304:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 305:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 306:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 307:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 308:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 309:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          the queue is empty */
 310:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 542              		.loc 2 310 5 is_stmt 1 view .LVU140
 543              		.loc 2 310 33 is_stmt 0 view .LVU141
 544 0012 2368     		ldr	r3, [r4]
 545 0014 DA68     		ldr	r2, [r3, #12]
 546              	.LVL49:
 311:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 312:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 547              		.loc 2 312 5 is_stmt 1 view .LVU142
 548              		.loc 2 312 10 is_stmt 0 view .LVU143
 549 0016 DB6C     		ldr	r3, [r3, #76]
 550              		.loc 2 312 8 view .LVU144
 551 0018 13F4C07F 		tst	r3, #384
 552 001c 07D1     		bne	.L27
 313:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 553              		.loc 2 313 9 view .LVU145
 554 001e 002A     		cmp	r2, #0
 555 0020 05DB     		blt	.L27
 314:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        )
 315:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 316:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 556              		.loc 2 316 7 is_stmt 1 view .LVU146
 557 0022 E36D     		ldr	r3, [r4, #92]
 558 0024 43F02003 		orr	r3, r3, #32
 559 0028 E365     		str	r3, [r4, #92]
 317:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       return HAL_ERROR;
 560              		.loc 2 317 7 view .LVU147
 561              		.loc 2 317 14 is_stmt 0 view .LVU148
 562 002a 0120     		movs	r0, #1
 563              	.LVL50:
 564              	.L39:
 318:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 319:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 320:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Process locked */
 321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 322:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 323:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 324:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 325:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 326:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 327:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 328:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 329:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 330:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 331:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 332:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 333:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 334:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 335:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
 336:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 337:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 338:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 339:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 340:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 341:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 342:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 343:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 344:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 345:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 346:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 347:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 348:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 349:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 350:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 351:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 353:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 354:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 355:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 356:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 357:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 358:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 359:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 360:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 361:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 362:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 363:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 364:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 365:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 366:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 367:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 368:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 369:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 370:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 371:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 372:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 373:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 374:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 375:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 376:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
 377:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 378:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 379:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 380:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 381:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 382:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 383:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 384:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 385:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 386:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 387:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 388:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 389:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 390:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 391:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 392:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 393:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 394:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
 395:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 396:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 397:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 398:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 399:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #else
 400:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 401:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 402:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Start ADC group injected conversion */
 403:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_INJ_StartConversion(hadc->Instance);
 404:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 405:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 406:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 407:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 408:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
 409:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 410:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 411:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 412:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 413:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 414:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Return function status */
 415:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return tmp_hal_status;
 416:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 417:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 565              		.loc 2 417 1 view .LVU149
 566 002c 38BD     		pop	{r3, r4, r5, pc}
 567              	.LVL51:
 568              	.L27:
 321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 569              		.loc 2 321 5 is_stmt 1 view .LVU150
 321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 570              		.loc 2 321 5 view .LVU151
 571 002e 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 572 0032 012B     		cmp	r3, #1
 573 0034 43D0     		beq	.L37
 321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 574              		.loc 2 321 5 discriminator 2 view .LVU152
 575 0036 0123     		movs	r3, #1
 576 0038 84F85830 		strb	r3, [r4, #88]
 324:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 577              		.loc 2 324 5 discriminator 2 view .LVU153
 324:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 578              		.loc 2 324 22 is_stmt 0 discriminator 2 view .LVU154
 579 003c 2046     		mov	r0, r4
 580 003e FFF7FEFF 		bl	ADC_Enable
 581              	.LVL52:
 327:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 582              		.loc 2 327 5 is_stmt 1 discriminator 2 view .LVU155
 327:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 583              		.loc 2 327 8 is_stmt 0 discriminator 2 view .LVU156
 584 0042 0028     		cmp	r0, #0
 585 0044 37D1     		bne	.L28
 330:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 586              		.loc 2 330 7 is_stmt 1 view .LVU157
 330:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 587              		.loc 2 330 16 is_stmt 0 view .LVU158
 588 0046 E36D     		ldr	r3, [r4, #92]
 330:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 589              		.loc 2 330 10 view .LVU159
 590 0048 D905     		lsls	r1, r3, #23
 333:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 591              		.loc 2 333 9 is_stmt 1 view .LVU160
 592 004a 49BF     		itett	mi
 593 004c 236E     		ldrmi	r3, [r4, #96]
 338:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 594              		.loc 2 338 9 is_stmt 0 view .LVU161
 595 004e 2066     		strpl	r0, [r4, #96]
 333:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 596              		.loc 2 333 9 view .LVU162
 597 0050 23F00803 		bicmi	r3, r3, #8
 598 0054 2366     		strmi	r3, [r4, #96]
 338:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 599              		.loc 2 338 9 is_stmt 1 view .LVU163
 344:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 600              		.loc 2 344 7 is_stmt 0 view .LVU164
 601 0056 E36D     		ldr	r3, [r4, #92]
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 602              		.loc 2 352 12 view .LVU165
 603 0058 1D49     		ldr	r1, .L43+4
 344:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 604              		.loc 2 344 7 view .LVU166
 605 005a 23F44053 		bic	r3, r3, #12288
 606 005e 23F00103 		bic	r3, r3, #1
 607 0062 43F48053 		orr	r3, r3, #4096
 608 0066 E365     		str	r3, [r4, #92]
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 609              		.loc 2 352 12 view .LVU167
 610 0068 2368     		ldr	r3, [r4]
 611 006a 8B42     		cmp	r3, r1
 612              	.LBB143:
 613              	.LBB140:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 614              		.loc 1 6286 10 view .LVU168
 615 006c 05F01F02 		and	r2, r5, #31
 616              	.LBE140:
 617              	.LBE143:
 344:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 618              		.loc 2 344 7 is_stmt 1 view .LVU169
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 619              		.loc 2 352 7 view .LVU170
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 620              		.loc 2 352 12 is_stmt 0 view .LVU171
 621 0070 27D0     		beq	.L31
 622 0072 1946     		mov	r1, r3
 623              	.L34:
 356:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 624              		.loc 2 356 9 is_stmt 1 view .LVU172
 625 0074 E56D     		ldr	r5, [r4, #92]
 626              	.LVL53:
 356:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 627              		.loc 2 356 9 is_stmt 0 view .LVU173
 628 0076 25F48015 		bic	r5, r5, #1048576
 629 007a E565     		str	r5, [r4, #92]
 630              	.L35:
 362:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 631              		.loc 2 362 7 is_stmt 1 view .LVU174
 632 007c 6025     		movs	r5, #96
 633 007e 1D60     		str	r5, [r3]
 367:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 634              		.loc 2 367 7 view .LVU175
 367:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 635              		.loc 2 367 7 view .LVU176
 382:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 636              		.loc 2 382 10 is_stmt 0 view .LVU177
 637 0080 8B42     		cmp	r3, r1
 367:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 638              		.loc 2 367 7 view .LVU178
 639 0082 4FF00005 		mov	r5, #0
 640 0086 84F85850 		strb	r5, [r4, #88]
 382:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 641              		.loc 2 382 7 is_stmt 1 view .LVU179
 382:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 642              		.loc 2 382 10 is_stmt 0 view .LVU180
 643 008a 03D0     		beq	.L32
 383:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 644              		.loc 2 383 11 view .LVU181
 645 008c 12B1     		cbz	r2, .L32
 384:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 646              		.loc 2 384 11 view .LVU182
 647 008e 063A     		subs	r2, r2, #6
 648 0090 012A     		cmp	r2, #1
 649 0092 0BD8     		bhi	.L33
 650              	.L32:
 389:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 651              		.loc 2 389 9 is_stmt 1 view .LVU183
 652              	.LVL54:
 653              	.LBB144:
 654              	.LBI144:
4760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 655              		.loc 1 4760 26 view .LVU184
 656              	.LBB145:
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 657              		.loc 1 4762 3 view .LVU185
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 658              		.loc 1 4762 21 is_stmt 0 view .LVU186
 659 0094 DA68     		ldr	r2, [r3, #12]
 660              	.LVL55:
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 661              		.loc 1 4762 21 view .LVU187
 662              	.LBE145:
 663              	.LBE144:
 389:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 664              		.loc 2 389 12 view .LVU188
 665 0096 9201     		lsls	r2, r2, #6
 666 0098 C8D4     		bmi	.L39
 391:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 667              		.loc 2 391 11 is_stmt 1 view .LVU189
 668              	.LVL56:
 669              	.LBB146:
 670              	.LBI146:
6932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 671              		.loc 1 6932 22 view .LVU190
 672              	.LBB147:
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 673              		.loc 1 6937 3 view .LVU191
 674 009a 9A68     		ldr	r2, [r3, #8]
 675 009c 22F00042 		bic	r2, r2, #-2147483648
 676 00a0 22F03F02 		bic	r2, r2, #63
 677 00a4 42F00802 		orr	r2, r2, #8
 678 00a8 9A60     		str	r2, [r3, #8]
 679 00aa BFE7     		b	.L39
 680              	.LVL57:
 681              	.L33:
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 682              		.loc 1 6937 3 is_stmt 0 view .LVU192
 683              	.LBE147:
 684              	.LBE146:
 397:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 685              		.loc 2 397 9 is_stmt 1 view .LVU193
 686 00ac E36D     		ldr	r3, [r4, #92]
 687 00ae 43F48013 		orr	r3, r3, #1048576
 688 00b2 E365     		str	r3, [r4, #92]
 689 00b4 BAE7     		b	.L39
 690              	.LVL58:
 691              	.L28:
 411:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 692              		.loc 2 411 7 view .LVU194
 411:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 693              		.loc 2 411 7 view .LVU195
 694 00b6 0023     		movs	r3, #0
 695 00b8 84F85830 		strb	r3, [r4, #88]
 696 00bc B6E7     		b	.L39
 697              	.LVL59:
 698              	.L37:
 299:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 699              		.loc 2 299 12 is_stmt 0 view .LVU196
 700 00be 0220     		movs	r0, #2
 701 00c0 B4E7     		b	.L39
 702              	.LVL60:
 703              	.L31:
 352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 704              		.loc 2 352 12 view .LVU197
 705 00c2 4FF0A041 		mov	r1, #1342177280
 353:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 706              		.loc 2 353 11 view .LVU198
 707 00c6 002A     		cmp	r2, #0
 708 00c8 D4D0     		beq	.L34
 709 00ca D7E7     		b	.L35
 710              	.L44:
 711              		.align	2
 712              	.L43:
 713 00cc 00030050 		.word	1342178048
 714 00d0 00010050 		.word	1342177536
 715              		.cfi_endproc
 716              	.LFE328:
 718              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 719              		.align	1
 720              		.global	HAL_ADCEx_InjectedStop
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu fpv4-sp-d16
 726              	HAL_ADCEx_InjectedStop:
 727              	.LVL61:
 728              	.LFB329:
 418:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 419:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 420:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 421:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 422:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 423:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 424:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 425:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 426:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 427:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   In case of multimode enabled (when multimode feature is available),
 428:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop() must be called for ADC master first, then for ADC slave.
 429:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 430:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 431:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 432:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 433:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 434:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 435:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
 436:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 729              		.loc 2 436 1 is_stmt 1 view -0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 437:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 733              		.loc 2 437 3 view .LVU200
 438:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 439:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 440:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 734              		.loc 2 440 3 view .LVU201
 441:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 442:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
 443:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 735              		.loc 2 443 3 view .LVU202
 736              		.loc 2 443 3 view .LVU203
 737 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 738 0004 012B     		cmp	r3, #1
 436:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 739              		.loc 2 436 1 is_stmt 0 view .LVU204
 740 0006 10B5     		push	{r4, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 4, -8
 743              		.cfi_offset 14, -4
 436:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 744              		.loc 2 436 1 view .LVU205
 745 0008 0446     		mov	r4, r0
 746              		.loc 2 443 3 view .LVU206
 747 000a 21D0     		beq	.L49
 748              		.loc 2 443 3 is_stmt 1 discriminator 2 view .LVU207
 749 000c 0123     		movs	r3, #1
 750 000e 80F85830 		strb	r3, [r0, #88]
 444:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 445:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 446:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 751              		.loc 2 446 3 discriminator 2 view .LVU208
 752              		.loc 2 446 20 is_stmt 0 discriminator 2 view .LVU209
 753 0012 0221     		movs	r1, #2
 754 0014 FFF7FEFF 		bl	ADC_ConversionStop
 755              	.LVL62:
 447:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 448:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 449:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* and if no conversion on regular group is on-going                       */
 450:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 756              		.loc 2 450 3 is_stmt 1 discriminator 2 view .LVU210
 757              		.loc 2 450 6 is_stmt 0 discriminator 2 view .LVU211
 758 0018 0246     		mov	r2, r0
 759 001a 80B9     		cbnz	r0, .L47
 451:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 452:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 760              		.loc 2 452 5 is_stmt 1 view .LVU212
 761              		.loc 2 452 9 is_stmt 0 view .LVU213
 762 001c 2068     		ldr	r0, [r4]
 763              	.LVL63:
 764              		.loc 2 452 9 view .LVU214
 765 001e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 766              	.LVL64:
 767              		.loc 2 452 8 view .LVU215
 768 0022 88B9     		cbnz	r0, .L48
 453:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 454:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 455:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 769              		.loc 2 455 7 is_stmt 1 view .LVU216
 770              		.loc 2 455 24 is_stmt 0 view .LVU217
 771 0024 2046     		mov	r0, r4
 772 0026 FFF7FEFF 		bl	ADC_Disable
 773              	.LVL65:
 456:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 457:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 458:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 774              		.loc 2 458 7 is_stmt 1 view .LVU218
 775              		.loc 2 458 10 is_stmt 0 view .LVU219
 776 002a 0246     		mov	r2, r0
 777 002c 38B9     		cbnz	r0, .L47
 459:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 460:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
 461:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 778              		.loc 2 461 9 is_stmt 1 view .LVU220
 779 002e E36D     		ldr	r3, [r4, #92]
 780 0030 23F48853 		bic	r3, r3, #4352
 781 0034 23F00103 		bic	r3, r3, #1
 782 0038 43F00103 		orr	r3, r3, #1
 783              	.LVL66:
 784              	.L50:
 462:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 463:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 464:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 465:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 466:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 467:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 468:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
 469:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 470:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state */
 471:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 785              		.loc 2 471 7 is_stmt 0 view .LVU221
 786 003c E365     		str	r3, [r4, #92]
 787              	.L47:
 788              	.LVL67:
 472:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 473:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 474:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 475:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
 476:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 789              		.loc 2 476 3 is_stmt 1 view .LVU222
 790              		.loc 2 476 3 view .LVU223
 791 003e 0023     		movs	r3, #0
 792 0040 84F85830 		strb	r3, [r4, #88]
 477:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 478:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
 479:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 793              		.loc 2 479 3 view .LVU224
 794              	.LVL68:
 795              	.L46:
 480:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 796              		.loc 2 480 1 is_stmt 0 view .LVU225
 797 0044 1046     		mov	r0, r2
 798 0046 10BD     		pop	{r4, pc}
 799              	.LVL69:
 800              	.L48:
 471:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 801              		.loc 2 471 7 is_stmt 1 view .LVU226
 802 0048 E36D     		ldr	r3, [r4, #92]
 803 004a 23F48053 		bic	r3, r3, #4096
 804 004e F5E7     		b	.L50
 805              	.LVL70:
 806              	.L49:
 443:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 807              		.loc 2 443 3 is_stmt 0 view .LVU227
 808 0050 0222     		movs	r2, #2
 809 0052 F7E7     		b	.L46
 810              		.cfi_endproc
 811              	.LFE329:
 813              		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 814              		.align	1
 815              		.global	HAL_ADCEx_InjectedPollForConversion
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	HAL_ADCEx_InjectedPollForConversion:
 822              	.LVL71:
 823              	.LFB330:
 481:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 482:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 483:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 484:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
 485:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param Timeout Timeout value in millisecond.
 486:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
 487:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         checked and cleared depending on AUTDLY bit status.
 488:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 489:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 490:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
 491:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 824              		.loc 2 491 1 is_stmt 1 view -0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 492:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tickstart;
 828              		.loc 2 492 3 view .LVU229
 493:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_Flag_End;
 829              		.loc 2 493 3 view .LVU230
 494:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 830              		.loc 2 494 3 view .LVU231
 495:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
 831              		.loc 2 495 3 view .LVU232
 496:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_cfgr;
 832              		.loc 2 496 3 view .LVU233
 497:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 498:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   const ADC_TypeDef *tmpADC_Master;
 833              		.loc 2 498 3 view .LVU234
 499:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 834              		.loc 2 499 3 view .LVU235
 835              	.LBB154:
 836              	.LBI154:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 837              		.loc 1 6284 26 view .LVU236
 838              	.LBB155:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 839              		.loc 1 6286 3 view .LVU237
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 840              		.loc 1 6286 21 is_stmt 0 view .LVU238
 841 0000 2F4B     		ldr	r3, .L87
 842              	.LBE155:
 843              	.LBE154:
 491:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tickstart;
 844              		.loc 2 491 1 view .LVU239
 845 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 846              		.cfi_def_cfa_offset 24
 847              		.cfi_offset 4, -24
 848              		.cfi_offset 5, -20
 849              		.cfi_offset 6, -16
 850              		.cfi_offset 7, -12
 851              		.cfi_offset 8, -8
 852              		.cfi_offset 14, -4
 853              	.LBB157:
 854              	.LBB156:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 855              		.loc 1 6286 21 view .LVU240
 856 0006 9D68     		ldr	r5, [r3, #8]
 857              	.LVL72:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 858              		.loc 1 6286 21 view .LVU241
 859              	.LBE156:
 860              	.LBE157:
 500:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 501:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 502:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 503:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 861              		.loc 2 503 3 is_stmt 1 view .LVU242
 504:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 505:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* If end of sequence selected */
 506:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 862              		.loc 2 506 3 view .LVU243
 863              		.loc 2 506 6 is_stmt 0 view .LVU244
 864 0008 8369     		ldr	r3, [r0, #24]
 507:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 508:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOS;
 509:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 510:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else /* end of conversion selected */
 511:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOC;
 865              		.loc 2 512 18 view .LVU245
 866 000a 082B     		cmp	r3, #8
 491:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tickstart;
 867              		.loc 2 491 1 view .LVU246
 868 000c 0446     		mov	r4, r0
 869 000e 0F46     		mov	r7, r1
 870              		.loc 2 512 18 view .LVU247
 871 0010 0CBF     		ite	eq
 872 0012 4026     		moveq	r6, #64
 873 0014 2026     		movne	r6, #32
 874              	.LVL73:
 513:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 514:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 515:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Get timeout */
 516:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();
 875              		.loc 2 516 3 is_stmt 1 view .LVU248
 876              		.loc 2 516 15 is_stmt 0 view .LVU249
 877 0016 FFF7FEFF 		bl	HAL_GetTick
 878              	.LVL74:
 879              		.loc 2 516 15 view .LVU250
 880 001a 8046     		mov	r8, r0
 881              	.LVL75:
 517:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 518:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Wait until End of Conversion or Sequence flag is raised */
 519:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 882              		.loc 2 519 3 is_stmt 1 view .LVU251
 883              	.L53:
 884              		.loc 2 519 15 is_stmt 0 view .LVU252
 885 001c 2368     		ldr	r3, [r4]
 886              	.L54:
 887              		.loc 2 519 25 view .LVU253
 888 001e 1A68     		ldr	r2, [r3]
 889              		.loc 2 519 9 view .LVU254
 890 0020 3242     		tst	r2, r6
 891 0022 30D0     		beq	.L57
 520:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 521:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
 522:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (Timeout != HAL_MAX_DELAY)
 523:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 525:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 526:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
 527:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 528:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 529:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Process unlocked */
 530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 531:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 532:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 533:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 534:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 535:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 536:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 537:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Retrieve ADC configuration */
 538:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 892              		.loc 2 538 3 is_stmt 1 view .LVU255
 893              	.LVL76:
 894              	.LBB158:
 895              	.LBI158:
4436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 896              		.loc 1 4436 26 view .LVU256
 897              	.LBB159:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 898              		.loc 1 4438 3 view .LVU257
 899              	.LBE159:
 900              	.LBE158:
 539:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 540:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave  */
 541:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* in function of multimode state (for devices with multimode         */
 542:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* available).                                                        */
 543:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 544:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 901              		.loc 2 544 8 is_stmt 0 view .LVU258
 902 0024 2748     		ldr	r0, .L87+4
 903              	.LBB162:
 904              	.LBB160:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 905              		.loc 1 4438 12 view .LVU259
 906 0026 D96C     		ldr	r1, [r3, #76]
 907              	.LBE160:
 908              	.LBE162:
 909              	.LBB163:
 910              	.LBB164:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 911              		.loc 1 3651 12 view .LVU260
 912 0028 DA68     		ldr	r2, [r3, #12]
 913              	.LBE164:
 914              	.LBE163:
 915              		.loc 2 544 8 view .LVU261
 916 002a 8342     		cmp	r3, r0
 917              	.LBB167:
 918              	.LBB161:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 919              		.loc 1 4438 12 view .LVU262
 920 002c 01F4C071 		and	r1, r1, #384
 921              	.LVL77:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 922              		.loc 1 4438 12 view .LVU263
 923              	.LBE161:
 924              	.LBE167:
 539:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 925              		.loc 2 539 3 is_stmt 1 view .LVU264
 926              	.LBB168:
 927              	.LBI163:
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 928              		.loc 1 3649 26 view .LVU265
 929              	.LBB165:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 930              		.loc 1 3651 3 view .LVU266
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 931              		.loc 1 3651 3 is_stmt 0 view .LVU267
 932              	.LBE165:
 933              	.LBE168:
 934              		.loc 2 544 3 is_stmt 1 view .LVU268
 935              		.loc 2 544 8 is_stmt 0 view .LVU269
 936 0030 05D1     		bne	.L58
 545:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 937              		.loc 2 545 7 view .LVU270
 938 0032 15F01F05 		ands	r5, r5, #31
 939              	.LVL78:
 940              		.loc 2 545 7 view .LVU271
 941 0036 02D0     		beq	.L58
 546:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 942              		.loc 2 546 7 view .LVU272
 943 0038 063D     		subs	r5, r5, #6
 944 003a 012D     		cmp	r5, #1
 945 003c 37D8     		bhi	.L60
 946              	.L58:
 547:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 548:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      )
 549:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 550:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 947              		.loc 2 550 5 is_stmt 1 view .LVU273
 948              		.loc 2 550 14 is_stmt 0 view .LVU274
 949 003e D868     		ldr	r0, [r3, #12]
 950              	.LVL79:
 951              	.L61:
 551:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 552:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 554:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 556:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 557:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #else
 558:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 559:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 560:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 561:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Update ADC state machine */
 562:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 952              		.loc 2 562 3 is_stmt 1 view .LVU275
 953 0040 E56D     		ldr	r5, [r4, #92]
 954 0042 45F40055 		orr	r5, r5, #8192
 955 0046 E565     		str	r5, [r4, #92]
 563:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 564:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 565:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 566:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 567:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 956              		.loc 2 567 3 view .LVU276
 957              		.loc 2 567 6 is_stmt 0 view .LVU277
 958 0048 29B1     		cbz	r1, .L62
 568:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 569:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 959              		.loc 2 569 58 discriminator 1 view .LVU278
 960 004a 1F49     		ldr	r1, .L87+8
 961              	.LVL80:
 962              	.LBB169:
 963              	.LBB166:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 964              		.loc 1 3651 12 discriminator 1 view .LVU279
 965 004c 02F44062 		and	r2, r2, #3072
 966              	.LVL81:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 967              		.loc 1 3651 12 discriminator 1 view .LVU280
 968              	.LBE166:
 969              	.LBE169:
 970              		.loc 2 569 58 discriminator 1 view .LVU281
 971 0050 0140     		ands	r1, r1, r0
 972 0052 0A43     		orrs	r2, r1, r2
 973 0054 0FD1     		bne	.L63
 974              	.L62:
 570:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 571:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 572:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Check whether end of sequence is reached */
 573:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 975              		.loc 2 573 5 is_stmt 1 view .LVU282
 976              		.loc 2 573 9 is_stmt 0 view .LVU283
 977 0056 1A68     		ldr	r2, [r3]
 978              		.loc 2 573 8 view .LVU284
 979 0058 5506     		lsls	r5, r2, #25
 980 005a 0CD5     		bpl	.L63
 574:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 575:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Particular case if injected contexts queue is enabled:             */
 576:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* when the last context has been fully processed, JSQR is reset      */
 577:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* by the hardware. Even if no injected conversion is planned to come */
 578:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* (queue empty, triggers are ignored), it can start again            */
 579:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* immediately after setting a new context (JADSTART is still set).   */
 580:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Therefore, state of HAL ADC injected group is kept to busy.        */
 581:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 981              		.loc 2 581 7 is_stmt 1 view .LVU285
 982              		.loc 2 581 10 is_stmt 0 view .LVU286
 983 005c 8102     		lsls	r1, r0, #10
 984 005e 0AD4     		bmi	.L63
 582:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 583:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
 584:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 985              		.loc 2 584 9 is_stmt 1 view .LVU287
 986 0060 E26D     		ldr	r2, [r4, #92]
 987 0062 22F48052 		bic	r2, r2, #4096
 988 0066 E265     		str	r2, [r4, #92]
 585:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 586:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 989              		.loc 2 586 9 view .LVU288
 990              		.loc 2 586 18 is_stmt 0 view .LVU289
 991 0068 E26D     		ldr	r2, [r4, #92]
 992              		.loc 2 586 12 view .LVU290
 993 006a D205     		lsls	r2, r2, #23
 587:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 588:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 994              		.loc 2 588 11 is_stmt 1 view .LVU291
 995 006c 5EBF     		ittt	pl
 996 006e E26D     		ldrpl	r2, [r4, #92]
 997 0070 42F00102 		orrpl	r2, r2, #1
 998 0074 E265     		strpl	r2, [r4, #92]
 999              	.L63:
 589:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 590:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 591:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 592:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 593:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 594:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Clear polled flag */
 595:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_Flag_End == ADC_FLAG_JEOS)
 1000              		.loc 2 595 3 view .LVU292
 1001              		.loc 2 595 6 is_stmt 0 view .LVU293
 1002 0076 402E     		cmp	r6, #64
 1003 0078 1DD1     		bne	.L65
 596:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 597:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear end of sequence JEOS flag of injected group if low power feature */
 598:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
 599:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* For injected groups, no new conversion will start before JEOS is       */
 600:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* cleared.                                                               */
 601:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 1004              		.loc 2 601 5 is_stmt 1 view .LVU294
 1005              		.loc 2 601 8 is_stmt 0 view .LVU295
 1006 007a 10F48040 		ands	r0, r0, #16384
 1007              	.LVL82:
 1008              		.loc 2 601 8 view .LVU296
 1009 007e 1CD1     		bne	.L68
 602:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 603:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 1010              		.loc 2 603 7 is_stmt 1 view .LVU297
 1011 0080 6022     		movs	r2, #96
 1012 0082 1A60     		str	r2, [r3]
 1013 0084 11E0     		b	.L84
 1014              	.LVL83:
 1015              	.L57:
 522:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1016              		.loc 2 522 5 view .LVU298
 522:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1017              		.loc 2 522 8 is_stmt 0 view .LVU299
 1018 0086 7A1C     		adds	r2, r7, #1
 1019 0088 C9D0     		beq	.L54
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1020              		.loc 2 524 7 is_stmt 1 view .LVU300
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1021              		.loc 2 524 13 is_stmt 0 view .LVU301
 1022 008a FFF7FEFF 		bl	HAL_GetTick
 1023              	.LVL84:
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1024              		.loc 2 524 27 view .LVU302
 1025 008e A0EB0800 		sub	r0, r0, r8
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1026              		.loc 2 524 10 view .LVU303
 1027 0092 B842     		cmp	r0, r7
 1028 0094 01D8     		bhi	.L55
 524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1029              		.loc 2 524 51 discriminator 1 view .LVU304
 1030 0096 002F     		cmp	r7, #0
 1031 0098 C0D1     		bne	.L53
 1032              	.L55:
 527:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1033              		.loc 2 527 9 is_stmt 1 view .LVU305
 1034 009a E36D     		ldr	r3, [r4, #92]
 1035 009c 43F00403 		orr	r3, r3, #4
 1036 00a0 E365     		str	r3, [r4, #92]
 530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1037              		.loc 2 530 9 view .LVU306
 530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1038              		.loc 2 530 9 view .LVU307
 1039 00a2 0023     		movs	r3, #0
 1040 00a4 84F85830 		strb	r3, [r4, #88]
 532:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1041              		.loc 2 532 9 view .LVU308
 532:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1042              		.loc 2 532 16 is_stmt 0 view .LVU309
 1043 00a8 0320     		movs	r0, #3
 1044              	.LVL85:
 1045              	.L84:
 604:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 605:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 606:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 607:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 608:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 609:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 610:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 611:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return API HAL status */
 612:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return HAL_OK;
 613:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1046              		.loc 2 613 1 view .LVU310
 1047 00aa BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1048              	.LVL86:
 1049              	.L60:
 554:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 1050              		.loc 2 554 5 is_stmt 1 discriminator 4 view .LVU311
 555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1051              		.loc 2 555 5 discriminator 4 view .LVU312
 555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1052              		.loc 2 555 14 is_stmt 0 discriminator 4 view .LVU313
 1053 00ae 4FF0A040 		mov	r0, #1342177280
 1054 00b2 C068     		ldr	r0, [r0, #12]
 1055              	.LVL87:
 555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1056              		.loc 2 555 14 discriminator 4 view .LVU314
 1057 00b4 C4E7     		b	.L61
 1058              	.LVL88:
 1059              	.L65:
 608:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1060              		.loc 2 608 5 is_stmt 1 view .LVU315
 1061 00b6 2022     		movs	r2, #32
 1062 00b8 1A60     		str	r2, [r3]
 1063              	.LVL89:
 1064              	.L68:
 612:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1065              		.loc 2 612 10 is_stmt 0 view .LVU316
 1066 00ba 0020     		movs	r0, #0
 1067 00bc F5E7     		b	.L84
 1068              	.L88:
 1069 00be 00BF     		.align	2
 1070              	.L87:
 1071 00c0 00030050 		.word	1342178048
 1072 00c4 00010050 		.word	1342177536
 1073 00c8 00200002 		.word	33562624
 1074              		.cfi_endproc
 1075              	.LFE330:
 1077              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 1078              		.align	1
 1079              		.global	HAL_ADCEx_InjectedStart_IT
 1080              		.syntax unified
 1081              		.thumb
 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	HAL_ADCEx_InjectedStart_IT:
 1086              	.LVL90:
 1087              	.LFB331:
 614:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 615:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 616:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group with interruption.
 617:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function according to initialization
 618:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         setting : JEOC (end of conversion) or JEOS (end of sequence)
 619:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is enabled):
 620:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart_IT() API must be called for ADC slave first,
 621:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         then for ADC master.
 622:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 623:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 624:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 625:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status.
 626:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 627:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
 628:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1088              		.loc 2 628 1 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 629:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1092              		.loc 2 629 3 view .LVU318
 630:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 1093              		.loc 2 630 3 view .LVU319
 631:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 632:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 1094              		.loc 2 632 3 view .LVU320
 1095              	.LBB176:
 1096              	.LBI176:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1097              		.loc 1 6284 26 view .LVU321
 1098              	.LBB177:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1099              		.loc 1 6286 3 view .LVU322
 1100              	.LBE177:
 1101              	.LBE176:
 628:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1102              		.loc 2 628 1 is_stmt 0 view .LVU323
 1103 0000 38B5     		push	{r3, r4, r5, lr}
 1104              		.cfi_def_cfa_offset 16
 1105              		.cfi_offset 3, -16
 1106              		.cfi_offset 4, -12
 1107              		.cfi_offset 5, -8
 1108              		.cfi_offset 14, -4
 1109              	.LBB181:
 1110              	.LBB178:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1111              		.loc 1 6286 21 view .LVU324
 1112 0002 3D4B     		ldr	r3, .L120
 1113              	.LBE178:
 1114              	.LBE181:
 628:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1115              		.loc 2 628 1 view .LVU325
 1116 0004 0446     		mov	r4, r0
 633:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 634:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 635:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 636:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 637:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 638:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 1117              		.loc 2 638 7 view .LVU326
 1118 0006 0068     		ldr	r0, [r0]
 1119              	.LVL91:
 1120              	.LBB182:
 1121              	.LBB179:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1122              		.loc 1 6286 21 view .LVU327
 1123 0008 9D68     		ldr	r5, [r3, #8]
 1124              	.LVL92:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1125              		.loc 1 6286 21 view .LVU328
 1126              	.LBE179:
 1127              	.LBE182:
 636:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1128              		.loc 2 636 3 is_stmt 1 view .LVU329
 1129              		.loc 2 638 3 view .LVU330
 1130              		.loc 2 638 7 is_stmt 0 view .LVU331
 1131 000a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 1132              	.LVL93:
 1133              		.loc 2 638 6 view .LVU332
 1134 000e 0028     		cmp	r0, #0
 1135 0010 6DD1     		bne	.L106
 639:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return HAL_BUSY;
 641:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 642:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 643:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 644:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 645:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 646:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 647:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 648:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 649:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 650:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          the queue is empty */
 651:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 1136              		.loc 2 651 5 is_stmt 1 view .LVU333
 1137              		.loc 2 651 33 is_stmt 0 view .LVU334
 1138 0012 2368     		ldr	r3, [r4]
 1139 0014 DA68     		ldr	r2, [r3, #12]
 1140              	.LVL94:
 652:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 653:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 1141              		.loc 2 653 5 is_stmt 1 view .LVU335
 1142              		.loc 2 653 10 is_stmt 0 view .LVU336
 1143 0016 DB6C     		ldr	r3, [r3, #76]
 1144              		.loc 2 653 8 view .LVU337
 1145 0018 13F4C07F 		tst	r3, #384
 1146 001c 07D1     		bne	.L91
 654:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 1147              		.loc 2 654 9 view .LVU338
 1148 001e 002A     		cmp	r2, #0
 1149 0020 05DB     		blt	.L91
 655:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****        )
 656:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 657:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1150              		.loc 2 657 7 is_stmt 1 view .LVU339
 1151 0022 E36D     		ldr	r3, [r4, #92]
 1152 0024 43F02003 		orr	r3, r3, #32
 1153 0028 E365     		str	r3, [r4, #92]
 658:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       return HAL_ERROR;
 1154              		.loc 2 658 7 view .LVU340
 1155              		.loc 2 658 14 is_stmt 0 view .LVU341
 1156 002a 0120     		movs	r0, #1
 1157              	.LVL95:
 1158              	.L107:
 659:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 660:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 661:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Process locked */
 662:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 663:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 664:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 665:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 666:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 667:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 668:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 669:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 670:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 671:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 672:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 673:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 674:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 675:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 676:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
 677:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 678:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 679:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 680:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 681:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 682:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 683:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 684:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 685:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 686:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 687:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 688:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 689:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 690:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 691:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 692:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 694:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 695:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 696:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 697:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 698:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 699:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 700:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 701:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 702:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 703:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 704:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 705:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 706:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 707:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 708:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 709:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 710:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable ADC Injected context queue overflow interrupt if this feature   */
 711:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* is enabled.                                                            */
 712:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 713:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 714:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 715:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 716:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 717:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable ADC end of conversion interrupt */
 718:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       switch (hadc->Init.EOCSelection)
 719:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 720:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         case ADC_EOC_SEQ_CONV:
 721:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 722:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 723:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 724:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* case ADC_EOC_SINGLE_CONV */
 725:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         default:
 726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 727:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 728:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 729:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 730:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 731:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 732:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 733:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 734:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 735:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 736:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 737:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 738:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
 739:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 740:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 741:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 742:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 743:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 744:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 745:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 746:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 747:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 748:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 749:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 750:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 751:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 752:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 753:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 754:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 755:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 756:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
 757:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 758:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 759:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 760:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 761:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #else
 762:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 763:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 764:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Start ADC group injected conversion */
 765:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_INJ_StartConversion(hadc->Instance);
 766:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 767:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif
 768:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 769:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 770:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
 771:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 772:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 773:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 774:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 775:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 776:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Return function status */
 777:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return tmp_hal_status;
 778:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 779:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1159              		.loc 2 779 1 view .LVU342
 1160 002c 38BD     		pop	{r3, r4, r5, pc}
 1161              	.LVL96:
 1162              	.L91:
 662:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1163              		.loc 2 662 5 is_stmt 1 view .LVU343
 662:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1164              		.loc 2 662 5 view .LVU344
 1165 002e 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1166 0032 012B     		cmp	r3, #1
 1167 0034 5BD0     		beq	.L106
 662:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1168              		.loc 2 662 5 discriminator 2 view .LVU345
 1169 0036 0123     		movs	r3, #1
 1170 0038 84F85830 		strb	r3, [r4, #88]
 665:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1171              		.loc 2 665 5 discriminator 2 view .LVU346
 665:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1172              		.loc 2 665 22 is_stmt 0 discriminator 2 view .LVU347
 1173 003c 2046     		mov	r0, r4
 1174 003e FFF7FEFF 		bl	ADC_Enable
 1175              	.LVL97:
 668:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1176              		.loc 2 668 5 is_stmt 1 discriminator 2 view .LVU348
 668:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1177              		.loc 2 668 8 is_stmt 0 discriminator 2 view .LVU349
 1178 0042 0028     		cmp	r0, #0
 1179 0044 4FD1     		bne	.L92
 671:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1180              		.loc 2 671 7 is_stmt 1 view .LVU350
 671:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1181              		.loc 2 671 16 is_stmt 0 view .LVU351
 1182 0046 E36D     		ldr	r3, [r4, #92]
 693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1183              		.loc 2 693 12 view .LVU352
 1184 0048 2C49     		ldr	r1, .L120+4
 671:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1185              		.loc 2 671 10 view .LVU353
 1186 004a DB05     		lsls	r3, r3, #23
 674:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1187              		.loc 2 674 9 is_stmt 1 view .LVU354
 1188 004c 49BF     		itett	mi
 1189 004e 236E     		ldrmi	r3, [r4, #96]
 679:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1190              		.loc 2 679 9 is_stmt 0 view .LVU355
 1191 0050 2066     		strpl	r0, [r4, #96]
 674:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1192              		.loc 2 674 9 view .LVU356
 1193 0052 23F00803 		bicmi	r3, r3, #8
 1194 0056 2366     		strmi	r3, [r4, #96]
 679:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1195              		.loc 2 679 9 is_stmt 1 view .LVU357
 685:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 1196              		.loc 2 685 7 is_stmt 0 view .LVU358
 1197 0058 E36D     		ldr	r3, [r4, #92]
 1198 005a 23F44053 		bic	r3, r3, #12288
 1199 005e 23F00103 		bic	r3, r3, #1
 1200 0062 43F48053 		orr	r3, r3, #4096
 1201 0066 E365     		str	r3, [r4, #92]
 693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1202              		.loc 2 693 12 view .LVU359
 1203 0068 2368     		ldr	r3, [r4]
 1204 006a 8B42     		cmp	r3, r1
 1205              	.LBB183:
 1206              	.LBB180:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1207              		.loc 1 6286 10 view .LVU360
 1208 006c 05F01F02 		and	r2, r5, #31
 1209              	.LBE180:
 1210              	.LBE183:
 685:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 1211              		.loc 2 685 7 is_stmt 1 view .LVU361
 693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1212              		.loc 2 693 7 view .LVU362
 693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1213              		.loc 2 693 12 is_stmt 0 view .LVU363
 1214 0070 3FD0     		beq	.L95
 1215              	.L103:
 697:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1216              		.loc 2 697 9 is_stmt 1 view .LVU364
 1217 0072 E16D     		ldr	r1, [r4, #92]
 1218 0074 21F48011 		bic	r1, r1, #1048576
 1219 0078 E165     		str	r1, [r4, #92]
 1220              	.L104:
 703:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1221              		.loc 2 703 7 view .LVU365
 1222 007a 6021     		movs	r1, #96
 1223 007c 1960     		str	r1, [r3]
 708:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1224              		.loc 2 708 7 view .LVU366
 708:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1225              		.loc 2 708 7 view .LVU367
 1226 007e 0021     		movs	r1, #0
 1227 0080 84F85810 		strb	r1, [r4, #88]
 712:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1228              		.loc 2 712 7 view .LVU368
 712:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1229              		.loc 2 712 26 is_stmt 0 view .LVU369
 1230 0084 D968     		ldr	r1, [r3, #12]
 712:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1231              		.loc 2 712 10 view .LVU370
 1232 0086 8902     		lsls	r1, r1, #10
 714:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1233              		.loc 2 714 9 is_stmt 1 view .LVU371
 1234 0088 42BF     		ittt	mi
 1235 008a 5968     		ldrmi	r1, [r3, #4]
 1236 008c 41F48061 		orrmi	r1, r1, #1024
 1237 0090 5960     		strmi	r1, [r3, #4]
 718:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1238              		.loc 2 718 7 view .LVU372
 1239 0092 A169     		ldr	r1, [r4, #24]
 1240 0094 0829     		cmp	r1, #8
 726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 1241              		.loc 2 726 11 is_stmt 0 view .LVU373
 1242 0096 5968     		ldr	r1, [r3, #4]
 721:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 1243              		.loc 2 721 11 is_stmt 1 view .LVU374
 1244 0098 0BBF     		itete	eq
 1245 009a 21F02001 		biceq	r1, r1, #32
 726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 1246              		.loc 2 726 11 is_stmt 0 view .LVU375
 1247 009e 21F04001 		bicne	r1, r1, #64
 721:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 1248              		.loc 2 721 11 view .LVU376
 1249 00a2 5960     		streq	r1, [r3, #4]
 722:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 1250              		.loc 2 722 11 is_stmt 1 view .LVU377
 726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 1251              		.loc 2 726 11 is_stmt 0 view .LVU378
 1252 00a4 5960     		strne	r1, [r3, #4]
 722:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 1253              		.loc 2 722 11 view .LVU379
 1254 00a6 0BBF     		itete	eq
 1255 00a8 5968     		ldreq	r1, [r3, #4]
 727:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 1256              		.loc 2 727 11 view .LVU380
 1257 00aa 5968     		ldrne	r1, [r3, #4]
 722:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 1258              		.loc 2 722 11 view .LVU381
 1259 00ac 41F04001 		orreq	r1, r1, #64
 726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 1260              		.loc 2 726 11 is_stmt 1 view .LVU382
 727:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           break;
 1261              		.loc 2 727 11 view .LVU383
 1262 00b0 41F02001 		orrne	r1, r1, #32
 1263 00b4 5960     		str	r1, [r3, #4]
 728:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1264              		.loc 2 728 11 view .LVU384
 744:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1265              		.loc 2 744 7 view .LVU385
 744:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1266              		.loc 2 744 12 is_stmt 0 view .LVU386
 1267 00b6 1149     		ldr	r1, .L120+4
 1268 00b8 8B42     		cmp	r3, r1
 1269 00ba 03D1     		bne	.L99
 745:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 1270              		.loc 2 745 11 view .LVU387
 1271 00bc 12B1     		cbz	r2, .L99
 746:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 1272              		.loc 2 746 11 view .LVU388
 1273 00be 063A     		subs	r2, r2, #6
 1274 00c0 012A     		cmp	r2, #1
 1275 00c2 0BD8     		bhi	.L101
 1276              	.L99:
 751:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 1277              		.loc 2 751 9 is_stmt 1 view .LVU389
 1278              	.LVL98:
 1279              	.LBB184:
 1280              	.LBI184:
4760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1281              		.loc 1 4760 26 view .LVU390
 1282              	.LBB185:
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1283              		.loc 1 4762 3 view .LVU391
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1284              		.loc 1 4762 21 is_stmt 0 view .LVU392
 1285 00c4 DA68     		ldr	r2, [r3, #12]
 1286              	.LVL99:
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1287              		.loc 1 4762 21 view .LVU393
 1288              	.LBE185:
 1289              	.LBE184:
 751:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 1290              		.loc 2 751 12 view .LVU394
 1291 00c6 9201     		lsls	r2, r2, #6
 1292 00c8 B0D4     		bmi	.L107
 753:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 1293              		.loc 2 753 11 is_stmt 1 view .LVU395
 1294              	.LVL100:
 1295              	.LBB186:
 1296              	.LBI186:
6932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1297              		.loc 1 6932 22 view .LVU396
 1298              	.LBB187:
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1299              		.loc 1 6937 3 view .LVU397
 1300 00ca 9A68     		ldr	r2, [r3, #8]
 1301 00cc 22F00042 		bic	r2, r2, #-2147483648
 1302 00d0 22F03F02 		bic	r2, r2, #63
 1303 00d4 42F00802 		orr	r2, r2, #8
 1304 00d8 9A60     		str	r2, [r3, #8]
 1305 00da A7E7     		b	.L107
 1306              	.LVL101:
 1307              	.L101:
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1308              		.loc 1 6937 3 is_stmt 0 view .LVU398
 1309              	.LBE187:
 1310              	.LBE186:
 759:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 1311              		.loc 2 759 9 is_stmt 1 view .LVU399
 1312 00dc E36D     		ldr	r3, [r4, #92]
 1313 00de 43F48013 		orr	r3, r3, #1048576
 1314 00e2 E365     		str	r3, [r4, #92]
 1315 00e4 A2E7     		b	.L107
 1316              	.L92:
 773:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1317              		.loc 2 773 7 view .LVU400
 773:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1318              		.loc 2 773 7 view .LVU401
 1319 00e6 0023     		movs	r3, #0
 1320 00e8 84F85830 		strb	r3, [r4, #88]
 1321 00ec 9EE7     		b	.L107
 1322              	.LVL102:
 1323              	.L106:
 640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1324              		.loc 2 640 12 is_stmt 0 view .LVU402
 1325 00ee 0220     		movs	r0, #2
 1326 00f0 9CE7     		b	.L107
 1327              	.LVL103:
 1328              	.L95:
 694:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          )
 1329              		.loc 2 694 11 view .LVU403
 1330 00f2 002A     		cmp	r2, #0
 1331 00f4 BDD0     		beq	.L103
 1332 00f6 C0E7     		b	.L104
 1333              	.L121:
 1334              		.align	2
 1335              	.L120:
 1336 00f8 00030050 		.word	1342178048
 1337 00fc 00010050 		.word	1342177536
 1338              		.cfi_endproc
 1339              	.LFE331:
 1341              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 1342              		.align	1
 1343              		.global	HAL_ADCEx_InjectedStop_IT
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu fpv4-sp-d16
 1349              	HAL_ADCEx_InjectedStop_IT:
 1350              	.LVL104:
 1351              	.LFB332:
 780:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 781:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 782:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of
 783:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 784:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         is on going.
 785:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 786:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 787:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 788:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 789:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 790:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is available):
 791:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop_IT() API must be called for ADC master first,
 792:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         then for ADC slave.
 793:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 794:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 795:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 796:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
 797:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
 798:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 799:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 800:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
 801:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1352              		.loc 2 801 1 is_stmt 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
 802:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1356              		.loc 2 802 3 view .LVU405
 803:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 804:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1357              		.loc 2 805 3 view .LVU406
 806:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 807:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
 808:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1358              		.loc 2 808 3 view .LVU407
 1359              		.loc 2 808 3 view .LVU408
 1360 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 1361 0004 012B     		cmp	r3, #1
 801:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1362              		.loc 2 801 1 is_stmt 0 view .LVU409
 1363 0006 10B5     		push	{r4, lr}
 1364              		.cfi_def_cfa_offset 8
 1365              		.cfi_offset 4, -8
 1366              		.cfi_offset 14, -4
 801:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1367              		.loc 2 801 1 view .LVU410
 1368 0008 0446     		mov	r4, r0
 1369              		.loc 2 808 3 view .LVU411
 1370 000a 25D0     		beq	.L126
 1371              		.loc 2 808 3 is_stmt 1 discriminator 2 view .LVU412
 1372 000c 0123     		movs	r3, #1
 1373 000e 80F85830 		strb	r3, [r0, #88]
 809:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 811:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 1374              		.loc 2 811 3 discriminator 2 view .LVU413
 1375              		.loc 2 811 20 is_stmt 0 discriminator 2 view .LVU414
 1376 0012 0221     		movs	r1, #2
 1377 0014 FFF7FEFF 		bl	ADC_ConversionStop
 1378              	.LVL105:
 812:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 813:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 814:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* and if no conversion on the other group (regular group) is intended to   */
 815:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* continue.                                                                */
 816:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1379              		.loc 2 816 3 is_stmt 1 discriminator 2 view .LVU415
 1380              		.loc 2 816 6 is_stmt 0 discriminator 2 view .LVU416
 1381 0018 0246     		mov	r2, r0
 1382 001a A0B9     		cbnz	r0, .L124
 817:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 818:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for injected channels */
 819:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 1383              		.loc 2 819 5 is_stmt 1 view .LVU417
 1384 001c 2068     		ldr	r0, [r4]
 1385              	.LVL106:
 1386              		.loc 2 819 5 is_stmt 0 view .LVU418
 1387 001e 4368     		ldr	r3, [r0, #4]
 1388 0020 23F48C63 		bic	r3, r3, #1120
 1389 0024 4360     		str	r3, [r0, #4]
 820:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 821:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 1390              		.loc 2 821 5 is_stmt 1 view .LVU419
 1391              		.loc 2 821 9 is_stmt 0 view .LVU420
 1392 0026 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1393              	.LVL107:
 1394              		.loc 2 821 8 view .LVU421
 1395 002a 88B9     		cbnz	r0, .L125
 822:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 823:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 824:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 1396              		.loc 2 824 7 is_stmt 1 view .LVU422
 1397              		.loc 2 824 24 is_stmt 0 view .LVU423
 1398 002c 2046     		mov	r0, r4
 1399 002e FFF7FEFF 		bl	ADC_Disable
 1400              	.LVL108:
 825:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 826:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 827:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 1401              		.loc 2 827 7 is_stmt 1 view .LVU424
 1402              		.loc 2 827 10 is_stmt 0 view .LVU425
 1403 0032 0246     		mov	r2, r0
 1404 0034 38B9     		cbnz	r0, .L124
 828:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 829:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
 830:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 1405              		.loc 2 830 9 is_stmt 1 view .LVU426
 1406 0036 E36D     		ldr	r3, [r4, #92]
 1407 0038 23F48853 		bic	r3, r3, #4352
 1408 003c 23F00103 		bic	r3, r3, #1
 1409 0040 43F00103 		orr	r3, r3, #1
 1410              	.LVL109:
 1411              	.L127:
 831:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 832:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 833:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 834:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 835:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 836:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 837:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
 838:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 839:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state */
 840:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 1412              		.loc 2 840 7 is_stmt 0 view .LVU427
 1413 0044 E365     		str	r3, [r4, #92]
 1414              	.L124:
 1415              	.LVL110:
 841:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 842:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 843:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 844:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
 845:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1416              		.loc 2 845 3 is_stmt 1 view .LVU428
 1417              		.loc 2 845 3 view .LVU429
 1418 0046 0023     		movs	r3, #0
 1419 0048 84F85830 		strb	r3, [r4, #88]
 846:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 847:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
 848:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 1420              		.loc 2 848 3 view .LVU430
 1421              	.LVL111:
 1422              	.L123:
 849:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1423              		.loc 2 849 1 is_stmt 0 view .LVU431
 1424 004c 1046     		mov	r0, r2
 1425 004e 10BD     		pop	{r4, pc}
 1426              	.LVL112:
 1427              	.L125:
 840:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1428              		.loc 2 840 7 is_stmt 1 view .LVU432
 1429 0050 E36D     		ldr	r3, [r4, #92]
 1430 0052 23F48053 		bic	r3, r3, #4096
 1431 0056 F5E7     		b	.L127
 1432              	.LVL113:
 1433              	.L126:
 808:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1434              		.loc 2 808 3 is_stmt 0 view .LVU433
 1435 0058 0222     		movs	r2, #2
 1436 005a F7E7     		b	.L123
 1437              		.cfi_endproc
 1438              	.LFE332:
 1440              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 1441              		.align	1
 1442              		.global	HAL_ADCEx_MultiModeStart_DMA
 1443              		.syntax unified
 1444              		.thumb
 1445              		.thumb_func
 1446              		.fpu fpv4-sp-d16
 1448              	HAL_ADCEx_MultiModeStart_DMA:
 1449              	.LVL114:
 1450              	.LFB333:
 850:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 851:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 852:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 853:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enable ADC, start MultiMode conversion and transfer regular results through DMA.
 854:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Multimode must have been previously configured using
 855:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 856:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 857:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          overrun, DMA half transfer, DMA transfer complete.
 858:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
 859:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   State field of Slave ADC handle is not updated in this configuration:
 860:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          user should not rely on it for information related to Slave regular
 861:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         conversions.
 862:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
 863:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param pData Destination Buffer address.
 864:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
 865:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 866:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 867:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t L
 868:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1451              		.loc 2 868 1 is_stmt 1 view -0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 112
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 869:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1455              		.loc 2 869 3 view .LVU435
 870:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 1456              		.loc 2 870 3 view .LVU436
 871:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 1457              		.loc 2 871 3 view .LVU437
 872:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 873:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 874:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 1458              		.loc 2 874 3 view .LVU438
 875:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 1459              		.loc 2 875 3 view .LVU439
 876:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 1460              		.loc 2 876 3 view .LVU440
 877:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 1461              		.loc 2 877 3 view .LVU441
 878:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 879:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 1462              		.loc 2 879 3 view .LVU442
 868:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1463              		.loc 2 868 1 is_stmt 0 view .LVU443
 1464 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1465              		.cfi_def_cfa_offset 20
 1466              		.cfi_offset 4, -20
 1467              		.cfi_offset 5, -16
 1468              		.cfi_offset 6, -12
 1469              		.cfi_offset 7, -8
 1470              		.cfi_offset 14, -4
 1471 0002 0446     		mov	r4, r0
 1472 0004 9DB0     		sub	sp, sp, #116
 1473              		.cfi_def_cfa_offset 136
 1474              		.loc 2 879 7 view .LVU444
 1475 0006 0068     		ldr	r0, [r0]
 1476              	.LVL115:
 868:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1477              		.loc 2 868 1 view .LVU445
 1478 0008 0E46     		mov	r6, r1
 1479 000a 1746     		mov	r7, r2
 1480              		.loc 2 879 7 view .LVU446
 1481 000c FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1482              	.LVL116:
 1483              		.loc 2 879 6 view .LVU447
 1484 0010 0028     		cmp	r0, #0
 1485 0012 4AD1     		bne	.L133
 880:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 881:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return HAL_BUSY;
 882:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 883:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
 884:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 885:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Process locked */
 886:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1486              		.loc 2 886 5 is_stmt 1 view .LVU448
 1487              		.loc 2 886 5 view .LVU449
 1488 0014 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1489 0018 012B     		cmp	r3, #1
 1490 001a 46D0     		beq	.L133
 1491              		.loc 2 886 5 discriminator 2 view .LVU450
 887:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 888:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
 889:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1492              		.loc 2 889 5 is_stmt 0 discriminator 2 view .LVU451
 1493 001c 2368     		ldr	r3, [r4]
 886:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1494              		.loc 2 886 5 discriminator 2 view .LVU452
 1495 001e 0122     		movs	r2, #1
 1496              	.LVL117:
 1497              		.loc 2 889 5 discriminator 2 view .LVU453
 1498 0020 B3F1A04F 		cmp	r3, #1342177280
 886:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1499              		.loc 2 886 5 discriminator 2 view .LVU454
 1500 0024 84F85820 		strb	r2, [r4, #88]
 1501              		.loc 2 889 5 is_stmt 1 discriminator 2 view .LVU455
 1502 0028 08D0     		beq	.L130
 890:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 891:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 1503              		.loc 2 891 5 view .LVU456
 892:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 893:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state */
 894:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1504              		.loc 2 894 7 view .LVU457
 1505 002a E36D     		ldr	r3, [r4, #92]
 895:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 896:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 897:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1506              		.loc 2 897 7 is_stmt 0 view .LVU458
 1507 002c 84F85800 		strb	r0, [r4, #88]
 894:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1508              		.loc 2 894 7 view .LVU459
 1509 0030 43F02003 		orr	r3, r3, #32
 1510 0034 E365     		str	r3, [r4, #92]
 1511              		.loc 2 897 7 is_stmt 1 view .LVU460
 1512              		.loc 2 897 7 view .LVU461
 898:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 899:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       return HAL_ERROR;
 1513              		.loc 2 899 7 view .LVU462
 1514              		.loc 2 899 14 is_stmt 0 view .LVU463
 1515 0036 1046     		mov	r0, r2
 1516              	.LVL118:
 1517              	.L129:
 900:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 901:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 902:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Enable the ADC peripherals: master and slave (in case if not already   */
 903:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* enabled previously)                                                    */
 904:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 905:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 906:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 907:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(&tmphadcSlave);
 908:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 909:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 910:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Start multimode conversion of ADCs pair */
 911:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 912:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 913:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC state */
 914:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 915:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_
 916:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
 917:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 918:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC error code to none */
 919:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 920:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 921:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set the DMA transfer complete callback */
 922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 923:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 924:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set the DMA half transfer complete callback */
 925:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 926:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 927:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set the DMA error callback */
 928:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 929:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 930:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Pointer to the common control register  */
 931:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 932:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 933:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
 934:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* start (in case of SW start):                                           */
 935:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 936:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
 937:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 938:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 939:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 940:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 941:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 942:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 944:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 945:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable ADC overrun interrupt */
 946:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 947:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 948:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Start the DMA channel */
 949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)
 950:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 951:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                    */
 952:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 953:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 954:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 955:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Start ADC group regular conversion */
 956:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 957:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 958:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
 959:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
 961:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 962:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 963:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Return function status */
 965:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return tmp_hal_status;
 966:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 967:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1518              		.loc 2 967 1 view .LVU464
 1519 0038 1DB0     		add	sp, sp, #116
 1520              		.cfi_remember_state
 1521              		.cfi_def_cfa_offset 20
 1522              		@ sp needed
 1523 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 1524              	.LVL119:
 1525              	.L130:
 1526              		.cfi_restore_state
 1527              		.loc 2 967 1 view .LVU465
 1528 003c 1C4B     		ldr	r3, .L134
 1529 003e 0193     		str	r3, [sp, #4]
 891:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1530              		.loc 2 891 5 is_stmt 1 view .LVU466
 904:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1531              		.loc 2 904 5 view .LVU467
 904:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1532              		.loc 2 904 22 is_stmt 0 view .LVU468
 1533 0040 2046     		mov	r0, r4
 1534 0042 FFF7FEFF 		bl	ADC_Enable
 1535              	.LVL120:
 905:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1536              		.loc 2 905 5 is_stmt 1 view .LVU469
 905:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1537              		.loc 2 905 8 is_stmt 0 view .LVU470
 1538 0046 60BB     		cbnz	r0, .L131
 907:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1539              		.loc 2 907 7 is_stmt 1 view .LVU471
 907:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1540              		.loc 2 907 24 is_stmt 0 view .LVU472
 1541 0048 01A8     		add	r0, sp, #4
 1542              	.LVL121:
 907:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1543              		.loc 2 907 24 view .LVU473
 1544 004a FFF7FEFF 		bl	ADC_Enable
 1545              	.LVL122:
 911:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1546              		.loc 2 911 5 is_stmt 1 view .LVU474
 911:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1547              		.loc 2 911 8 is_stmt 0 view .LVU475
 1548 004e 40BB     		cbnz	r0, .L131
 914:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_
 1549              		.loc 2 914 7 is_stmt 1 view .LVU476
 1550 0050 E36D     		ldr	r3, [r4, #92]
 922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1551              		.loc 2 922 11 is_stmt 0 view .LVU477
 1552 0052 656D     		ldr	r5, [r4, #84]
 949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1553              		.loc 2 949 24 view .LVU478
 1554 0054 1749     		ldr	r1, .L134+4
 914:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                         (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_
 1555              		.loc 2 914 7 view .LVU479
 1556 0056 23F47063 		bic	r3, r3, #3840
 1557 005a 23F00103 		bic	r3, r3, #1
 1558 005e 43F48073 		orr	r3, r3, #256
 1559 0062 E365     		str	r3, [r4, #92]
 919:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1560              		.loc 2 919 7 is_stmt 1 view .LVU480
 922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1561              		.loc 2 922 42 is_stmt 0 view .LVU481
 1562 0064 144B     		ldr	r3, .L134+8
 919:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1563              		.loc 2 919 7 view .LVU482
 1564 0066 2066     		str	r0, [r4, #96]
 922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1565              		.loc 2 922 7 is_stmt 1 view .LVU483
 922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1566              		.loc 2 922 42 is_stmt 0 view .LVU484
 1567 0068 EB62     		str	r3, [r5, #44]
 925:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1568              		.loc 2 925 7 is_stmt 1 view .LVU485
 925:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1569              		.loc 2 925 46 is_stmt 0 view .LVU486
 1570 006a 144B     		ldr	r3, .L134+12
 1571 006c 2B63     		str	r3, [r5, #48]
 928:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1572              		.loc 2 928 7 is_stmt 1 view .LVU487
 928:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1573              		.loc 2 928 43 is_stmt 0 view .LVU488
 1574 006e 144B     		ldr	r3, .L134+16
 1575 0070 6B63     		str	r3, [r5, #52]
 931:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1576              		.loc 2 931 7 is_stmt 1 view .LVU489
 1577              	.LVL123:
 938:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1578              		.loc 2 938 7 view .LVU490
 1579 0072 2368     		ldr	r3, [r4]
 1580 0074 1C22     		movs	r2, #28
 1581 0076 1A60     		str	r2, [r3]
 943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1582              		.loc 2 943 7 view .LVU491
 943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1583              		.loc 2 943 7 view .LVU492
 946:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1584              		.loc 2 946 7 is_stmt 0 view .LVU493
 1585 0078 5A68     		ldr	r2, [r3, #4]
 943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1586              		.loc 2 943 7 view .LVU494
 1587 007a 84F85800 		strb	r0, [r4, #88]
 946:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1588              		.loc 2 946 7 is_stmt 1 view .LVU495
 1589 007e 42F01002 		orr	r2, r2, #16
 1590 0082 5A60     		str	r2, [r3, #4]
 949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1591              		.loc 2 949 7 view .LVU496
 949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1592              		.loc 2 949 24 is_stmt 0 view .LVU497
 1593 0084 2846     		mov	r0, r5
 1594              	.LVL124:
 949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1595              		.loc 2 949 24 view .LVU498
 1596 0086 3B46     		mov	r3, r7
 1597 0088 3246     		mov	r2, r6
 1598 008a FFF7FEFF 		bl	HAL_DMA_Start_IT
 1599              	.LVL125:
 956:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1600              		.loc 2 956 7 is_stmt 1 view .LVU499
 1601 008e 2268     		ldr	r2, [r4]
 1602              	.LVL126:
 1603              	.LBB190:
 1604              	.LBI190:
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1605              		.loc 1 6707 22 view .LVU500
 1606              	.LBB191:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1607              		.loc 1 6712 3 view .LVU501
 1608 0090 9368     		ldr	r3, [r2, #8]
 1609 0092 23F00043 		bic	r3, r3, #-2147483648
 1610 0096 23F03F03 		bic	r3, r3, #63
 1611 009a 43F00403 		orr	r3, r3, #4
 1612 009e 9360     		str	r3, [r2, #8]
 1613 00a0 CAE7     		b	.L129
 1614              	.LVL127:
 1615              	.L131:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1616              		.loc 1 6712 3 is_stmt 0 view .LVU502
 1617              	.LBE191:
 1618              	.LBE190:
 961:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1619              		.loc 2 961 7 is_stmt 1 view .LVU503
 961:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1620              		.loc 2 961 7 view .LVU504
 1621 00a2 0023     		movs	r3, #0
 1622 00a4 84F85830 		strb	r3, [r4, #88]
 1623 00a8 C6E7     		b	.L129
 1624              	.LVL128:
 1625              	.L133:
 881:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 1626              		.loc 2 881 12 is_stmt 0 view .LVU505
 1627 00aa 0220     		movs	r0, #2
 1628 00ac C4E7     		b	.L129
 1629              	.L135:
 1630 00ae 00BF     		.align	2
 1631              	.L134:
 1632 00b0 00010050 		.word	1342177536
 1633 00b4 0C030050 		.word	1342178060
 1634 00b8 00000000 		.word	ADC_DMAConvCplt
 1635 00bc 00000000 		.word	ADC_DMAHalfConvCplt
 1636 00c0 00000000 		.word	ADC_DMAError
 1637              		.cfi_endproc
 1638              	.LFE333:
 1640              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 1641              		.align	1
 1642              		.global	HAL_ADCEx_MultiModeStop_DMA
 1643              		.syntax unified
 1644              		.thumb
 1645              		.thumb_func
 1646              		.fpu fpv4-sp-d16
 1648              	HAL_ADCEx_MultiModeStop_DMA:
 1649              	.LVL129:
 1650              	.LFB334:
 968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 969:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
 970:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop multimode ADC conversion, disable ADC DMA transfer, disable ADC peripheral.
 971:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. MultiMode DMA bits
 972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
 973:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
 974:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
 975:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
 976:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
 977:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA() must be called after this function with handle of
 978:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
 979:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
 980:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
 981:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
 982:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
 983:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1651              		.loc 2 983 1 is_stmt 1 view -0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 112
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
 984:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1655              		.loc 2 984 3 view .LVU507
 985:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tickstart;
 1656              		.loc 2 985 3 view .LVU508
 986:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 1657              		.loc 2 986 3 view .LVU509
 987:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
 1658              		.loc 2 987 3 view .LVU510
 988:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmphadcSlave_disable_status;
 1659              		.loc 2 988 3 view .LVU511
 989:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 990:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
 991:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 1660              		.loc 2 991 3 view .LVU512
 992:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
 994:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1661              		.loc 2 994 3 view .LVU513
 1662              		.loc 2 994 3 view .LVU514
 983:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1663              		.loc 2 983 1 is_stmt 0 view .LVU515
 1664 0000 70B5     		push	{r4, r5, r6, lr}
 1665              		.cfi_def_cfa_offset 16
 1666              		.cfi_offset 4, -16
 1667              		.cfi_offset 5, -12
 1668              		.cfi_offset 6, -8
 1669              		.cfi_offset 14, -4
 1670              		.loc 2 994 3 view .LVU516
 1671 0002 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 1672 0006 012B     		cmp	r3, #1
 983:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1673              		.loc 2 983 1 view .LVU517
 1674 0008 9CB0     		sub	sp, sp, #112
 1675              		.cfi_def_cfa_offset 128
 983:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1676              		.loc 2 983 1 view .LVU518
 1677 000a 0446     		mov	r4, r0
 1678              		.loc 2 994 3 view .LVU519
 1679 000c 5BD0     		beq	.L146
 1680              		.loc 2 994 3 is_stmt 1 discriminator 2 view .LVU520
 1681 000e 0126     		movs	r6, #1
 1682 0010 80F85860 		strb	r6, [r0, #88]
 995:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 996:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 997:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular and injected groups */
 998:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 1683              		.loc 2 998 3 discriminator 2 view .LVU521
 1684              		.loc 2 998 20 is_stmt 0 discriminator 2 view .LVU522
 1685 0014 0321     		movs	r1, #3
 1686 0016 FFF7FEFF 		bl	ADC_ConversionStop
 1687              	.LVL130:
 999:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1000:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1001:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1688              		.loc 2 1001 3 is_stmt 1 discriminator 2 view .LVU523
 1689              		.loc 2 1001 6 is_stmt 0 discriminator 2 view .LVU524
 1690 001a 0546     		mov	r5, r0
 1691 001c 0028     		cmp	r0, #0
 1692 001e 3CD1     		bne	.L138
1002:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1003:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1004:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1693              		.loc 2 1004 5 is_stmt 1 view .LVU525
 1694 0020 2368     		ldr	r3, [r4]
 1695 0022 B3F1A04F 		cmp	r3, #1342177280
 1696 0026 09D0     		beq	.L139
1005:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1006:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 1697              		.loc 2 1006 5 view .LVU526
1007:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1008:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1009:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1698              		.loc 2 1009 7 view .LVU527
 1699 0028 E36D     		ldr	r3, [r4, #92]
1010:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1011:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
1012:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1700              		.loc 2 1012 7 is_stmt 0 view .LVU528
 1701 002a 84F85800 		strb	r0, [r4, #88]
1009:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1702              		.loc 2 1009 7 view .LVU529
 1703 002e 43F02003 		orr	r3, r3, #32
 1704 0032 E365     		str	r3, [r4, #92]
 1705              		.loc 2 1012 7 is_stmt 1 view .LVU530
 1706              		.loc 2 1012 7 view .LVU531
1013:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1014:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       return HAL_ERROR;
 1707              		.loc 2 1014 7 view .LVU532
 1708              	.LVL131:
 1709              	.L154:
1015:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1016:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1017:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1018:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1019:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1020:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1021:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
1022:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1023:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
1024:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
1025:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1026:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           )
1027:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
1029:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1030:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1031:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1032:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1033:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Process unlocked */
1034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1035:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1036:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         return HAL_ERROR;
 1710              		.loc 2 1036 9 view .LVU533
 1711              		.loc 2 1036 16 is_stmt 0 view .LVU534
 1712 0034 0125     		movs	r5, #1
 1713              	.L137:
1037:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1038:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1039:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
1040:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1041:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1042:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1043:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1044:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1045:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*       with HAL_ADC_Stop_DMA() API.                                     */
1046:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1047:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1048:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1049:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_ERROR)
1050:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1051:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1052:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1053:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1054:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1055:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1056:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1057:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1058:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave */
1059:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1060:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1061:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
1062:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1063:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
1064:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
1065:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           (tmphadcSlave_disable_status == HAL_OK))
1066:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1067:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_hal_status = HAL_OK;
1068:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1069:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1070:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1071:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1072:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* In case of error, attempt to disable ADC master and slave without status assert */
1073:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (void) ADC_Disable(hadc);
1074:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
1075:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1076:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1077:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set ADC state (ADC master) */
1078:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
1079:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1080:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
1081:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1082:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1083:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
1084:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1085:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1086:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
1087:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
1088:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1714              		.loc 2 1088 1 view .LVU535
 1715 0036 2846     		mov	r0, r5
 1716 0038 1CB0     		add	sp, sp, #112
 1717              		.cfi_remember_state
 1718              		.cfi_def_cfa_offset 16
 1719              		@ sp needed
 1720 003a 70BD     		pop	{r4, r5, r6, pc}
 1721              	.LVL132:
 1722              	.L139:
 1723              		.cfi_restore_state
 1724              		.loc 2 1088 1 view .LVU536
 1725 003c 234B     		ldr	r3, .L155
 1726 003e 0193     		str	r3, [sp, #4]
1006:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1727              		.loc 2 1006 5 is_stmt 1 view .LVU537
1021:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1728              		.loc 2 1021 5 view .LVU538
1021:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1729              		.loc 2 1021 17 is_stmt 0 view .LVU539
 1730 0040 FFF7FEFF 		bl	HAL_GetTick
 1731              	.LVL133:
1021:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1732              		.loc 2 1021 17 view .LVU540
 1733 0044 0546     		mov	r5, r0
 1734              	.LVL134:
1023:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 1735              		.loc 2 1023 5 is_stmt 1 view .LVU541
 1736              	.L141:
1039:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1737              		.loc 2 1039 7 view .LVU542
1039:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1738              		.loc 2 1039 42 is_stmt 0 view .LVU543
 1739 0046 0198     		ldr	r0, [sp, #4]
 1740 0048 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1741              	.LVL135:
 1742 004c 0346     		mov	r3, r0
 1743              	.LVL136:
1024:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 1744              		.loc 2 1024 13 view .LVU544
 1745 004e 2068     		ldr	r0, [r4]
 1746              	.LVL137:
1024:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 1747              		.loc 2 1024 13 view .LVU545
 1748 0050 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1749              	.LVL138:
1024:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 1750              		.loc 2 1024 11 view .LVU546
 1751 0054 0128     		cmp	r0, #1
 1752 0056 24D0     		beq	.L142
1025:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           )
 1753              		.loc 2 1025 12 view .LVU547
 1754 0058 012B     		cmp	r3, #1
 1755 005a 22D0     		beq	.L142
1046:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1756              		.loc 2 1046 5 is_stmt 1 view .LVU548
1046:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1757              		.loc 2 1046 22 is_stmt 0 view .LVU549
 1758 005c 606D     		ldr	r0, [r4, #84]
 1759 005e FFF7FEFF 		bl	HAL_DMA_Abort
 1760              	.LVL139:
1049:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1761              		.loc 2 1049 8 view .LVU550
 1762 0062 0128     		cmp	r0, #1
1052:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1763              		.loc 2 1052 7 view .LVU551
 1764 0064 08BF     		it	eq
 1765 0066 E36D     		ldreq	r3, [r4, #92]
1056:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1766              		.loc 2 1056 5 view .LVU552
 1767 0068 2268     		ldr	r2, [r4]
1052:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1768              		.loc 2 1052 7 view .LVU553
 1769 006a 04BF     		itt	eq
 1770 006c 43F04003 		orreq	r3, r3, #64
 1771 0070 E365     		streq	r3, [r4, #92]
1056:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1772              		.loc 2 1056 5 view .LVU554
 1773 0072 5368     		ldr	r3, [r2, #4]
 1774 0074 23F01003 		bic	r3, r3, #16
1046:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1775              		.loc 2 1046 22 view .LVU555
 1776 0078 0546     		mov	r5, r0
 1777              	.LVL140:
1049:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1778              		.loc 2 1049 5 is_stmt 1 view .LVU556
1052:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1779              		.loc 2 1052 7 view .LVU557
1056:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1780              		.loc 2 1056 5 view .LVU558
 1781 007a 5360     		str	r3, [r2, #4]
1061:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1782              		.loc 2 1061 5 view .LVU559
1061:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 1783              		.loc 2 1061 8 is_stmt 0 view .LVU560
 1784 007c F0B9     		cbnz	r0, .L144
1063:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
 1785              		.loc 2 1063 7 is_stmt 1 view .LVU561
1063:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
 1786              		.loc 2 1063 37 is_stmt 0 view .LVU562
 1787 007e 01A8     		add	r0, sp, #4
 1788              	.LVL141:
1063:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
 1789              		.loc 2 1063 37 view .LVU563
 1790 0080 FFF7FEFF 		bl	ADC_Disable
 1791              	.LVL142:
1064:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           (tmphadcSlave_disable_status == HAL_OK))
 1792              		.loc 2 1064 7 is_stmt 1 view .LVU564
1064:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           (tmphadcSlave_disable_status == HAL_OK))
 1793              		.loc 2 1064 12 is_stmt 0 view .LVU565
 1794 0084 2046     		mov	r0, r4
 1795              	.L153:
1074:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1796              		.loc 2 1074 14 view .LVU566
 1797 0086 FFF7FEFF 		bl	ADC_Disable
 1798              	.LVL143:
1078:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1799              		.loc 2 1078 5 is_stmt 1 view .LVU567
 1800 008a E36D     		ldr	r3, [r4, #92]
 1801 008c 23F48853 		bic	r3, r3, #4352
 1802 0090 23F00103 		bic	r3, r3, #1
 1803 0094 43F00103 		orr	r3, r3, #1
 1804 0098 E365     		str	r3, [r4, #92]
 1805              	.LVL144:
 1806              	.L138:
1084:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1807              		.loc 2 1084 3 view .LVU568
1084:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1808              		.loc 2 1084 3 view .LVU569
 1809 009a 0023     		movs	r3, #0
 1810 009c 84F85830 		strb	r3, [r4, #88]
1087:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1811              		.loc 2 1087 3 view .LVU570
1087:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1812              		.loc 2 1087 10 is_stmt 0 view .LVU571
 1813 00a0 C9E7     		b	.L137
 1814              	.LVL145:
 1815              	.L142:
1028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1816              		.loc 2 1028 7 is_stmt 1 view .LVU572
1028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1817              		.loc 2 1028 12 is_stmt 0 view .LVU573
 1818 00a2 FFF7FEFF 		bl	HAL_GetTick
 1819              	.LVL146:
1028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1820              		.loc 2 1028 26 view .LVU574
 1821 00a6 401B     		subs	r0, r0, r5
1028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 1822              		.loc 2 1028 10 view .LVU575
 1823 00a8 0528     		cmp	r0, #5
 1824 00aa CCD9     		bls	.L141
1031:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1825              		.loc 2 1031 9 is_stmt 1 view .LVU576
 1826 00ac E36D     		ldr	r3, [r4, #92]
 1827 00ae 43F01003 		orr	r3, r3, #16
 1828 00b2 E365     		str	r3, [r4, #92]
1034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1829              		.loc 2 1034 9 view .LVU577
1034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1830              		.loc 2 1034 9 view .LVU578
 1831 00b4 0023     		movs	r3, #0
 1832 00b6 84F85830 		strb	r3, [r4, #88]
 1833 00ba BBE7     		b	.L154
 1834              	.LVL147:
 1835              	.L144:
1073:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
 1836              		.loc 2 1073 7 view .LVU579
1073:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
 1837              		.loc 2 1073 14 is_stmt 0 view .LVU580
 1838 00bc 2046     		mov	r0, r4
 1839              	.LVL148:
1073:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
 1840              		.loc 2 1073 14 view .LVU581
 1841 00be FFF7FEFF 		bl	ADC_Disable
 1842              	.LVL149:
1074:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1843              		.loc 2 1074 7 is_stmt 1 view .LVU582
1074:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 1844              		.loc 2 1074 14 is_stmt 0 view .LVU583
 1845 00c2 01A8     		add	r0, sp, #4
 1846 00c4 DFE7     		b	.L153
 1847              	.LVL150:
 1848              	.L146:
 994:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 1849              		.loc 2 994 3 view .LVU584
 1850 00c6 0225     		movs	r5, #2
 1851 00c8 B5E7     		b	.L137
 1852              	.L156:
 1853 00ca 00BF     		.align	2
 1854              	.L155:
 1855 00cc 00010050 		.word	1342177536
 1856              		.cfi_endproc
 1857              	.LFE334:
 1859              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 1860              		.align	1
 1861              		.global	HAL_ADCEx_MultiModeGetValue
 1862              		.syntax unified
 1863              		.thumb
 1864              		.thumb_func
 1865              		.fpu fpv4-sp-d16
 1867              	HAL_ADCEx_MultiModeGetValue:
 1868              	.LVL151:
 1869              	.LFB335:
1089:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1090:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1091:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Return the last ADC Master and Slave regular conversions results when in multimode conf
1092:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
1093:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval The converted data values.
1094:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1095:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
1096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1870              		.loc 2 1096 1 is_stmt 1 view -0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 0
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
1097:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   const ADC_Common_TypeDef *tmpADC_Common;
 1875              		.loc 2 1097 3 view .LVU586
1098:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1099:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1100:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 1876              		.loc 2 1100 3 view .LVU587
1101:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1102:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning if no assert_param check */
1103:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
1104:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
 1877              		.loc 2 1104 3 view .LVU588
1105:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1106:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Pointer to the common control register  */
1107:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 1878              		.loc 2 1107 3 view .LVU589
1108:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1109:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return the multi mode conversion value */
1110:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmpADC_Common->CDR;
 1879              		.loc 2 1110 3 view .LVU590
 1880              		.loc 2 1110 23 is_stmt 0 view .LVU591
 1881 0000 014B     		ldr	r3, .L158
 1882 0002 D868     		ldr	r0, [r3, #12]
 1883              	.LVL152:
1111:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1884              		.loc 2 1111 1 view .LVU592
 1885 0004 7047     		bx	lr
 1886              	.L159:
 1887 0006 00BF     		.align	2
 1888              	.L158:
 1889 0008 00030050 		.word	1342178048
 1890              		.cfi_endproc
 1891              	.LFE335:
 1893              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 1894              		.align	1
 1895              		.global	HAL_ADCEx_InjectedGetValue
 1896              		.syntax unified
 1897              		.thumb
 1898              		.thumb_func
 1899              		.fpu fpv4-sp-d16
 1901              	HAL_ADCEx_InjectedGetValue:
 1902              	.LVL153:
 1903              	.LFB336:
1112:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif /* ADC_MULTIMODE_SUPPORT */
1113:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1114:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1115:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
1116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
1117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
1118:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS
1119:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
1120:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
1121:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
1122:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            to flag JEOC.
1123:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
1124:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
1125:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
1126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
1127:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
1128:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
1129:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         To clear this flag, either use function:
1130:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1131:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion()
1132:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
1133:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1134:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param InjectedRank the converted ADC injected rank.
1135:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
1136:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_1 ADC group injected rank 1
1137:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_2 ADC group injected rank 2
1138:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
1139:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
1140:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
1141:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
1143:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1904              		.loc 2 1143 1 is_stmt 1 view -0
 1905              		.cfi_startproc
 1906              		@ args = 0, pretend = 0, frame = 0
 1907              		@ frame_needed = 0, uses_anonymous_args = 0
 1908              		@ link register save eliminated.
1144:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_jdr;
 1909              		.loc 2 1144 3 view .LVU594
1145:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1146:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1147:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1910              		.loc 2 1147 3 view .LVU595
1148:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
 1911              		.loc 2 1148 3 view .LVU596
1149:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1150:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Get ADC converted value */
1151:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   switch (InjectedRank)
 1912              		.loc 2 1151 3 view .LVU597
 1913 0000 40F21522 		movw	r2, #533
 1914 0004 9142     		cmp	r1, r2
 1915 0006 0368     		ldr	r3, [r0]
 1916 0008 0DD0     		beq	.L161
 1917 000a 40F21B32 		movw	r2, #795
 1918 000e 9142     		cmp	r1, r2
 1919 0010 06D0     		beq	.L162
 1920 0012 40F20F12 		movw	r2, #271
 1921 0016 9142     		cmp	r1, r2
 1922 0018 08D1     		bne	.L166
1152:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1153:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4:
1154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
1155:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
1156:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3:
1157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
1158:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
1159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2:
1160:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
 1923              		.loc 2 1160 7 view .LVU598
 1924              		.loc 2 1160 15 is_stmt 0 view .LVU599
 1925 001a D3F88400 		ldr	r0, [r3, #132]
 1926              	.LVL154:
1161:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1927              		.loc 2 1161 7 is_stmt 1 view .LVU600
 1928 001e 7047     		bx	lr
 1929              	.LVL155:
 1930              	.L162:
1154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1931              		.loc 2 1154 7 view .LVU601
1154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1932              		.loc 2 1154 15 is_stmt 0 view .LVU602
 1933 0020 D3F88C00 		ldr	r0, [r3, #140]
 1934              	.LVL156:
1155:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3:
 1935              		.loc 2 1155 7 is_stmt 1 view .LVU603
 1936 0024 7047     		bx	lr
 1937              	.LVL157:
 1938              	.L161:
1157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1939              		.loc 2 1157 7 view .LVU604
1157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1940              		.loc 2 1157 15 is_stmt 0 view .LVU605
 1941 0026 D3F88800 		ldr	r0, [r3, #136]
 1942              	.LVL158:
1158:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2:
 1943              		.loc 2 1158 7 is_stmt 1 view .LVU606
 1944 002a 7047     		bx	lr
 1945              	.LVL159:
 1946              	.L166:
1162:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
1163:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     default:
1164:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 1947              		.loc 2 1164 7 view .LVU607
 1948              		.loc 2 1164 15 is_stmt 0 view .LVU608
 1949 002c D3F88000 		ldr	r0, [r3, #128]
 1950              	.LVL160:
1165:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       break;
 1951              		.loc 2 1165 7 is_stmt 1 view .LVU609
1166:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1167:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1168:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return ADC converted value */
1169:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_jdr;
 1952              		.loc 2 1169 3 view .LVU610
1170:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1953              		.loc 2 1170 1 is_stmt 0 view .LVU611
 1954 0030 7047     		bx	lr
 1955              		.cfi_endproc
 1956              	.LFE336:
 1958              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 1959              		.align	1
 1960              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 1961              		.syntax unified
 1962              		.thumb
 1963              		.thumb_func
 1964              		.fpu fpv4-sp-d16
 1966              	HAL_ADCEx_InjectedConvCpltCallback:
 1967              	.LVL161:
 1968              	.LFB337:
1171:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1172:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1173:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non-blocking mode.
1174:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1175:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval None
1176:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1177:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
1178:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 1969              		.loc 2 1178 1 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 0
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
1179:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1180:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
 1974              		.loc 2 1180 3 view .LVU613
1181:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1182:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1183:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
1184:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1185:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 1975              		.loc 2 1185 1 is_stmt 0 view .LVU614
 1976 0000 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE337:
 1980              		.section	.text.HAL_ADCEx_InjectedQueueOverflowCallback,"ax",%progbits
 1981              		.align	1
 1982              		.weak	HAL_ADCEx_InjectedQueueOverflowCallback
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1986              		.fpu fpv4-sp-d16
 1988              	HAL_ADCEx_InjectedQueueOverflowCallback:
 1989              	.LFB353:
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 0
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993              		@ link register save eliminated.
 1994 0000 7047     		bx	lr
 1995              		.cfi_endproc
 1996              	.LFE353:
 1998              		.section	.text.HAL_ADCEx_LevelOutOfWindow2Callback,"ax",%progbits
 1999              		.align	1
 2000              		.weak	HAL_ADCEx_LevelOutOfWindow2Callback
 2001              		.syntax unified
 2002              		.thumb
 2003              		.thumb_func
 2004              		.fpu fpv4-sp-d16
 2006              	HAL_ADCEx_LevelOutOfWindow2Callback:
 2007              	.LFB355:
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 0
 2010              		@ frame_needed = 0, uses_anonymous_args = 0
 2011              		@ link register save eliminated.
 2012 0000 7047     		bx	lr
 2013              		.cfi_endproc
 2014              	.LFE355:
 2016              		.section	.text.HAL_ADCEx_LevelOutOfWindow3Callback,"ax",%progbits
 2017              		.align	1
 2018              		.weak	HAL_ADCEx_LevelOutOfWindow3Callback
 2019              		.syntax unified
 2020              		.thumb
 2021              		.thumb_func
 2022              		.fpu fpv4-sp-d16
 2024              	HAL_ADCEx_LevelOutOfWindow3Callback:
 2025              	.LFB357:
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 0, uses_anonymous_args = 0
 2029              		@ link register save eliminated.
 2030 0000 7047     		bx	lr
 2031              		.cfi_endproc
 2032              	.LFE357:
 2034              		.section	.text.HAL_ADCEx_EndOfSamplingCallback,"ax",%progbits
 2035              		.align	1
 2036              		.weak	HAL_ADCEx_EndOfSamplingCallback
 2037              		.syntax unified
 2038              		.thumb
 2039              		.thumb_func
 2040              		.fpu fpv4-sp-d16
 2042              	HAL_ADCEx_EndOfSamplingCallback:
 2043              	.LFB359:
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 0
 2046              		@ frame_needed = 0, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
 2048 0000 7047     		bx	lr
 2049              		.cfi_endproc
 2050              	.LFE359:
 2052              		.section	.text.HAL_ADCEx_RegularStop,"ax",%progbits
 2053              		.align	1
 2054              		.global	HAL_ADCEx_RegularStop
 2055              		.syntax unified
 2056              		.thumb
 2057              		.thumb_func
 2058              		.fpu fpv4-sp-d16
 2060              	HAL_ADCEx_RegularStop:
 2061              	.LVL162:
 2062              	.LFB342:
1186:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1187:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1188:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Injected context queue overflow callback.
1189:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   This callback is called if injected context queue is enabled
1190:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             (parameter "QueueInjectedContext" in injected channel configuration)
1191:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             and if a new injected context is set when queue is full (maximum 2
1192:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             contexts).
1193:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1194:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval None
1195:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1196:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
1197:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
1198:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1199:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
1200:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1201:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1202:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
1203:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1204:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
1205:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1206:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1207:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Analog watchdog 2 callback in non-blocking mode.
1208:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1209:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval None
1210:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1211:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
1212:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
1213:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1214:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
1215:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1216:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1217:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
1218:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1219:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
1220:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1221:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1222:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Analog watchdog 3 callback in non-blocking mode.
1223:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1224:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval None
1225:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1226:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
1227:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
1228:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1229:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
1230:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1231:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1232:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
1233:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1234:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
1235:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1236:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1237:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1238:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  End Of Sampling callback in non-blocking mode.
1239:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1240:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval None
1241:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1242:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** __weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
1243:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
1244:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1245:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   UNUSED(hadc);
1246:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1247:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1248:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
1249:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1250:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
1251:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1252:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1253:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1254:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC peripheral if no
1255:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         conversion is on going on injected group.
1256:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1257:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status.
1258:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1259:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef *hadc)
1260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 2063              		.loc 2 1260 1 is_stmt 1 view -0
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 0
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
1261:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2067              		.loc 2 1261 3 view .LVU616
1262:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1263:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1264:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 2068              		.loc 2 1264 3 view .LVU617
1265:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1266:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
1267:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2069              		.loc 2 1267 3 view .LVU618
 2070              		.loc 2 1267 3 view .LVU619
 2071 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 2072 0004 012B     		cmp	r3, #1
1260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2073              		.loc 2 1260 1 is_stmt 0 view .LVU620
 2074 0006 10B5     		push	{r4, lr}
 2075              		.cfi_def_cfa_offset 8
 2076              		.cfi_offset 4, -8
 2077              		.cfi_offset 14, -4
1260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2078              		.loc 2 1260 1 view .LVU621
 2079 0008 0446     		mov	r4, r0
 2080              		.loc 2 1267 3 view .LVU622
 2081 000a 24D0     		beq	.L176
 2082              		.loc 2 1267 3 is_stmt 1 discriminator 2 view .LVU623
 2083 000c 0121     		movs	r1, #1
 2084 000e 80F85810 		strb	r1, [r0, #88]
1268:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1269:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1270:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2085              		.loc 2 1270 3 discriminator 2 view .LVU624
 2086              		.loc 2 1270 20 is_stmt 0 discriminator 2 view .LVU625
 2087 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2088              	.LVL163:
1271:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1272:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if regular conversions are effectively stopped
1273:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      and if no injected conversions are on-going */
1274:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2089              		.loc 2 1274 3 is_stmt 1 discriminator 2 view .LVU626
 2090              		.loc 2 1274 6 is_stmt 0 discriminator 2 view .LVU627
 2091 0016 0246     		mov	r2, r0
 2092 0018 A0B9     		cbnz	r0, .L174
1275:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1276:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1277:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2093              		.loc 2 1277 5 is_stmt 1 view .LVU628
 2094 001a E36D     		ldr	r3, [r4, #92]
1278:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1279:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2095              		.loc 2 1279 9 is_stmt 0 view .LVU629
 2096 001c 2068     		ldr	r0, [r4]
 2097              	.LVL164:
1277:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2098              		.loc 2 1277 5 view .LVU630
 2099 001e 23F48073 		bic	r3, r3, #256
 2100 0022 E365     		str	r3, [r4, #92]
 2101              		.loc 2 1279 5 is_stmt 1 view .LVU631
 2102              		.loc 2 1279 9 is_stmt 0 view .LVU632
 2103 0024 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2104              	.LVL165:
 2105              		.loc 2 1279 8 view .LVU633
 2106 0028 88B9     		cbnz	r0, .L175
1280:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1281:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
1282:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 2107              		.loc 2 1282 7 is_stmt 1 view .LVU634
 2108              		.loc 2 1282 24 is_stmt 0 view .LVU635
 2109 002a 2046     		mov	r0, r4
 2110 002c FFF7FEFF 		bl	ADC_Disable
 2111              	.LVL166:
1283:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1284:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1285:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2112              		.loc 2 1285 7 is_stmt 1 view .LVU636
 2113              		.loc 2 1285 10 is_stmt 0 view .LVU637
 2114 0030 0246     		mov	r2, r0
 2115 0032 38B9     		cbnz	r0, .L174
1286:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1287:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
1288:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 2116              		.loc 2 1288 9 is_stmt 1 view .LVU638
 2117 0034 E36D     		ldr	r3, [r4, #92]
 2118 0036 23F48053 		bic	r3, r3, #4096
 2119 003a 23F00103 		bic	r3, r3, #1
 2120 003e 43F00103 		orr	r3, r3, #1
 2121              	.LVL167:
 2122              	.L177:
1289:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1290:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1291:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1292:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1293:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
1294:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
1295:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1296:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1297:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2123              		.loc 2 1297 7 is_stmt 0 view .LVU639
 2124 0042 E365     		str	r3, [r4, #92]
 2125              	.L174:
 2126              	.LVL168:
1298:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1299:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1300:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1301:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
1302:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2127              		.loc 2 1302 3 is_stmt 1 view .LVU640
 2128              		.loc 2 1302 3 view .LVU641
 2129 0044 0023     		movs	r3, #0
 2130 0046 84F85830 		strb	r3, [r4, #88]
1303:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1304:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
1305:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 2131              		.loc 2 1305 3 view .LVU642
 2132              	.LVL169:
 2133              	.L173:
1306:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2134              		.loc 2 1306 1 is_stmt 0 view .LVU643
 2135 004a 1046     		mov	r0, r2
 2136 004c 10BD     		pop	{r4, pc}
 2137              	.LVL170:
 2138              	.L175:
1297:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2139              		.loc 2 1297 7 is_stmt 1 view .LVU644
 2140 004e E36D     		ldr	r3, [r4, #92]
 2141 0050 43F48053 		orr	r3, r3, #4096
 2142 0054 F5E7     		b	.L177
 2143              	.LVL171:
 2144              	.L176:
1267:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2145              		.loc 2 1267 3 is_stmt 0 view .LVU645
 2146 0056 0222     		movs	r2, #2
 2147 0058 F7E7     		b	.L173
 2148              		.cfi_endproc
 2149              	.LFE342:
 2151              		.section	.text.HAL_ADCEx_RegularStop_IT,"ax",%progbits
 2152              		.align	1
 2153              		.global	HAL_ADCEx_RegularStop_IT
 2154              		.syntax unified
 2155              		.thumb
 2156              		.thumb_func
 2157              		.fpu fpv4-sp-d16
 2159              	HAL_ADCEx_RegularStop_IT:
 2160              	.LVL172:
 2161              	.LFB343:
1307:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1308:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1309:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1310:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of ADC groups regular and injected,
1311:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         disable interrution of end-of-conversion,
1312:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         disable ADC peripheral if no conversion is on going
1313:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         on injected group.
1314:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1315:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status.
1316:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1317:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef *hadc)
1318:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 2162              		.loc 2 1318 1 is_stmt 1 view -0
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 0
 2165              		@ frame_needed = 0, uses_anonymous_args = 0
1319:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2166              		.loc 2 1319 3 view .LVU647
1320:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1322:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 2167              		.loc 2 1322 3 view .LVU648
1323:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1324:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
1325:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2168              		.loc 2 1325 3 view .LVU649
 2169              		.loc 2 1325 3 view .LVU650
 2170 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 2171 0004 012B     		cmp	r3, #1
1318:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2172              		.loc 2 1318 1 is_stmt 0 view .LVU651
 2173 0006 10B5     		push	{r4, lr}
 2174              		.cfi_def_cfa_offset 8
 2175              		.cfi_offset 4, -8
 2176              		.cfi_offset 14, -4
1318:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2177              		.loc 2 1318 1 view .LVU652
 2178 0008 0446     		mov	r4, r0
 2179              		.loc 2 1325 3 view .LVU653
 2180 000a 28D0     		beq	.L182
 2181              		.loc 2 1325 3 is_stmt 1 discriminator 2 view .LVU654
 2182 000c 0121     		movs	r1, #1
 2183 000e 80F85810 		strb	r1, [r0, #88]
1326:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1327:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1328:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2184              		.loc 2 1328 3 discriminator 2 view .LVU655
 2185              		.loc 2 1328 20 is_stmt 0 discriminator 2 view .LVU656
 2186 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2187              	.LVL173:
1329:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1330:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1331:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     and if no injected conversion is on-going */
1332:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2188              		.loc 2 1332 3 is_stmt 1 discriminator 2 view .LVU657
 2189              		.loc 2 1332 6 is_stmt 0 discriminator 2 view .LVU658
 2190 0016 0246     		mov	r2, r0
 2191 0018 C0B9     		cbnz	r0, .L180
1333:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1334:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1335:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2192              		.loc 2 1335 5 is_stmt 1 view .LVU659
 2193 001a E36D     		ldr	r3, [r4, #92]
1336:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1337:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable all regular-related interrupts */
1338:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 2194              		.loc 2 1338 5 is_stmt 0 view .LVU660
 2195 001c 2068     		ldr	r0, [r4]
 2196              	.LVL174:
1335:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2197              		.loc 2 1335 5 view .LVU661
 2198 001e 23F48073 		bic	r3, r3, #256
 2199 0022 E365     		str	r3, [r4, #92]
 2200              		.loc 2 1338 5 is_stmt 1 view .LVU662
 2201 0024 4368     		ldr	r3, [r0, #4]
 2202 0026 23F01C03 		bic	r3, r3, #28
 2203 002a 4360     		str	r3, [r0, #4]
1339:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1340:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 2. Disable ADC peripheral if no injected conversions are on-going */
1341:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2204              		.loc 2 1341 5 view .LVU663
 2205              		.loc 2 1341 9 is_stmt 0 view .LVU664
 2206 002c FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2207              	.LVL175:
 2208              		.loc 2 1341 8 view .LVU665
 2209 0030 88B9     		cbnz	r0, .L181
1342:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1343:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 2210              		.loc 2 1343 7 is_stmt 1 view .LVU666
 2211              		.loc 2 1343 24 is_stmt 0 view .LVU667
 2212 0032 2046     		mov	r0, r4
 2213 0034 FFF7FEFF 		bl	ADC_Disable
 2214              	.LVL176:
1344:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* if no issue reported */
1345:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2215              		.loc 2 1345 7 is_stmt 1 view .LVU668
 2216              		.loc 2 1345 10 is_stmt 0 view .LVU669
 2217 0038 0246     		mov	r2, r0
 2218 003a 38B9     		cbnz	r0, .L180
1346:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1347:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
1348:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 2219              		.loc 2 1348 9 is_stmt 1 view .LVU670
 2220 003c E36D     		ldr	r3, [r4, #92]
 2221 003e 23F48053 		bic	r3, r3, #4096
 2222 0042 23F00103 		bic	r3, r3, #1
 2223 0046 43F00103 		orr	r3, r3, #1
 2224              	.LVL177:
 2225              	.L183:
1349:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1350:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1351:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1352:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1353:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1354:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1355:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2226              		.loc 2 1355 7 is_stmt 0 view .LVU671
 2227 004a E365     		str	r3, [r4, #92]
 2228              	.L180:
 2229              	.LVL178:
1356:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1357:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1358:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1359:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
1360:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2230              		.loc 2 1360 3 is_stmt 1 view .LVU672
 2231              		.loc 2 1360 3 view .LVU673
 2232 004c 0023     		movs	r3, #0
 2233 004e 84F85830 		strb	r3, [r4, #88]
1361:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1362:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
1363:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 2234              		.loc 2 1363 3 view .LVU674
 2235              	.LVL179:
 2236              	.L179:
1364:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2237              		.loc 2 1364 1 is_stmt 0 view .LVU675
 2238 0052 1046     		mov	r0, r2
 2239 0054 10BD     		pop	{r4, pc}
 2240              	.LVL180:
 2241              	.L181:
1355:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2242              		.loc 2 1355 7 is_stmt 1 view .LVU676
 2243 0056 E36D     		ldr	r3, [r4, #92]
 2244 0058 43F48053 		orr	r3, r3, #4096
 2245 005c F5E7     		b	.L183
 2246              	.LVL181:
 2247              	.L182:
1325:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2248              		.loc 2 1325 3 is_stmt 0 view .LVU677
 2249 005e 0222     		movs	r2, #2
 2250 0060 F7E7     		b	.L179
 2251              		.cfi_endproc
 2252              	.LFE343:
 2254              		.section	.text.HAL_ADCEx_RegularStop_DMA,"ax",%progbits
 2255              		.align	1
 2256              		.global	HAL_ADCEx_RegularStop_DMA
 2257              		.syntax unified
 2258              		.thumb
 2259              		.thumb_func
 2260              		.fpu fpv4-sp-d16
 2262              	HAL_ADCEx_RegularStop_DMA:
 2263              	.LVL182:
 2264              	.LFB344:
1365:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1366:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1367:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1368:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
1369:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         ADC peripheral if no conversion is on going
1370:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         on injected group.
1371:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   HAL_ADCEx_RegularStop_DMA() function is dedicated to single-ADC mode only.
1372:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For multimode (when multimode feature is available),
1373:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularMultiModeStop_DMA() API must be used.
1374:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1375:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status.
1376:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1377:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc)
1378:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 2265              		.loc 2 1378 1 is_stmt 1 view -0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
1379:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2269              		.loc 2 1379 3 view .LVU679
1380:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1381:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1382:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 2270              		.loc 2 1382 3 view .LVU680
1383:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1384:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
1385:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2271              		.loc 2 1385 3 view .LVU681
 2272              		.loc 2 1385 3 view .LVU682
1378:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2273              		.loc 2 1378 1 is_stmt 0 view .LVU683
 2274 0000 38B5     		push	{r3, r4, r5, lr}
 2275              		.cfi_def_cfa_offset 16
 2276              		.cfi_offset 3, -16
 2277              		.cfi_offset 4, -12
 2278              		.cfi_offset 5, -8
 2279              		.cfi_offset 14, -4
 2280              		.loc 2 1385 3 view .LVU684
 2281 0002 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 2282 0006 012B     		cmp	r3, #1
1378:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2283              		.loc 2 1378 1 view .LVU685
 2284 0008 0446     		mov	r4, r0
 2285              		.loc 2 1385 3 view .LVU686
 2286 000a 3BD0     		beq	.L191
 2287              		.loc 2 1385 3 is_stmt 1 discriminator 2 view .LVU687
 2288 000c 0121     		movs	r1, #1
 2289 000e 80F85810 		strb	r1, [r0, #88]
1386:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1387:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1388:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2290              		.loc 2 1388 3 discriminator 2 view .LVU688
 2291              		.loc 2 1388 20 is_stmt 0 discriminator 2 view .LVU689
 2292 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2293              	.LVL183:
1389:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1390:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1391:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      and if no injected conversion is on-going */
1392:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2294              		.loc 2 1392 3 is_stmt 1 discriminator 2 view .LVU690
 2295              		.loc 2 1392 6 is_stmt 0 discriminator 2 view .LVU691
 2296 0016 0546     		mov	r5, r0
 2297 0018 F8B9     		cbnz	r0, .L186
1393:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1394:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1395:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2298              		.loc 2 1395 5 is_stmt 1 view .LVU692
 2299 001a E36D     		ldr	r3, [r4, #92]
1396:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1397:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1398:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 2300              		.loc 2 1398 5 is_stmt 0 view .LVU693
 2301 001c 2268     		ldr	r2, [r4]
1399:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1400:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1401:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1402:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2302              		.loc 2 1402 22 view .LVU694
 2303 001e 606D     		ldr	r0, [r4, #84]
 2304              	.LVL184:
1395:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2305              		.loc 2 1395 5 view .LVU695
 2306 0020 23F48073 		bic	r3, r3, #256
 2307 0024 E365     		str	r3, [r4, #92]
1398:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2308              		.loc 2 1398 5 is_stmt 1 view .LVU696
 2309 0026 D368     		ldr	r3, [r2, #12]
 2310 0028 23F00103 		bic	r3, r3, #1
 2311 002c D360     		str	r3, [r2, #12]
 2312              		.loc 2 1402 5 view .LVU697
 2313              		.loc 2 1402 22 is_stmt 0 view .LVU698
 2314 002e FFF7FEFF 		bl	HAL_DMA_Abort
 2315              	.LVL185:
1403:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1404:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1405:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 2316              		.loc 2 1405 5 is_stmt 1 view .LVU699
 2317              		.loc 2 1405 8 is_stmt 0 view .LVU700
 2318 0032 0546     		mov	r5, r0
 2319 0034 18B1     		cbz	r0, .L187
1406:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1407:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1408:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2320              		.loc 2 1408 7 is_stmt 1 view .LVU701
 2321 0036 E36D     		ldr	r3, [r4, #92]
 2322 0038 43F04003 		orr	r3, r3, #64
 2323 003c E365     		str	r3, [r4, #92]
 2324              	.L187:
1409:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1410:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1411:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1412:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 2325              		.loc 2 1412 5 view .LVU702
 2326 003e 2068     		ldr	r0, [r4]
 2327              	.LVL186:
 2328              		.loc 2 1412 5 is_stmt 0 view .LVU703
 2329 0040 4368     		ldr	r3, [r0, #4]
 2330 0042 23F01003 		bic	r3, r3, #16
 2331 0046 4360     		str	r3, [r0, #4]
1413:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1414:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
1415:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
1416:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* to keep in memory a potential failing status.                          */
1417:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2332              		.loc 2 1417 5 is_stmt 1 view .LVU704
 2333              		.loc 2 1417 9 is_stmt 0 view .LVU705
 2334 0048 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2335              	.LVL187:
 2336              		.loc 2 1417 8 view .LVU706
 2337 004c B0B9     		cbnz	r0, .L188
1418:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1419:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2338              		.loc 2 1419 7 is_stmt 1 view .LVU707
1420:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1421:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
 2339              		.loc 2 1421 26 is_stmt 0 view .LVU708
 2340 004e 2046     		mov	r0, r4
1419:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2341              		.loc 2 1419 10 view .LVU709
 2342 0050 45B9     		cbnz	r5, .L189
 2343              	.LVL188:
 2344              		.loc 2 1421 9 is_stmt 1 view .LVU710
 2345              		.loc 2 1421 26 is_stmt 0 view .LVU711
 2346 0052 FFF7FEFF 		bl	ADC_Disable
 2347              	.LVL189:
1422:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1423:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1424:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1425:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         (void)ADC_Disable(hadc);
1426:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1427:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1428:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1429:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 2348              		.loc 2 1429 7 is_stmt 1 view .LVU712
 2349              		.loc 2 1429 10 is_stmt 0 view .LVU713
 2350 0056 0546     		mov	r5, r0
 2351 0058 38B1     		cbz	r0, .L190
 2352              	.LVL190:
 2353              	.L186:
1430:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1431:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Set ADC state */
1432:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
1433:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1434:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1435:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1436:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1437:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1438:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1439:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
1440:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1441:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1442:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1443:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
1444:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2354              		.loc 2 1444 3 is_stmt 1 view .LVU714
 2355              		.loc 2 1444 3 view .LVU715
 2356 005a 0023     		movs	r3, #0
 2357 005c 84F85830 		strb	r3, [r4, #88]
1445:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1446:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
1447:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 2358              		.loc 2 1447 3 view .LVU716
 2359              	.LVL191:
 2360              	.L185:
1448:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2361              		.loc 2 1448 1 is_stmt 0 view .LVU717
 2362 0060 2846     		mov	r0, r5
 2363 0062 38BD     		pop	{r3, r4, r5, pc}
 2364              	.LVL192:
 2365              	.L189:
1425:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 2366              		.loc 2 1425 9 is_stmt 1 view .LVU718
1425:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 2367              		.loc 2 1425 15 is_stmt 0 view .LVU719
 2368 0064 FFF7FEFF 		bl	ADC_Disable
 2369              	.LVL193:
1429:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2370              		.loc 2 1429 7 is_stmt 1 view .LVU720
 2371 0068 F7E7     		b	.L186
 2372              	.LVL194:
 2373              	.L190:
1432:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
 2374              		.loc 2 1432 9 view .LVU721
 2375 006a E36D     		ldr	r3, [r4, #92]
 2376 006c 23F48053 		bic	r3, r3, #4096
 2377 0070 23F00103 		bic	r3, r3, #1
 2378 0074 43F00103 		orr	r3, r3, #1
 2379              	.LVL195:
 2380              	.L195:
1439:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2381              		.loc 2 1439 7 is_stmt 0 view .LVU722
 2382 0078 E365     		str	r3, [r4, #92]
 2383 007a EEE7     		b	.L186
 2384              	.L188:
1439:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2385              		.loc 2 1439 7 is_stmt 1 view .LVU723
 2386 007c E36D     		ldr	r3, [r4, #92]
 2387 007e 43F48053 		orr	r3, r3, #4096
 2388 0082 F9E7     		b	.L195
 2389              	.LVL196:
 2390              	.L191:
1385:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2391              		.loc 2 1385 3 is_stmt 0 view .LVU724
 2392 0084 0225     		movs	r5, #2
 2393 0086 EBE7     		b	.L185
 2394              		.cfi_endproc
 2395              	.LFE344:
 2397              		.section	.text.HAL_ADCEx_RegularMultiModeStop_DMA,"ax",%progbits
 2398              		.align	1
 2399              		.global	HAL_ADCEx_RegularMultiModeStop_DMA
 2400              		.syntax unified
 2401              		.thumb
 2402              		.thumb_func
 2403              		.fpu fpv4-sp-d16
 2405              	HAL_ADCEx_RegularMultiModeStop_DMA:
 2406              	.LVL197:
 2407              	.LFB345:
1449:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1450:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1451:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1452:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Stop DMA-based multimode ADC conversion, disable ADC DMA transfer, disable ADC peripher
1453:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. Multimode DMA bits
1454:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
1455:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
1456:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
1457:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
1458:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
1459:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularStop_DMA() must be called after this function with handle of
1460:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
1461:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1462:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
1463:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1464:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(ADC_HandleTypeDef *hadc)
1465:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 2408              		.loc 2 1465 1 is_stmt 1 view -0
 2409              		.cfi_startproc
 2410              		@ args = 0, pretend = 0, frame = 112
 2411              		@ frame_needed = 0, uses_anonymous_args = 0
1466:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2412              		.loc 2 1466 3 view .LVU726
1467:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tickstart;
 2413              		.loc 2 1467 3 view .LVU727
1468:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
 2414              		.loc 2 1468 3 view .LVU728
1469:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
 2415              		.loc 2 1469 3 view .LVU729
1470:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1471:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1472:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 2416              		.loc 2 1472 3 view .LVU730
1473:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1474:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
1475:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2417              		.loc 2 1475 3 view .LVU731
 2418              		.loc 2 1475 3 view .LVU732
1465:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2419              		.loc 2 1465 1 is_stmt 0 view .LVU733
 2420 0000 70B5     		push	{r4, r5, r6, lr}
 2421              		.cfi_def_cfa_offset 16
 2422              		.cfi_offset 4, -16
 2423              		.cfi_offset 5, -12
 2424              		.cfi_offset 6, -8
 2425              		.cfi_offset 14, -4
 2426              		.loc 2 1475 3 view .LVU734
 2427 0002 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 2428 0006 012B     		cmp	r3, #1
1465:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2429              		.loc 2 1465 1 view .LVU735
 2430 0008 9CB0     		sub	sp, sp, #112
 2431              		.cfi_def_cfa_offset 128
1465:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2432              		.loc 2 1465 1 view .LVU736
 2433 000a 0446     		mov	r4, r0
 2434              		.loc 2 1475 3 view .LVU737
 2435 000c 65D0     		beq	.L206
 2436              		.loc 2 1475 3 is_stmt 1 discriminator 2 view .LVU738
 2437 000e 0126     		movs	r6, #1
 2438 0010 80F85860 		strb	r6, [r0, #88]
1476:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1477:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1478:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular groups */
1479:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2439              		.loc 2 1479 3 discriminator 2 view .LVU739
 2440              		.loc 2 1479 20 is_stmt 0 discriminator 2 view .LVU740
 2441 0014 3146     		mov	r1, r6
 2442 0016 FFF7FEFF 		bl	ADC_ConversionStop
 2443              	.LVL198:
1480:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1481:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1482:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2444              		.loc 2 1482 3 is_stmt 1 discriminator 2 view .LVU741
 2445              		.loc 2 1482 6 is_stmt 0 discriminator 2 view .LVU742
 2446 001a 0546     		mov	r5, r0
 2447 001c 0028     		cmp	r0, #0
 2448 001e 3BD1     		bne	.L198
1483:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1484:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1485:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2449              		.loc 2 1485 5 is_stmt 1 view .LVU743
 2450 0020 E36D     		ldr	r3, [r4, #92]
 2451 0022 23F48073 		bic	r3, r3, #256
 2452 0026 E365     		str	r3, [r4, #92]
1486:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1487:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1488:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 2453              		.loc 2 1488 5 view .LVU744
 2454 0028 2368     		ldr	r3, [r4]
 2455 002a B3F1A04F 		cmp	r3, #1342177280
 2456 002e 09D0     		beq	.L199
1489:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1490:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 2457              		.loc 2 1490 5 view .LVU745
1491:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1492:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1493:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2458              		.loc 2 1493 7 view .LVU746
 2459 0030 E36D     		ldr	r3, [r4, #92]
1494:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1495:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Process unlocked */
1496:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2460              		.loc 2 1496 7 is_stmt 0 view .LVU747
 2461 0032 84F85800 		strb	r0, [r4, #88]
1493:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2462              		.loc 2 1493 7 view .LVU748
 2463 0036 43F02003 		orr	r3, r3, #32
 2464 003a E365     		str	r3, [r4, #92]
 2465              		.loc 2 1496 7 is_stmt 1 view .LVU749
 2466              		.loc 2 1496 7 view .LVU750
1497:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1498:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       return HAL_ERROR;
 2467              		.loc 2 1498 7 view .LVU751
 2468              	.LVL199:
 2469              	.L220:
1499:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1500:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1501:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1502:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1503:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1504:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1505:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
1506:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1507:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
1508:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
1509:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1510:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           )
1511:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
1513:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1514:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1515:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
1516:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1517:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Process unlocked */
1518:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
1519:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1520:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         return HAL_ERROR;
 2470              		.loc 2 1520 9 view .LVU752
 2471              		.loc 2 1520 16 is_stmt 0 view .LVU753
 2472 003c 0125     		movs	r5, #1
 2473              	.L197:
1521:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1522:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1523:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
1524:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1525:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1526:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1527:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1528:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1529:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* with HAL_ADCEx_RegularStop_DMA() API.                                  */
1530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1531:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1532:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1533:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
1534:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1535:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1536:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1537:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1538:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1539:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1540:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1541:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1542:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave if no injected        */
1543:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*   conversion is on-going.                                              */
1544:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1545:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1546:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
1547:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1548:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
1549:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1550:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_hal_status =  ADC_Disable(hadc);
1551:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
1552:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
1553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           if (LL_ADC_INJ_IsConversionOngoing((&tmphadcSlave)->Instance) == 0UL)
1554:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           {
1555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****             tmp_hal_status =  ADC_Disable(&tmphadcSlave);
1556:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           }
1557:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
1558:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1559:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1560:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
1561:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1562:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Both Master and Slave ADC's could be disabled. Update Master State */
1563:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Clear HAL_ADC_STATE_INJ_BUSY bit, set HAL_ADC_STATE_READY bit */
1564:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_READY);
1565:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1566:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1567:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1568:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* injected (Master or Slave) conversions are still on-going,
1569:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            no Master State change */
1570:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1571:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1572:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1573:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1574:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
1575:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
1576:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1577:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
1578:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
1579:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2474              		.loc 2 1579 1 view .LVU754
 2475 003e 2846     		mov	r0, r5
 2476 0040 1CB0     		add	sp, sp, #112
 2477              		.cfi_remember_state
 2478              		.cfi_def_cfa_offset 16
 2479              		@ sp needed
 2480 0042 70BD     		pop	{r4, r5, r6, pc}
 2481              	.LVL200:
 2482              	.L199:
 2483              		.cfi_restore_state
 2484              		.loc 2 1579 1 view .LVU755
 2485 0044 264B     		ldr	r3, .L221
 2486 0046 0193     		str	r3, [sp, #4]
1490:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2487              		.loc 2 1490 5 is_stmt 1 view .LVU756
1505:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2488              		.loc 2 1505 5 view .LVU757
1505:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2489              		.loc 2 1505 17 is_stmt 0 view .LVU758
 2490 0048 FFF7FEFF 		bl	HAL_GetTick
 2491              	.LVL201:
1505:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2492              		.loc 2 1505 17 view .LVU759
 2493 004c 0546     		mov	r5, r0
 2494              	.LVL202:
1507:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 2495              		.loc 2 1507 5 is_stmt 1 view .LVU760
 2496              	.L201:
1523:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2497              		.loc 2 1523 7 view .LVU761
1523:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2498              		.loc 2 1523 42 is_stmt 0 view .LVU762
 2499 004e 0198     		ldr	r0, [sp, #4]
 2500 0050 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2501              	.LVL203:
 2502 0054 0346     		mov	r3, r0
 2503              	.LVL204:
1508:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 2504              		.loc 2 1508 13 view .LVU763
 2505 0056 2068     		ldr	r0, [r4]
 2506              	.LVL205:
1508:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 2507              		.loc 2 1508 13 view .LVU764
 2508 0058 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2509              	.LVL206:
1508:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 2510              		.loc 2 1508 11 view .LVU765
 2511 005c 0128     		cmp	r0, #1
 2512 005e 1FD0     		beq	.L202
1509:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           )
 2513              		.loc 2 1509 12 view .LVU766
 2514 0060 012B     		cmp	r3, #1
 2515 0062 1DD0     		beq	.L202
1530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2516              		.loc 2 1530 5 is_stmt 1 view .LVU767
1530:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2517              		.loc 2 1530 22 is_stmt 0 view .LVU768
 2518 0064 606D     		ldr	r0, [r4, #84]
 2519 0066 FFF7FEFF 		bl	HAL_DMA_Abort
 2520              	.LVL207:
1533:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2521              		.loc 2 1533 5 is_stmt 1 view .LVU769
1533:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2522              		.loc 2 1533 8 is_stmt 0 view .LVU770
 2523 006a 0546     		mov	r5, r0
 2524              	.LVL208:
1533:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2525              		.loc 2 1533 8 view .LVU771
 2526 006c 18B1     		cbz	r0, .L203
1536:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2527              		.loc 2 1536 7 is_stmt 1 view .LVU772
 2528 006e E36D     		ldr	r3, [r4, #92]
 2529 0070 43F04003 		orr	r3, r3, #64
 2530 0074 E365     		str	r3, [r4, #92]
 2531              	.L203:
1540:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2532              		.loc 2 1540 5 view .LVU773
 2533 0076 2068     		ldr	r0, [r4]
 2534              	.LVL209:
1540:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2535              		.loc 2 1540 5 is_stmt 0 view .LVU774
 2536 0078 4368     		ldr	r3, [r0, #4]
 2537 007a 23F01003 		bic	r3, r3, #16
 2538 007e 4360     		str	r3, [r0, #4]
1546:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2539              		.loc 2 1546 5 is_stmt 1 view .LVU775
1546:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 2540              		.loc 2 1546 8 is_stmt 0 view .LVU776
 2541 0080 55B9     		cbnz	r5, .L198
1548:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2542              		.loc 2 1548 7 is_stmt 1 view .LVU777
1548:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2543              		.loc 2 1548 11 is_stmt 0 view .LVU778
 2544 0082 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2545              	.LVL210:
1548:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2546              		.loc 2 1548 10 view .LVU779
 2547 0086 C0B1     		cbz	r0, .L204
 2548              	.L205:
1564:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 2549              		.loc 2 1564 9 is_stmt 1 view .LVU780
 2550 0088 E36D     		ldr	r3, [r4, #92]
 2551 008a 23F48053 		bic	r3, r3, #4096
 2552 008e 23F00103 		bic	r3, r3, #1
 2553 0092 43F00103 		orr	r3, r3, #1
 2554 0096 E365     		str	r3, [r4, #92]
 2555              	.L198:
 2556              	.LVL211:
1570:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 2557              		.loc 2 1570 7 view .LVU781
1575:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2558              		.loc 2 1575 3 view .LVU782
1575:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2559              		.loc 2 1575 3 view .LVU783
 2560 0098 0023     		movs	r3, #0
 2561 009a 84F85830 		strb	r3, [r4, #88]
1578:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2562              		.loc 2 1578 3 view .LVU784
1578:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 2563              		.loc 2 1578 10 is_stmt 0 view .LVU785
 2564 009e CEE7     		b	.L197
 2565              	.LVL212:
 2566              	.L202:
1512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2567              		.loc 2 1512 7 is_stmt 1 view .LVU786
1512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2568              		.loc 2 1512 12 is_stmt 0 view .LVU787
 2569 00a0 FFF7FEFF 		bl	HAL_GetTick
 2570              	.LVL213:
1512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2571              		.loc 2 1512 26 view .LVU788
 2572 00a4 401B     		subs	r0, r0, r5
1512:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2573              		.loc 2 1512 10 view .LVU789
 2574 00a6 0528     		cmp	r0, #5
 2575 00a8 D1D9     		bls	.L201
1515:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2576              		.loc 2 1515 9 is_stmt 1 view .LVU790
 2577 00aa E36D     		ldr	r3, [r4, #92]
 2578 00ac 43F01003 		orr	r3, r3, #16
 2579 00b0 E365     		str	r3, [r4, #92]
1518:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2580              		.loc 2 1518 9 view .LVU791
1518:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2581              		.loc 2 1518 9 view .LVU792
 2582 00b2 0023     		movs	r3, #0
 2583 00b4 84F85830 		strb	r3, [r4, #88]
 2584 00b8 C0E7     		b	.L220
 2585              	.LVL214:
 2586              	.L204:
1550:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 2587              		.loc 2 1550 9 view .LVU793
1550:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 2588              		.loc 2 1550 27 is_stmt 0 view .LVU794
 2589 00ba 2046     		mov	r0, r4
 2590 00bc FFF7FEFF 		bl	ADC_Disable
 2591              	.LVL215:
1551:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 2592              		.loc 2 1551 9 is_stmt 1 view .LVU795
1551:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
 2593              		.loc 2 1551 12 is_stmt 0 view .LVU796
 2594 00c0 48B9     		cbnz	r0, .L207
1553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           {
 2595              		.loc 2 1553 11 is_stmt 1 view .LVU797
1553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           {
 2596              		.loc 2 1553 15 is_stmt 0 view .LVU798
 2597 00c2 0198     		ldr	r0, [sp, #4]
 2598              	.LVL216:
1553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           {
 2599              		.loc 2 1553 15 view .LVU799
 2600 00c4 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2601              	.LVL217:
1553:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           {
 2602              		.loc 2 1553 14 view .LVU800
 2603 00c8 0028     		cmp	r0, #0
 2604 00ca DDD1     		bne	.L205
1555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           }
 2605              		.loc 2 1555 13 is_stmt 1 view .LVU801
1555:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           }
 2606              		.loc 2 1555 31 is_stmt 0 view .LVU802
 2607 00cc 01A8     		add	r0, sp, #4
 2608 00ce FFF7FEFF 		bl	ADC_Disable
 2609              	.LVL218:
1560:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2610              		.loc 2 1560 7 is_stmt 1 view .LVU803
1560:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2611              		.loc 2 1560 10 is_stmt 0 view .LVU804
 2612 00d2 0028     		cmp	r0, #0
 2613 00d4 D8D0     		beq	.L205
 2614              	.L207:
1560:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2615              		.loc 2 1560 10 view .LVU805
 2616 00d6 0546     		mov	r5, r0
 2617 00d8 DEE7     		b	.L198
 2618              	.LVL219:
 2619              	.L206:
1475:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2620              		.loc 2 1475 3 view .LVU806
 2621 00da 0225     		movs	r5, #2
 2622 00dc AFE7     		b	.L197
 2623              	.L222:
 2624 00de 00BF     		.align	2
 2625              	.L221:
 2626 00e0 00010050 		.word	1342177536
 2627              		.cfi_endproc
 2628              	.LFE345:
 2630              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 2631              		.align	1
 2632              		.global	HAL_ADCEx_InjectedConfigChannel
 2633              		.syntax unified
 2634              		.thumb
 2635              		.thumb_func
 2636              		.fpu fpv4-sp-d16
 2638              	HAL_ADCEx_InjectedConfigChannel:
 2639              	.LVL220:
 2640              	.LFB346:
1580:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif /* ADC_MULTIMODE_SUPPORT */
1581:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1582:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1583:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @}
1584:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1585:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1586:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 ADC Extended Peripheral Control functions
1587:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief    ADC Extended Peripheral Control functions
1588:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *
1589:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** @verbatim
1590:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****  ===============================================================================
1591:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1592:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****  ===============================================================================
1593:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1594:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1595:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Configure multimode when multimode feature is available
1596:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Enable or Disable Injected Queue
1597:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Disable ADC voltage regulator
1598:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (+) Enter ADC deep-power-down mode
1599:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1600:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** @endverbatim
1601:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @{
1602:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1603:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1604:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
1605:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Configure a channel to be assigned to ADC group injected.
1606:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1607:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this
1608:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1609:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without resetting the ADC.
1610:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state:
1611:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Refer to comments of structure "ADC_InjectionConfTypeDef".
1612:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
1613:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
1614:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         These internal paths can be disabled using function
1615:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
1616:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Caution: For Injected Context Queue use, a context must be fully
1617:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         defined before start of injected conversion. All channels are configured
1618:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         consecutively for the same ADC instance. Therefore, the number of calls to
1619:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedConfigChannel() must be equal to the value of parameter
1620:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         InjectedNbrOfConversion for each context.
1621:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *  - Example 1: If 1 context is intended to be used (or if there is no use of the
1622:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    Injected Queue Context feature) and if the context contains 3 injected ranks
1623:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    (InjectedNbrOfConversion = 3), HAL_ADCEx_InjectedConfigChannel() must be
1624:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    called once for each channel (i.e. 3 times) before starting a conversion.
1625:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    This function must not be called to configure a 4th injected channel:
1626:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    it would start a new context into context queue.
1627:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *  - Example 2: If 2 contexts are intended to be used and each of them contains
1628:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    3 injected ranks (InjectedNbrOfConversion = 3),
1629:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() must be called once for each channel and
1630:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    for each context (3 channels x 2 contexts = 6 calls). Conversion can
1631:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    start once the 1st context is set, that is after the first three
1632:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() calls. The 2nd context can be set on the fly.
1633:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
1634:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param sConfigInjected Structure of ADC injected group and ADC channel for
1635:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         injected group.
1636:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
1637:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
1638:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef
1639:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 2641              		.loc 2 1639 1 is_stmt 1 view -0
 2642              		.cfi_startproc
 2643              		@ args = 0, pretend = 0, frame = 8
 2644              		@ frame_needed = 0, uses_anonymous_args = 0
1640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2645              		.loc 2 1640 3 view .LVU808
1641:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 2646              		.loc 2 1641 3 view .LVU809
1642:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_config_internal_channel;
 2647              		.loc 2 1642 3 view .LVU810
1643:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 2648              		.loc 2 1643 3 view .LVU811
1644:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 2649              		.loc 2 1644 3 view .LVU812
1645:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 2650              		.loc 2 1645 3 view .LVU813
1639:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2651              		.loc 2 1639 1 is_stmt 0 view .LVU814
 2652 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2653              		.cfi_def_cfa_offset 32
 2654              		.cfi_offset 4, -20
 2655              		.cfi_offset 5, -16
 2656              		.cfi_offset 6, -12
 2657              		.cfi_offset 7, -8
 2658              		.cfi_offset 14, -4
1639:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2659              		.loc 2 1639 1 view .LVU815
 2660 0002 0C46     		mov	r4, r1
1646:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1647:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
1648:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1649:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
1650:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1651:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1652:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
1653:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1654:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
1655:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
1656:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(hadc, sConfigInjected->ExternalTrigInjecConv));
1657:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
1658:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1659:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
1660:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
1661:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));
1662:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1663:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
1664:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1665:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1666:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1667:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1668:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1669:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1670:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1671:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* if JOVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
1672:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      ignored (considered as reset) */
1673:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(!((sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE) && (sConfigInjected->In
1674:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1675:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* JDISCEN and JAUTO bits can't be set at the same time  */
1676:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(!((sConfigInjected->InjectedDiscontinuousConvMode == ENABLE) && (sConfigInjected->Au
1677:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1678:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  DISCEN and JAUTO bits can't be set at the same time */
1679:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv
1680:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1681:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Verification of channel number */
1682:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
1683:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1684:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(hadc, sConfigInjected->InjectedChannel));
1685:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1686:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
1687:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1688:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
1689:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1690:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1691:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
1692:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2661              		.loc 2 1692 3 view .LVU816
 2662 0004 90F85810 		ldrb	r1, [r0, #88]	@ zero_extendqisi2
 2663              	.LVL221:
1663:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 2664              		.loc 2 1663 17 view .LVU817
 2665 0008 4269     		ldr	r2, [r0, #20]
1645:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2666              		.loc 2 1645 17 view .LVU818
 2667 000a 0023     		movs	r3, #0
 2668              		.loc 2 1692 3 view .LVU819
 2669 000c 0129     		cmp	r1, #1
1639:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2670              		.loc 2 1639 1 view .LVU820
 2671 000e 0646     		mov	r6, r0
1645:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2672              		.loc 2 1645 17 view .LVU821
 2673 0010 0193     		str	r3, [sp, #4]
1647:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2674              		.loc 2 1647 3 is_stmt 1 view .LVU822
 2675              	.LVL222:
1650:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
 2676              		.loc 2 1650 3 view .LVU823
1651:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
 2677              		.loc 2 1651 3 view .LVU824
1652:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
 2678              		.loc 2 1652 3 view .LVU825
1653:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
 2679              		.loc 2 1653 3 view .LVU826
1654:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
 2680              		.loc 2 1654 3 view .LVU827
1655:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(hadc, sConfigInjected->ExternalTrigInjecConv));
 2681              		.loc 2 1655 3 view .LVU828
1656:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
 2682              		.loc 2 1656 3 view .LVU829
1657:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
 2683              		.loc 2 1657 3 view .LVU830
1658:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
 2684              		.loc 2 1658 3 view .LVU831
1659:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
 2685              		.loc 2 1659 3 view .LVU832
1660:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));
 2686              		.loc 2 1660 3 view .LVU833
1661:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2687              		.loc 2 1661 3 view .LVU834
1663:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 2688              		.loc 2 1663 3 view .LVU835
1665:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
 2689              		.loc 2 1665 5 view .LVU836
1666:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
 2690              		.loc 2 1666 5 view .LVU837
1667:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 2691              		.loc 2 1667 5 view .LVU838
1673:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2692              		.loc 2 1673 3 view .LVU839
1676:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2693              		.loc 2 1676 3 view .LVU840
1679:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2694              		.loc 2 1679 3 view .LVU841
1682:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 2695              		.loc 2 1682 3 view .LVU842
1688:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 2696              		.loc 2 1688 5 view .LVU843
 2697              		.loc 2 1692 3 view .LVU844
 2698              		.loc 2 1692 3 view .LVU845
 2699 0012 00F03282 		beq	.L277
 2700              		.loc 2 1692 3 discriminator 2 view .LVU846
 2701 0016 0121     		movs	r1, #1
 2702 0018 80F85810 		strb	r1, [r0, #88]
1693:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1694:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1695:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Hardware constraint: Must fully define injected context register JSQR    */
1696:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* before make it entering into injected sequencer queue.                   */
1697:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*                                                                          */
1698:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* - if scan mode is disabled:                                              */
1699:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to 0x00: 1 channel         */
1700:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      converted (channel on injected rank 1)                              */
1701:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      Parameter "InjectedNbrOfConversion" is discarded.                   */
1702:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting is simple: register is fully */
1703:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      defined on one call of this function (for injected rank 1) and can  */
1704:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      be entered into queue directly.                                     */
1705:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* - if scan mode is enabled:                                               */
1706:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to parameter               */
1707:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      "InjectedNbrOfConversion".                                          */
1708:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting more complex: register is    */
1709:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      fully defined over successive calls of this function, for each      */
1710:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      injected channel rank. It is entered into queue only when all       */
1711:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*      injected ranks have been set.                                       */
1712:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*   Note: Scan mode is not present by hardware on this device, but used    */
1713:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*   by software for alignment over all STM32 devices.                      */
1714:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1715:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 2703              		.loc 2 1715 3 discriminator 2 view .LVU847
 2704 001c 6068     		ldr	r0, [r4, #4]
 2705              	.LVL223:
 2706              		.loc 2 1715 6 is_stmt 0 discriminator 2 view .LVU848
 2707 001e 1AB1     		cbz	r2, .L225
1716:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 2708              		.loc 2 1716 23 discriminator 1 view .LVU849
 2709 0020 216A     		ldr	r1, [r4, #32]
1715:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 2710              		.loc 2 1715 54 discriminator 1 view .LVU850
 2711 0022 0129     		cmp	r1, #1
 2712 0024 40F0DE80 		bne	.L226
 2713              	.L225:
1717:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1718:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Configuration of context register JSQR:                                */
1719:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*  - number of ranks in injected group sequencer: fixed to 1st rank      */
1720:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*    (scan mode disabled, only rank 1 used)                              */
1721:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
1722:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*  - external trigger polarity                                           */
1723:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
1724:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1725:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 2714              		.loc 2 1725 5 is_stmt 1 view .LVU851
 2715              		.loc 2 1725 8 is_stmt 0 view .LVU852
 2716 0028 0928     		cmp	r0, #9
 2717 002a 17D1     		bne	.L228
1726:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1727:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1728:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* software start.                                                      */
1729:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1730:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1731:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*       software start.                                                */
1732:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 2718              		.loc 2 1732 7 is_stmt 1 view .LVU853
 2719 002c 2368     		ldr	r3, [r4]
 2720              		.loc 2 1732 26 is_stmt 0 view .LVU854
 2721 002e A26A     		ldr	r2, [r4, #40]
 2722 0030 5B0C     		lsrs	r3, r3, #17
 2723 0032 03F47853 		and	r3, r3, #15872
 2724              		.loc 2 1732 10 view .LVU855
 2725 0036 22B1     		cbz	r2, .L229
1733:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1734:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
 2726              		.loc 2 1734 9 is_stmt 1 view .LVU856
 2727              		.loc 2 1734 41 is_stmt 0 view .LVU857
 2728 0038 E16A     		ldr	r1, [r4, #44]
1735:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 2729              		.loc 2 1735 86 view .LVU858
 2730 003a 02F07C02 		and	r2, r2, #124
1734:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 2731              		.loc 2 1734 41 view .LVU859
 2732 003e 0A43     		orrs	r2, r2, r1
 2733 0040 1343     		orrs	r3, r3, r2
 2734              	.LVL224:
 2735              	.L229:
1736:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
1737:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                           );
1738:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1739:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1740:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1741:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
1742:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1743:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1744:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 2736              		.loc 2 1744 7 is_stmt 1 view .LVU860
 2737 0042 3168     		ldr	r1, [r6]
 2738 0044 CA6C     		ldr	r2, [r1, #76]
 2739 0046 22F07B42 		bic	r2, r2, #-83886080
 2740 004a 22F46F02 		bic	r2, r2, #15663104
 2741 004e 22F43F42 		bic	r2, r2, #48896
 2742 0052 22F0FF02 		bic	r2, r2, #255
 2743 0056 1A43     		orrs	r2, r2, r3
 2744 0058 CA64     		str	r2, [r1, #76]
1745:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* For debug and informative reasons, hadc handle saves JSQR setting */
1746:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 2745              		.loc 2 1746 7 view .LVU861
 2746              		.loc 2 1746 42 is_stmt 0 view .LVU862
 2747 005a 7366     		str	r3, [r6, #100]
 2748              	.LVL225:
 2749              	.L228:
1747:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1748:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1749:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1750:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
1751:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1752:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Case of scan mode enabled, several channels to set into injected group */
1753:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* sequencer.                                                             */
1754:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*                                                                        */
1755:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Procedure to define injected context register JSQR over successive     */
1756:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* calls of this function, for each injected channel rank:                */
1757:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 1. Start new context and set parameters related to all injected        */
1758:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*    channels: injected sequence length and trigger.                     */
1759:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1760:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
1761:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*   call of the context under setting                                    */
1762:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
1763:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1764:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Initialize number of channels that will be configured on the context */
1765:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  being built                                                         */
1766:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
1767:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
1768:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          call, this context will be written in JSQR register at the last call.
1769:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          At this point, the context is merely reset  */
1770:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0x00000000U;
1771:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1772:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Configuration of context register JSQR:                              */
1773:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - number of ranks in injected group sequencer                       */
1774:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - external trigger to start conversion                              */
1775:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - external trigger polarity                                         */
1776:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1777:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1778:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* software start.                                                      */
1779:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1780:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1781:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*       software start.                                                */
1782:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
1783:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1784:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
1785:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
1786:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
1787:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                           );
1788:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1789:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1790:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1791:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
1792:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1793:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1794:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1795:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1796:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 2. Continue setting of context under definition with parameter       */
1797:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /*    related to each channel: channel rank sequence                    */
1798:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Clear the old JSQx bits for the selected rank */
1799:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
1800:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1801:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set the JSQx bits for the selected rank */
1802:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjecte
1803:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1804:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Decrease channel count  */
1805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     hadc->InjectionConfig.ChannelCount--;
1806:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1807:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
1808:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           call, aggregate the setting to those already built during the previous
1809:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
1811:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1812:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* 4. End of context setting: if this is the last channel set, then write context
1813:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         into register JSQR and make it enter into queue                   */
1814:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
1815:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1816:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
1817:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1818:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1819:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1820:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1821:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1822:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* conversion on going on injected group:                                   */
1823:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Injected context queue: Queue disable (active context is kept) or     */
1824:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    enable (context decremented, up to 2 contexts queued)                 */
1825:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
1826:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    mode is disabled.                                                     */
1827:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2750              		.loc 2 1827 3 is_stmt 1 view .LVU863
 2751              		.loc 2 1827 7 is_stmt 0 view .LVU864
 2752 005c 3068     		ldr	r0, [r6]
 2753 005e FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2754              	.LVL226:
 2755              		.loc 2 1827 6 view .LVU865
 2756 0062 88B9     		cbnz	r0, .L232
1828:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1829:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If auto-injected mode is disabled: no constraint                       */
1830:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == DISABLE)
 2757              		.loc 2 1830 5 is_stmt 1 view .LVU866
 2758 0064 94F82630 		ldrb	r3, [r4, #38]	@ zero_extendqisi2
 2759              		.loc 2 1830 8 is_stmt 0 view .LVU867
 2760 0068 94F82520 		ldrb	r2, [r4, #37]	@ zero_extendqisi2
 2761 006c 3168     		ldr	r1, [r6]
 2762 006e 5B05     		lsls	r3, r3, #21
 2763 0070 002A     		cmp	r2, #0
 2764 0072 40F0E380 		bne	.L233
1831:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1832:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
 2765              		.loc 2 1832 7 is_stmt 1 view .LVU868
 2766 0076 94F82400 		ldrb	r0, [r4, #36]	@ zero_extendqisi2
 2767 007a CA68     		ldr	r2, [r1, #12]
 2768 007c 43EA0053 		orr	r3, r3, r0, lsl #20
 2769              	.L293:
1833:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
1834:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext)    
1835:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_DISCCONTINUOUS((uint32_t)sConfigInjected->InjectedDiscontinuousCon
1836:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1837:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If auto-injected mode is enabled: Injected discontinuous setting is    */
1838:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* discarded.                                                             */
1839:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1840:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1841:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
 2770              		.loc 2 1841 7 is_stmt 0 view .LVU869
 2771 0080 22F44012 		bic	r2, r2, #3145728
 2772 0084 1343     		orrs	r3, r3, r2
 2773 0086 CB60     		str	r3, [r1, #12]
 2774              	.L232:
1842:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
1843:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext));
1844:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1845:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1846:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1847:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1848:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1849:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1850:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* conversion on going on regular and injected groups:                      */
1851:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Automatic injected conversion: can be enabled if injected group       */
1852:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*    external triggers are disabled.                                       */
1853:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Channel sampling time                                                 */
1854:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Channel offset                                                        */
1855:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2775              		.loc 2 1855 3 is_stmt 1 view .LVU870
 2776              		.loc 2 1855 44 is_stmt 0 view .LVU871
 2777 0088 3068     		ldr	r0, [r6]
 2778 008a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2779              	.LVL227:
 2780 008e 0746     		mov	r7, r0
 2781              	.LVL228:
1856:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2782              		.loc 2 1856 3 is_stmt 1 view .LVU872
 2783              		.loc 2 1856 45 is_stmt 0 view .LVU873
 2784 0090 3068     		ldr	r0, [r6]
 2785              	.LVL229:
 2786              		.loc 2 1856 45 view .LVU874
 2787 0092 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2788              	.LVL230:
1857:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1858:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2789              		.loc 2 1858 3 is_stmt 1 view .LVU875
1859:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 2790              		.loc 2 1859 7 is_stmt 0 view .LVU876
 2791 0096 0743     		orrs	r7, r7, r0
 2792              	.LVL231:
 2793              		.loc 2 1859 7 view .LVU877
 2794 0098 40F03C81 		bne	.L279
1860:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      )
1861:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1862:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If injected group external triggers are disabled (set to injected      */
1863:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* software start): no constraint                                         */
1864:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 2795              		.loc 2 1864 5 is_stmt 1 view .LVU878
 2796              		.loc 2 1864 8 is_stmt 0 view .LVU879
 2797 009c A36A     		ldr	r3, [r4, #40]
 2798 009e 94F82550 		ldrb	r5, [r4, #37]	@ zero_extendqisi2
 2799 00a2 3068     		ldr	r0, [r6]
 2800              	.LVL232:
 2801              		.loc 2 1864 8 view .LVU880
 2802 00a4 1BB1     		cbz	r3, .L235
1865:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 2803              		.loc 2 1865 9 view .LVU881
 2804 00a6 E36A     		ldr	r3, [r4, #44]
 2805 00a8 002B     		cmp	r3, #0
 2806 00aa 40F0C980 		bne	.L236
 2807              	.L235:
1866:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1867:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
 2808              		.loc 2 1867 7 is_stmt 1 view .LVU882
1868:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1869:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 2809              		.loc 2 1869 9 is_stmt 0 view .LVU883
 2810 00ae C368     		ldr	r3, [r0, #12]
1867:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 2811              		.loc 2 1867 10 view .LVU884
 2812 00b0 012D     		cmp	r5, #1
 2813              		.loc 2 1869 9 is_stmt 1 view .LVU885
 2814 00b2 0CBF     		ite	eq
 2815 00b4 43F00073 		orreq	r3, r3, #33554432
1870:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1871:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1872:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1873:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 2816              		.loc 2 1873 9 view .LVU886
 2817 00b8 23F00073 		bicne	r3, r3, #33554432
 2818 00bc C360     		str	r3, [r0, #12]
1640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 2819              		.loc 2 1640 21 is_stmt 0 view .LVU887
 2820 00be 0025     		movs	r5, #0
 2821              	.LVL233:
 2822              	.L238:
1874:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1875:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1876:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If Automatic injected conversion was intended to be set and could not  */
1877:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* due to injected group external triggers enabled, error is reported.    */
1878:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1879:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1880:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
1881:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1882:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1883:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1884:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1885:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
1886:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1887:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       else
1888:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1889:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
1890:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1891:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1892:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1893:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->InjecOversamplingMode == ENABLE)
 2823              		.loc 2 1893 5 is_stmt 1 view .LVU888
 2824              		.loc 2 1893 8 is_stmt 0 view .LVU889
 2825 00c0 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 2826 00c4 012B     		cmp	r3, #1
1894:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1895:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       assert_param(IS_ADC_OVERSAMPLING_RATIO(sConfigInjected->InjecOversampling.Ratio));
 2827              		.loc 2 1895 7 is_stmt 1 view .LVU890
1896:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       assert_param(IS_ADC_RIGHT_BIT_SHIFT(sConfigInjected->InjecOversampling.RightBitShift));
 2828              		.loc 2 1896 7 view .LVU891
1897:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1898:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  JOVSE must be reset in case of triggered regular mode  */
1899:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       assert_param(!(READ_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_TROVS) == (ADC_CFG
 2829              		.loc 2 1899 7 view .LVU892
1900:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1901:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Configuration of Injected Oversampler:                                 */
1902:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Oversampling Ratio                                                  */
1903:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Right bit shift                                                     */
1904:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1905:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Enable OverSampling mode */
1906:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR2,
 2830              		.loc 2 1906 7 view .LVU893
 2831 00c6 05BF     		ittet	eq
 2832 00c8 D4E90D31 		ldrdeq	r3, r1, [r4, #52]
 2833 00cc 0269     		ldreq	r2, [r0, #16]
1907:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE |
1908:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSR  |
1909:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSS,
1910:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE                                  |
1911:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  sConfigInjected->InjecOversampling.Ratio         |
1912:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  sConfigInjected->InjecOversampling.RightBitShift
1913:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                 );
1914:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1915:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1916:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1917:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Disable Regular OverSampling */
1918:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 2834              		.loc 2 1918 7 is_stmt 0 view .LVU894
 2835 00ce 0369     		ldrne	r3, [r0, #16]
1906:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE |
 2836              		.loc 2 1906 7 view .LVU895
 2837 00d0 0B43     		orreq	r3, r3, r1
 2838 00d2 03BF     		ittte	eq
 2839 00d4 22F4FF72 		biceq	r2, r2, #510
 2840 00d8 1343     		orreq	r3, r3, r2
 2841 00da 43F00203 		orreq	r3, r3, #2
 2842              		.loc 2 1918 7 is_stmt 1 view .LVU896
 2843 00de 23F00203 		bicne	r3, r3, #2
 2844 00e2 0361     		str	r3, [r0, #16]
1919:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1920:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1921:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
1922:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 2845              		.loc 2 1922 5 view .LVU897
 2846              		.loc 2 1922 24 is_stmt 0 view .LVU898
 2847 00e4 A268     		ldr	r2, [r4, #8]
 2848 00e6 2168     		ldr	r1, [r4]
 2849              		.loc 2 1922 8 view .LVU899
 2850 00e8 B2F1004F 		cmp	r2, #-2147483648
 2851 00ec 40F0B580 		bne	.L242
1923:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1924:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set sampling time of the selected ADC channel */
1925:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLI
 2852              		.loc 2 1925 7 is_stmt 1 view .LVU900
 2853 00f0 0022     		movs	r2, #0
 2854 00f2 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 2855              	.LVL234:
1926:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1927:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC sampling time common configuration */
1928:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 2856              		.loc 2 1928 7 view .LVU901
 2857 00f6 3268     		ldr	r2, [r6]
 2858              	.LVL235:
 2859              	.LBB258:
 2860              	.LBI258:
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2861              		.loc 1 3462 22 view .LVU902
 2862              	.LBB259:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2863              		.loc 1 3464 3 view .LVU903
 2864 00f8 5369     		ldr	r3, [r2, #20]
 2865 00fa 43F00043 		orr	r3, r3, #-2147483648
 2866              	.LVL236:
 2867              	.L296:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2868              		.loc 1 3464 3 is_stmt 0 view .LVU904
 2869              	.LBE259:
 2870              	.LBE258:
 2871              	.LBB260:
 2872              	.LBB261:
 2873 00fe 5361     		str	r3, [r2, #20]
 2874              	.LBE261:
 2875              	.LBE260:
1929:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1930:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1931:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1932:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set sampling time of the selected ADC channel */
1933:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInject
1934:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1935:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC sampling time common configuration */
1936:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
1937:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1938:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1939:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Configure the offset: offset enable/disable, channel, offset value */
1940:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1941:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Shift the offset with respect to the selected ADC resolution. */
1942:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 2876              		.loc 2 1943 5 is_stmt 1 view .LVU905
1944:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1945:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 2877              		.loc 2 1945 24 is_stmt 0 view .LVU906
 2878 0100 D4F810C0 		ldr	ip, [r4, #16]
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2879              		.loc 2 1943 24 view .LVU907
 2880 0104 3068     		ldr	r0, [r6]
 2881 0106 2268     		ldr	r2, [r4]
 2882 0108 C168     		ldr	r1, [r0, #12]
 2883              	.LVL237:
 2884              		.loc 2 1945 5 is_stmt 1 view .LVU908
 2885              		.loc 2 1945 8 is_stmt 0 view .LVU909
 2886 010a BCF1040F 		cmp	ip, #4
 2887 010e 00F16003 		add	r3, r0, #96
 2888 0112 00F0A980 		beq	.L244
1946:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1947:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC selected offset number */
1948:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->Inje
 2889              		.loc 2 1948 7 is_stmt 1 view .LVU910
 2890              	.LVL238:
 2891              	.LBB263:
 2892              	.LBI263:
3122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2893              		.loc 1 3122 22 view .LVU911
 2894              	.LBB264:
3124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2895              		.loc 1 3124 3 view .LVU912
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2896              		.loc 1 3126 3 view .LVU913
 2897              	.LBE264:
 2898              	.LBE263:
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2899              		.loc 2 1943 24 is_stmt 0 view .LVU914
 2900 0116 C1F3C101 		ubfx	r1, r1, #3, #2
 2901              	.LVL239:
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2902              		.loc 2 1943 24 view .LVU915
 2903 011a 4800     		lsls	r0, r1, #1
 2904              	.LVL240:
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2905              		.loc 2 1943 22 view .LVU916
 2906 011c 6169     		ldr	r1, [r4, #20]
 2907              	.LBB267:
 2908              	.LBB265:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2909              		.loc 1 3126 3 view .LVU917
 2910 011e 53F82CE0 		ldr	lr, [r3, ip, lsl #2]
 2911              	.LBE265:
 2912              	.LBE267:
1943:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 2913              		.loc 2 1943 22 view .LVU918
 2914 0122 8140     		lsls	r1, r1, r0
 2915              	.LBB268:
 2916              	.LBB266:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2917              		.loc 1 3126 3 view .LVU919
 2918 0124 BA48     		ldr	r0, .L301
 2919 0126 02F0F842 		and	r2, r2, #2080374784
 2920              	.LVL241:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2921              		.loc 1 3126 3 view .LVU920
 2922 012a 0EEA0000 		and	r0, lr, r0
 2923 012e 1043     		orrs	r0, r0, r2
 2924 0130 0143     		orrs	r1, r1, r0
 2925 0132 41F00041 		orr	r1, r1, #-2147483648
 2926 0136 43F82C10 		str	r1, [r3, ip, lsl #2]
 2927              	.LVL242:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2928              		.loc 1 3126 3 view .LVU921
 2929              	.LBE266:
 2930              	.LBE268:
1949:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                        tmpOffsetShifted);
1950:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1951:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set ADC selected offset sign & saturation */
1952:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->
 2931              		.loc 2 1952 7 is_stmt 1 view .LVU922
 2932              	.LBB269:
 2933              	.LBI269:
3319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2934              		.loc 1 3319 22 view .LVU923
 2935              	.LBB270:
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2936              		.loc 1 3321 3 view .LVU924
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2937              		.loc 1 3321 34 is_stmt 0 view .LVU925
 2938 013a 2169     		ldr	r1, [r4, #16]
 2939              	.LVL243:
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
 2940              		.loc 1 3323 3 is_stmt 1 view .LVU926
 2941 013c A069     		ldr	r0, [r4, #24]
 2942 013e 53F82120 		ldr	r2, [r3, r1, lsl #2]
 2943 0142 22F08072 		bic	r2, r2, #16777216
 2944 0146 0243     		orrs	r2, r2, r0
 2945 0148 43F82120 		str	r2, [r3, r1, lsl #2]
 2946              	.LVL244:
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
 2947              		.loc 1 3323 3 is_stmt 0 view .LVU927
 2948              	.LBE270:
 2949              	.LBE269:
1953:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 2950              		.loc 2 1953 7 is_stmt 1 view .LVU928
 2951 014c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 2952 014e 2169     		ldr	r1, [r4, #16]
 2953 0150 012A     		cmp	r2, #1
 2954              	.LBB271:
 2955              	.LBB272:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2956              		.loc 1 3378 3 is_stmt 0 view .LVU929
 2957 0152 53F82120 		ldr	r2, [r3, r1, lsl #2]
 2958              	.LBE272:
 2959              	.LBE271:
 2960              		.loc 2 1953 7 view .LVU930
 2961 0156 08BF     		it	eq
 2962 0158 4FF00077 		moveq	r7, #33554432
 2963              	.LVL245:
 2964              	.LBB274:
 2965              	.LBI271:
3374:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2966              		.loc 1 3374 22 is_stmt 1 view .LVU931
 2967              	.LBB273:
3376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2968              		.loc 1 3376 3 view .LVU932
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2969              		.loc 1 3378 3 view .LVU933
 2970 015c 22F00072 		bic	r2, r2, #33554432
 2971 0160 1743     		orrs	r7, r7, r2
 2972              	.LVL246:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2973              		.loc 1 3378 3 is_stmt 0 view .LVU934
 2974 0162 43F82170 		str	r7, [r3, r1, lsl #2]
 2975              	.LVL247:
 2976              	.L234:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2977              		.loc 1 3378 3 view .LVU935
 2978              	.LBE273:
 2979              	.LBE274:
1954:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                  (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFF
1955:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1956:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
1957:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1958:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Scan each offset register to check if the selected channel is targeted. */
1959:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* If this is the case, the corresponding offset number is disabled.       */
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) =
1961:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1962:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
1963:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) =
1965:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1966:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
1967:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) =
1969:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1970:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
1971:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) =
1973:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
1974:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
1975:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
1976:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1977:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1978:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1979:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1980:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1981:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
1982:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Single or differential mode                                           */
1983:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 2980              		.loc 2 1983 3 is_stmt 1 view .LVU936
 2981              		.loc 2 1983 7 is_stmt 0 view .LVU937
 2982 0166 3068     		ldr	r0, [r6]
 2983 0168 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2984              	.LVL248:
 2985              		.loc 2 1983 6 view .LVU938
 2986 016c 0028     		cmp	r0, #0
 2987 016e 40F0FC80 		bne	.L258
1984:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
1985:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Set mode single-ended or differential input of the selected ADC channel */
1986:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->
 2988              		.loc 2 1986 5 is_stmt 1 view .LVU939
 2989 0172 E768     		ldr	r7, [r4, #12]
 2990 0174 3068     		ldr	r0, [r6]
 2991              	.LVL249:
 2992              		.loc 2 1986 5 is_stmt 0 view .LVU940
 2993 0176 2368     		ldr	r3, [r4]
 2994              	.LVL250:
 2995              	.LBB275:
 2996              	.LBI275:
5397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2997              		.loc 1 5397 22 is_stmt 1 view .LVU941
 2998              	.LBB276:
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 2999              		.loc 1 5402 3 view .LVU942
 3000 0178 A64A     		ldr	r2, .L301+4
 3001 017a D0F8B010 		ldr	r1, [r0, #176]
 3002 017e 07F0180E 		and	lr, r7, #24
 3003 0182 C3F3120C 		ubfx	ip, r3, #0, #19
 3004 0186 22FA0EF2 		lsr	r2, r2, lr
 3005 018a 1A40     		ands	r2, r2, r3
 3006 018c 21EA0C01 		bic	r1, r1, ip
 3007 0190 0A43     		orrs	r2, r2, r1
 3008 0192 C0F8B020 		str	r2, [r0, #176]
 3009              	.LVL251:
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 3010              		.loc 1 5402 3 is_stmt 0 view .LVU943
 3011              	.LBE276:
 3012              	.LBE275:
1987:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1988:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Configuration of differential mode */
1989:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range
1990:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 3013              		.loc 2 1990 5 is_stmt 1 view .LVU944
 3014              		.loc 2 1990 8 is_stmt 0 view .LVU945
 3015 0196 A04A     		ldr	r2, .L301+8
 3016 0198 9742     		cmp	r7, r2
 3017 019a 40F0E680 		bne	.L258
1991:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
1992:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Set sampling time of the selected ADC channel */
1993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL
 3018              		.loc 2 1993 7 is_stmt 1 view .LVU946
 3019              		.loc 2 1993 64 is_stmt 0 view .LVU947
 3020 019e BCF1000F 		cmp	ip, #0
 3021 01a2 40F0B980 		bne	.L260
 3022              		.loc 2 1993 64 discriminator 1 view .LVU948
 3023 01a6 9A0E     		lsrs	r2, r3, #26
 3024 01a8 0132     		adds	r2, r2, #1
 3025 01aa 02F01F07 		and	r7, r2, #31
 3026 01ae 9206     		lsls	r2, r2, #26
 3027 01b0 02F0F841 		and	r1, r2, #2080374784
 3028              		.loc 2 1993 7 discriminator 1 view .LVU949
 3029 01b4 092F     		cmp	r7, #9
 3030 01b6 4FF00102 		mov	r2, #1
 3031 01ba 02FA07F2 		lsl	r2, r2, r7
 3032 01be 40F2C580 		bls	.L261
 3033              	.L262:
 3034              		.loc 2 1993 64 discriminator 27 view .LVU950
 3035 01c2 0A43     		orrs	r2, r2, r1
 3036 01c4 BCF1000F 		cmp	ip, #0
 3037 01c8 40F01281 		bne	.L267
 3038              		.loc 2 1993 64 discriminator 28 view .LVU951
 3039 01cc 9B0E     		lsrs	r3, r3, #26
 3040 01ce 0133     		adds	r3, r3, #1
 3041 01d0 03F01F03 		and	r3, r3, #31
 3042 01d4 03EB4301 		add	r1, r3, r3, lsl #1
 3043 01d8 1E39     		subs	r1, r1, #30
 3044              	.L298:
 3045              		.loc 2 1993 64 discriminator 29 view .LVU952
 3046 01da 0905     		lsls	r1, r1, #20
 3047 01dc 41F00071 		orr	r1, r1, #33554432
 3048              		.loc 2 1993 7 discriminator 29 view .LVU953
 3049 01e0 1143     		orrs	r1, r1, r2
 3050 01e2 BFE0     		b	.L266
 3051              	.LVL252:
 3052              	.L226:
1762:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3053              		.loc 2 1762 5 is_stmt 1 view .LVU954
1762:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3054              		.loc 2 1762 8 is_stmt 0 view .LVU955
 3055 01e4 B26E     		ldr	r2, [r6, #104]
 3056 01e6 3ABB     		cbnz	r2, .L278
1766:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
 3057              		.loc 2 1766 7 is_stmt 1 view .LVU956
1770:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3058              		.loc 2 1770 42 is_stmt 0 view .LVU957
 3059 01e8 C6E91921 		strd	r2, r1, [r6, #100]
1782:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3060              		.loc 2 1782 7 is_stmt 1 view .LVU958
1782:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3061              		.loc 2 1782 26 is_stmt 0 view .LVU959
 3062 01ec A26A     		ldr	r2, [r4, #40]
 3063 01ee 0139     		subs	r1, r1, #1
1782:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3064              		.loc 2 1782 10 view .LVU960
 3065 01f0 22B1     		cbz	r2, .L230
1784:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3066              		.loc 2 1784 9 is_stmt 1 view .LVU961
1785:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
 3067              		.loc 2 1785 86 is_stmt 0 view .LVU962
 3068 01f2 02F07C02 		and	r2, r2, #124
1784:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3069              		.loc 2 1784 41 view .LVU963
 3070 01f6 E36A     		ldr	r3, [r4, #44]
1785:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
 3071              		.loc 2 1785 44 view .LVU964
 3072 01f8 1143     		orrs	r1, r1, r2
1784:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3073              		.loc 2 1784 41 view .LVU965
 3074 01fa 1943     		orrs	r1, r1, r3
 3075              	.LVL253:
 3076              	.L230:
1799:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3077              		.loc 2 1799 5 is_stmt 1 view .LVU966
1802:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3078              		.loc 2 1802 5 view .LVU967
1802:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3079              		.loc 2 1802 40 is_stmt 0 view .LVU968
 3080 01fc 2268     		ldr	r2, [r4]
 3081 01fe 00F01F03 		and	r3, r0, #31
 3082 0202 C2F38462 		ubfx	r2, r2, #26, #5
 3083 0206 02FA03F3 		lsl	r3, r2, r3
 3084              	.LVL254:
1805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3085              		.loc 2 1805 5 is_stmt 1 view .LVU969
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3086              		.loc 2 1810 40 is_stmt 0 view .LVU970
 3087 020a 726E     		ldr	r2, [r6, #100]
1805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3088              		.loc 2 1805 39 view .LVU971
 3089 020c B06E     		ldr	r0, [r6, #104]
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3090              		.loc 2 1810 40 view .LVU972
 3091 020e 1343     		orrs	r3, r3, r2
 3092              	.LVL255:
1805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3093              		.loc 2 1805 39 view .LVU973
 3094 0210 0138     		subs	r0, r0, #1
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3095              		.loc 2 1810 40 view .LVU974
 3096 0212 0B43     		orrs	r3, r3, r1
1805:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3097              		.loc 2 1805 39 view .LVU975
 3098 0214 B066     		str	r0, [r6, #104]
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3099              		.loc 2 1810 5 is_stmt 1 view .LVU976
1810:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3100              		.loc 2 1810 40 is_stmt 0 view .LVU977
 3101 0216 7366     		str	r3, [r6, #100]
1814:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3102              		.loc 2 1814 5 is_stmt 1 view .LVU978
1814:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3103              		.loc 2 1814 8 is_stmt 0 view .LVU979
 3104 0218 0028     		cmp	r0, #0
 3105 021a 7FF41FAF 		bne	.L228
 3106 021e 3168     		ldr	r1, [r6]
 3107              	.LVL256:
1816:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3108              		.loc 2 1816 7 is_stmt 1 view .LVU980
 3109 0220 CA6C     		ldr	r2, [r1, #76]
 3110 0222 22F07B42 		bic	r2, r2, #-83886080
 3111 0226 22F46F02 		bic	r2, r2, #15663104
 3112 022a 22F43F42 		bic	r2, r2, #48896
 3113 022e 22F0FF02 		bic	r2, r2, #255
 3114 0232 1343     		orrs	r3, r3, r2
 3115 0234 CB64     		str	r3, [r1, #76]
 3116 0236 11E7     		b	.L228
 3117              	.LVL257:
 3118              	.L278:
1647:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3119              		.loc 2 1647 12 is_stmt 0 view .LVU981
 3120 0238 1946     		mov	r1, r3
 3121 023a DFE7     		b	.L230
 3122              	.LVL258:
 3123              	.L233:
1841:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
 3124              		.loc 2 1841 7 is_stmt 1 view .LVU982
 3125 023c CA68     		ldr	r2, [r1, #12]
 3126 023e 1FE7     		b	.L293
 3127              	.L236:
1880:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3128              		.loc 2 1880 7 view .LVU983
1880:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3129              		.loc 2 1880 10 is_stmt 0 view .LVU984
 3130 0240 012D     		cmp	r5, #1
1883:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3131              		.loc 2 1883 9 is_stmt 1 view .LVU985
 3132 0242 0BBF     		itete	eq
 3133 0244 F36D     		ldreq	r3, [r6, #92]
1889:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3134              		.loc 2 1889 9 is_stmt 0 view .LVU986
 3135 0246 C368     		ldrne	r3, [r0, #12]
1883:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3136              		.loc 2 1883 9 view .LVU987
 3137 0248 43F02003 		orreq	r3, r3, #32
1889:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3138              		.loc 2 1889 9 view .LVU988
 3139 024c 23F00073 		bicne	r3, r3, #33554432
1883:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3140              		.loc 2 1883 9 view .LVU989
 3141 0250 0EBF     		itee	eq
 3142 0252 F365     		streq	r3, [r6, #92]
1885:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3143              		.loc 2 1885 9 is_stmt 1 view .LVU990
 3144              	.LVL259:
1889:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3145              		.loc 2 1889 9 view .LVU991
 3146 0254 C360     		strne	r3, [r0, #12]
1640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 3147              		.loc 2 1640 21 is_stmt 0 view .LVU992
 3148 0256 3D46     		movne	r5, r7
 3149 0258 32E7     		b	.L238
 3150              	.LVL260:
 3151              	.L242:
1933:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3152              		.loc 2 1933 7 is_stmt 1 view .LVU993
 3153 025a FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 3154              	.LVL261:
1936:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3155              		.loc 2 1936 7 view .LVU994
 3156 025e 3268     		ldr	r2, [r6]
 3157              	.LVL262:
 3158              	.LBB277:
 3159              	.LBI260:
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3160              		.loc 1 3462 22 view .LVU995
 3161              	.LBB262:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3162              		.loc 1 3464 3 view .LVU996
 3163 0260 5369     		ldr	r3, [r2, #20]
 3164 0262 23F00043 		bic	r3, r3, #-2147483648
 3165 0266 4AE7     		b	.L296
 3166              	.LVL263:
 3167              	.L244:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3168              		.loc 1 3464 3 is_stmt 0 view .LVU997
 3169              	.LBE262:
 3170              	.LBE277:
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3171              		.loc 2 1960 7 is_stmt 1 view .LVU998
 3172              	.LBB278:
 3173              	.LBI278:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3174              		.loc 1 3205 26 view .LVU999
 3175              	.LBB279:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3176              		.loc 1 3207 3 view .LVU1000
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3177              		.loc 1 3209 3 view .LVU1001
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3178              		.loc 1 3209 10 is_stmt 0 view .LVU1002
 3179 0268 016E     		ldr	r1, [r0, #96]
 3180              	.LVL264:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3181              		.loc 1 3209 10 view .LVU1003
 3182              	.LBE279:
 3183              	.LBE278:
 3184              	.LBB280:
 3185              	.LBI280:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3186              		.loc 1 3205 26 is_stmt 1 view .LVU1004
 3187              	.LBB281:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3188              		.loc 1 3207 3 view .LVU1005
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3189              		.loc 1 3209 3 view .LVU1006
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3190              		.loc 1 3209 10 is_stmt 0 view .LVU1007
 3191 026a 016E     		ldr	r1, [r0, #96]
 3192              	.LVL265:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3193              		.loc 1 3209 10 view .LVU1008
 3194              	.LBE281:
 3195              	.LBE280:
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3196              		.loc 2 1960 102 view .LVU1009
 3197 026c C2F31207 		ubfx	r7, r2, #0, #19
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3198              		.loc 2 1960 10 view .LVU1010
 3199 0270 C1F38461 		ubfx	r1, r1, #26, #5
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3200              		.loc 2 1960 102 view .LVU1011
 3201 0274 002F     		cmp	r7, #0
 3202 0276 39D1     		bne	.L246
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3203              		.loc 2 1960 102 discriminator 5 view .LVU1012
 3204 0278 C2F38462 		ubfx	r2, r2, #26, #5
 3205              	.L247:
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3206              		.loc 2 1960 9 discriminator 8 view .LVU1013
 3207 027c 9142     		cmp	r1, r2
1962:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3208              		.loc 2 1962 9 is_stmt 1 discriminator 8 view .LVU1014
 3209              	.LVL266:
 3210              	.LBB282:
 3211              	.LBI282:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3212              		.loc 1 3264 22 discriminator 8 view .LVU1015
 3213              	.LBB283:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3214              		.loc 1 3266 3 discriminator 8 view .LVU1016
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3215              		.loc 1 3268 3 discriminator 8 view .LVU1017
 3216 027e 02BF     		ittt	eq
 3217 0280 026E     		ldreq	r2, [r0, #96]
 3218 0282 22F00042 		biceq	r2, r2, #-2147483648
 3219 0286 0266     		streq	r2, [r0, #96]
 3220              	.LBE283:
 3221              	.LBE282:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3222              		.loc 2 1964 7 discriminator 8 view .LVU1018
 3223              	.LVL267:
 3224              	.LBB284:
 3225              	.LBI284:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3226              		.loc 1 3205 26 discriminator 8 view .LVU1019
 3227              	.LBB285:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3228              		.loc 1 3207 3 discriminator 8 view .LVU1020
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3229              		.loc 1 3209 3 discriminator 8 view .LVU1021
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3230              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU1022
 3231 0288 5A68     		ldr	r2, [r3, #4]
 3232              	.LVL268:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3233              		.loc 1 3209 10 discriminator 8 view .LVU1023
 3234              	.LBE285:
 3235              	.LBE284:
 3236              	.LBB286:
 3237              	.LBI286:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3238              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU1024
 3239              	.LBB287:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3240              		.loc 1 3207 3 discriminator 8 view .LVU1025
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3241              		.loc 1 3209 3 discriminator 8 view .LVU1026
 3242              	.LBE287:
 3243              	.LBE286:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3244              		.loc 2 1964 102 is_stmt 0 discriminator 8 view .LVU1027
 3245 028a 2268     		ldr	r2, [r4]
 3246              	.LBB289:
 3247              	.LBB288:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3248              		.loc 1 3209 10 discriminator 8 view .LVU1028
 3249 028c 5968     		ldr	r1, [r3, #4]
 3250              	.LVL269:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3251              		.loc 1 3209 10 discriminator 8 view .LVU1029
 3252              	.LBE288:
 3253              	.LBE289:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3254              		.loc 2 1964 102 discriminator 8 view .LVU1030
 3255 028e C2F31200 		ubfx	r0, r2, #0, #19
 3256              	.LVL270:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3257              		.loc 2 1964 10 discriminator 8 view .LVU1031
 3258 0292 C1F38461 		ubfx	r1, r1, #26, #5
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3259              		.loc 2 1964 102 discriminator 8 view .LVU1032
 3260 0296 70BB     		cbnz	r0, .L249
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3261              		.loc 2 1964 102 discriminator 5 view .LVU1033
 3262 0298 C2F38462 		ubfx	r2, r2, #26, #5
 3263              	.L250:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3264              		.loc 2 1964 9 discriminator 8 view .LVU1034
 3265 029c 9142     		cmp	r1, r2
1966:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3266              		.loc 2 1966 9 is_stmt 1 discriminator 8 view .LVU1035
 3267              	.LVL271:
 3268              	.LBB290:
 3269              	.LBI290:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3270              		.loc 1 3264 22 discriminator 8 view .LVU1036
 3271              	.LBB291:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3272              		.loc 1 3266 3 discriminator 8 view .LVU1037
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3273              		.loc 1 3268 3 discriminator 8 view .LVU1038
 3274 029e 02BF     		ittt	eq
 3275 02a0 5A68     		ldreq	r2, [r3, #4]
 3276 02a2 22F00042 		biceq	r2, r2, #-2147483648
 3277 02a6 5A60     		streq	r2, [r3, #4]
 3278              	.LBE291:
 3279              	.LBE290:
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3280              		.loc 2 1968 7 discriminator 8 view .LVU1039
 3281              	.LVL272:
 3282              	.LBB292:
 3283              	.LBI292:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3284              		.loc 1 3205 26 discriminator 8 view .LVU1040
 3285              	.LBB293:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3286              		.loc 1 3207 3 discriminator 8 view .LVU1041
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3287              		.loc 1 3209 3 discriminator 8 view .LVU1042
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3288              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU1043
 3289 02a8 9A68     		ldr	r2, [r3, #8]
 3290              	.LVL273:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3291              		.loc 1 3209 10 discriminator 8 view .LVU1044
 3292              	.LBE293:
 3293              	.LBE292:
 3294              	.LBB294:
 3295              	.LBI294:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3296              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU1045
 3297              	.LBB295:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3298              		.loc 1 3207 3 discriminator 8 view .LVU1046
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3299              		.loc 1 3209 3 discriminator 8 view .LVU1047
 3300              	.LBE295:
 3301              	.LBE294:
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3302              		.loc 2 1968 102 is_stmt 0 discriminator 8 view .LVU1048
 3303 02aa 2268     		ldr	r2, [r4]
 3304              	.LBB297:
 3305              	.LBB296:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3306              		.loc 1 3209 10 discriminator 8 view .LVU1049
 3307 02ac 9968     		ldr	r1, [r3, #8]
 3308              	.LVL274:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3309              		.loc 1 3209 10 discriminator 8 view .LVU1050
 3310              	.LBE296:
 3311              	.LBE297:
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3312              		.loc 2 1968 102 discriminator 8 view .LVU1051
 3313 02ae C2F31200 		ubfx	r0, r2, #0, #19
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3314              		.loc 2 1968 10 discriminator 8 view .LVU1052
 3315 02b2 C1F38461 		ubfx	r1, r1, #26, #5
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3316              		.loc 2 1968 102 discriminator 8 view .LVU1053
 3317 02b6 18BB     		cbnz	r0, .L252
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3318              		.loc 2 1968 102 discriminator 5 view .LVU1054
 3319 02b8 C2F38462 		ubfx	r2, r2, #26, #5
 3320              	.L253:
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3321              		.loc 2 1968 9 discriminator 8 view .LVU1055
 3322 02bc 9142     		cmp	r1, r2
1970:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3323              		.loc 2 1970 9 is_stmt 1 discriminator 8 view .LVU1056
 3324              	.LVL275:
 3325              	.LBB298:
 3326              	.LBI298:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3327              		.loc 1 3264 22 discriminator 8 view .LVU1057
 3328              	.LBB299:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3329              		.loc 1 3266 3 discriminator 8 view .LVU1058
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3330              		.loc 1 3268 3 discriminator 8 view .LVU1059
 3331 02be 02BF     		ittt	eq
 3332 02c0 9A68     		ldreq	r2, [r3, #8]
 3333 02c2 22F00042 		biceq	r2, r2, #-2147483648
 3334 02c6 9A60     		streq	r2, [r3, #8]
 3335              	.LBE299:
 3336              	.LBE298:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3337              		.loc 2 1972 7 discriminator 8 view .LVU1060
 3338              	.LVL276:
 3339              	.LBB300:
 3340              	.LBI300:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3341              		.loc 1 3205 26 discriminator 8 view .LVU1061
 3342              	.LBB301:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3343              		.loc 1 3207 3 discriminator 8 view .LVU1062
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3344              		.loc 1 3209 3 discriminator 8 view .LVU1063
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3345              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU1064
 3346 02c8 DA68     		ldr	r2, [r3, #12]
 3347              	.LVL277:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3348              		.loc 1 3209 10 discriminator 8 view .LVU1065
 3349              	.LBE301:
 3350              	.LBE300:
 3351              	.LBB302:
 3352              	.LBI302:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3353              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU1066
 3354              	.LBB303:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3355              		.loc 1 3207 3 discriminator 8 view .LVU1067
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3356              		.loc 1 3209 3 discriminator 8 view .LVU1068
 3357              	.LBE303:
 3358              	.LBE302:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3359              		.loc 2 1972 102 is_stmt 0 discriminator 8 view .LVU1069
 3360 02ca 2268     		ldr	r2, [r4]
 3361              	.LBB305:
 3362              	.LBB304:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3363              		.loc 1 3209 10 discriminator 8 view .LVU1070
 3364 02cc D968     		ldr	r1, [r3, #12]
 3365              	.LVL278:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3366              		.loc 1 3209 10 discriminator 8 view .LVU1071
 3367              	.LBE304:
 3368              	.LBE305:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3369              		.loc 2 1972 102 discriminator 8 view .LVU1072
 3370 02ce C2F31200 		ubfx	r0, r2, #0, #19
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3371              		.loc 2 1972 10 discriminator 8 view .LVU1073
 3372 02d2 C1F38461 		ubfx	r1, r1, #26, #5
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3373              		.loc 2 1972 102 discriminator 8 view .LVU1074
 3374 02d6 C0B9     		cbnz	r0, .L255
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3375              		.loc 2 1972 102 discriminator 5 view .LVU1075
 3376 02d8 C2F38462 		ubfx	r2, r2, #26, #5
 3377              	.L256:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3378              		.loc 2 1972 9 discriminator 8 view .LVU1076
 3379 02dc 9142     		cmp	r1, r2
 3380 02de 7FF442AF 		bne	.L234
1974:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 3381              		.loc 2 1974 9 is_stmt 1 view .LVU1077
 3382              	.LVL279:
 3383              	.LBB306:
 3384              	.LBI306:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3385              		.loc 1 3264 22 view .LVU1078
 3386              	.LBB307:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3387              		.loc 1 3266 3 view .LVU1079
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3388              		.loc 1 3268 3 view .LVU1080
 3389 02e2 DA68     		ldr	r2, [r3, #12]
 3390 02e4 22F00042 		bic	r2, r2, #-2147483648
 3391 02e8 DA60     		str	r2, [r3, #12]
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3392              		.loc 1 3268 3 is_stmt 0 view .LVU1081
 3393 02ea 3CE7     		b	.L234
 3394              	.LVL280:
 3395              	.L246:
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 3396              		.loc 1 3268 3 view .LVU1082
 3397              	.LBE307:
 3398              	.LBE306:
 3399              	.LBB308:
 3400              	.LBI308:
 3401              		.file 3 "../../..\\CubeG4\\include/cmsis_gcc.h"
   1:../../..\CubeG4\include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../..\CubeG4\include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../..\CubeG4\include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../../..\CubeG4\include/cmsis_gcc.h ****  * @version  V5.0.4
   5:../../..\CubeG4\include/cmsis_gcc.h ****  * @date     09. April 2018
   6:../../..\CubeG4\include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../..\CubeG4\include/cmsis_gcc.h **** /*
   8:../../..\CubeG4\include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../../..\CubeG4\include/cmsis_gcc.h ****  *
  10:../../..\CubeG4\include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../../..\CubeG4\include/cmsis_gcc.h ****  *
  12:../../..\CubeG4\include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../../..\CubeG4\include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../../..\CubeG4\include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../../..\CubeG4\include/cmsis_gcc.h ****  *
  16:../../..\CubeG4\include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../../..\CubeG4\include/cmsis_gcc.h ****  *
  18:../../..\CubeG4\include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../../..\CubeG4\include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../../..\CubeG4\include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../../..\CubeG4\include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../../..\CubeG4\include/cmsis_gcc.h ****  * limitations under the License.
  23:../../..\CubeG4\include/cmsis_gcc.h ****  */
  24:../../..\CubeG4\include/cmsis_gcc.h **** 
  25:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../../..\CubeG4\include/cmsis_gcc.h **** 
  28:../../..\CubeG4\include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../../..\CubeG4\include/cmsis_gcc.h **** 
  34:../../..\CubeG4\include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef __has_builtin
  36:../../..\CubeG4\include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  38:../../..\CubeG4\include/cmsis_gcc.h **** 
  39:../../..\CubeG4\include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __ASM
  41:../../..\CubeG4\include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  43:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __INLINE
  44:../../..\CubeG4\include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  46:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../../..\CubeG4\include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  49:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../../..\CubeG4\include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../../..\CubeG4\include/cmsis_gcc.h **** #endif                                           
  52:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../../..\CubeG4\include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  55:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __USED
  56:../../..\CubeG4\include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  58:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __WEAK
  59:../../..\CubeG4\include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  61:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED
  62:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  64:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  67:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  70:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../../..\CubeG4\include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  78:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  86:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  94:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 102:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 110:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../../..\CubeG4\include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 113:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../../..\CubeG4\include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 116:../../..\CubeG4\include/cmsis_gcc.h **** 
 117:../../..\CubeG4\include/cmsis_gcc.h **** 
 118:../../..\CubeG4\include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../../..\CubeG4\include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../../..\CubeG4\include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:../../..\CubeG4\include/cmsis_gcc.h ****   @{
 122:../../..\CubeG4\include/cmsis_gcc.h ****  */
 123:../../..\CubeG4\include/cmsis_gcc.h **** 
 124:../../..\CubeG4\include/cmsis_gcc.h **** /**
 125:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../../..\CubeG4\include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../../..\CubeG4\include/cmsis_gcc.h ****  */
 129:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../../..\CubeG4\include/cmsis_gcc.h **** {
 131:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../../..\CubeG4\include/cmsis_gcc.h **** }
 133:../../..\CubeG4\include/cmsis_gcc.h **** 
 134:../../..\CubeG4\include/cmsis_gcc.h **** 
 135:../../..\CubeG4\include/cmsis_gcc.h **** /**
 136:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../../..\CubeG4\include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../../..\CubeG4\include/cmsis_gcc.h ****  */
 140:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../../..\CubeG4\include/cmsis_gcc.h **** {
 142:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../../..\CubeG4\include/cmsis_gcc.h **** }
 144:../../..\CubeG4\include/cmsis_gcc.h **** 
 145:../../..\CubeG4\include/cmsis_gcc.h **** 
 146:../../..\CubeG4\include/cmsis_gcc.h **** /**
 147:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Control Register
 148:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Control Register value
 150:../../..\CubeG4\include/cmsis_gcc.h ****  */
 151:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../../..\CubeG4\include/cmsis_gcc.h **** {
 153:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 154:../../..\CubeG4\include/cmsis_gcc.h **** 
 155:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 157:../../..\CubeG4\include/cmsis_gcc.h **** }
 158:../../..\CubeG4\include/cmsis_gcc.h **** 
 159:../../..\CubeG4\include/cmsis_gcc.h **** 
 160:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../../..\CubeG4\include/cmsis_gcc.h **** /**
 162:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../../..\CubeG4\include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:../../..\CubeG4\include/cmsis_gcc.h ****  */
 166:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../../..\CubeG4\include/cmsis_gcc.h **** {
 168:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 169:../../..\CubeG4\include/cmsis_gcc.h **** 
 170:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 172:../../..\CubeG4\include/cmsis_gcc.h **** }
 173:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 174:../../..\CubeG4\include/cmsis_gcc.h **** 
 175:../../..\CubeG4\include/cmsis_gcc.h **** 
 176:../../..\CubeG4\include/cmsis_gcc.h **** /**
 177:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Control Register
 178:../../..\CubeG4\include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../../..\CubeG4\include/cmsis_gcc.h ****  */
 181:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../../..\CubeG4\include/cmsis_gcc.h **** {
 183:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:../../..\CubeG4\include/cmsis_gcc.h **** }
 185:../../..\CubeG4\include/cmsis_gcc.h **** 
 186:../../..\CubeG4\include/cmsis_gcc.h **** 
 187:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../../..\CubeG4\include/cmsis_gcc.h **** /**
 189:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../../..\CubeG4\include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../../..\CubeG4\include/cmsis_gcc.h ****  */
 193:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../../..\CubeG4\include/cmsis_gcc.h **** {
 195:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../../..\CubeG4\include/cmsis_gcc.h **** }
 197:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 198:../../..\CubeG4\include/cmsis_gcc.h **** 
 199:../../..\CubeG4\include/cmsis_gcc.h **** 
 200:../../..\CubeG4\include/cmsis_gcc.h **** /**
 201:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../../..\CubeG4\include/cmsis_gcc.h ****   \return               IPSR Register value
 204:../../..\CubeG4\include/cmsis_gcc.h ****  */
 205:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../../..\CubeG4\include/cmsis_gcc.h **** {
 207:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 208:../../..\CubeG4\include/cmsis_gcc.h **** 
 209:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 211:../../..\CubeG4\include/cmsis_gcc.h **** }
 212:../../..\CubeG4\include/cmsis_gcc.h **** 
 213:../../..\CubeG4\include/cmsis_gcc.h **** 
 214:../../..\CubeG4\include/cmsis_gcc.h **** /**
 215:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../../..\CubeG4\include/cmsis_gcc.h ****   \return               APSR Register value
 218:../../..\CubeG4\include/cmsis_gcc.h ****  */
 219:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../../..\CubeG4\include/cmsis_gcc.h **** {
 221:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 222:../../..\CubeG4\include/cmsis_gcc.h **** 
 223:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 225:../../..\CubeG4\include/cmsis_gcc.h **** }
 226:../../..\CubeG4\include/cmsis_gcc.h **** 
 227:../../..\CubeG4\include/cmsis_gcc.h **** 
 228:../../..\CubeG4\include/cmsis_gcc.h **** /**
 229:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../../..\CubeG4\include/cmsis_gcc.h ****   \return               xPSR Register value
 232:../../..\CubeG4\include/cmsis_gcc.h ****  */
 233:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../../..\CubeG4\include/cmsis_gcc.h **** {
 235:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 236:../../..\CubeG4\include/cmsis_gcc.h **** 
 237:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 239:../../..\CubeG4\include/cmsis_gcc.h **** }
 240:../../..\CubeG4\include/cmsis_gcc.h **** 
 241:../../..\CubeG4\include/cmsis_gcc.h **** 
 242:../../..\CubeG4\include/cmsis_gcc.h **** /**
 243:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSP Register value
 246:../../..\CubeG4\include/cmsis_gcc.h ****  */
 247:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../../..\CubeG4\include/cmsis_gcc.h **** {
 249:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 250:../../..\CubeG4\include/cmsis_gcc.h **** 
 251:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 253:../../..\CubeG4\include/cmsis_gcc.h **** }
 254:../../..\CubeG4\include/cmsis_gcc.h **** 
 255:../../..\CubeG4\include/cmsis_gcc.h **** 
 256:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../../..\CubeG4\include/cmsis_gcc.h **** /**
 258:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSP Register value
 261:../../..\CubeG4\include/cmsis_gcc.h ****  */
 262:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../../..\CubeG4\include/cmsis_gcc.h **** {
 264:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 265:../../..\CubeG4\include/cmsis_gcc.h **** 
 266:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 268:../../..\CubeG4\include/cmsis_gcc.h **** }
 269:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 270:../../..\CubeG4\include/cmsis_gcc.h **** 
 271:../../..\CubeG4\include/cmsis_gcc.h **** 
 272:../../..\CubeG4\include/cmsis_gcc.h **** /**
 273:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../../..\CubeG4\include/cmsis_gcc.h ****  */
 277:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../../..\CubeG4\include/cmsis_gcc.h **** {
 279:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../../..\CubeG4\include/cmsis_gcc.h **** }
 281:../../..\CubeG4\include/cmsis_gcc.h **** 
 282:../../..\CubeG4\include/cmsis_gcc.h **** 
 283:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../../..\CubeG4\include/cmsis_gcc.h **** /**
 285:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../../..\CubeG4\include/cmsis_gcc.h ****  */
 289:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../../..\CubeG4\include/cmsis_gcc.h **** {
 291:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:../../..\CubeG4\include/cmsis_gcc.h **** }
 293:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 294:../../..\CubeG4\include/cmsis_gcc.h **** 
 295:../../..\CubeG4\include/cmsis_gcc.h **** 
 296:../../..\CubeG4\include/cmsis_gcc.h **** /**
 297:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSP Register value
 300:../../..\CubeG4\include/cmsis_gcc.h ****  */
 301:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../../..\CubeG4\include/cmsis_gcc.h **** {
 303:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 304:../../..\CubeG4\include/cmsis_gcc.h **** 
 305:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 307:../../..\CubeG4\include/cmsis_gcc.h **** }
 308:../../..\CubeG4\include/cmsis_gcc.h **** 
 309:../../..\CubeG4\include/cmsis_gcc.h **** 
 310:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../../..\CubeG4\include/cmsis_gcc.h **** /**
 312:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSP Register value
 315:../../..\CubeG4\include/cmsis_gcc.h ****  */
 316:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../../..\CubeG4\include/cmsis_gcc.h **** {
 318:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 319:../../..\CubeG4\include/cmsis_gcc.h **** 
 320:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 322:../../..\CubeG4\include/cmsis_gcc.h **** }
 323:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 324:../../..\CubeG4\include/cmsis_gcc.h **** 
 325:../../..\CubeG4\include/cmsis_gcc.h **** 
 326:../../..\CubeG4\include/cmsis_gcc.h **** /**
 327:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../../..\CubeG4\include/cmsis_gcc.h ****  */
 331:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../../..\CubeG4\include/cmsis_gcc.h **** {
 333:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../../..\CubeG4\include/cmsis_gcc.h **** }
 335:../../..\CubeG4\include/cmsis_gcc.h **** 
 336:../../..\CubeG4\include/cmsis_gcc.h **** 
 337:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../../..\CubeG4\include/cmsis_gcc.h **** /**
 339:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../../..\CubeG4\include/cmsis_gcc.h ****  */
 343:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../../..\CubeG4\include/cmsis_gcc.h **** {
 345:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../../..\CubeG4\include/cmsis_gcc.h **** }
 347:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 348:../../..\CubeG4\include/cmsis_gcc.h **** 
 349:../../..\CubeG4\include/cmsis_gcc.h **** 
 350:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../../..\CubeG4\include/cmsis_gcc.h **** /**
 352:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../../..\CubeG4\include/cmsis_gcc.h ****   \return               SP Register value
 355:../../..\CubeG4\include/cmsis_gcc.h ****  */
 356:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../../..\CubeG4\include/cmsis_gcc.h **** {
 358:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 359:../../..\CubeG4\include/cmsis_gcc.h **** 
 360:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 362:../../..\CubeG4\include/cmsis_gcc.h **** }
 363:../../..\CubeG4\include/cmsis_gcc.h **** 
 364:../../..\CubeG4\include/cmsis_gcc.h **** 
 365:../../..\CubeG4\include/cmsis_gcc.h **** /**
 366:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../../..\CubeG4\include/cmsis_gcc.h ****  */
 370:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../../..\CubeG4\include/cmsis_gcc.h **** {
 372:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../../..\CubeG4\include/cmsis_gcc.h **** }
 374:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 375:../../..\CubeG4\include/cmsis_gcc.h **** 
 376:../../..\CubeG4\include/cmsis_gcc.h **** 
 377:../../..\CubeG4\include/cmsis_gcc.h **** /**
 378:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Priority Mask value
 381:../../..\CubeG4\include/cmsis_gcc.h ****  */
 382:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../../..\CubeG4\include/cmsis_gcc.h **** {
 384:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 385:../../..\CubeG4\include/cmsis_gcc.h **** 
 386:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 388:../../..\CubeG4\include/cmsis_gcc.h **** }
 389:../../..\CubeG4\include/cmsis_gcc.h **** 
 390:../../..\CubeG4\include/cmsis_gcc.h **** 
 391:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../../..\CubeG4\include/cmsis_gcc.h **** /**
 393:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Priority Mask value
 396:../../..\CubeG4\include/cmsis_gcc.h ****  */
 397:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../../..\CubeG4\include/cmsis_gcc.h **** {
 399:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 400:../../..\CubeG4\include/cmsis_gcc.h **** 
 401:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 403:../../..\CubeG4\include/cmsis_gcc.h **** }
 404:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 405:../../..\CubeG4\include/cmsis_gcc.h **** 
 406:../../..\CubeG4\include/cmsis_gcc.h **** 
 407:../../..\CubeG4\include/cmsis_gcc.h **** /**
 408:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../../..\CubeG4\include/cmsis_gcc.h ****  */
 412:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../../..\CubeG4\include/cmsis_gcc.h **** {
 414:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../../..\CubeG4\include/cmsis_gcc.h **** }
 416:../../..\CubeG4\include/cmsis_gcc.h **** 
 417:../../..\CubeG4\include/cmsis_gcc.h **** 
 418:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../../..\CubeG4\include/cmsis_gcc.h **** /**
 420:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../../..\CubeG4\include/cmsis_gcc.h ****  */
 424:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../../..\CubeG4\include/cmsis_gcc.h **** {
 426:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../../..\CubeG4\include/cmsis_gcc.h **** }
 428:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 429:../../..\CubeG4\include/cmsis_gcc.h **** 
 430:../../..\CubeG4\include/cmsis_gcc.h **** 
 431:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../../..\CubeG4\include/cmsis_gcc.h **** /**
 435:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../../..\CubeG4\include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../../..\CubeG4\include/cmsis_gcc.h ****  */
 439:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../../..\CubeG4\include/cmsis_gcc.h **** {
 441:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../../..\CubeG4\include/cmsis_gcc.h **** }
 443:../../..\CubeG4\include/cmsis_gcc.h **** 
 444:../../..\CubeG4\include/cmsis_gcc.h **** 
 445:../../..\CubeG4\include/cmsis_gcc.h **** /**
 446:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../../..\CubeG4\include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../../..\CubeG4\include/cmsis_gcc.h ****  */
 450:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../../..\CubeG4\include/cmsis_gcc.h **** {
 452:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../../..\CubeG4\include/cmsis_gcc.h **** }
 454:../../..\CubeG4\include/cmsis_gcc.h **** 
 455:../../..\CubeG4\include/cmsis_gcc.h **** 
 456:../../..\CubeG4\include/cmsis_gcc.h **** /**
 457:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Base Priority register value
 460:../../..\CubeG4\include/cmsis_gcc.h ****  */
 461:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../../..\CubeG4\include/cmsis_gcc.h **** {
 463:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 464:../../..\CubeG4\include/cmsis_gcc.h **** 
 465:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 467:../../..\CubeG4\include/cmsis_gcc.h **** }
 468:../../..\CubeG4\include/cmsis_gcc.h **** 
 469:../../..\CubeG4\include/cmsis_gcc.h **** 
 470:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../../..\CubeG4\include/cmsis_gcc.h **** /**
 472:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Base Priority register value
 475:../../..\CubeG4\include/cmsis_gcc.h ****  */
 476:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../../..\CubeG4\include/cmsis_gcc.h **** {
 478:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 479:../../..\CubeG4\include/cmsis_gcc.h **** 
 480:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 482:../../..\CubeG4\include/cmsis_gcc.h **** }
 483:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 484:../../..\CubeG4\include/cmsis_gcc.h **** 
 485:../../..\CubeG4\include/cmsis_gcc.h **** 
 486:../../..\CubeG4\include/cmsis_gcc.h **** /**
 487:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../../..\CubeG4\include/cmsis_gcc.h ****  */
 491:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../../..\CubeG4\include/cmsis_gcc.h **** {
 493:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../../..\CubeG4\include/cmsis_gcc.h **** }
 495:../../..\CubeG4\include/cmsis_gcc.h **** 
 496:../../..\CubeG4\include/cmsis_gcc.h **** 
 497:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../../..\CubeG4\include/cmsis_gcc.h **** /**
 499:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../../..\CubeG4\include/cmsis_gcc.h ****  */
 503:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../../..\CubeG4\include/cmsis_gcc.h **** {
 505:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../../..\CubeG4\include/cmsis_gcc.h **** }
 507:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 508:../../..\CubeG4\include/cmsis_gcc.h **** 
 509:../../..\CubeG4\include/cmsis_gcc.h **** 
 510:../../..\CubeG4\include/cmsis_gcc.h **** /**
 511:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../../..\CubeG4\include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../../..\CubeG4\include/cmsis_gcc.h ****  */
 516:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../../..\CubeG4\include/cmsis_gcc.h **** {
 518:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../../..\CubeG4\include/cmsis_gcc.h **** }
 520:../../..\CubeG4\include/cmsis_gcc.h **** 
 521:../../..\CubeG4\include/cmsis_gcc.h **** 
 522:../../..\CubeG4\include/cmsis_gcc.h **** /**
 523:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:../../..\CubeG4\include/cmsis_gcc.h ****  */
 527:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../../..\CubeG4\include/cmsis_gcc.h **** {
 529:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 530:../../..\CubeG4\include/cmsis_gcc.h **** 
 531:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 533:../../..\CubeG4\include/cmsis_gcc.h **** }
 534:../../..\CubeG4\include/cmsis_gcc.h **** 
 535:../../..\CubeG4\include/cmsis_gcc.h **** 
 536:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../../..\CubeG4\include/cmsis_gcc.h **** /**
 538:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../../..\CubeG4\include/cmsis_gcc.h ****  */
 542:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../../..\CubeG4\include/cmsis_gcc.h **** {
 544:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 545:../../..\CubeG4\include/cmsis_gcc.h **** 
 546:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 548:../../..\CubeG4\include/cmsis_gcc.h **** }
 549:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 550:../../..\CubeG4\include/cmsis_gcc.h **** 
 551:../../..\CubeG4\include/cmsis_gcc.h **** 
 552:../../..\CubeG4\include/cmsis_gcc.h **** /**
 553:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../../..\CubeG4\include/cmsis_gcc.h ****  */
 557:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../../..\CubeG4\include/cmsis_gcc.h **** {
 559:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../../..\CubeG4\include/cmsis_gcc.h **** }
 561:../../..\CubeG4\include/cmsis_gcc.h **** 
 562:../../..\CubeG4\include/cmsis_gcc.h **** 
 563:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:../../..\CubeG4\include/cmsis_gcc.h **** /**
 565:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../../..\CubeG4\include/cmsis_gcc.h ****  */
 569:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../../..\CubeG4\include/cmsis_gcc.h **** {
 571:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../../..\CubeG4\include/cmsis_gcc.h **** }
 573:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 574:../../..\CubeG4\include/cmsis_gcc.h **** 
 575:../../..\CubeG4\include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../../..\CubeG4\include/cmsis_gcc.h **** 
 579:../../..\CubeG4\include/cmsis_gcc.h **** 
 580:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../../..\CubeG4\include/cmsis_gcc.h **** 
 583:../../..\CubeG4\include/cmsis_gcc.h **** /**
 584:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 588:../../..\CubeG4\include/cmsis_gcc.h ****   
 589:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../../..\CubeG4\include/cmsis_gcc.h ****  */
 592:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../../..\CubeG4\include/cmsis_gcc.h **** {
 594:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../../..\CubeG4\include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 598:../../..\CubeG4\include/cmsis_gcc.h **** #else
 599:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 600:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 602:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 603:../../..\CubeG4\include/cmsis_gcc.h **** }
 604:../../..\CubeG4\include/cmsis_gcc.h **** 
 605:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../../..\CubeG4\include/cmsis_gcc.h **** /**
 607:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../../..\CubeG4\include/cmsis_gcc.h **** 
 611:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../../..\CubeG4\include/cmsis_gcc.h ****  */
 614:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../../..\CubeG4\include/cmsis_gcc.h **** {
 616:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 619:../../..\CubeG4\include/cmsis_gcc.h **** #else
 620:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 621:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 623:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 624:../../..\CubeG4\include/cmsis_gcc.h **** }
 625:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 626:../../..\CubeG4\include/cmsis_gcc.h **** 
 627:../../..\CubeG4\include/cmsis_gcc.h **** 
 628:../../..\CubeG4\include/cmsis_gcc.h **** /**
 629:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 633:../../..\CubeG4\include/cmsis_gcc.h ****   
 634:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../../..\CubeG4\include/cmsis_gcc.h ****  */
 637:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../../..\CubeG4\include/cmsis_gcc.h **** {
 639:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../../..\CubeG4\include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../../..\CubeG4\include/cmsis_gcc.h **** #else
 644:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 646:../../..\CubeG4\include/cmsis_gcc.h **** }
 647:../../..\CubeG4\include/cmsis_gcc.h **** 
 648:../../..\CubeG4\include/cmsis_gcc.h **** 
 649:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../../..\CubeG4\include/cmsis_gcc.h **** /**
 651:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../../..\CubeG4\include/cmsis_gcc.h **** 
 655:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../../..\CubeG4\include/cmsis_gcc.h ****  */
 658:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../../..\CubeG4\include/cmsis_gcc.h **** {
 660:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../../..\CubeG4\include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../../..\CubeG4\include/cmsis_gcc.h **** #else
 664:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 666:../../..\CubeG4\include/cmsis_gcc.h **** }
 667:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 668:../../..\CubeG4\include/cmsis_gcc.h **** 
 669:../../..\CubeG4\include/cmsis_gcc.h **** 
 670:../../..\CubeG4\include/cmsis_gcc.h **** /**
 671:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 675:../../..\CubeG4\include/cmsis_gcc.h **** 
 676:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:../../..\CubeG4\include/cmsis_gcc.h ****  */
 679:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../../..\CubeG4\include/cmsis_gcc.h **** {
 681:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 685:../../..\CubeG4\include/cmsis_gcc.h **** #else
 686:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 687:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 689:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 690:../../..\CubeG4\include/cmsis_gcc.h **** }
 691:../../..\CubeG4\include/cmsis_gcc.h **** 
 692:../../..\CubeG4\include/cmsis_gcc.h **** 
 693:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../../..\CubeG4\include/cmsis_gcc.h **** /**
 695:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../../..\CubeG4\include/cmsis_gcc.h **** 
 699:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../../..\CubeG4\include/cmsis_gcc.h ****  */
 702:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../../..\CubeG4\include/cmsis_gcc.h **** {
 704:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 707:../../..\CubeG4\include/cmsis_gcc.h **** #else
 708:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 709:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 711:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 712:../../..\CubeG4\include/cmsis_gcc.h **** }
 713:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 714:../../..\CubeG4\include/cmsis_gcc.h **** 
 715:../../..\CubeG4\include/cmsis_gcc.h **** 
 716:../../..\CubeG4\include/cmsis_gcc.h **** /**
 717:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 721:../../..\CubeG4\include/cmsis_gcc.h **** 
 722:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../../..\CubeG4\include/cmsis_gcc.h ****  */
 725:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../../..\CubeG4\include/cmsis_gcc.h **** {
 727:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../../..\CubeG4\include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../../..\CubeG4\include/cmsis_gcc.h **** #else
 732:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 734:../../..\CubeG4\include/cmsis_gcc.h **** }
 735:../../..\CubeG4\include/cmsis_gcc.h **** 
 736:../../..\CubeG4\include/cmsis_gcc.h **** 
 737:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../../..\CubeG4\include/cmsis_gcc.h **** /**
 739:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../../..\CubeG4\include/cmsis_gcc.h **** 
 743:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../../..\CubeG4\include/cmsis_gcc.h ****  */
 746:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../../..\CubeG4\include/cmsis_gcc.h **** {
 748:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../../..\CubeG4\include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../../..\CubeG4\include/cmsis_gcc.h **** #else
 752:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 754:../../..\CubeG4\include/cmsis_gcc.h **** }
 755:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 756:../../..\CubeG4\include/cmsis_gcc.h **** 
 757:../../..\CubeG4\include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../../..\CubeG4\include/cmsis_gcc.h **** 
 760:../../..\CubeG4\include/cmsis_gcc.h **** 
 761:../../..\CubeG4\include/cmsis_gcc.h **** /**
 762:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../../..\CubeG4\include/cmsis_gcc.h ****  */
 766:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../../..\CubeG4\include/cmsis_gcc.h **** {
 768:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../../..\CubeG4\include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../../..\CubeG4\include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../../..\CubeG4\include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../../..\CubeG4\include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../../..\CubeG4\include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../../..\CubeG4\include/cmsis_gcc.h **** #else
 776:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 777:../../..\CubeG4\include/cmsis_gcc.h **** 
 778:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 780:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 781:../../..\CubeG4\include/cmsis_gcc.h **** #else
 782:../../..\CubeG4\include/cmsis_gcc.h ****   return(0U);
 783:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 784:../../..\CubeG4\include/cmsis_gcc.h **** }
 785:../../..\CubeG4\include/cmsis_gcc.h **** 
 786:../../..\CubeG4\include/cmsis_gcc.h **** 
 787:../../..\CubeG4\include/cmsis_gcc.h **** /**
 788:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../../..\CubeG4\include/cmsis_gcc.h ****  */
 792:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../../..\CubeG4\include/cmsis_gcc.h **** {
 794:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../../..\CubeG4\include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../../..\CubeG4\include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../../..\CubeG4\include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../../..\CubeG4\include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../../..\CubeG4\include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../../..\CubeG4\include/cmsis_gcc.h **** #else
 802:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 804:../../..\CubeG4\include/cmsis_gcc.h **** #else
 805:../../..\CubeG4\include/cmsis_gcc.h ****   (void)fpscr;
 806:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 807:../../..\CubeG4\include/cmsis_gcc.h **** }
 808:../../..\CubeG4\include/cmsis_gcc.h **** 
 809:../../..\CubeG4\include/cmsis_gcc.h **** 
 810:../../..\CubeG4\include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:../../..\CubeG4\include/cmsis_gcc.h **** 
 812:../../..\CubeG4\include/cmsis_gcc.h **** 
 813:../../..\CubeG4\include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../../..\CubeG4\include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../../..\CubeG4\include/cmsis_gcc.h ****   Access to dedicated instructions
 816:../../..\CubeG4\include/cmsis_gcc.h ****   @{
 817:../../..\CubeG4\include/cmsis_gcc.h **** */
 818:../../..\CubeG4\include/cmsis_gcc.h **** 
 819:../../..\CubeG4\include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../../..\CubeG4\include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../../..\CubeG4\include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../../..\CubeG4\include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../../..\CubeG4\include/cmsis_gcc.h **** #else
 827:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 831:../../..\CubeG4\include/cmsis_gcc.h **** 
 832:../../..\CubeG4\include/cmsis_gcc.h **** /**
 833:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   No Operation
 834:../../..\CubeG4\include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../../..\CubeG4\include/cmsis_gcc.h ****  */
 836:../../..\CubeG4\include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../../..\CubeG4\include/cmsis_gcc.h **** 
 838:../../..\CubeG4\include/cmsis_gcc.h **** /**
 839:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../../..\CubeG4\include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../../..\CubeG4\include/cmsis_gcc.h ****  */
 842:../../..\CubeG4\include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../../..\CubeG4\include/cmsis_gcc.h **** 
 844:../../..\CubeG4\include/cmsis_gcc.h **** 
 845:../../..\CubeG4\include/cmsis_gcc.h **** /**
 846:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Wait For Event
 847:../../..\CubeG4\include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../../..\CubeG4\include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:../../..\CubeG4\include/cmsis_gcc.h ****  */
 850:../../..\CubeG4\include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../../..\CubeG4\include/cmsis_gcc.h **** 
 852:../../..\CubeG4\include/cmsis_gcc.h **** 
 853:../../..\CubeG4\include/cmsis_gcc.h **** /**
 854:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Send Event
 855:../../..\CubeG4\include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../../..\CubeG4\include/cmsis_gcc.h ****  */
 857:../../..\CubeG4\include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../../..\CubeG4\include/cmsis_gcc.h **** 
 859:../../..\CubeG4\include/cmsis_gcc.h **** 
 860:../../..\CubeG4\include/cmsis_gcc.h **** /**
 861:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:../../..\CubeG4\include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../../..\CubeG4\include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../../..\CubeG4\include/cmsis_gcc.h ****            after the instruction has been completed.
 865:../../..\CubeG4\include/cmsis_gcc.h ****  */
 866:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../../..\CubeG4\include/cmsis_gcc.h **** {
 868:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../../..\CubeG4\include/cmsis_gcc.h **** }
 870:../../..\CubeG4\include/cmsis_gcc.h **** 
 871:../../..\CubeG4\include/cmsis_gcc.h **** 
 872:../../..\CubeG4\include/cmsis_gcc.h **** /**
 873:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../../..\CubeG4\include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../../..\CubeG4\include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../../..\CubeG4\include/cmsis_gcc.h ****  */
 877:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:../../..\CubeG4\include/cmsis_gcc.h **** {
 879:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:../../..\CubeG4\include/cmsis_gcc.h **** }
 881:../../..\CubeG4\include/cmsis_gcc.h **** 
 882:../../..\CubeG4\include/cmsis_gcc.h **** 
 883:../../..\CubeG4\include/cmsis_gcc.h **** /**
 884:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:../../..\CubeG4\include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:../../..\CubeG4\include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:../../..\CubeG4\include/cmsis_gcc.h ****  */
 888:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:../../..\CubeG4\include/cmsis_gcc.h **** {
 890:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:../../..\CubeG4\include/cmsis_gcc.h **** }
 892:../../..\CubeG4\include/cmsis_gcc.h **** 
 893:../../..\CubeG4\include/cmsis_gcc.h **** 
 894:../../..\CubeG4\include/cmsis_gcc.h **** /**
 895:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 899:../../..\CubeG4\include/cmsis_gcc.h ****  */
 900:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:../../..\CubeG4\include/cmsis_gcc.h **** {
 902:../../..\CubeG4\include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:../../..\CubeG4\include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:../../..\CubeG4\include/cmsis_gcc.h **** #else
 905:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 906:../../..\CubeG4\include/cmsis_gcc.h **** 
 907:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 909:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 910:../../..\CubeG4\include/cmsis_gcc.h **** }
 911:../../..\CubeG4\include/cmsis_gcc.h **** 
 912:../../..\CubeG4\include/cmsis_gcc.h **** 
 913:../../..\CubeG4\include/cmsis_gcc.h **** /**
 914:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 918:../../..\CubeG4\include/cmsis_gcc.h ****  */
 919:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:../../..\CubeG4\include/cmsis_gcc.h **** {
 921:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 922:../../..\CubeG4\include/cmsis_gcc.h **** 
 923:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 925:../../..\CubeG4\include/cmsis_gcc.h **** }
 926:../../..\CubeG4\include/cmsis_gcc.h **** 
 927:../../..\CubeG4\include/cmsis_gcc.h **** 
 928:../../..\CubeG4\include/cmsis_gcc.h **** /**
 929:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 933:../../..\CubeG4\include/cmsis_gcc.h ****  */
 934:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:../../..\CubeG4\include/cmsis_gcc.h **** {
 936:../../..\CubeG4\include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:../../..\CubeG4\include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:../../..\CubeG4\include/cmsis_gcc.h **** #else
 939:../../..\CubeG4\include/cmsis_gcc.h ****   int16_t result;
 940:../../..\CubeG4\include/cmsis_gcc.h **** 
 941:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 943:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 944:../../..\CubeG4\include/cmsis_gcc.h **** }
 945:../../..\CubeG4\include/cmsis_gcc.h **** 
 946:../../..\CubeG4\include/cmsis_gcc.h **** 
 947:../../..\CubeG4\include/cmsis_gcc.h **** /**
 948:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:../../..\CubeG4\include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Rotated value
 953:../../..\CubeG4\include/cmsis_gcc.h ****  */
 954:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:../../..\CubeG4\include/cmsis_gcc.h **** {
 956:../../..\CubeG4\include/cmsis_gcc.h ****   op2 %= 32U;
 957:../../..\CubeG4\include/cmsis_gcc.h ****   if (op2 == 0U)
 958:../../..\CubeG4\include/cmsis_gcc.h ****   {
 959:../../..\CubeG4\include/cmsis_gcc.h ****     return op1;
 960:../../..\CubeG4\include/cmsis_gcc.h ****   }
 961:../../..\CubeG4\include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:../../..\CubeG4\include/cmsis_gcc.h **** }
 963:../../..\CubeG4\include/cmsis_gcc.h **** 
 964:../../..\CubeG4\include/cmsis_gcc.h **** 
 965:../../..\CubeG4\include/cmsis_gcc.h **** /**
 966:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Breakpoint
 967:../../..\CubeG4\include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:../../..\CubeG4\include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:../../..\CubeG4\include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:../../..\CubeG4\include/cmsis_gcc.h ****  */
 972:../../..\CubeG4\include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:../../..\CubeG4\include/cmsis_gcc.h **** 
 974:../../..\CubeG4\include/cmsis_gcc.h **** 
 975:../../..\CubeG4\include/cmsis_gcc.h **** /**
 976:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 980:../../..\CubeG4\include/cmsis_gcc.h ****  */
 981:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 3402              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU1083
 3403              	.LBB309:
 982:../../..\CubeG4\include/cmsis_gcc.h **** {
 983:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 3404              		.loc 3 983 3 discriminator 6 view .LVU1084
 984:../../..\CubeG4\include/cmsis_gcc.h **** 
 985:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:../../..\CubeG4\include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 3405              		.loc 3 988 4 discriminator 6 view .LVU1085
 3406              		.syntax unified
 3407              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3408 02ec 92FAA2F2 		rbit r2, r2
 3409              	@ 0 "" 2
 3410              	.LVL281:
 989:../../..\CubeG4\include/cmsis_gcc.h **** #else
 990:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:../../..\CubeG4\include/cmsis_gcc.h **** 
 992:../../..\CubeG4\include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:../../..\CubeG4\include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:../../..\CubeG4\include/cmsis_gcc.h ****   {
 995:../../..\CubeG4\include/cmsis_gcc.h ****     result <<= 1U;
 996:../../..\CubeG4\include/cmsis_gcc.h ****     result |= value & 1U;
 997:../../..\CubeG4\include/cmsis_gcc.h ****     s--;
 998:../../..\CubeG4\include/cmsis_gcc.h ****   }
 999:../../..\CubeG4\include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:../../..\CubeG4\include/cmsis_gcc.h **** #endif
1001:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 3411              		.loc 3 1001 3 discriminator 6 view .LVU1086
 3412              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU1087
 3413              		.thumb
 3414              		.syntax unified
 3415              	.LBE309:
 3416              	.LBE308:
1960:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3417              		.loc 2 1960 102 discriminator 6 view .LVU1088
 3418 02f0 B2FA82F2 		clz	r2, r2
 3419 02f4 C2E7     		b	.L247
 3420              	.LVL282:
 3421              	.L249:
 3422              	.LBB310:
 3423              	.LBI310:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3424              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU1089
 3425              	.LBB311:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3426              		.loc 3 983 3 discriminator 6 view .LVU1090
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3427              		.loc 3 988 4 discriminator 6 view .LVU1091
 3428              		.syntax unified
 3429              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3430 02f6 92FAA2F2 		rbit r2, r2
 3431              	@ 0 "" 2
 3432              	.LVL283:
 3433              		.loc 3 1001 3 discriminator 6 view .LVU1092
 3434              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU1093
 3435              		.thumb
 3436              		.syntax unified
 3437              	.LBE311:
 3438              	.LBE310:
1964:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3439              		.loc 2 1964 102 discriminator 6 view .LVU1094
 3440 02fa B2FA82F2 		clz	r2, r2
 3441 02fe CDE7     		b	.L250
 3442              	.LVL284:
 3443              	.L252:
 3444              	.LBB312:
 3445              	.LBI312:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3446              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU1095
 3447              	.LBB313:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3448              		.loc 3 983 3 discriminator 6 view .LVU1096
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3449              		.loc 3 988 4 discriminator 6 view .LVU1097
 3450              		.syntax unified
 3451              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3452 0300 92FAA2F2 		rbit r2, r2
 3453              	@ 0 "" 2
 3454              	.LVL285:
 3455              		.loc 3 1001 3 discriminator 6 view .LVU1098
 3456              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU1099
 3457              		.thumb
 3458              		.syntax unified
 3459              	.LBE313:
 3460              	.LBE312:
1968:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3461              		.loc 2 1968 102 discriminator 6 view .LVU1100
 3462 0304 B2FA82F2 		clz	r2, r2
 3463 0308 D8E7     		b	.L253
 3464              	.LVL286:
 3465              	.L255:
 3466              	.LBB314:
 3467              	.LBI314:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3468              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU1101
 3469              	.LBB315:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3470              		.loc 3 983 3 discriminator 6 view .LVU1102
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3471              		.loc 3 988 4 discriminator 6 view .LVU1103
 3472              		.syntax unified
 3473              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3474 030a 92FAA2F2 		rbit r2, r2
 3475              	@ 0 "" 2
 3476              	.LVL287:
 3477              		.loc 3 1001 3 discriminator 6 view .LVU1104
 3478              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU1105
 3479              		.thumb
 3480              		.syntax unified
 3481              	.LBE315:
 3482              	.LBE314:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3483              		.loc 2 1972 102 discriminator 6 view .LVU1106
 3484 030e B2FA82F2 		clz	r2, r2
 3485 0312 E3E7     		b	.L256
 3486              	.LVL288:
 3487              	.L279:
1640:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 3488              		.loc 2 1640 21 view .LVU1107
 3489 0314 0025     		movs	r5, #0
 3490 0316 26E7     		b	.L234
 3491              	.LVL289:
 3492              	.L260:
 3493              	.LBB316:
 3494              	.LBI316:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3495              		.loc 3 981 31 is_stmt 1 discriminator 2 view .LVU1108
 3496              	.LBB317:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3497              		.loc 3 983 3 discriminator 2 view .LVU1109
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3498              		.loc 3 988 4 discriminator 2 view .LVU1110
 3499              		.syntax unified
 3500              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3501 0318 93FAA3F2 		rbit r2, r3
 3502              	@ 0 "" 2
 3503              	.LVL290:
 3504              		.loc 3 1001 3 discriminator 2 view .LVU1111
 3505              		.loc 3 1001 3 is_stmt 0 discriminator 2 view .LVU1112
 3506              		.thumb
 3507              		.syntax unified
 3508              	.LBE317:
 3509              	.LBE316:
 3510              		.loc 2 1993 64 discriminator 2 view .LVU1113
 3511 031c B2FA82F2 		clz	r2, r2
 3512 0320 0132     		adds	r2, r2, #1
 3513 0322 02F01F02 		and	r2, r2, #31
 3514              		.loc 2 1993 7 discriminator 2 view .LVU1114
 3515 0326 092A     		cmp	r2, #9
 3516 0328 50D8     		bhi	.L263
 3517              	.LVL291:
 3518              	.LBB318:
 3519              	.LBI318:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3520              		.loc 3 981 31 is_stmt 1 discriminator 8 view .LVU1115
 3521              	.LBB319:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3522              		.loc 3 983 3 discriminator 8 view .LVU1116
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3523              		.loc 3 988 4 discriminator 8 view .LVU1117
 3524              		.syntax unified
 3525              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3526 032a 93FAA3F1 		rbit r1, r3
 3527              	@ 0 "" 2
 3528              	.LVL292:
 3529              		.loc 3 1001 3 discriminator 8 view .LVU1118
 3530              		.loc 3 1001 3 is_stmt 0 discriminator 8 view .LVU1119
 3531              		.thumb
 3532              		.syntax unified
 3533              	.LBE319:
 3534              	.LBE318:
 3535              		.loc 2 1993 64 discriminator 8 view .LVU1120
 3536 032e B1FA81F1 		clz	r1, r1
 3537 0332 0131     		adds	r1, r1, #1
 3538 0334 8906     		lsls	r1, r1, #26
 3539 0336 01F0F841 		and	r1, r1, #2080374784
 3540              	.LVL293:
 3541              	.LBB320:
 3542              	.LBI320:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3543              		.loc 3 981 31 is_stmt 1 discriminator 8 view .LVU1121
 3544              	.LBB321:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3545              		.loc 3 983 3 discriminator 8 view .LVU1122
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3546              		.loc 3 988 4 discriminator 8 view .LVU1123
 3547              		.syntax unified
 3548              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3549 033a 93FAA3F2 		rbit r2, r3
 3550              	@ 0 "" 2
 3551              	.LVL294:
 3552              		.loc 3 1001 3 discriminator 8 view .LVU1124
 3553              		.loc 3 1001 3 is_stmt 0 discriminator 8 view .LVU1125
 3554              		.thumb
 3555              		.syntax unified
 3556              	.LBE321:
 3557              	.LBE320:
 3558              		.loc 2 1993 64 discriminator 8 view .LVU1126
 3559 033e B2FA82F2 		clz	r2, r2
 3560 0342 0132     		adds	r2, r2, #1
 3561 0344 02F01F07 		and	r7, r2, #31
 3562 0348 0122     		movs	r2, #1
 3563 034a BA40     		lsls	r2, r2, r7
 3564              	.L261:
 3565              		.loc 2 1993 64 discriminator 14 view .LVU1127
 3566 034c 1143     		orrs	r1, r1, r2
 3567 034e BCF1000F 		cmp	ip, #0
 3568 0352 36D1     		bne	.L264
 3569              		.loc 2 1993 64 discriminator 15 view .LVU1128
 3570 0354 9B0E     		lsrs	r3, r3, #26
 3571              	.L297:
 3572              		.loc 2 1993 64 discriminator 16 view .LVU1129
 3573 0356 0133     		adds	r3, r3, #1
 3574 0358 03F01F03 		and	r3, r3, #31
 3575 035c 03EB4303 		add	r3, r3, r3, lsl #1
 3576 0360 1B05     		lsls	r3, r3, #20
 3577              		.loc 2 1993 7 discriminator 16 view .LVU1130
 3578 0362 1943     		orrs	r1, r1, r3
 3579              	.L266:
 3580              		.loc 2 1993 7 discriminator 32 view .LVU1131
 3581 0364 A268     		ldr	r2, [r4, #8]
 3582 0366 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 3583              	.LVL295:
 3584              	.L258:
1994:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
1995:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1996:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
1997:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
1998:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Management of internal measurement channels: Vbat/VrefInt/TempSensor   */
1999:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* internal measurement paths enable: If internal channel selected,       */
2000:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* enable dedicated internal buffers and path.                            */
2001:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Note: these internal measurement paths can be disabled using           */
2002:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* HAL_ADC_DeInit().                                                      */
2003:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2004:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 3585              		.loc 2 2004 3 is_stmt 1 view .LVU1132
 3586              		.loc 2 2004 7 is_stmt 0 view .LVU1133
 3587 036a 2268     		ldr	r2, [r4]
 3588              		.loc 2 2004 6 view .LVU1134
 3589 036c 2B4B     		ldr	r3, .L301+12
 3590 036e 1A42     		tst	r2, r3
 3591 0370 21D0     		beq	.L270
2005:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2006:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Ins
 3592              		.loc 2 2006 5 is_stmt 1 view .LVU1135
 3593              	.LVL296:
 3594              	.LBB322:
 3595              	.LBI322:
2787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3596              		.loc 1 2787 26 view .LVU1136
 3597              	.LBB323:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3598              		.loc 1 2789 3 view .LVU1137
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3599              		.loc 1 2789 21 is_stmt 0 view .LVU1138
 3600 0372 2B4B     		ldr	r3, .L301+16
 3601 0374 9968     		ldr	r1, [r3, #8]
 3602              	.LBE323:
 3603              	.LBE322:
2007:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2008:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If the requested internal measurement path has already been enabled,   */
2009:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* bypass the configuration processing.                                   */
2010:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 3604              		.loc 2 2010 8 view .LVU1139
 3605 0376 2B4B     		ldr	r3, .L301+20
 3606 0378 9A42     		cmp	r2, r3
 3607              	.LBB325:
 3608              	.LBB324:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3609              		.loc 1 2789 10 view .LVU1140
 3610 037a 01F0E070 		and	r0, r1, #29360128
 3611              	.LVL297:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3612              		.loc 1 2789 10 view .LVU1141
 3613              	.LBE324:
 3614              	.LBE325:
 3615              		.loc 2 2010 5 is_stmt 1 view .LVU1142
 3616              		.loc 2 2010 8 is_stmt 0 view .LVU1143
 3617 037e 02D0     		beq	.L271
2011:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****          || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 3618              		.loc 2 2011 10 view .LVU1144
 3619 0380 294B     		ldr	r3, .L301+24
 3620 0382 9A42     		cmp	r2, r3
 3621 0384 56D1     		bne	.L272
 3622              	.L271:
2012:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 3623              		.loc 2 2012 9 view .LVU1145
 3624 0386 0C02     		lsls	r4, r1, #8
 3625              	.LVL298:
 3626              		.loc 2 2012 9 view .LVU1146
 3627 0388 54D4     		bmi	.L272
2013:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2014:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 3628              		.loc 2 2014 7 is_stmt 1 view .LVU1147
 3629              		.loc 2 2014 10 is_stmt 0 view .LVU1148
 3630 038a 3368     		ldr	r3, [r6]
 3631 038c B3F1A04F 		cmp	r3, #1342177280
 3632 0390 11D1     		bne	.L270
2015:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
2016:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 3633              		.loc 2 2016 9 is_stmt 1 view .LVU1149
 3634              	.LVL299:
 3635              	.LBB326:
 3636              	.LBI326:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3637              		.loc 1 2765 22 view .LVU1150
 3638              	.LBB327:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3639              		.loc 1 2767 3 view .LVU1151
 3640 0392 234A     		ldr	r2, .L301+16
 3641 0394 9368     		ldr	r3, [r2, #8]
 3642 0396 23F0E073 		bic	r3, r3, #29360128
 3643 039a 0343     		orrs	r3, r3, r0
 3644 039c 43F40003 		orr	r3, r3, #8388608
 3645 03a0 9360     		str	r3, [r2, #8]
 3646              	.LVL300:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3647              		.loc 1 2767 3 is_stmt 0 view .LVU1152
 3648              	.LBE327:
 3649              	.LBE326:
2017:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                        LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channe
2018:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2019:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Delay for temperature sensor stabilization time */
2020:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Wait loop initialization and execution */
2021:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /* Note: Variable divided by 2 to compensate partially              */
2022:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /*       CPU processing cycles, scaling in us split to not          */
2023:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         /*       exceed 32 bits register capacity and handle low frequency. */
2024:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL 
 3650              		.loc 2 2024 9 is_stmt 1 view .LVU1153
 3651              		.loc 2 2024 88 is_stmt 0 view .LVU1154
 3652 03a2 224B     		ldr	r3, .L301+28
 3653 03a4 224A     		ldr	r2, .L301+32
 3654 03a6 1B68     		ldr	r3, [r3]
 3655 03a8 B3FBF2F2 		udiv	r2, r3, r2
 3656              		.loc 2 2024 69 view .LVU1155
 3657 03ac 0C23     		movs	r3, #12
 3658 03ae 5343     		muls	r3, r2, r3
 3659              	.L299:
2025:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         while (wait_loop_index != 0UL)
2026:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         {
2027:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****           wait_loop_index--;
 3660              		.loc 2 2027 26 view .LVU1156
 3661 03b0 0193     		str	r3, [sp, #4]
2025:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         while (wait_loop_index != 0UL)
 3662              		.loc 2 2025 32 view .LVU1157
 3663 03b2 019B     		ldr	r3, [sp, #4]
2025:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         while (wait_loop_index != 0UL)
 3664              		.loc 2 2025 15 view .LVU1158
 3665 03b4 43BB     		cbnz	r3, .L275
 3666              	.LVL301:
 3667              	.L270:
2028:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
2029:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
2030:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
2031:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
2032:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
2033:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
2035:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
2036:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2037:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                        LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
2038:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
2039:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
2040:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
2041:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
2042:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2043:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (ADC_VREFINT_INSTANCE(hadc))
2044:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
2045:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2046:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                        LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
2047:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
2048:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
2049:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else
2050:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2051:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* nothing to do */
2052:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3668              		.loc 2 2052 5 is_stmt 1 view .LVU1159
2053:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2054:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2055:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
2056:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3669              		.loc 2 2056 3 view .LVU1160
 3670              		.loc 2 2056 3 view .LVU1161
 3671 03b6 0023     		movs	r3, #0
 3672 03b8 86F85830 		strb	r3, [r6, #88]
2057:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2058:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
2059:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 3673              		.loc 2 2059 3 view .LVU1162
 3674              	.LVL302:
 3675              	.L224:
2060:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 3676              		.loc 2 2060 1 is_stmt 0 view .LVU1163
 3677 03bc 2846     		mov	r0, r5
 3678 03be 03B0     		add	sp, sp, #12
 3679              		.cfi_remember_state
 3680              		.cfi_def_cfa_offset 20
 3681              		@ sp needed
 3682 03c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 3683              	.LVL303:
 3684              	.L264:
 3685              		.cfi_restore_state
 3686              	.LBB328:
 3687              	.LBI328:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3688              		.loc 3 981 31 is_stmt 1 discriminator 16 view .LVU1164
 3689              	.LBB329:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3690              		.loc 3 983 3 discriminator 16 view .LVU1165
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3691              		.loc 3 988 4 discriminator 16 view .LVU1166
 3692              		.syntax unified
 3693              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3694 03c2 93FAA3F3 		rbit r3, r3
 3695              	@ 0 "" 2
 3696              	.LVL304:
 3697              		.loc 3 1001 3 discriminator 16 view .LVU1167
 3698              		.loc 3 1001 3 is_stmt 0 discriminator 16 view .LVU1168
 3699              		.thumb
 3700              		.syntax unified
 3701              	.LBE329:
 3702              	.LBE328:
1993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3703              		.loc 2 1993 64 discriminator 16 view .LVU1169
 3704 03c6 B3FA83F3 		clz	r3, r3
 3705 03ca C4E7     		b	.L297
 3706              	.L263:
 3707              	.LVL305:
 3708              	.LBB330:
 3709              	.LBI330:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3710              		.loc 3 981 31 is_stmt 1 discriminator 21 view .LVU1170
 3711              	.LBB331:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3712              		.loc 3 983 3 discriminator 21 view .LVU1171
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3713              		.loc 3 988 4 discriminator 21 view .LVU1172
 3714              		.syntax unified
 3715              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3716 03cc 93FAA3F1 		rbit r1, r3
 3717              	@ 0 "" 2
 3718              	.LVL306:
 3719              		.loc 3 1001 3 discriminator 21 view .LVU1173
 3720              		.loc 3 1001 3 is_stmt 0 discriminator 21 view .LVU1174
 3721              		.thumb
 3722              		.syntax unified
 3723              	.LBE331:
 3724              	.LBE330:
1993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3725              		.loc 2 1993 64 discriminator 21 view .LVU1175
 3726 03d0 B1FA81F1 		clz	r1, r1
 3727 03d4 0131     		adds	r1, r1, #1
 3728 03d6 8906     		lsls	r1, r1, #26
 3729 03d8 01F0F841 		and	r1, r1, #2080374784
 3730              	.LVL307:
 3731              	.LBB332:
 3732              	.LBI332:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3733              		.loc 3 981 31 is_stmt 1 discriminator 21 view .LVU1176
 3734              	.LBB333:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3735              		.loc 3 983 3 discriminator 21 view .LVU1177
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3736              		.loc 3 988 4 discriminator 21 view .LVU1178
 3737              		.syntax unified
 3738              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3739 03dc 93FAA3F2 		rbit r2, r3
 3740              	@ 0 "" 2
 3741              	.LVL308:
 3742              		.loc 3 1001 3 discriminator 21 view .LVU1179
 3743              		.loc 3 1001 3 is_stmt 0 discriminator 21 view .LVU1180
 3744              		.thumb
 3745              		.syntax unified
 3746              	.LBE333:
 3747              	.LBE332:
1993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3748              		.loc 2 1993 64 discriminator 21 view .LVU1181
 3749 03e0 B2FA82F2 		clz	r2, r2
 3750 03e4 0132     		adds	r2, r2, #1
 3751 03e6 02F01F07 		and	r7, r2, #31
 3752 03ea 0122     		movs	r2, #1
 3753 03ec BA40     		lsls	r2, r2, r7
 3754 03ee E8E6     		b	.L262
 3755              	.L267:
 3756              	.LVL309:
 3757              	.LBB334:
 3758              	.LBI334:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3759              		.loc 3 981 31 is_stmt 1 discriminator 29 view .LVU1182
 3760              	.LBB335:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3761              		.loc 3 983 3 discriminator 29 view .LVU1183
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3762              		.loc 3 988 4 discriminator 29 view .LVU1184
 3763              		.syntax unified
 3764              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3765 03f0 93FAA3F3 		rbit r3, r3
 3766              	@ 0 "" 2
 3767              	.LVL310:
 3768              		.loc 3 1001 3 discriminator 29 view .LVU1185
 3769              		.loc 3 1001 3 is_stmt 0 discriminator 29 view .LVU1186
 3770              		.thumb
 3771              		.syntax unified
 3772              	.LBE335:
 3773              	.LBE334:
1993:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
 3774              		.loc 2 1993 64 discriminator 29 view .LVU1187
 3775 03f4 B3FA83F3 		clz	r3, r3
 3776 03f8 0133     		adds	r3, r3, #1
 3777 03fa 03F01F03 		and	r3, r3, #31
 3778 03fe 03EB4303 		add	r3, r3, r3, lsl #1
 3779 0402 A3F11E01 		sub	r1, r3, #30
 3780 0406 E8E6     		b	.L298
 3781              	.LVL311:
 3782              	.L275:
2027:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 3783              		.loc 2 2027 11 is_stmt 1 view .LVU1188
2027:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         }
 3784              		.loc 2 2027 26 is_stmt 0 view .LVU1189
 3785 0408 019B     		ldr	r3, [sp, #4]
 3786 040a 013B     		subs	r3, r3, #1
 3787 040c D0E7     		b	.L299
 3788              	.L302:
 3789 040e 00BF     		.align	2
 3790              	.L301:
 3791 0410 00F0FF03 		.word	67104768
 3792 0414 FFFF0700 		.word	524287
 3793 0418 00007F40 		.word	1082064896
 3794 041c 00000880 		.word	-2146959360
 3795 0420 00030050 		.word	1342178048
 3796 0424 000021C3 		.word	-1021247488
 3797 0428 1000C090 		.word	-1866465264
 3798 042c 00000000 		.word	SystemCoreClock
 3799 0430 400D0300 		.word	200000
 3800              	.L272:
2031:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 3801              		.loc 2 2031 10 is_stmt 1 view .LVU1190
2031:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 3802              		.loc 2 2031 13 is_stmt 0 view .LVU1191
 3803 0434 124B     		ldr	r3, .L303
 3804 0436 9A42     		cmp	r2, r3
 3805 0438 0ED1     		bne	.L276
2032:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3806              		.loc 2 2032 14 view .LVU1192
 3807 043a CA01     		lsls	r2, r1, #7
 3808 043c BBD4     		bmi	.L270
2034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3809              		.loc 2 2034 7 is_stmt 1 view .LVU1193
2034:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3810              		.loc 2 2034 10 is_stmt 0 view .LVU1194
 3811 043e 3268     		ldr	r2, [r6]
 3812 0440 104B     		ldr	r3, .L303+4
 3813 0442 9A42     		cmp	r2, r3
 3814 0444 B7D0     		beq	.L270
2036:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                        LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 3815              		.loc 2 2036 9 is_stmt 1 view .LVU1195
 3816              	.LVL312:
 3817              	.LBB336:
 3818              	.LBI336:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3819              		.loc 1 2765 22 view .LVU1196
 3820              	.LBB337:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3821              		.loc 1 2767 3 view .LVU1197
 3822 0446 104A     		ldr	r2, .L303+8
 3823 0448 9368     		ldr	r3, [r2, #8]
 3824 044a 23F0E073 		bic	r3, r3, #29360128
 3825 044e 0343     		orrs	r3, r3, r0
 3826 0450 43F08073 		orr	r3, r3, #16777216
 3827              	.LVL313:
 3828              	.L300:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3829              		.loc 1 2767 3 is_stmt 0 view .LVU1198
 3830              	.LBE337:
 3831              	.LBE336:
 3832              	.LBB338:
 3833              	.LBB339:
 3834 0454 9360     		str	r3, [r2, #8]
 3835 0456 AEE7     		b	.L270
 3836              	.L276:
 3837              	.LBE339:
 3838              	.LBE338:
2040:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 3839              		.loc 2 2040 10 is_stmt 1 view .LVU1199
2040:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 3840              		.loc 2 2040 13 is_stmt 0 view .LVU1200
 3841 0458 0C4B     		ldr	r3, .L303+12
 3842 045a 9A42     		cmp	r2, r3
 3843 045c ABD1     		bne	.L270
2041:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3844              		.loc 2 2041 14 view .LVU1201
 3845 045e 4B02     		lsls	r3, r1, #9
 3846 0460 A9D4     		bmi	.L270
2043:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3847              		.loc 2 2043 7 is_stmt 1 view .LVU1202
2043:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3848              		.loc 2 2043 10 is_stmt 0 view .LVU1203
 3849 0462 3268     		ldr	r2, [r6]
 3850 0464 074B     		ldr	r3, .L303+4
 3851 0466 9A42     		cmp	r2, r3
 3852 0468 A5D0     		beq	.L270
2045:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                                        LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 3853              		.loc 2 2045 9 is_stmt 1 view .LVU1204
 3854              	.LVL314:
 3855              	.LBB341:
 3856              	.LBI338:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3857              		.loc 1 2765 22 view .LVU1205
 3858              	.LBB340:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3859              		.loc 1 2767 3 view .LVU1206
 3860 046a 074A     		ldr	r2, .L303+8
 3861 046c 9368     		ldr	r3, [r2, #8]
 3862 046e 23F0E073 		bic	r3, r3, #29360128
 3863 0472 0343     		orrs	r3, r3, r0
 3864 0474 43F48003 		orr	r3, r3, #4194304
 3865 0478 ECE7     		b	.L300
 3866              	.LVL315:
 3867              	.L277:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3868              		.loc 1 2767 3 is_stmt 0 view .LVU1207
 3869              	.LBE340:
 3870              	.LBE341:
1692:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3871              		.loc 2 1692 3 view .LVU1208
 3872 047a 0225     		movs	r5, #2
 3873 047c 9EE7     		b	.L224
 3874              	.L304:
 3875 047e 00BF     		.align	2
 3876              	.L303:
 3877 0480 000052C7 		.word	-950927360
 3878 0484 00010050 		.word	1342177536
 3879 0488 00030050 		.word	1342178048
 3880 048c 000084CB 		.word	-880541696
 3881              		.cfi_endproc
 3882              	.LFE346:
 3884              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 3885              		.align	1
 3886              		.global	HAL_ADCEx_MultiModeConfigChannel
 3887              		.syntax unified
 3888              		.thumb
 3889              		.thumb_func
 3890              		.fpu fpv4-sp-d16
 3892              	HAL_ADCEx_MultiModeConfigChannel:
 3893              	.LVL316:
 3894              	.LFB347:
2061:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2062:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2063:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
2064:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
2065:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
2066:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following
2067:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters
2068:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without resetting
2069:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         the ADCs.
2070:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
2071:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure
2072:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
2073:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   To move back configuration from multimode to single mode, ADC must
2074:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
2075:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc Master ADC handle
2076:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param multimode Structure of ADC multimode configuration
2077:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
2078:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
2079:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *m
2080:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 3895              		.loc 2 2080 1 is_stmt 1 view -0
 3896              		.cfi_startproc
 3897              		@ args = 0, pretend = 0, frame = 0
 3898              		@ frame_needed = 0, uses_anonymous_args = 0
2081:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3899              		.loc 2 2081 3 view .LVU1210
2082:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 3900              		.loc 2 2082 3 view .LVU1211
2083:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_HandleTypeDef  tmphadcSlave;
 3901              		.loc 2 2083 3 view .LVU1212
2084:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
 3902              		.loc 2 2084 3 view .LVU1213
2085:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2086:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
2087:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 3903              		.loc 2 2087 3 view .LVU1214
2088:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 3904              		.loc 2 2088 3 view .LVU1215
2089:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (multimode->Mode != ADC_MODE_INDEPENDENT)
 3905              		.loc 2 2089 3 view .LVU1216
2090:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2091:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 3906              		.loc 2 2091 5 view .LVU1217
2092:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 3907              		.loc 2 2092 5 view .LVU1218
2093:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2094:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2095:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process locked */
2096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3908              		.loc 2 2096 3 view .LVU1219
 3909              		.loc 2 2096 3 view .LVU1220
2080:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3910              		.loc 2 2080 1 is_stmt 0 view .LVU1221
 3911 0000 38B5     		push	{r3, r4, r5, lr}
 3912              		.cfi_def_cfa_offset 16
 3913              		.cfi_offset 3, -16
 3914              		.cfi_offset 4, -12
 3915              		.cfi_offset 5, -8
 3916              		.cfi_offset 14, -4
 3917              		.loc 2 2096 3 view .LVU1222
 3918 0002 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 3919 0006 012B     		cmp	r3, #1
2080:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3920              		.loc 2 2080 1 view .LVU1223
 3921 0008 0246     		mov	r2, r0
 3922              		.loc 2 2096 3 view .LVU1224
 3923 000a 57D0     		beq	.L313
 3924              		.loc 2 2096 3 is_stmt 1 discriminator 2 view .LVU1225
2097:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2098:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 3925              		.loc 2 2098 3 is_stmt 0 discriminator 2 view .LVU1226
 3926 000c 0568     		ldr	r5, [r0]
2096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3927              		.loc 2 2096 3 discriminator 2 view .LVU1227
 3928 000e 0123     		movs	r3, #1
 3929              		.loc 2 2098 3 discriminator 2 view .LVU1228
 3930 0010 B5F1A04F 		cmp	r5, #1342177280
2096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3931              		.loc 2 2096 3 discriminator 2 view .LVU1229
 3932 0014 80F85830 		strb	r3, [r0, #88]
 3933              		.loc 2 2098 3 is_stmt 1 discriminator 2 view .LVU1230
 3934 0018 08D0     		beq	.L307
2099:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2100:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (tmphadcSlave.Instance == NULL)
 3935              		.loc 2 2100 3 view .LVU1231
2101:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2102:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2103:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3936              		.loc 2 2103 5 view .LVU1232
 3937 001a C16D     		ldr	r1, [r0, #92]
 3938              	.LVL317:
 3939              		.loc 2 2103 5 is_stmt 0 view .LVU1233
 3940 001c 41F02001 		orr	r1, r1, #32
 3941 0020 C165     		str	r1, [r0, #92]
2104:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2105:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Process unlocked */
2106:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
 3942              		.loc 2 2106 5 is_stmt 1 view .LVU1234
 3943              		.loc 2 2106 5 view .LVU1235
 3944 0022 0021     		movs	r1, #0
 3945 0024 80F85810 		strb	r1, [r0, #88]
2107:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2108:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     return HAL_ERROR;
 3946              		.loc 2 2108 5 view .LVU1236
 3947              		.loc 2 2108 12 is_stmt 0 view .LVU1237
 3948 0028 1846     		mov	r0, r3
 3949              	.LVL318:
 3950              	.L306:
2109:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2110:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2111:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2112:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2113:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
2114:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Multimode DMA configuration                                           */
2115:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /*  - Multimode DMA mode                                                    */
2116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
2117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2118:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
2119:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2120:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Pointer to the common control register */
2121:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
2122:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2123:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* If multimode is selected, configure all multimode parameters.          */
2124:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Otherwise, reset multimode parameters (can be used in case of          */
2125:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* transition from multimode to independent mode).                        */
2126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     if (multimode->Mode != ADC_MODE_INDEPENDENT)
2127:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2128:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
2129:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  multimode->DMAAccessMode |
2130:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  ADC_CCR_MULTI_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
2131:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2132:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:                */
2133:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                              */
2134:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Multimode delay                                                       */
2135:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    Note: Delay range depends on selected resolution:                     */
2136:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*      from 1 to 12 clock cycles for 12 bits                               */
2137:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*      from 1 to 10 clock cycles for 10 bits,                              */
2138:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*      from 1 to 8 clock cycles for 8 bits                                 */
2139:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*      from 1 to 6 clock cycles for 6 bits                                 */
2140:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    If a higher delay is selected, it will be clipped to maximum delay    */
2141:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*    range                                                                 */
2142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2143:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
2144:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         MODIFY_REG(tmpADC_Common->CCR,
2145:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    ADC_CCR_DUAL |
2146:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    ADC_CCR_DELAY,
2147:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    multimode->Mode |
2148:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    multimode->TwoSamplingDelay
2149:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                   );
2150:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
2151:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
2152:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     else /* ADC_MODE_INDEPENDENT */
2153:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
2154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
2155:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2156:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:                */
2157:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                              */
2158:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       /*  - Multimode delay                                                       */
2159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2160:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
2161:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****         CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
2162:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
2163:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     }
2164:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2165:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
2166:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
2167:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
2168:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2169:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2170:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2171:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2172:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
2173:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2174:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2175:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Process unlocked */
2176:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
2177:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2178:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Return function status */
2179:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
2180:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 3951              		.loc 2 2180 1 view .LVU1238
 3952 002a 38BD     		pop	{r3, r4, r5, pc}
 3953              	.LVL319:
 3954              	.L307:
2100:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
 3955              		.loc 2 2100 3 is_stmt 1 view .LVU1239
2116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3956              		.loc 2 2116 3 view .LVU1240
2116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3957              		.loc 2 2116 38 is_stmt 0 view .LVU1241
 3958 002c 2448     		ldr	r0, .L315
 3959              	.LVL320:
2116:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3960              		.loc 2 2116 38 view .LVU1242
 3961 002e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3962              	.LVL321:
 3963 0032 0446     		mov	r4, r0
 3964              	.LVL322:
2117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 3965              		.loc 2 2117 3 is_stmt 1 view .LVU1243
2117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 3966              		.loc 2 2117 8 is_stmt 0 view .LVU1244
 3967 0034 1068     		ldr	r0, [r2]
 3968              	.LVL323:
2117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 3969              		.loc 2 2117 8 view .LVU1245
 3970 0036 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3971              	.LVL324:
2117:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 3972              		.loc 2 2117 6 view .LVU1246
 3973 003a 2043     		orrs	r0, r0, r4
 3974 003c 38D1     		bne	.L308
2121:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 3975              		.loc 2 2121 5 is_stmt 1 view .LVU1247
 3976              	.LVL325:
2126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3977              		.loc 2 2126 5 view .LVU1248
2126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3978              		.loc 2 2126 8 is_stmt 0 view .LVU1249
 3979 003e 0B68     		ldr	r3, [r1]
 3980 0040 204C     		ldr	r4, .L315+4
 3981              	.LVL326:
2126:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     {
 3982              		.loc 2 2126 8 view .LVU1250
 3983 0042 13B3     		cbz	r3, .L309
2128:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                  multimode->DMAAccessMode |
 3984              		.loc 2 2128 7 is_stmt 1 view .LVU1251
 3985 0044 A368     		ldr	r3, [r4, #8]
 3986 0046 4868     		ldr	r0, [r1, #4]
 3987 0048 23F46043 		bic	r3, r3, #57344
 3988 004c 0343     		orrs	r3, r3, r0
 3989 004e 92F83800 		ldrb	r0, [r2, #56]	@ zero_extendqisi2
 3990 0052 43EA4033 		orr	r3, r3, r0, lsl #13
 3991 0056 A360     		str	r3, [r4, #8]
2142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3992              		.loc 2 2142 7 view .LVU1252
2142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 3993              		.loc 2 2142 11 is_stmt 0 view .LVU1253
 3994 0058 2846     		mov	r0, r5
 3995 005a FFF7FEFF 		bl	LL_ADC_IsEnabled
 3996              	.LVL327:
 3997 005e 0346     		mov	r3, r0
 3998 0060 1748     		ldr	r0, .L315
 3999 0062 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4000              	.LVL328:
2142:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 4001              		.loc 2 2142 10 view .LVU1254
 4002 0066 1843     		orrs	r0, r3, r0
 4003 0068 04D0     		beq	.L310
 4004              	.L312:
2081:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 4005              		.loc 2 2081 21 view .LVU1255
 4006 006a 0020     		movs	r0, #0
 4007              	.LVL329:
 4008              	.L311:
2176:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4009              		.loc 2 2176 3 is_stmt 1 view .LVU1256
2176:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4010              		.loc 2 2176 3 view .LVU1257
 4011 006c 0023     		movs	r3, #0
 4012 006e 82F85830 		strb	r3, [r2, #88]
2179:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4013              		.loc 2 2179 3 view .LVU1258
2179:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4014              		.loc 2 2179 10 is_stmt 0 view .LVU1259
 4015 0072 DAE7     		b	.L306
 4016              	.LVL330:
 4017              	.L310:
2144:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    ADC_CCR_DUAL |
 4018              		.loc 2 2144 9 is_stmt 1 view .LVU1260
 4019 0074 0B68     		ldr	r3, [r1]
 4020 0076 A568     		ldr	r5, [r4, #8]
 4021 0078 8968     		ldr	r1, [r1, #8]
 4022              	.LVL331:
2144:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****                    ADC_CCR_DUAL |
 4023              		.loc 2 2144 9 is_stmt 0 view .LVU1261
 4024 007a 0B43     		orrs	r3, r3, r1
 4025 007c 25F47161 		bic	r1, r5, #3856
 4026 0080 21F00F01 		bic	r1, r1, #15
 4027 0084 0B43     		orrs	r3, r3, r1
 4028              	.L314:
2161:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 4029              		.loc 2 2161 9 view .LVU1262
 4030 0086 A360     		str	r3, [r4, #8]
 4031 0088 F0E7     		b	.L311
 4032              	.LVL332:
 4033              	.L309:
2154:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4034              		.loc 2 2154 7 is_stmt 1 view .LVU1263
 4035 008a A368     		ldr	r3, [r4, #8]
 4036 008c 23F46043 		bic	r3, r3, #57344
 4037 0090 A360     		str	r3, [r4, #8]
2159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 4038              		.loc 2 2159 7 view .LVU1264
2159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 4039              		.loc 2 2159 11 is_stmt 0 view .LVU1265
 4040 0092 2846     		mov	r0, r5
 4041 0094 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4042              	.LVL333:
 4043 0098 0346     		mov	r3, r0
 4044 009a 0948     		ldr	r0, .L315
 4045 009c FFF7FEFF 		bl	LL_ADC_IsEnabled
 4046              	.LVL334:
2159:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       {
 4047              		.loc 2 2159 10 view .LVU1266
 4048 00a0 1843     		orrs	r0, r3, r0
 4049 00a2 E2D1     		bne	.L312
2161:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       }
 4050              		.loc 2 2161 9 is_stmt 1 view .LVU1267
 4051 00a4 A368     		ldr	r3, [r4, #8]
 4052 00a6 23F47163 		bic	r3, r3, #3856
 4053 00aa 23F00F03 		bic	r3, r3, #15
 4054 00ae EAE7     		b	.L314
 4055              	.LVL335:
 4056              	.L308:
2170:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4057              		.loc 2 2170 5 view .LVU1268
 4058 00b0 D16D     		ldr	r1, [r2, #92]
 4059              	.LVL336:
2170:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4060              		.loc 2 2170 5 is_stmt 0 view .LVU1269
 4061 00b2 41F02001 		orr	r1, r1, #32
 4062 00b6 D165     		str	r1, [r2, #92]
2172:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 4063              		.loc 2 2172 5 is_stmt 1 view .LVU1270
 4064              	.LVL337:
2172:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 4065              		.loc 2 2172 20 is_stmt 0 view .LVU1271
 4066 00b8 1846     		mov	r0, r3
 4067 00ba D7E7     		b	.L311
 4068              	.LVL338:
 4069              	.L313:
2096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4070              		.loc 2 2096 3 view .LVU1272
 4071 00bc 0220     		movs	r0, #2
 4072              	.LVL339:
2096:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
 4073              		.loc 2 2096 3 view .LVU1273
 4074 00be B4E7     		b	.L306
 4075              	.L316:
 4076              		.align	2
 4077              	.L315:
 4078 00c0 00010050 		.word	1342177536
 4079 00c4 00030050 		.word	1342178048
 4080              		.cfi_endproc
 4081              	.LFE347:
 4083              		.section	.text.HAL_ADCEx_EnableInjectedQueue,"ax",%progbits
 4084              		.align	1
 4085              		.global	HAL_ADCEx_EnableInjectedQueue
 4086              		.syntax unified
 4087              		.thumb
 4088              		.thumb_func
 4089              		.fpu fpv4-sp-d16
 4091              	HAL_ADCEx_EnableInjectedQueue:
 4092              	.LVL340:
 4093              	.LFB348:
2181:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** #endif /* ADC_MULTIMODE_SUPPORT */
2182:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2183:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
2184:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enable Injected Queue
2185:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   This function resets CFGR register JQDIS bit in order to enable the
2186:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2187:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2188:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         conversion is ongoing.
2189:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
2190:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
2191:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
2192:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
2193:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 4094              		.loc 2 2193 1 is_stmt 1 view -0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 0
 4097              		@ frame_needed = 0, uses_anonymous_args = 0
2194:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4098              		.loc 2 2194 3 view .LVU1275
2195:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 4099              		.loc 2 2195 3 view .LVU1276
2196:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 4100              		.loc 2 2196 3 view .LVU1277
2197:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2198:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
2199:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 4101              		.loc 2 2199 3 view .LVU1278
2200:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2201:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 4102              		.loc 2 2201 3 view .LVU1279
2193:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4103              		.loc 2 2193 1 is_stmt 0 view .LVU1280
 4104 0000 0246     		mov	r2, r0
 4105 0002 08B5     		push	{r3, lr}
 4106              		.cfi_def_cfa_offset 8
 4107              		.cfi_offset 3, -8
 4108              		.cfi_offset 14, -4
 4109              		.loc 2 2201 44 view .LVU1281
 4110 0004 0068     		ldr	r0, [r0]
 4111              	.LVL341:
 4112              		.loc 2 2201 44 view .LVU1282
 4113 0006 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4114              	.LVL342:
 4115 000a 0346     		mov	r3, r0
 4116              	.LVL343:
2202:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 4117              		.loc 2 2202 3 is_stmt 1 view .LVU1283
 4118              		.loc 2 2202 45 is_stmt 0 view .LVU1284
 4119 000c 1068     		ldr	r0, [r2]
 4120              	.LVL344:
 4121              		.loc 2 2202 45 view .LVU1285
 4122 000e FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4123              	.LVL345:
2203:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2204:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2205:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 4124              		.loc 2 2205 3 is_stmt 1 view .LVU1286
2206:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 4125              		.loc 2 2206 7 is_stmt 0 view .LVU1287
 4126 0012 1843     		orrs	r0, r3, r0
 4127              	.LVL346:
2207:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      )
2208:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2209:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 4128              		.loc 2 2209 5 is_stmt 1 view .LVU1288
 4129 0014 01BF     		itttt	eq
 4130 0016 1168     		ldreq	r1, [r2]
 4131 0018 CB68     		ldreq	r3, [r1, #12]
 4132              	.LVL347:
 4133              		.loc 2 2209 5 is_stmt 0 view .LVU1289
 4134 001a 23F00043 		biceq	r3, r3, #-2147483648
 4135 001e CB60     		streq	r3, [r1, #12]
2210:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2211:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     /* Update state, clear previous result related to injected queue overflow */
2212:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 4136              		.loc 2 2212 5 is_stmt 1 view .LVU1290
 4137 0020 03BF     		ittte	eq
 4138 0022 D36D     		ldreq	r3, [r2, #92]
 4139 0024 23F48043 		biceq	r3, r3, #16384
 4140 0028 D365     		streq	r3, [r2, #92]
2213:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2214:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 4141              		.loc 2 2214 5 view .LVU1291
 4142              	.LVL348:
2215:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2216:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
2217:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2218:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 4143              		.loc 2 2218 20 is_stmt 0 view .LVU1292
 4144 002a 0120     		movne	r0, #1
 4145              	.LVL349:
2219:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2220:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2221:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 4146              		.loc 2 2221 3 is_stmt 1 view .LVU1293
2222:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4147              		.loc 2 2222 1 is_stmt 0 view .LVU1294
 4148 002c 08BD     		pop	{r3, pc}
 4149              		.cfi_endproc
 4150              	.LFE348:
 4152              		.section	.text.HAL_ADCEx_DisableInjectedQueue,"ax",%progbits
 4153              		.align	1
 4154              		.global	HAL_ADCEx_DisableInjectedQueue
 4155              		.syntax unified
 4156              		.thumb
 4157              		.thumb_func
 4158              		.fpu fpv4-sp-d16
 4160              	HAL_ADCEx_DisableInjectedQueue:
 4161              	.LVL350:
 4162              	.LFB349:
2223:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2224:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
2225:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Disable Injected Queue
2226:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   This function sets CFGR register JQDIS bit in order to disable the
2227:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2228:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2229:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         conversion is ongoing.
2230:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
2231:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
2232:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
2233:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
2234:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 4163              		.loc 2 2234 1 is_stmt 1 view -0
 4164              		.cfi_startproc
 4165              		@ args = 0, pretend = 0, frame = 0
 4166              		@ frame_needed = 0, uses_anonymous_args = 0
2235:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4167              		.loc 2 2235 3 view .LVU1296
2236:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 4168              		.loc 2 2236 3 view .LVU1297
2237:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 4169              		.loc 2 2237 3 view .LVU1298
2238:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2239:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
2240:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 4170              		.loc 2 2240 3 view .LVU1299
2241:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2242:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 4171              		.loc 2 2242 3 view .LVU1300
2234:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4172              		.loc 2 2234 1 is_stmt 0 view .LVU1301
 4173 0000 0246     		mov	r2, r0
 4174 0002 08B5     		push	{r3, lr}
 4175              		.cfi_def_cfa_offset 8
 4176              		.cfi_offset 3, -8
 4177              		.cfi_offset 14, -4
 4178              		.loc 2 2242 44 view .LVU1302
 4179 0004 0068     		ldr	r0, [r0]
 4180              	.LVL351:
 4181              		.loc 2 2242 44 view .LVU1303
 4182 0006 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4183              	.LVL352:
 4184 000a 0346     		mov	r3, r0
 4185              	.LVL353:
2243:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 4186              		.loc 2 2243 3 is_stmt 1 view .LVU1304
 4187              		.loc 2 2243 45 is_stmt 0 view .LVU1305
 4188 000c 1068     		ldr	r0, [r2]
 4189              	.LVL354:
 4190              		.loc 2 2243 45 view .LVU1306
 4191 000e FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 4192              	.LVL355:
2244:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2245:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2246:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 4193              		.loc 2 2246 3 is_stmt 1 view .LVU1307
2247:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 4194              		.loc 2 2247 7 is_stmt 0 view .LVU1308
 4195 0012 1843     		orrs	r0, r3, r0
 4196              	.LVL356:
2248:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****      )
2249:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2250:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 4197              		.loc 2 2250 5 is_stmt 1 view .LVU1309
 4198 0014 01BF     		itttt	eq
 4199 0016 1268     		ldreq	r2, [r2]
 4200              	.LVL357:
 4201              	.LBB342:
 4202              	.LBI342:
4806:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4203              		.loc 1 4806 22 view .LVU1310
 4204              	.LBB343:
4808:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4205              		.loc 1 4808 3 view .LVU1311
 4206 0018 D368     		ldreq	r3, [r2, #12]
 4207              	.LVL358:
4808:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4208              		.loc 1 4808 3 is_stmt 0 view .LVU1312
 4209 001a 23F00043 		biceq	r3, r3, #-2147483648
 4210 001e 23F40013 		biceq	r3, r3, #2097152
 4211 0022 06BF     		itte	eq
 4212 0024 43F00043 		orreq	r3, r3, #-2147483648
 4213 0028 D360     		streq	r3, [r2, #12]
 4214              	.LVL359:
4808:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4215              		.loc 1 4808 3 view .LVU1313
 4216              	.LBE343:
 4217              	.LBE342:
2251:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 4218              		.loc 2 2251 5 is_stmt 1 view .LVU1314
2252:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2253:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
2254:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2255:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 4219              		.loc 2 2255 20 is_stmt 0 view .LVU1315
 4220 002a 0120     		movne	r0, #1
 4221              	.LVL360:
2256:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2257:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2258:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 4222              		.loc 2 2258 3 is_stmt 1 view .LVU1316
2259:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4223              		.loc 2 2259 1 is_stmt 0 view .LVU1317
 4224 002c 08BD     		pop	{r3, pc}
 4225              		.cfi_endproc
 4226              	.LFE349:
 4228              		.section	.text.HAL_ADCEx_DisableVoltageRegulator,"ax",%progbits
 4229              		.align	1
 4230              		.global	HAL_ADCEx_DisableVoltageRegulator
 4231              		.syntax unified
 4232              		.thumb
 4233              		.thumb_func
 4234              		.fpu fpv4-sp-d16
 4236              	HAL_ADCEx_DisableVoltageRegulator:
 4237              	.LVL361:
 4238              	.LFB350:
2260:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2261:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
2262:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Disable ADC voltage regulator.
2263:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Disabling voltage regulator allows to save power. This operation can
2264:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         be carried out only when ADC is disabled.
2265:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   To enable again the voltage regulator, the user is expected to
2266:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API.
2267:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
2268:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
2269:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
2270:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableVoltageRegulator(ADC_HandleTypeDef *hadc)
2271:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 4239              		.loc 2 2271 1 is_stmt 1 view -0
 4240              		.cfi_startproc
 4241              		@ args = 0, pretend = 0, frame = 0
 4242              		@ frame_needed = 0, uses_anonymous_args = 0
2272:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4243              		.loc 2 2272 3 view .LVU1319
2273:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2274:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
2275:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 4244              		.loc 2 2275 3 view .LVU1320
2276:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2277:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2278:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 4245              		.loc 2 2278 3 view .LVU1321
2271:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4246              		.loc 2 2271 1 is_stmt 0 view .LVU1322
 4247 0000 08B5     		push	{r3, lr}
 4248              		.cfi_def_cfa_offset 8
 4249              		.cfi_offset 3, -8
 4250              		.cfi_offset 14, -4
2271:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4251              		.loc 2 2271 1 view .LVU1323
 4252 0002 0346     		mov	r3, r0
 4253              		.loc 2 2278 7 view .LVU1324
 4254 0004 0068     		ldr	r0, [r0]
 4255              	.LVL362:
 4256              		.loc 2 2278 7 view .LVU1325
 4257 0006 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4258              	.LVL363:
 4259              		.loc 2 2278 6 view .LVU1326
 4260 000a 38B9     		cbnz	r0, .L325
2279:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2280:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_DisableInternalRegulator(hadc->Instance);
 4261              		.loc 2 2280 5 is_stmt 1 view .LVU1327
 4262 000c 1A68     		ldr	r2, [r3]
 4263              	.LVL364:
 4264              	.LBB344:
 4265              	.LBI344:
6550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4266              		.loc 1 6550 22 view .LVU1328
 4267              	.LBB345:
6552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4268              		.loc 1 6552 3 view .LVU1329
 4269 000e 9368     		ldr	r3, [r2, #8]
 4270              	.LVL365:
6552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4271              		.loc 1 6552 3 is_stmt 0 view .LVU1330
 4272 0010 23F01043 		bic	r3, r3, #-1879048192
 4273 0014 23F03F03 		bic	r3, r3, #63
 4274 0018 9360     		str	r3, [r2, #8]
 4275              	.LVL366:
6552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4276              		.loc 1 6552 3 view .LVU1331
 4277              	.LBE345:
 4278              	.LBE344:
2281:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 4279              		.loc 2 2281 5 is_stmt 1 view .LVU1332
 4280              	.L324:
2282:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2283:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
2284:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2285:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
2286:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2287:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2288:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 4281              		.loc 2 2288 3 view .LVU1333
2289:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4282              		.loc 2 2289 1 is_stmt 0 view .LVU1334
 4283 001a 08BD     		pop	{r3, pc}
 4284              	.LVL367:
 4285              	.L325:
2285:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 4286              		.loc 2 2285 20 view .LVU1335
 4287 001c 0120     		movs	r0, #1
 4288 001e FCE7     		b	.L324
 4289              		.cfi_endproc
 4290              	.LFE350:
 4292              		.section	.text.HAL_ADCEx_EnterADCDeepPowerDownMode,"ax",%progbits
 4293              		.align	1
 4294              		.global	HAL_ADCEx_EnterADCDeepPowerDownMode
 4295              		.syntax unified
 4296              		.thumb
 4297              		.thumb_func
 4298              		.fpu fpv4-sp-d16
 4300              	HAL_ADCEx_EnterADCDeepPowerDownMode:
 4301              	.LVL368:
 4302              	.LFB351:
2290:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2291:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** /**
2292:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @brief  Enter ADC deep-power-down mode
2293:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   This mode is achieved in setting DEEPPWD bit and allows to save power
2294:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         in reducing leakage currents. It is particularly interesting before
2295:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         entering stop modes.
2296:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   Setting DEEPPWD automatically clears ADVREGEN bit and disables the
2297:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         ADC voltage regulator. This means that this API encompasses
2298:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         HAL_ADCEx_DisableVoltageRegulator(). Additionally, the internal
2299:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         calibration is lost.
2300:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @note   To exit the ADC deep-power-down mode, the user is expected to
2301:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API as well as to relaunch a calibration
2302:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         with HAL_ADCEx_Calibration_Start() API or to re-apply a previously
2303:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   *         saved calibration factor.
2304:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @param hadc ADC handle
2305:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   * @retval HAL status
2306:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   */
2307:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnterADCDeepPowerDownMode(ADC_HandleTypeDef *hadc)
2308:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** {
 4303              		.loc 2 2308 1 is_stmt 1 view -0
 4304              		.cfi_startproc
 4305              		@ args = 0, pretend = 0, frame = 0
 4306              		@ frame_needed = 0, uses_anonymous_args = 0
2309:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4307              		.loc 2 2309 3 view .LVU1337
2310:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2311:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Check the parameters */
2312:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 4308              		.loc 2 2312 3 view .LVU1338
2313:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2314:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2315:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 4309              		.loc 2 2315 3 view .LVU1339
2308:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4310              		.loc 2 2308 1 is_stmt 0 view .LVU1340
 4311 0000 08B5     		push	{r3, lr}
 4312              		.cfi_def_cfa_offset 8
 4313              		.cfi_offset 3, -8
 4314              		.cfi_offset 14, -4
2308:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 4315              		.loc 2 2308 1 view .LVU1341
 4316 0002 0346     		mov	r3, r0
 4317              		.loc 2 2315 7 view .LVU1342
 4318 0004 0068     		ldr	r0, [r0]
 4319              	.LVL369:
 4320              		.loc 2 2315 7 view .LVU1343
 4321 0006 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4322              	.LVL370:
 4323              		.loc 2 2315 6 view .LVU1344
 4324 000a 48B9     		cbnz	r0, .L328
2316:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2317:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     LL_ADC_EnableDeepPowerDown(hadc->Instance);
 4325              		.loc 2 2317 5 is_stmt 1 view .LVU1345
 4326 000c 1A68     		ldr	r2, [r3]
 4327              	.LVL371:
 4328              	.LBB348:
 4329              	.LBI348:
6475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4330              		.loc 1 6475 22 view .LVU1346
 4331              	.LBB349:
6480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4332              		.loc 1 6480 3 view .LVU1347
 4333 000e 9368     		ldr	r3, [r2, #8]
 4334              	.LVL372:
6480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4335              		.loc 1 6480 3 is_stmt 0 view .LVU1348
 4336 0010 23F02043 		bic	r3, r3, #-1610612736
 4337 0014 23F03F03 		bic	r3, r3, #63
 4338 0018 43F00053 		orr	r3, r3, #536870912
 4339 001c 9360     		str	r3, [r2, #8]
 4340              	.LVL373:
 4341              	.L327:
6480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4342              		.loc 1 6480 3 view .LVU1349
 4343              	.LBE349:
 4344              	.LBE348:
2318:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
2319:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2320:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   else
2321:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   {
2322:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
2323:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
2324:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** 
2325:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   return tmp_hal_status;
 4345              		.loc 2 2325 3 is_stmt 1 view .LVU1350
2326:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c **** }
 4346              		.loc 2 2326 1 is_stmt 0 view .LVU1351
 4347 001e 08BD     		pop	{r3, pc}
 4348              	.LVL374:
 4349              	.L328:
2322:../../..\CubeG4\src/stm32g4xx_hal_adc_ex.c ****   }
 4350              		.loc 2 2322 20 view .LVU1352
 4351 0020 0120     		movs	r0, #1
 4352 0022 FCE7     		b	.L327
 4353              		.cfi_endproc
 4354              	.LFE351:
 4356              		.text
 4357              	.Letext0:
 4358              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\
 4359              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\
 4360              		.file 6 "../../..\\CubeG4\\include/core_cm4.h"
 4361              		.file 7 "../../..\\CubeG4\\include/system_stm32g4xx.h"
 4362              		.file 8 "../../..\\CubeG4\\include/stm32g431xx.h"
 4363              		.file 9 "../../..\\CubeG4\\include/stm32g4xx.h"
 4364              		.file 10 "../../..\\CubeG4\\include/stm32g4xx_hal_def.h"
 4365              		.file 11 "../../..\\CubeG4\\include/stm32g4xx_hal_dma.h"
 4366              		.file 12 "../../..\\CubeG4\\include/stm32g4xx_hal_adc.h"
 4367              		.file 13 "../../..\\CubeG4\\include/stm32g4xx_hal_adc_ex.h"
 4368              		.file 14 "../../..\\CubeG4\\include/stm32g4xx_hal_flash.h"
 4369              		.file 15 "../../..\\CubeG4\\include/stm32g4xx_hal.h"
