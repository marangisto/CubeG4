   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g4xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	LL_ADC_SetChannelSamplingTime:
  26              	.LVL0:
  27              	.LFB191:
  28              		.file 1 "../../..\\CubeG4\\include/stm32g4xx_ll_adc.h"
   1:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
   2:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
   3:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @file    stm32g4xx_ll_adc.h
   4:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @author  MCD Application Team
   5:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
   7:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @attention
   8:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
   9:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
  12:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
  17:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ******************************************************************************
  18:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  19:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  20:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #ifndef STM32G4xx_LL_ADC_H
  22:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define STM32G4xx_LL_ADC_H
  23:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  24:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #ifdef __cplusplus
  25:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** extern "C" {
  26:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
  27:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  28:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #include "stm32g4xx.h"
  30:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  31:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @addtogroup STM32G4xx_LL_Driver
  32:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  33:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  34:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  35:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3) || defined (ADC4) || defined (ADC5)
  36:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  37:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  39:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  40:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  41:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  44:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
  47:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
  48:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  49:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  50:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  51:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer register offset                                                */
  52:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  53:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  54:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  55:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  56:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  57:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  58:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  59:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  60:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  61:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  62:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  63:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  64:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  65:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  66:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  67:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ1_Pos)
  68:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ2_Pos)
  69:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ3_Pos)
  70:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ4_Pos)
  71:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ5_Pos)
  72:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ6_Pos)
  73:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ7_Pos)
  74:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ8_Pos)
  75:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ9_Pos)
  76:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS (ADC_SQR3_SQ10_Pos)
  77:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS (ADC_SQR3_SQ11_Pos)
  78:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (ADC_SQR3_SQ12_Pos)
  79:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (ADC_SQR3_SQ13_Pos)
  80:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (ADC_SQR3_SQ14_Pos)
  81:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS (ADC_SQR4_SQ15_Pos)
  82:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS (ADC_SQR4_SQ16_Pos)
  83:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  84:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  85:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  86:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
  87:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
  88:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - data register offset                                                     */
  89:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  90:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  91:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
  92:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  93:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
  94:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
  95:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
  96:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
  97:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
  98:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
  99:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 100:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 101:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 102:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 103:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 104:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 105:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 106:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 108:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 109:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 110:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 111:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 112:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 113:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - regular trigger source                                                   */
 114:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - regular trigger edge                                                     */
 115:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 117:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 118:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 120:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 126:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 127:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 132:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 133:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 134:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  (ADC_CFGR_EXTSEL_Pos)
 135:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (ADC_CFGR_EXTEN_Pos)
 136:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 137:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 138:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 139:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 141:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - injected trigger source                                                  */
 142:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - injected trigger edge                                                    */
 143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 144:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 145:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 146:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 147:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 148:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL)  << (4U
 149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 152:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 153:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 154:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 156:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 161:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 162:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  (ADC_JSQR_JEXTSEL_Pos)
 163:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   (ADC_JSQR_JEXTEN_Pos)
 164:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 165:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 166:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 167:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 168:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 169:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 170:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 171:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 172:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 173:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 174:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 175:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 176:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 177:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 178:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (ADC_CFGR_AWD1CH_Pos)
 181:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 185:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 186:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 187:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_2       (0x00080000UL) /* Marker of internal channel for other A
 188:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH | ADC_CHANNEL_ID_INTERNAL_CH
 189:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 190:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 191:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 192:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 193:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 194:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 196:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 197:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 198:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 201:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 206:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 212:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 213:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 214:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 215:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 216:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 217:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 218:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 222:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 226:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 227:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 238:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 240:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 241:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 242:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 246:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 247:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 248:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 249:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 251:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 258:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 259:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 262:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* the relevant bits for:                                                     */
 270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 276:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 277:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 282:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 283:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*   selection on groups.                                                     */
 289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 292:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 294:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 298:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 299:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 300:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 303:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 304:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 305:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 306:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 307:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 308:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 309:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 310:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 311:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 316:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 317:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 318:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 323:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 324:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 325:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC registers bits positions */
 328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 329:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 330:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 331:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_TR1_HT1_BITOFFSET_POS          (ADC_TR1_HT1_Pos)
 333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC registers bits groups */
 336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 337:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* ADC internal channels related definitions */
 340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFF75AAUL)) /* Internal voltage referen
 342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3000UL)                     /* Analog voltage reference
 343:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Temperature sensor */
 344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFF75A8UL)) /* Internal temperature sen
 345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFF75CAUL)) /* Internal temperature sen
 346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3000UL)                     /* Analog voltage reference
 349:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 354:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 355:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 356:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a register from a register basis from which an offset
 364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is applied.
 365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Pointer to register address
 368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 372:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 377:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 378:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and multimode
 386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sharing the same ADC common instance):
 390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         disabled.
 392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 393:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 394:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, if ADC group injected is us
 398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 402:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 408:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC multimode conversion data transfer: no transfe
 410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 411:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 413:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 418:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
 419:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 420:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 442:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 446:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 451:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions with prefix "REG").
 467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 487:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 489:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 492:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 494:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 507:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 510:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              data preserved or overwritten.
 515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 520:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions with prefix "INJ").
 527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** typedef struct
 541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 547:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 549:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 565:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 567:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 568:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 569:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 570:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 573:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 574:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 575:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 576:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 579:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 580:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 584:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 585:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 586:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 587:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 588:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 589:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 592:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 593:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 594:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 595:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 596:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 597:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 598:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 599:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 600:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 601:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 603:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 604:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 605:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 606:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 607:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 608:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 609:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 610:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 611:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 612:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 613:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 614:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 615:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 616:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 617:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 618:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 619:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 623:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 627:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 628:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 629:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 630:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 631:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 638:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 641:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 642:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 645:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 646:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* DMA transfer.                                                              */
 647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 648:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 655:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 656:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 659:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 662:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 663:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 664:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 665:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 666:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 667:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 671:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 672:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 673:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 674:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 677:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 678:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 681:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 682:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 683:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 686:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement pathes all d
 687:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_VSENSESEL)    /*!< ADC measurement path to inte
 689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATSEL)      /*!< ADC measurement path to inte
 690:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 693:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 694:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 697:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000UL)                      /*!< ADC resolution 
 698:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_0)   /*!< ADC resolution 
 699:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_1                 )   /*!< ADC resolution 
 700:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)   /*!< ADC resolution 
 701:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 704:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 705:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 709:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR_ALIGN)       /*!< ADC conversion data alignmen
 710:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 713:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 717:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 718:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 719:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 722:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 723:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 726:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 728:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 729:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 730:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 733:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 734:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 737:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 738:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among AD
 739:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 742:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 743:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)       /*!< ADC offset is negative (among 
 747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC_OFR1_OFFSETPOS) /*!< ADC offset is positive (among 
 748:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 751:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 752:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)          /*!< ADC offset saturation is di
 756:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC_OFR1_SATEN)        /*!< ADC offset saturation is en
 757:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 763:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 769:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 770:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 773:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 774:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 775:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 776:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 778:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 780:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 781:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 782:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 783:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 784:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 785:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 786:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 788:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 790:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 791:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 792:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 793:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC1     (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 794:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC5     (LL_ADC_CHANNEL_4  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 795:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP1             (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 797:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP2             (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 798:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC2        (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC3        (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP4             (LL_ADC_CHANNEL_5  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 801:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP5             (LL_ADC_CHANNEL_3  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 802:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP6             (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 803:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 806:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000UL)                                          
 811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger internal: SW start.
 812:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 814:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 816:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 819:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 822:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3       (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 824:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH1       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 829:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 832:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH3       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 835:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 837:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 843:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 845:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH1       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 848:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 851:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 853:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM7_TRGO      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 857:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_CH1       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 862:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 864:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO     (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO2    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH1      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH2      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH3      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 879:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 882:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG2     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 888:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG4     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 891:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG5     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 894:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG6     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EX
 895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG7     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 900:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG8     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 903:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG9     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 906:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG10    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 909:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 912:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE2     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 915:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM_OUT      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 917:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 920:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 921:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 924:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
 925:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
 926:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
 927:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 930:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 931:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
 932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 934:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)       /*!< ADC conversions sam
 935:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC_CFGR2_BULB)     /*!< ADC conversions sam
 936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                 Note: First convers
 937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC_CFGR2_SMPTRIG)  /*!< ADC conversions sam
 938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                  Trigger rising edg
 939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                                                  Trigger falling ed
 940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 943:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 944:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 947:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
 948:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
 949:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 952:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 953:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 956:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversio
 957:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                  ADC_CFGR_DMAEN)    /*!< ADC conversio
 958:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMACFG | ADC_CFGR_DMAEN)    /*!< ADC conversio
 959:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 962:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 963:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
 964:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_SAMPLINGTIME_COMMON_CONFIG ADC instance - ADC sampling time common configur
 965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 967:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_DEFAULT      (0x00000000UL)      /*!< ADC sampling time let to d
 968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5 (ADC_SMPR1_SMPPLUS) /*!< ADC additional sampling ti
 969:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 972:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
 973:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 974:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 977:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
 978:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
 979:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
 980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
 981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 982:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 983:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
 985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
 986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
 987:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
 988:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
 989:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
 990:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
 991:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
 992:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
 993:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
 994:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
 995:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
 996:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
 997:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
 998:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
 999:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1000:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1001:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1002:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1006:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1009:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1010:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1011:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1012:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1013:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1014:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1015:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1016:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1017:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1018:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1021:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1022:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1025:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1026:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1027:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1028:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1029:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1030:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1031:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1032:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1033:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1035:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1037:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1038:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1039:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1040:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1041:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1044:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1045:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1048:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger internal: SW start
1050:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1052:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1054:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1057:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1059:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1061:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1064:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1066:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1069:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1072:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1075:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1077:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH3       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1080:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1083:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1085:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM7_TRGO      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1087:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1089:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1091:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH2       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1094:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1096:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1098:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM16_CH1      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1101:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1104:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH2      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC3/4/5 instances. On this ST
1110:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH4      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC1/2 instances. On this STM3
1113:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1131:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1134:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_
1135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1137:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE3     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1146:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1149:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM_OUT      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1151:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1154:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1158:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1164:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1165:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1168:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1173:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1174:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1177:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1187:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1194:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1198:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1214:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1215:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1218:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (0x00000000UL)                                          
1219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_6CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_12CYCLES_5     (                    ADC_SMPR2_SMP10_1                  
1221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_47CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1232:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1240:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1246:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1249:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1258:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1259:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1262:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1276:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1277:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1282:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1283:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1292:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1294:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1298:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1300:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1303:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1304:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1306:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1307:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1309:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1310:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1316:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1317:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1318:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1323:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1324:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1325:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK)   
1327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_INJ          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1329:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK)   
1330:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_INJ          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1331:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK)   
1333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK)   
1336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1337:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK)   
1339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_INJ          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK)   
1342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_INJ          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
1343:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
1344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK)   
1345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_INJ          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1354:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR1_HT1              ) /*!< ADC analog watchdog thr
1355:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (              ADC_TR1_LT1) /*!< ADC analog watchdog thr
1356:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR1_HT1 | ADC_TR1_LT1) /*!< ADC analog watchdog bot
1357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1364:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                        ADC_TR1_AWDFILT
1366:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                    ADC_TR1_AWDFILT_1                  
1367:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                    ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1368:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC_TR1_AWDFILT_2                                      
1369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC_TR1_AWDFILT_2 |                     ADC_TR1_AWDFILT
1370:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1                  
1371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1372:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1380:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1384:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1387:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1388:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1391:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1392:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1393:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1396:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1401:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                      ADC_CFGR2_OVSR_0)
1402:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                   ADC_CFGR2_OVSR_1                   )
1403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                   ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1404:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC_CFGR2_OVSR_2                                      )
1405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC_CFGR2_OVSR_2                    | ADC_CFGR2_OVSR_0)
1406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1                   )
1407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1408:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1411:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1412:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1415:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1417:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1418:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1419:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1420:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1423:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
1429:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1432:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1433:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1434:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1435:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1437:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1439:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1440:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1444:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1447:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                                     /*!
1448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B (                 ADC_CCR_MDMA_1                 ) /*!
1449:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B   (                 ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1450:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B (ADC_CCR_DMACFG | ADC_CCR_MDMA_1                 ) /*!
1451:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B   (ADC_CCR_DMACFG | ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1452:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE   (0x00000000UL)                                          
1460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES  (                                                      A
1461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES  (                                    ADC_CCR_DELAY_1    
1462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES  (                                    ADC_CCR_DELAY_1 | A
1463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES  (                  ADC_CCR_DELAY_2                      
1464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (                  ADC_CCR_DELAY_2                   | A
1465:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1    
1466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1 | A
1467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (ADC_CCR_DELAY_3                                        
1468:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (ADC_CCR_DELAY_3                                     | A
1469:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1    
1470:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1 | A
1471:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1474:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1478:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1479:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1484:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
1486:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1487:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1488:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not timeout values.
1491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         above each literal definition.
1493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1495:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1496:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1497:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       not timeout values.                                                  */
1498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1500:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1502:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       STM32 serie:                                                         */
1503:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 112/fADC.                   */
1504:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1506:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1507:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1508:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1509:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         cycles                                                             */
1510:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1511:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         configuration.                                                     */
1512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1513:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1515:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1517:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1520:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1522:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tstart_vrefint").                                               */
1523:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1524:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       ( 12UL)  /*!< Delay for internal voltage reference stabi
1525:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1526:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1527:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1528:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* parameter "tSTART").                                                       */
1529:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1530:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    (120UL)  /*!< Delay for temperature sensor stabilization
1531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1532:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1533:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
1534:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1535:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1536:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1537:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1538:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1544:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1545:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1548:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1549:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1558:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Write a value in ADC register
1561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be written
1563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
1565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1566:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1567:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1568:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Read a value in ADC register
1570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be read
1572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Register value
1573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1574:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1575:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
1577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1578:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1579:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
1581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1583:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Example:
1587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will return decimal number "4".
1589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number is returned, either defined with number
1591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (                                                                                     \
1639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      )                                                                                     \
1641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                       \
1642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (                                                                                       \
1643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                                       \
1645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1646:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from number in decimal format.
1650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Example:
1651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
1697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
1698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1700:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (                                                                                             
1703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      )                                                                                             
1707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
1708:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (                                                                                               
1709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                                               
1713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC internal channel:
1720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1780:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a value defined from parameter definition of
1790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC registers.
1793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1856:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1858:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is
1868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
1886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
1897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
1898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC4)                                               \
1924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP6)         ||                    \
1926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC5)                                               \
1931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP5)         ||                    \
1933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC5) ||                    \
1934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP4)         ||                    \
1935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #elif defined(STM32G471xx)
1941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1966:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx)
1967:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ||                                                                          \
1977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
1982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    )                                                                           \
1983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
1984:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
1985:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
1986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
1987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example:
1992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
2000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
2001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
2002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
2016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
2017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
2018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
2019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
2020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
2021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
2022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
2023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
2024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
2025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
2026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
2036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
2037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
2038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
2039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
2041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
2042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
2043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
2044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
2046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
2047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
2048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
2049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
2050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
2051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
2052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
2053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
2054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
2055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
2056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
2057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
2058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
2059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
2060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
2061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
2062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
2063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
2064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
2065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
2066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
2067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
2068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
2069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
2070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
2071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
2072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
2073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
2074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
2075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
2076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
2107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
2108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
2109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
2110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
2111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
2112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
2113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
2114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
2115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
2116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
2117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
2118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
2119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
2120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
2121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
2122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
2123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
2124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
2125:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
2126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
2127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
2128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
2129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
2130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
2131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
2132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
2133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
2134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
2135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
2136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
2137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
2138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
2139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
2141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2150:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                  
2153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
2154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                          
2155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)                 
2156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    :                                                                                               
2157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL) 
2158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2159:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
2165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
2166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            (< ADCx param >,
2170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
2171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            );
2172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
2178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *            );
2194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
2200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
2203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
2207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
2208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
2210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
2211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
2212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
2213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
2214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2217:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__)       \
2218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_
2219:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationFactor().
2224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential ended to 0x2A:
2226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetCalibrationFactor(
2227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC1,
2228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2232:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2254:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC common instance).
2259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         considered as master instances (do not depend to
2263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         any other ADC instance).
2264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC5)
2268:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )?                                                                         \
2271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     :                                                                          \
2273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ( ( ((__ADCx__) == ADC4)                                                   \
2274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )?                                                                       \
2275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (ADC3)                                                                   \
2276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (__ADCx__)                                                               \
2278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )                                                                          \
2279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2280:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     )?                                                                         \
2284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     :                                                                          \
2286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     (__ADCx__)                                                                 \
2287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC common register instance
2300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2301:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2302:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (                                                                        \
2309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (ADC345_COMMON)                                                         \
2310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2312:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2313:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)  (ADC12_COMMON)
2314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC common instance are disabled.
2318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are disabled.
2329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled.
2331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC4) &&  defined(ADC5)
2334:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (                                                                        \
2342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3) |                                               \
2343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC4) |                                               \
2344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC5)  )                                              \
2345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       :                                                                        \
2355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       (LL_ADC_IsEnabled(ADC3))                                                 \
2356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2357:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC4 && ADC5 */
2358:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2359:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2362:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2363:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (refer to reference manual).
2369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2378:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2379:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a resolution to another resolution.
2382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((__DATA__)                                                                 \
2401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))   \
2402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))      \
2403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2404:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
2413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                       (unit: digital value).
2414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       __ADC_DATA__,\
2423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         reference VrefInt.
2432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         connected to pin Vref+.
2436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
2439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
2440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
2445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                  \
2457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       (__ADC_RESOLUTION__),                    \
2458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                       LL_ADC_RESOLUTION_12B))
2459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  parameters are correct (address and data).
2478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  less accurate than calibrated values),
2481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
2488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
2489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor.
2491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
2511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (refer to device datasheet).
2524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   (unit: digital value)
2529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  datasheet typical values.
2536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12 bits
2546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
2548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "Avg_Slop
2550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "V30" (co
2552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   ((( (                                                                        \
2570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        -                                                                       \
2574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       )                                                                        \
2577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   )
2580:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2581:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2584:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2585:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2588:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2589:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2594:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2595:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2598:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
2599:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
2600:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
2601:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example:
2612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
2629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval ADC register address
2631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t data_reg_addr;
2636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
2639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     /* Retrieve address of register DR */
2640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &(ADCx->DR);
2641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
2642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
2644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     /* Retrieve address of register CDR */
2645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
2647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return data_reg_addr;
2649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #else
2651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
2654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(Register);
2655:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Retrieve address of register DR */
2657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) &(ADCx->DR);
2658:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2659:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif
2660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2664:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2665:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, if ADC group injected is used, some
2672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         must be respected.
2674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
2675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2703:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2704:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
2706:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2731:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2732:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2734:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2735:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2736:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor stabilization time.
2746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a sampling time minimum value is required.
2752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_SetCommonPathInternalCh\n
2755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_SetCommonPathInternalCh
2756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal)
2768:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2769:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2770:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_GetCommonPathInternalCh\n
2778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_GetCommonPathInternalCh
2779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2788:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSE
2790:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2791:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2792:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
2794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2795:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
2798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without having to perform a new calibration using
2805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         requires their calibration).
2812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         To perform this processing, use helper macro
2816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on group regular.
2821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationFactor\n
2822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationFactor
2823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2831:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t C
2832:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2836:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2837:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2838:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationFactor\n
2847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationFactor
2848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2854:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2861:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2862:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2863:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC resolution.
2865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2880:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2881:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2883:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2884:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC resolution.
2887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2900:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2901:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2902:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
2904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_SetDataAlignment
2911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
2913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2917:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
2918:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_ALIGN, DataAlignment);
2920:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2921:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2922:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
2924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_GetDataAlignment
2927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
2933:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_ALIGN));
2935:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2936:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC low power mode.
2939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
2947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           other conversion.
2949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           applications.
2953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
2954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
2955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
2956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
2957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
2962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
2970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
2971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
2974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
2976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
2979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
2981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
2984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
2985:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
2986:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
2987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
2988:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
2989:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
2990:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
2991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC low power mode:
2992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
3000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           other conversion.
3002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           applications.
3006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
3007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
3010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
3015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
3024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
3027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3033:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3037:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3038:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or group injected)
3044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           converted data).
3046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are set to 0.
3049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
3120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3123:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3129:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3130:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3131:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or group injected)
3136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
3144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
3146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
3202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
3203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3206:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3208:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3210:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3211:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3212:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         converted data).
3216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are set to 0.
3219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3236:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3238:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         force offset state disable or enable
3241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
3270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetState);
3271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3272:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset state disabled or enabled.
3276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3290:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3291:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_EN);
3295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         choose offset sign.
3300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3320:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3322:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
3325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetSign);
3326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3327:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset sign if positive or negative.
3331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3346:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSETPOS);
3350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3352:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         choose offset saturation mode.
3355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3374:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3377:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
3379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
3380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              OffsetSaturation);
3381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3400:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3401:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3403:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_SATEN);
3405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC gain compensation.
3409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the gain compensation coefficient
3410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         that is applied to raw converted data using the formula:
3411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           DATA = DATA(raw) * (gain compensation coef) / 4096
3412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function enables the gain compensation if given
3413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coefficient is above 0, otherwise it disables it.
3414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Gain compensation when enabled is appied to all channels.
3415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_SetGainCompensation\n
3420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_SetGainCompensation
3421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  GainCompensation This parameter can be:
3423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         0           Gain compensation will be disabled and value set to 0
3424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation will be enabled with specified value
3425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3427:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
3428:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
3430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCO
3431:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3432:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3433:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC gain compensation value
3435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_GetGainCompensation\n
3436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_GetGainCompensation
3437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
3439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         0           Gain compensation is disabled
3440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation is enabled with returned value
3441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3442:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetGainCompensation(ADC_TypeDef *ADCx)
3443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR2, ADC_CFGR2_GCOMP) == ADC_CFGR2_GCOMP) ? READ_BIT(ADCx->GCOMP, ADC_G
3445:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3446:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3447:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
3448:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling time common configuration impacting
3450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_SetSamplingTimeCommonConfig
3456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingTimeCommonConfig This parameter can be one of the following values:
3458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3459:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCom
3463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
3465:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC sampling time common configuration impacting
3469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_GetSamplingTimeCommonConfig
3471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonConfig(ADC_TypeDef *ADCx)
3477:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SMPR1, ADC_SMPR1_SMPPLUS));
3479:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3480:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_SMPR1_SMPPLUS */
3481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3482:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
3484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3486:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
3488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3489:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3490:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
3495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
3519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3556:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3557:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3559:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3560:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (equivalent to
3569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
3586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3623:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET
3629:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((TriggerSource
3633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****          );
3636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3638:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or external.
3641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3650:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
3652:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3653:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3654:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3672:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3673:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3674:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3687:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Set sampling mode is appied to all conversion of regular group.
3694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, SamplingMode);
3710:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3711:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3712:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC sampling mode
3714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_GetSamplingMode\n
3715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_GetSamplingMode
3716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3722:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSamplingMode(ADC_TypeDef *ADCx)
3723:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG));
3725:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3726:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are configurable.
3734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             highest channel number).
3752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3781:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3782:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3784:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3785:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3786:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are configurable.
3793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             highest channel number).
3811:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3835:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3836:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3838:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3839:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
3844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
3854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
3856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
3868:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
3870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3871:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3872:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
3874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
3876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
3877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
3878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3890:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
3891:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
3893:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
3894:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
3895:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
3896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
3897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
3898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
3899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
3900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
3901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
3902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
3903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
3904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
3905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
3908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
3910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
3913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
3915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
3916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
3917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
3918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
3919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
3920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
3921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
3922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
3923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
3924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
3925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
3926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
3927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
3928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
3929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
3930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
3931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
3933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
3934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
3935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
3936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
3937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
3938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
3939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
3940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
3941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
3942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
3943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
3944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
3945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
3946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
3947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
3948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
3949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
3981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
3992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
3993:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
3994:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
3995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
3996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
3997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
3998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_M
4000:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
4002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4004:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4006:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
4009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
4012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4106:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4107:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOF
4109:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
4114:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4115:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4121:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4125:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
4128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4135:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4136:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4138:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4139:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4152:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4153:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4155:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4156:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4157:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode:
4162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransfer
4185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4192:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4193:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
4195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4196:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4197:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode:
4202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4227:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
4228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
4230:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4231:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         other devices without this feature have a behavior
4237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         equivalent to data overwritten.
4238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
4245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4252:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4253:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4255:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4256:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4257:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4267:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4269:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
4273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
4277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4278:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4279:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
4284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4340:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4344:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4345:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4349:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (equivalent to
4357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4409:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4410:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4412:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFS
4416:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((TriggerSource
4420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****          );
4423:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4425:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****             or external
4428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4437:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
4439:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4440:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4441:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4454:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4455:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4456:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4457:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4458:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4460:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4471:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4472:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4474:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
4479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4497:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4500:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4501:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4502:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function retrieves:
4505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4521:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4522:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4523:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
4527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4536:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4537:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         number of ranks.
4545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4552:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4556:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence rank.
4559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
4564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4626:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sequence rank.
4639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4709:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                               (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <
4712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
4714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4716:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC group injected.
4725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent trigger.
4728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         from ADC group regular.
4733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4749:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4750:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4751:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4760:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4761:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4763:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer length
4770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If contexts queue is disabled:
4772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - only 1 sequence can be configured
4773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           and is active perpetually.
4774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If contexts queue is enabled:
4775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           into the queue).
4786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
4805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4806:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4809:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
4821:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4822:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
4823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4824:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
4825:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
4826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
4827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         contexts queue.
4829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer length
4832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         cannot be used):
4837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         enabled separately.
4846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
4851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4874:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
4911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
4912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
4918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4941:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4942:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
4960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4971:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4972:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4979:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4980:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
4991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5004:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5009:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5010:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5029:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5035:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5036:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5087:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5095:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1U
5103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_JSQR_JL,
5111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)          |
5112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SequencerNbRanks
5118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****             );
5119:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5120:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5121:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5122:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
5123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
5127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5128:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5129:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         converted:
5136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         setting).
5139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5140:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TS_temp, ...).
5141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is required.
5150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
5151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5179:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5180:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5182:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5183:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5184:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5202:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5204:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5223:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5224:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5228:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
5230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
  29              		.loc 1 5233 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
5234:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_RE
  33              		.loc 1 5238 3 view .LVU1
5233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
  34              		.loc 1 5233 1 is_stmt 0 view .LVU2
  35 0000 30B5     		push	{r4, r5, lr}
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40              		.loc 1 5238 34 view .LVU3
  41 0002 CC0D     		lsrs	r4, r1, #23
  42 0004 04F00404 		and	r4, r4, #4
  43 0008 1430     		adds	r0, r0, #20
  44              	.LVL1:
5239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
  45              		.loc 1 5240 3 is_stmt 1 view .LVU4
  46 000a C1F30451 		ubfx	r1, r1, #20, #5
  47              	.LVL2:
  48              		.loc 1 5240 3 is_stmt 0 view .LVU5
  49 000e 2358     		ldr	r3, [r4, r0]
  50 0010 0725     		movs	r5, #7
  51 0012 8D40     		lsls	r5, r5, r1
  52 0014 23EA0503 		bic	r3, r3, r5
  53 0018 02FA01F1 		lsl	r1, r2, r1
  54 001c 1943     		orrs	r1, r1, r3
  55 001e 2150     		str	r1, [r4, r0]
5241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5243:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
  56              		.loc 1 5243 1 view .LVU6
  57 0020 30BD     		pop	{r4, r5, pc}
  58              		.loc 1 5243 1 view .LVU7
  59              		.cfi_endproc
  60              	.LFE191:
  62              		.section	.text.LL_ADC_SetAnalogWDMonitChannels,"ax",%progbits
  63              		.align	1
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
  69              	LL_ADC_SetAnalogWDMonitChannels:
  70              	.LVL3:
  71              	.LFB195:
5244:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5260:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5263:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5264:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5267:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5284:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5285:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
5331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5332:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5333:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SM
5335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5336:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5339:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
5340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5342:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
5345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC group regular or injected.
5347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configuration:
5359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             for more details.
5366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
5372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
5373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5382:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5385:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5386:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5398:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
5403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5405:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC channel.
5410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5421:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5422:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         configuration:
5424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             for more details.
5431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5454:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5457:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
5461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5463:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
5465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled.
5473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5483:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5505:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5506:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5515:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5517:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5531:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5539:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5541:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5550:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5551:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5553:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5554:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5555:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5562:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5565:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5566:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
5575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
5576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
5577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
5578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
5579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
5580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
5581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
5582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
5583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
5584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
5585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
5586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
5587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
5588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
5589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
5590:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
5591:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
5592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
5593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
5594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
5595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
5596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
5597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
5598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
5599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
5600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
5601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
5602:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
5603:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
5604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
5605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
5606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
5607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
5609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5610:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5611:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5619:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5620:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
  72              		.loc 1 5620 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
5621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5622:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5625:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MA
  76              		.loc 1 5625 3 view .LVU9
5620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  77              		.loc 1 5620 1 is_stmt 0 view .LVU10
  78 0000 30B5     		push	{r4, r5, lr}
  79              		.cfi_def_cfa_offset 12
  80              		.cfi_offset 4, -12
  81              		.cfi_offset 5, -8
  82              		.cfi_offset 14, -4
  83              		.loc 1 5625 34 view .LVU11
  84 0002 C1F30153 		ubfx	r3, r1, #20, #2
  85 0006 2425     		movs	r5, #36
  86 0008 01F00104 		and	r4, r1, #1
  87 000c 05FB0434 		mla	r4, r5, r4, r3
  88 0010 0C30     		adds	r0, r0, #12
  89              	.LVL4:
5626:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5627:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
  90              		.loc 1 5628 3 is_stmt 1 view .LVU12
  91 0012 21F00245 		bic	r5, r1, #-2113929216
  92 0016 50F82430 		ldr	r3, [r0, r4, lsl #2]
  93 001a 25F46015 		bic	r5, r5, #3670016
  94 001e 23EA0503 		bic	r3, r3, r5
  95 0022 0A40     		ands	r2, r2, r1
  96              	.LVL5:
  97              		.loc 1 5628 3 is_stmt 0 view .LVU13
  98 0024 1343     		orrs	r3, r3, r2
  99 0026 40F82430 		str	r3, [r0, r4, lsl #2]
5629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5631:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 100              		.loc 1 5631 1 view .LVU14
 101 002a 30BD     		pop	{r4, r5, pc}
 102              		.loc 1 5631 1 view .LVU15
 103              		.cfi_endproc
 104              	.LFE195:
 106              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
 107              		.align	1
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	LL_ADC_IsEnabled:
 114              	.LVL6:
 115              	.LFB223:
5632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5635:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5636:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5637:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
5643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
5645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           one channel.
5648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5668:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5669:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5670:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5676:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5677:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5679:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5680:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5681:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5688:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             by bitfield.
5690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5708:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5735:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5736:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5743:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5746:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5747:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
5753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.
5754:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5756:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5757:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFF
5758:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5759:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_
5761:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* or a single channel.                                                     */
5766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   {
5768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     {
5770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5775:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  )
5776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5778:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5779:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       else
5780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     }
5787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     else
5788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     {
5789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       else
5797:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       {
5798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5800:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5801:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                 );
5804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****       }
5805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****     }
5806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   }
5807:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return AnalogWDMonitChannels;
5809:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5813:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         high and low.
5814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5830:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5841:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5844:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
5845:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
5846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
5847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
5848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
5849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
5850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5855:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
5856:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
5857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
5861:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
5863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
5864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "AWDy".                                                                  */
5865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
5866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5868:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
5871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
5872:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5875:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         high or low.
5877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
5878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
5879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         instance:
5884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5897:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5898:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5903:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5904:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5905:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5906:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is not conditioned to
5908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5909:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC can be disabled, enabled with or without conversion on going
5910:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5913:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5914:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
5927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5928:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                   uint32_t AWDThresholdValue)
5930:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5932:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5933:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5937:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDThresholdsHighLow,
5940:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TR
5941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5942:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5943:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         concatenated.
5947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
5948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
5949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         using helper macro:
5950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
5951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5952:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5953:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5960:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5961:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5962:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5968:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
5969:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
5970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
5971:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5972:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
5973:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFS
5974:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR1_LT1))
5977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> (((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH
5978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
5979:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
5980:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
5981:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
5982:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
5983:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5984:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
5985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
5988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
5989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
5990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
5994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
5995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
5996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
5997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
5998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
5999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6002:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6004:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6005:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6008:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->TR1, ADC_TR1_AWDFILT, FilteringConfig);
6009:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6010:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6011:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
6015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
6020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6028:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6029:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6030:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6031:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->TR1, ADC_TR1_AWDFILT));
6034:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6035:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6037:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6039:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6040:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6043:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6044:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6055:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6056:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6058:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6062:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6063:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6064:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6069:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6070:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6072:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6073:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6074:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6082:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6083:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6085:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6089:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6090:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6091:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6094:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6095:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6097:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6098:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6099:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6109:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6110:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on group regular.
6111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, oversampling discontinuous mode
6112:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6116:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6117:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6118:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6121:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6126:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6135:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6136:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6138:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6139:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6141:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6143:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6144:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6145:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6146:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling
6147:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6149:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ratio
6150:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - shift
6151:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6157:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6158:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Ratio This parameter can be one of the following values:
6159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6160:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6161:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6162:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6168:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6169:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6171:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6172:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6173:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
6182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Ratio This parameter can be one of the following values:
6190:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6191:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6193:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6194:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6195:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6199:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6200:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6201:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR));
6202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6203:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6205:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6206:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6212:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6213:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6215:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6216:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6217:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6220:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6221:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6225:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6226:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6227:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6229:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6232:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6233:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
6234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6235:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6237:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6238:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6239:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro
6245:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6246:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6248:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6249:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6250:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6259:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6261:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6262:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6265:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6267:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6270:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6271:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6273:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6274:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6275:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6281:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6282:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
6287:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6288:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6289:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6292:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6293:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6295:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6296:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6297:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6303:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6304:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6306:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6307:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6308:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6314:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6315:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6317:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6318:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6319:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_SetMultiDMATransfer\n
6324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_SetMultiDMATransfer
6325:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6326:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6328:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6329:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6330:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6335:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6337:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, MultiDMATransfer);
6338:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6341:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6347:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6348:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6350:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6351:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6352:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6358:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6359:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6361:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6362:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6363:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6369:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6370:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_GetMultiDMATransfer\n
6371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_GetMultiDMATransfer
6372:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6373:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6374:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6375:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
6384:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6385:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6386:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6387:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6394:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6395:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6397:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6398:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6399:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6406:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
6407:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6409:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6410:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6411:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
6416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6418:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6419:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6423:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6424:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6425:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6426:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6430:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6431:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6433:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6434:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6435:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
6436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6442:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6443:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *
6445:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6446:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6447:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6449:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6450:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6452:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6453:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6454:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6457:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6459:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6461:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6466:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6467:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6469:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6470:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6471:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6475:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6476:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6478:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6479:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6481:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6482:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6483:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6484:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6485:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6490:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6491:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6493:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6494:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6495:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6499:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6502:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6503:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
6504:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6506:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6507:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6513:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
6515:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6516:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6517:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6518:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6519:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC internal voltage regulator enable,
6520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6526:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6527:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6529:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6530:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6532:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6538:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6540:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6542:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6543:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6553:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6562:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
6564:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6565:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6566:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6567:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for
6569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC conversion start.
6571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6574:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6575:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6577:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6578:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6579:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6583:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6586:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6589:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADEN);
6590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6592:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6598:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6599:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6601:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6603:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADDIS);
6610:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6611:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6612:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6613:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6614:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6615:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6621:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 116              		.loc 1 6622 1 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
6623:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 121              		.loc 1 6623 3 view .LVU17
 122              		.loc 1 6623 12 is_stmt 0 view .LVU18
 123 0000 8068     		ldr	r0, [r0, #8]
 124              	.LVL7:
6624:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 125              		.loc 1 6624 1 view .LVU19
 126 0002 00F00100 		and	r0, r0, #1
 127 0006 7047     		bx	lr
 128              		.cfi_endproc
 129              	.LFE223:
 131              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
 132              		.align	1
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	LL_ADC_REG_IsConversionOngoing:
 139              	.LVL8:
 140              	.LFB229:
6625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6626:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6627:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6633:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
6635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6636:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6638:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6639:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6640:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
6641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6643:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
6644:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
6646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6647:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6648:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         requires their calibration).
6649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration
6654:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6655:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6657:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6658:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6659:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6660:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
6661:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6665:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6666:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
6668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6676:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6677:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6679:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6680:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6681:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6684:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6685:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6687:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6689:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6690:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6691:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6692:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           starts immediately.
6695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6698:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6699:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6701:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6702:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6703:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6708:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6709:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6710:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6713:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6714:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTART);
6715:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6716:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6717:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6720:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6721:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6723:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6724:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6725:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6728:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6731:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6734:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTP);
6735:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6736:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6737:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6742:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6743:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6744:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 141              		.loc 1 6744 1 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		@ link register save eliminated.
6745:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 146              		.loc 1 6745 3 view .LVU21
 147              		.loc 1 6745 12 is_stmt 0 view .LVU22
 148 0000 8068     		ldr	r0, [r0, #8]
 149              	.LVL9:
6746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 150              		.loc 1 6746 1 view .LVU23
 151 0002 C0F38000 		ubfx	r0, r0, #2, #1
 152 0006 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE229:
 156              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 157              		.align	1
 158              		.weak	HAL_ADC_MspInit
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	HAL_ADC_MspInit:
 165              	.LVL10:
 166              	.LFB327:
 167              		.file 2 "../../..\\CubeG4\\src\\stm32g4xx_hal_adc.c"
   1:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
   2:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ******************************************************************************
   3:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @file    stm32g4xx_hal_adc.c
   4:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @author  MCD Application Team
   5:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          peripheral:
   8:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           + Operation functions
  11:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           + Control functions
  14:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           + State functions
  17:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ ADC state machine management
  18:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  20:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          "stm32g4xx_hal_adc_ex.c".
  21:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
  22:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   @verbatim
  23:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ==============================================================================
  24:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ==============================================================================
  26:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   [..]
  27:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  28:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  29:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  30:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       analog watchdog or overrun events.
  31:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  32:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  34:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  36:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  38:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  39:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  40:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  41:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  42:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  43:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  44:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode.
  45:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  46:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC channels selectable single/differential input.
  47:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  48:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC offset shared on 4 offset instances.
  49:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC gain compensation
  50:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  51:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC calibration
  52:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  53:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC conversion of regular group.
  54:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  55:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  56:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  57:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  58:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       Vdda or to an external voltage reference).
  59:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  60:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  61:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                      ##### How to use this driver #####
  62:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ==============================================================================
  63:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
  64:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  65:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  66:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ============================================================
  67:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
  68:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  69:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Enable the ADC interface
  70:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  71:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  72:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  73:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  75:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from AHB clock
  77:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    or asynchronous clock derived from system clock or PLL (output divider P)
  78:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    running up to 75MHz.
  79:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  80:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              (+++) Example:
  81:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  82:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    other device clock parameters configuration:
  83:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  84:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  85:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                RCC_ADCCLKSOURCE_PLL enable:                       (optional: if asynchronous clock 
  86:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
  87:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  88:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_PLL;
  89:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  90:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  91:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  92:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  93:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
  94:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) ADC pins configuration
  95:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  96:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  97:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  98:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_GPIO_Init()
  99:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 100:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 101:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 102:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 103:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 104:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               ADCx_IRQHandler().
 106:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 107:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 108:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 109:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_DMA_Init().
 110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 111:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 113:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 115:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 116:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ================================================================
 118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 119:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 120:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 121:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 122:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_Init().
 123:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 124:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 126:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 127:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 128:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         monitored, thresholds, ...)
 130:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 131:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 132:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      *** Execution of ADC conversions ***
 133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ====================================
 134:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 135:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 136:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 137:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         conversion accuracy
 138:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 139:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 140:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 141:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         transfer by DMA.
 142:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 143:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) ADC conversion by polling:
 144:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 145:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start()
 146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 147:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 148:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Retrieve conversion results
 149:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 150:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 151:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 152:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 153:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) ADC conversion by interruption:
 154:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 155:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 156:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 157:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 158:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 (this function must be implemented in user program)
 159:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Retrieve conversion results
 160:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 161:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 162:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 163:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 164:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 165:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 169:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 (these functions must be implemented in user program)
 170:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 destination variable address.
 172:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 173:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 174:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 175:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 176:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 177:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 178:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 179:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 180:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 182:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 183:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      *** Deinitialization of ADC ***
 184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ============================================================
 185:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 186:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Disable the ADC interface
 188:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 189:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 190:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 191:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         (++) ADC clock disable
 192:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 193:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              (+++) Example:
 194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 195:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    other device clock parameters configuration:
 196:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 197:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 198:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 199:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 200:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) ADC pins configuration
 201:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 202:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 203:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 204:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 205:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 206:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 207:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 208:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 209:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Deinitialize the DMA
 210:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_DMA_Init().
 211:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 212:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 213:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 214:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 215:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 216:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     *** Callback registration ***
 217:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     =============================================
 218:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 219:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 220:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 221:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 222:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 223:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      to register an interrupt callback.
 224:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 225:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 226:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 227:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 228:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 229:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 230:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 231:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 232:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 233:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 234:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 235:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 236:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 237:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 238:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 239:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      and a pointer to the user callback function.
 240:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 241:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 242:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      weak function.
 244:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 245:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 246:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 247:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      and the Callback ID.
 248:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      This function allows to reset following callbacks:
 249:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 250:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 251:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 252:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 253:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 254:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 255:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 256:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 258:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 259:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 260:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 261:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 262:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 263:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 264:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 266:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 267:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 268:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 269:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 270:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 271:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 272:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 273:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 274:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 276:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 277:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 278:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
 279:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 280:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 281:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 282:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 283:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      [..]
 284:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 285:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 286:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      are set to the corresponding weak functions.
 288:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 289:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   @endverbatim
 290:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ******************************************************************************
 291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @attention
 292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
 293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 294:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * All rights reserved.</center></h2>
 295:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
 296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 297:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 298:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 299:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 300:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
 301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ******************************************************************************
 302:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 303:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 304:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 305:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #include "stm32g4xx_hal.h"
 306:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 307:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @addtogroup STM32G4xx_HAL_Driver
 308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
 309:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 310:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 311:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC ADC
 312:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief ADC HAL module driver
 313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
 314:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 315:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 316:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 317:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 318:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 319:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 320:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 321:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
 323:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 324:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 325:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #define ADC_CFGR_FIELDS_1  ((ADC_CFGR_RES    | ADC_CFGR_ALIGN   |\
 326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 327:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 328:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL))   /*!< ADC_CFGR fields of paramete
 329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                                                         when no regular conversion 
 330:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   
 331:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Timeout values for ADC operations (enable settling time,                   */
 332:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   disable settling time, ...).                                             */
 333:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   Values defined to be higher than worst cases: low clock frequency,       */
 334:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   maximum prescalers.                                                      */
 335:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)    /*!< ADC enable time-out value  */
 336:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)    /*!< ADC disable time-out value */
 337:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 338:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Timeout to wait for current conversion on going to be completed.           */
 339:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Timeout fixed to longest ADC conversion possible, for 1 channel:           */
 340:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   - maximum sampling time (640.5 adc_clk)                                  */
 341:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   - ADC resolution (Tsar 12 bits= 12.5 adc_clk)                            */
 342:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   - System clock / ADC clock <= 4096 (hypothesis of maximum clock ratio)   */
 343:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   - ADC oversampling ratio 256                                             */
 344:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /*   Calculation: 653 * 4096 * 256 CPU clock cycles max                       */
 345:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Unit: cycles of CPU clock.                                                 */
 346:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES (653UL * 4096UL * 256UL)  /*!< ADC conversion completion
 347:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 348:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 349:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
 351:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 352:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 353:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 354:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 355:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 356:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 357:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 358:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
 360:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 361:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 362:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 363:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 364:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
 365:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @verbatim
 366:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
 367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 368:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
 369:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 370:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) De-initialize the ADC.
 372:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @endverbatim
 373:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
 374:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 375:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 376:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 377:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 378:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 379:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 381:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         in header of this file).
 382:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 383:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 384:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 385:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 388:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         before HAL_ADC_Init().
 389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 390:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 391:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 392:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 393:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 394:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 395:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Parameters related to common ADC registers (ADC clock mode) are set
 396:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         only if all ADCs are disabled.
 397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         If this is not the case, these common parameters setting are
 398:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 399:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 400:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         without  disabling the other ADCs.
 401:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 402:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 403:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 404:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 405:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 406:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 407:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpCFGR;
 408:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 409:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 410:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 411:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 412:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 413:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check ADC handle */
 414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc == NULL)
 415:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 416:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 418:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 419:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 420:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 421:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 422:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 425:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 426:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 428:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 429:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 431:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 432:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 433:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 434:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 435:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 436:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 437:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 438:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 439:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 440:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 441:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 442:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 443:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 445:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 446:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 447:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* DISCEN and CONT bits cannot be set at the same time */
 448:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 449:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 450:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 453:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 454:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 455:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Init the ADC Callback settings */
 456:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 457:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 458:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 460:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 461:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak 
 462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 463:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 465:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 466:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 469:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 470:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 471:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Init the low level hardware */
 472:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 473:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
 474:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Init the low level hardware */
 475:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 476:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 477:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 478:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to none */
 479:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 480:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 481:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Initialize Lock */
 482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 483:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 484:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 485:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 487:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable ADC deep power down mode */
 489:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     LL_ADC_DisableDeepPowerDown(hadc->Instance);
 490:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* System was in deep power down mode, calibration must
 492:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      be relaunched or a previously saved calibration factor
 493:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      re-applied once the ADC voltage regulator is enabled */
 494:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 495:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 497:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 500:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 501:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 502:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 503:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 504:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL 
 505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 506:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       wait_loop_index--;
 508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 509:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 510:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 511:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 512:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 513:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 514:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 515:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 516:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
 517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 518:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 520:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 521:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 524:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 525:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 526:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 527:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 529:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 530:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 532:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 533:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
 534:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 535:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
 536:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 537:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 538:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 539:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 541:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 542:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 543:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 544:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - clock configuration                                                 */
 545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 548:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 549:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset configuration of ADC common register CCR:                      */
 550:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*                                                                      */
 551:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*   - ADC clock mode and ACC prescaler (CKMODE and PRESC bits)are set  */
 552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*     according to adc->Init.ClockPrescaler. It selects the clock      */
 553:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*    source and sets the clock division factor.                        */
 554:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*                                                                      */
 555:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Some parameters of this register are not reset, since they are set   */
 556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* by other functions and must be kept in case of usage of this         */
 557:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 558:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* without needing to reconfigure all other ADC groups/channels         */
 559:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* parameters):                                                         */
 560:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*   - when multimode feature is available, multimode-related           */
 561:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
 562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
 563:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 564:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*     (set into HAL_ADC_ConfigChannel() or                             */
 565:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 566:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 567:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 568:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 569:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 570:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 571:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - resolution                               Init.Resolution            */
 572:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - data alignment                           Init.DataAlign             */
 573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - external trigger to start conversion     Init.ExternalTrigConv      */
 574:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
 575:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - continuous conversion mode               Init.ContinuousConvMode    */
 576:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - overrun                                  Init.Overrun               */
 577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - discontinuous mode                       Init.DiscontinuousConvMode */
 578:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
 579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 580:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.DataAlign                                                   |
 582:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Resolution                                                  |
 583:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 584:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 586:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 588:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 589:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 590:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 591:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* start.                                                                 */
 592:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 593:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 594:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       software start.                                                  */
 595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 596:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 599:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  );
 600:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 601:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update Configuration Register CFGR */
 603:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 604:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 605:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Configuration of sampling mode */
 606:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 607:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 608:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 610:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* conversion on going on regular and injected groups:                    */
 611:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - Gain Compensation               Init.GainCompensation               */
 612:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - DMA continuous request          Init.DMAContinuousRequests          */
 613:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
 614:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - Oversampling parameters         Init.Oversampling                   */
 615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 617:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 618:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 619:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
 620:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 622:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 623:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 624:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 625:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 626:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (hadc->Init.GainCompensation != 0UL)
 628:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 630:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 631:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 632:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
 633:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 635:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 636:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 637:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 638:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 639:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 640:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 641:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 642:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 643:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 644:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 645:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Configuration of Oversampler:                                      */
 646:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*  - Oversampling Ratio                                              */
 647:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*  - Right bit shift                                                 */
 648:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*  - Triggered mode                                                  */
 649:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /*  - Oversampling mode (continued/resumed)                           */
 650:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CFGR2,
 651:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_OVSR  |
 652:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_OVSS  |
 653:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_TROVS |
 654:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_ROVSM,
 655:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_ROVSE                       |
 656:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 657:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 658:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
 659:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.OversamplingStopReset
 660:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                   );
 661:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 662:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
 663:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 664:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Disable ADC oversampling scope on ADC group regular */
 665:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 666:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 667:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 668:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 669:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 670:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 671:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 672:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 673:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 674:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 675:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 676:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 677:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 678:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 679:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 680:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 681:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set number of ranks in regular group sequencer */
 682:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 683:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 684:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
 685:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 686:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 687:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 688:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 689:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Initialize the ADC state */
 690:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
 691:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 692:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 693:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
 694:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 695:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
 696:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 697:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 698:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 699:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 700:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 701:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
 702:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 703:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 704:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 705:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 706:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 707:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 708:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 709:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 710:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 711:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 712:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 713:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 714:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 715:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 716:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         common group is still running.
 717:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 718:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 719:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
 720:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 721:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 722:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 723:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 724:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 725:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 726:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 727:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check ADC handle */
 728:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc == NULL)
 729:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 730:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 731:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 732:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 733:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 734:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 735:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 736:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
 737:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 738:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 739:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Stop potential conversion on going */
 740:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 741:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 742:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped            */
 743:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Flush register JSQR: reset the queue sequencer when injected             */
 744:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* queue sequencer is enabled and ADC disabled.                             */
 745:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* The software and hardware triggers of the injected sequence are both     */
 746:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* internally disabled just after the completion of the last valid          */
 747:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* injected sequence.                                                       */
 748:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 749:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 750:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 751:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 752:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 753:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable the ADC peripheral */
 754:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 755:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 757:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 758:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 759:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Change ADC state */
 760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 761:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 762:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 763:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 764:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 765:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 766:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 767:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 768:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 769:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 771:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register IER */
 772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 773:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 774:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_JEOS  | ADC_IT_JEOC |
 775:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 776:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 777:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register ISR */
 779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 780:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 781:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 782:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 783:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 784:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 785:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register CR */
 786:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
 787:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
 788:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      no direct reset applicable.
 789:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      Update CR register to reset value where doable by software */
 790:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 791:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 792:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 793:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register CFGR */
 794:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 795:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 796:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register CFGR2 */
 798:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 799:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 800:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 801:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SMPR1 */
 802:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 803:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 804:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SMPR2 */
 805:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 806:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 807:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);
 808:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 809:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register TR1 */
 810:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 811:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register TR2 */
 813:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 814:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 815:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register TR3 */
 816:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 817:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 818:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SQR1 */
 819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 820:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 821:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 822:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SQR2 */
 823:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 824:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 825:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 826:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SQR3 */
 827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 828:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 829:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 830:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register SQR4 */
 831:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 832:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 833:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Register JSQR was reset when the ADC was disabled */
 834:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 835:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register DR */
 836:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 837:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 838:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR1 */
 839:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 840:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR2 */
 841:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR3 */
 843:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 844:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR4 */
 845:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 846:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 847:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 849:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 850:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register AWD2CR */
 851:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 852:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 853:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register AWD3CR */
 854:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 855:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register DIFSEL */
 857:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 858:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 859:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register CALFACT */
 860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 861:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 862:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 863:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Reset common ADC registers ========== */
 864:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 865:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Software is allowed to change common parameters only when all the other
 866:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ADCs are disabled.   */
 867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 868:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 869:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Reset configuration of ADC common register CCR:
 870:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       - clock mode: CKMODE, PRESCEN
 871:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       - multimode related parameters (when this feature is available): MDMA,
 872:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
 873:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       - internal measurement paths: Vbat, temperature sensor, Vref (set into
 874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
 875:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     */
 876:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 877:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 878:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 879:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware.
 880:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 881:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      For example:
 882:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_FORCE_RESET();
 883:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_RELEASE_RESET();
 884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_CLK_DISABLE();
 885:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 886:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     Keep in mind that all ADCs use the same clock: disabling
 887:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     the clock will reset all ADCs.
 888:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 890:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 891:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 892:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 893:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 895:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 896:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 898:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
 899:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 900:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 901:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 902:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC error code to none */
 904:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 905:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 906:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset injected channel configuration parameters */
 907:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->InjectionConfig.ContextQueue = 0;
 908:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 909:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 910:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
 911:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 912:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 913:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
 914:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 915:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
 917:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 918:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 919:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 920:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 921:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 922:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 923:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
 924:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 925:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
 926:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 168              		.loc 2 926 1 is_stmt 1 view -0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
 927:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 928:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
 173              		.loc 2 928 3 view .LVU25
 929:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 930:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 932:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****    */
 933:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 174              		.loc 2 933 1 is_stmt 0 view .LVU26
 175 0000 7047     		bx	lr
 176              		.cfi_endproc
 177              	.LFE327:
 179              		.section	.text.HAL_ADC_Init,"ax",%progbits
 180              		.align	1
 181              		.global	HAL_ADC_Init
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	HAL_ADC_Init:
 188              	.LVL11:
 189              	.LFB325:
 405:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 190              		.loc 2 405 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 406:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpCFGR;
 194              		.loc 2 406 3 view .LVU28
 407:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 195              		.loc 2 407 3 view .LVU29
 408:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 196              		.loc 2 408 3 view .LVU30
 409:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 197              		.loc 2 409 3 view .LVU31
 405:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 198              		.loc 2 405 1 is_stmt 0 view .LVU32
 199 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 200              		.cfi_def_cfa_offset 24
 201              		.cfi_offset 4, -16
 202              		.cfi_offset 5, -12
 203              		.cfi_offset 6, -8
 204              		.cfi_offset 14, -4
 409:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 205              		.loc 2 409 17 view .LVU33
 206 0002 0023     		movs	r3, #0
 207 0004 0193     		str	r3, [sp, #4]
 410:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 208              		.loc 2 410 3 is_stmt 1 view .LVU34
 411:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 209              		.loc 2 411 3 view .LVU35
 414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 210              		.loc 2 414 3 view .LVU36
 414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 211              		.loc 2 414 6 is_stmt 0 view .LVU37
 212 0006 0446     		mov	r4, r0
 213 0008 0028     		cmp	r0, #0
 214 000a 00F0DF80 		beq	.L28
 420:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 215              		.loc 2 420 3 is_stmt 1 view .LVU38
 421:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 216              		.loc 2 421 3 view .LVU39
 422:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 217              		.loc 2 422 3 view .LVU40
 423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 218              		.loc 2 423 3 view .LVU41
 424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 219              		.loc 2 424 3 view .LVU42
 425:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 220              		.loc 2 425 3 view .LVU43
 426:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 221              		.loc 2 426 3 view .LVU44
 427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 222              		.loc 2 427 3 view .LVU45
 428:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 223              		.loc 2 428 3 view .LVU46
 429:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 224              		.loc 2 429 3 view .LVU47
 430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 225              		.loc 2 430 3 view .LVU48
 431:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 226              		.loc 2 431 3 view .LVU49
 432:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 227              		.loc 2 432 3 view .LVU50
 433:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 228              		.loc 2 433 3 view .LVU51
 434:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 229              		.loc 2 434 3 view .LVU52
 436:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 230              		.loc 2 436 3 view .LVU53
 443:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 231              		.loc 2 443 7 view .LVU54
 448:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 232              		.loc 2 448 3 view .LVU55
 452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 233              		.loc 2 452 3 view .LVU56
 452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 234              		.loc 2 452 11 is_stmt 0 view .LVU57
 235 000e C56D     		ldr	r5, [r0, #92]
 452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 236              		.loc 2 452 6 view .LVU58
 237 0010 25B9     		cbnz	r5, .L8
 475:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 238              		.loc 2 475 5 is_stmt 1 view .LVU59
 239 0012 FFF7FEFF 		bl	HAL_ADC_MspInit
 240              	.LVL12:
 479:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 241              		.loc 2 479 5 view .LVU60
 242 0016 2566     		str	r5, [r4, #96]
 482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 243              		.loc 2 482 5 view .LVU61
 482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 244              		.loc 2 482 16 is_stmt 0 view .LVU62
 245 0018 84F85850 		strb	r5, [r4, #88]
 246              	.L8:
 486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 247              		.loc 2 486 3 is_stmt 1 view .LVU63
 486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 248              		.loc 2 486 7 is_stmt 0 view .LVU64
 249 001c 2068     		ldr	r0, [r4]
 250              	.LVL13:
 251              	.LBB156:
 252              	.LBI156:
6512:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 253              		.loc 1 6512 26 is_stmt 1 view .LVU65
 254              	.LBB157:
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 255              		.loc 1 6514 3 view .LVU66
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 256              		.loc 1 6514 12 is_stmt 0 view .LVU67
 257 001e 8368     		ldr	r3, [r0, #8]
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 258              		.loc 1 6514 74 view .LVU68
 259 0020 9900     		lsls	r1, r3, #2
 260              	.LVL14:
6514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 261              		.loc 1 6514 74 view .LVU69
 262              	.LBE157:
 263              	.LBE156:
 489:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 264              		.loc 2 489 5 is_stmt 1 view .LVU70
 265              	.LBB158:
 266              	.LBI158:
6498:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 267              		.loc 1 6498 22 view .LVU71
 268              	.LBB159:
6503:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 269              		.loc 1 6503 3 view .LVU72
 270 0022 41BF     		itttt	mi
 271 0024 8368     		ldrmi	r3, [r0, #8]
 272 0026 23F02043 		bicmi	r3, r3, #-1610612736
 273 002a 23F03F03 		bicmi	r3, r3, #63
 274 002e 8360     		strmi	r3, [r0, #8]
 275              	.LBE159:
 276              	.LBE158:
 496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 277              		.loc 2 496 3 view .LVU73
 278              	.LVL15:
 279              	.LBB160:
 280              	.LBI160:
6561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 281              		.loc 1 6561 26 view .LVU74
 282              	.LBB161:
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 283              		.loc 1 6563 3 view .LVU75
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 284              		.loc 1 6563 12 is_stmt 0 view .LVU76
 285 0030 8368     		ldr	r3, [r0, #8]
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 286              		.loc 1 6563 76 view .LVU77
 287 0032 DA00     		lsls	r2, r3, #3
 288 0034 40F1A580 		bpl	.L10
 289              	.LVL16:
 290              	.L15:
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 291              		.loc 1 6563 76 view .LVU78
 292              	.LBE161:
 293              	.LBE160:
 514:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 294              		.loc 2 514 3 is_stmt 1 view .LVU79
 295              	.LBB162:
 296              	.LBI162:
6561:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 297              		.loc 1 6561 26 view .LVU80
 298              	.LBB163:
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 299              		.loc 1 6563 3 view .LVU81
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 300              		.loc 1 6563 12 is_stmt 0 view .LVU82
 301 0038 8368     		ldr	r3, [r0, #8]
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 302              		.loc 1 6563 76 view .LVU83
 303 003a DB00     		lsls	r3, r3, #3
 304 003c 00F1B680 		bmi	.L29
 305              	.LVL17:
6563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 306              		.loc 1 6563 76 view .LVU84
 307              	.LBE163:
 308              	.LBE162:
 517:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 309              		.loc 2 517 5 is_stmt 1 view .LVU85
 310 0040 E36D     		ldr	r3, [r4, #92]
 311 0042 43F01003 		orr	r3, r3, #16
 312 0046 E365     		str	r3, [r4, #92]
 520:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 313              		.loc 2 520 5 view .LVU86
 314 0048 236E     		ldr	r3, [r4, #96]
 315 004a 43F00103 		orr	r3, r3, #1
 316 004e 2366     		str	r3, [r4, #96]
 522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 317              		.loc 2 522 5 view .LVU87
 318              	.LVL18:
 522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 319              		.loc 2 522 20 is_stmt 0 view .LVU88
 320 0050 0121     		movs	r1, #1
 321              	.LVL19:
 322              	.L11:
 529:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 323              		.loc 2 529 3 is_stmt 1 view .LVU89
 529:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 324              		.loc 2 529 40 is_stmt 0 view .LVU90
 325 0052 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 326              	.LVL20:
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 327              		.loc 2 531 3 is_stmt 1 view .LVU91
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 328              		.loc 2 531 13 is_stmt 0 view .LVU92
 329 0056 E36D     		ldr	r3, [r4, #92]
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 330              		.loc 2 531 21 view .LVU93
 331 0058 03F01003 		and	r3, r3, #16
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 332              		.loc 2 531 6 view .LVU94
 333 005c 0343     		orrs	r3, r3, r0
 536:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 334              		.loc 2 536 5 view .LVU95
 335 005e E36D     		ldr	r3, [r4, #92]
 531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 336              		.loc 2 531 6 view .LVU96
 337 0060 40F0B180 		bne	.L16
 536:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 338              		.loc 2 536 5 is_stmt 1 view .LVU97
 339 0064 23F48173 		bic	r3, r3, #258
 340 0068 43F00203 		orr	r3, r3, #2
 341 006c E365     		str	r3, [r4, #92]
 545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 342              		.loc 2 545 5 view .LVU98
 545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 343              		.loc 2 545 9 is_stmt 0 view .LVU99
 344 006e 2068     		ldr	r0, [r4]
 345              	.LVL21:
 545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 346              		.loc 2 545 9 view .LVU100
 347 0070 FFF7FEFF 		bl	LL_ADC_IsEnabled
 348              	.LVL22:
 545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 349              		.loc 2 545 8 view .LVU101
 350 0074 80B9     		cbnz	r0, .L18
 547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 351              		.loc 2 547 7 is_stmt 1 view .LVU102
 547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 352              		.loc 2 547 11 is_stmt 0 view .LVU103
 353 0076 4FF0A040 		mov	r0, #1342177280
 354 007a FFF7FEFF 		bl	LL_ADC_IsEnabled
 355              	.LVL23:
 356 007e 0346     		mov	r3, r0
 357 0080 5348     		ldr	r0, .L41
 358 0082 FFF7FEFF 		bl	LL_ADC_IsEnabled
 359              	.LVL24:
 547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 360              		.loc 2 547 10 view .LVU104
 361 0086 0343     		orrs	r3, r3, r0
 362 0088 06D1     		bne	.L18
 566:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 363              		.loc 2 566 9 is_stmt 1 view .LVU105
 364              	.LVL25:
 365              	.LBB164:
 366              	.LBI164:
2703:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 367              		.loc 1 2703 22 view .LVU106
 368              	.LBB165:
2705:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 369              		.loc 1 2705 3 view .LVU107
 370 008a 524A     		ldr	r2, .L41+4
 371 008c 6068     		ldr	r0, [r4, #4]
 372 008e 9368     		ldr	r3, [r2, #8]
 373 0090 23F47C13 		bic	r3, r3, #4128768
 374 0094 0343     		orrs	r3, r3, r0
 375 0096 9360     		str	r3, [r2, #8]
 376              	.LVL26:
 377              	.L18:
2705:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 378              		.loc 1 2705 3 is_stmt 0 view .LVU108
 379              	.LBE165:
 380              	.LBE164:
 579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 381              		.loc 2 579 5 is_stmt 1 view .LVU109
 581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Resolution                                                  |
 382              		.loc 2 581 88 is_stmt 0 view .LVU110
 383 0098 E068     		ldr	r0, [r4, #12]
 384 009a E36B     		ldr	r3, [r4, #60]
 583:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 385              		.loc 2 583 17 view .LVU111
 386 009c 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
 581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Resolution                                                  |
 387              		.loc 2 581 88 view .LVU112
 388 00a0 0343     		orrs	r3, r3, r0
 389 00a2 A068     		ldr	r0, [r4, #8]
 390 00a4 0343     		orrs	r3, r3, r0
 579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 391              		.loc 2 579 17 view .LVU113
 392 00a6 607F     		ldrb	r0, [r4, #29]	@ zero_extendqisi2
 585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 393              		.loc 2 585 8 view .LVU114
 394 00a8 012A     		cmp	r2, #1
 581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Resolution                                                  |
 395              		.loc 2 581 88 view .LVU115
 396 00aa 43EA4033 		orr	r3, r3, r0, lsl #13
 579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 397              		.loc 2 579 14 view .LVU116
 398 00ae 43EA0243 		orr	r3, r3, r2, lsl #16
 399              	.LVL27:
 585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 400              		.loc 2 585 5 is_stmt 1 view .LVU117
 587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 401              		.loc 2 587 7 view .LVU118
 587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 402              		.loc 2 587 18 is_stmt 0 view .LVU119
 403 00b2 02BF     		ittt	eq
 404 00b4 A26A     		ldreq	r2, [r4, #40]
 405 00b6 02F1FF32 		addeq	r2, r2, #-1
 587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 406              		.loc 2 587 15 view .LVU120
 407 00ba 43EA4243 		orreq	r3, r3, r2, lsl #17
 408              	.LVL28:
 595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 409              		.loc 2 595 5 is_stmt 1 view .LVU121
 595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 410              		.loc 2 595 19 is_stmt 0 view .LVU122
 411 00be E26A     		ldr	r2, [r4, #44]
 595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 412              		.loc 2 595 8 view .LVU123
 413 00c0 22B1     		cbz	r2, .L21
 597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 414              		.loc 2 597 7 is_stmt 1 view .LVU124
 598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  );
 415              		.loc 2 598 19 is_stmt 0 view .LVU125
 416 00c2 206B     		ldr	r0, [r4, #48]
 597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 417              		.loc 2 597 48 view .LVU126
 418 00c4 02F47872 		and	r2, r2, #992
 598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  );
 419              		.loc 2 598 19 view .LVU127
 420 00c8 0243     		orrs	r2, r2, r0
 597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 421              		.loc 2 597 15 view .LVU128
 422 00ca 1343     		orrs	r3, r3, r2
 423              	.LVL29:
 424              	.L21:
 603:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 425              		.loc 2 603 5 is_stmt 1 view .LVU129
 426 00cc 2068     		ldr	r0, [r4]
 427 00ce 424A     		ldr	r2, .L41+8
 428 00d0 C568     		ldr	r5, [r0, #12]
 429 00d2 2A40     		ands	r2, r2, r5
 430 00d4 1343     		orrs	r3, r3, r2
 431              	.LVL30:
 603:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 432              		.loc 2 603 5 is_stmt 0 view .LVU130
 433 00d6 C360     		str	r3, [r0, #12]
 606:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 434              		.loc 2 606 5 is_stmt 1 view .LVU131
 435 00d8 0369     		ldr	r3, [r0, #16]
 436 00da 626B     		ldr	r2, [r4, #52]
 437 00dc 23F04063 		bic	r3, r3, #201326592
 438 00e0 1343     		orrs	r3, r3, r2
 439 00e2 0361     		str	r3, [r0, #16]
 615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 440              		.loc 2 615 5 view .LVU132
 615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 441              		.loc 2 615 46 is_stmt 0 view .LVU133
 442 00e4 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 443              	.LVL31:
 616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 444              		.loc 2 616 5 is_stmt 1 view .LVU134
 616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 445              		.loc 2 616 47 is_stmt 0 view .LVU135
 446 00e8 2368     		ldr	r3, [r4]
 447              	.LVL32:
 448              	.LBB166:
 449              	.LBI166:
6747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6748:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6753:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6754:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6756:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6757:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6758:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6759:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC sampling phase for sampling time trigger mode
6761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
6762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6764:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6765:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6767:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6768:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6769:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StartSamplingPhase
6771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6774:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartSamplingPhase(ADC_TypeDef *ADCx)
6775:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6776:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6777:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6778:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6780:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC sampling phase for sampling time trigger mode and start conversion
6781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
6782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_StartSamplingPhase has been called to start
6786:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           the sampling phase
6787:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6789:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6790:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6791:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StopSamplingPhase
6793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6796:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopSamplingPhase(ADC_TypeDef *ADCx)
6797:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6798:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6799:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6801:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6802:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with feature oversampling).
6806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6808:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6809:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6810:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6812:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6813:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6814:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6815:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 12 bits.
6818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6819:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6820:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6822:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6823:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6824:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6825:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6826:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6828:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6829:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6830:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6831:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 10 bits.
6833:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6834:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6835:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6840:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6841:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6842:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6843:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6844:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6845:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6846:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 8 bits.
6848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6852:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6853:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6856:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6857:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6858:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6859:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6860:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 6 bits.
6863:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6864:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6866:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData6
6867:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6868:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
6869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6870:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
6871:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6873:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6875:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
6876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6877:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6878:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6879:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
6884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
6885:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
6886:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         separately).
6887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
6888:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
6889:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6890:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6891:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
6892:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
6893:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
6894:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
6895:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6896:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6897:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
6898:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6899:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
6900:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ConversionData)
6901:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
6902:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
6903:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6904:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6905:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6906:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6907:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
6908:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6909:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6910:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
6911:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
6912:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6913:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6914:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6915:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
6916:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6917:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6918:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6919:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           starts immediately.
6920:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6921:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6922:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6923:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6924:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6925:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
6926:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
6927:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6928:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
6929:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6930:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6931:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6932:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
6933:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6934:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6935:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6936:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6937:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6938:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6939:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTART);
6940:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6941:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6942:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6943:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
6944:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6945:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC state:
6946:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
6947:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6948:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
6949:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6950:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
6951:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6952:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
6953:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6954:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6955:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6956:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6958:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6959:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTP);
6960:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6961:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6962:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6963:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
6964:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
6965:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6966:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
6967:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
 450              		.loc 1 6968 26 is_stmt 1 view .LVU136
 451              	.LBB167:
6969:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 452              		.loc 1 6970 3 view .LVU137
 453              		.loc 1 6970 12 is_stmt 0 view .LVU138
 454 00ea 9A68     		ldr	r2, [r3, #8]
 455 00ec 02F00802 		and	r2, r2, #8
 456              		.loc 1 6970 76 view .LVU139
 457 00f0 0243     		orrs	r2, r2, r0
 458 00f2 2ED1     		bne	.L22
 459              	.LVL33:
 460              		.loc 1 6970 76 view .LVU140
 461              	.LBE167:
 462              	.LBE166:
 617:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 463              		.loc 2 617 5 is_stmt 1 view .LVU141
 621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 464              		.loc 2 621 7 view .LVU142
 625:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 465              		.loc 2 625 7 view .LVU143
 466 00f4 D868     		ldr	r0, [r3, #12]
 467              	.LVL34:
 623:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 468              		.loc 2 623 18 is_stmt 0 view .LVU144
 469 00f6 94F83820 		ldrb	r2, [r4, #56]	@ zero_extendqisi2
 622:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 470              		.loc 2 622 18 view .LVU145
 471 00fa 257F     		ldrb	r5, [r4, #28]	@ zero_extendqisi2
 627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 472              		.loc 2 627 21 view .LVU146
 473 00fc 2669     		ldr	r6, [r4, #16]
 623:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 474              		.loc 2 623 18 view .LVU147
 475 00fe 5200     		lsls	r2, r2, #1
 625:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 476              		.loc 2 625 7 view .LVU148
 477 0100 20F48040 		bic	r0, r0, #16384
 621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 478              		.loc 2 621 15 view .LVU149
 479 0104 42EA8532 		orr	r2, r2, r5, lsl #14
 625:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 480              		.loc 2 625 7 view .LVU150
 481 0108 20F00200 		bic	r0, r0, #2
 482 010c 0243     		orrs	r2, r2, r0
 483 010e DA60     		str	r2, [r3, #12]
 627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 484              		.loc 2 627 7 is_stmt 1 view .LVU151
 485 0110 324D     		ldr	r5, .L41+12
 629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 486              		.loc 2 629 9 is_stmt 0 view .LVU152
 487 0112 1869     		ldr	r0, [r3, #16]
 627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 488              		.loc 2 627 10 view .LVU153
 489 0114 002E     		cmp	r6, #0
 490 0116 4BD0     		beq	.L23
 629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 491              		.loc 2 629 9 is_stmt 1 view .LVU154
 492 0118 40F48030 		orr	r0, r0, #65536
 493 011c 1861     		str	r0, [r3, #16]
 630:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 494              		.loc 2 630 9 view .LVU155
 495 011e D3F8C020 		ldr	r2, [r3, #192]
 496 0122 2A40     		ands	r2, r2, r5
 497 0124 3243     		orrs	r2, r2, r6
 498              	.L38:
 635:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 499              		.loc 2 635 9 is_stmt 0 view .LVU156
 500 0126 C3F8C020 		str	r2, [r3, #192]
 638:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 501              		.loc 2 638 7 is_stmt 1 view .LVU157
 638:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 502              		.loc 2 638 10 is_stmt 0 view .LVU158
 503 012a 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 504 012e 012A     		cmp	r2, #1
 505 0130 45D1     		bne	.L25
 640:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 506              		.loc 2 640 9 is_stmt 1 view .LVU159
 641:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 507              		.loc 2 641 9 view .LVU160
 642:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 508              		.loc 2 642 9 view .LVU161
 643:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 509              		.loc 2 643 9 view .LVU162
 650:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_OVSR  |
 510              		.loc 2 650 9 view .LVU163
 511 0132 1869     		ldr	r0, [r3, #16]
 512 0134 D4E91125 		ldrd	r2, r5, [r4, #68]
 513 0138 20F4FF60 		bic	r0, r0, #2040
 514 013c 20F00400 		bic	r0, r0, #4
 515 0140 2A43     		orrs	r2, r2, r5
 516 0142 0243     		orrs	r2, r2, r0
 517 0144 E06C     		ldr	r0, [r4, #76]
 518 0146 0243     		orrs	r2, r2, r0
 519 0148 206D     		ldr	r0, [r4, #80]
 520 014a 0243     		orrs	r2, r2, r0
 521 014c 42F00102 		orr	r2, r2, #1
 522              	.L39:
 665:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 523              		.loc 2 665 9 is_stmt 0 view .LVU164
 524 0150 1A61     		str	r2, [r3, #16]
 525              	.LVL35:
 526              	.L22:
 679:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 527              		.loc 2 679 5 is_stmt 1 view .LVU165
 679:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 528              		.loc 2 679 8 is_stmt 0 view .LVU166
 529 0152 6269     		ldr	r2, [r4, #20]
 530 0154 012A     		cmp	r2, #1
 682:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 531              		.loc 2 682 7 is_stmt 1 view .LVU167
 532 0156 05BF     		ittet	eq
 533 0158 186B     		ldreq	r0, [r3, #48]
 534 015a 226A     		ldreq	r2, [r4, #32]
 686:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 535              		.loc 2 686 7 is_stmt 0 view .LVU168
 536 015c 1A6B     		ldrne	r2, [r3, #48]
 682:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 537              		.loc 2 682 7 view .LVU169
 538 015e 02F1FF32 		addeq	r2, r2, #-1
 539 0162 06BF     		itte	eq
 540 0164 20F00F00 		biceq	r0, r0, #15
 541 0168 0243     		orreq	r2, r2, r0
 686:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 542              		.loc 2 686 7 is_stmt 1 view .LVU170
 543 016a 22F00F02 		bicne	r2, r2, #15
 544 016e 1A63     		str	r2, [r3, #48]
 691:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 545              		.loc 2 691 5 view .LVU171
 546 0170 E36D     		ldr	r3, [r4, #92]
 547 0172 23F00303 		bic	r3, r3, #3
 548 0176 43F00103 		orr	r3, r3, #1
 549 017a E365     		str	r3, [r4, #92]
 550              	.LVL36:
 551              	.L7:
 703:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 552              		.loc 2 703 1 is_stmt 0 view .LVU172
 553 017c 0846     		mov	r0, r1
 554 017e 02B0     		add	sp, sp, #8
 555              		.cfi_remember_state
 556              		.cfi_def_cfa_offset 16
 557              		@ sp needed
 558 0180 70BD     		pop	{r4, r5, r6, pc}
 559              	.LVL37:
 560              	.L10:
 561              		.cfi_restore_state
 499:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 562              		.loc 2 499 5 is_stmt 1 view .LVU173
 563              	.LBB168:
 564              	.LBI168:
6531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 565              		.loc 1 6531 22 view .LVU174
 566              	.LBB169:
6536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 567              		.loc 1 6536 3 view .LVU175
 568 0182 8368     		ldr	r3, [r0, #8]
 569              	.LBE169:
 570              	.LBE168:
 504:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 571              		.loc 2 504 69 is_stmt 0 view .LVU176
 572 0184 164A     		ldr	r2, .L41+16
 573              	.LBB171:
 574              	.LBB170:
6536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 575              		.loc 1 6536 3 view .LVU177
 576 0186 23F01043 		bic	r3, r3, #-1879048192
 577 018a 23F03F03 		bic	r3, r3, #63
 578 018e 43F08053 		orr	r3, r3, #268435456
 579 0192 8360     		str	r3, [r0, #8]
 580              	.LVL38:
6536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 581              		.loc 1 6536 3 view .LVU178
 582              	.LBE170:
 583              	.LBE171:
 504:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 584              		.loc 2 504 5 is_stmt 1 view .LVU179
 504:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 585              		.loc 2 504 69 is_stmt 0 view .LVU180
 586 0194 134B     		ldr	r3, .L41+20
 587 0196 1B68     		ldr	r3, [r3]
 588 0198 B3FBF2F3 		udiv	r3, r3, r2
 589              	.L37:
 507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 590              		.loc 2 507 22 view .LVU181
 591 019c 0193     		str	r3, [sp, #4]
 505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 592              		.loc 2 505 28 view .LVU182
 593 019e 019B     		ldr	r3, [sp, #4]
 505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 594              		.loc 2 505 11 view .LVU183
 595 01a0 002B     		cmp	r3, #0
 596 01a2 3FF449AF 		beq	.L15
 507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 597              		.loc 2 507 7 is_stmt 1 view .LVU184
 507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 598              		.loc 2 507 22 is_stmt 0 view .LVU185
 599 01a6 019B     		ldr	r3, [sp, #4]
 600 01a8 013B     		subs	r3, r3, #1
 601 01aa F7E7     		b	.L37
 602              	.LVL39:
 603              	.L29:
 406:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpCFGR;
 604              		.loc 2 406 21 view .LVU186
 605 01ac 0021     		movs	r1, #0
 606 01ae 50E7     		b	.L11
 607              	.LVL40:
 608              	.L23:
 634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 609              		.loc 2 634 9 is_stmt 1 view .LVU187
 610 01b0 20F48030 		bic	r0, r0, #65536
 611 01b4 1861     		str	r0, [r3, #16]
 635:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 612              		.loc 2 635 9 view .LVU188
 613 01b6 D3F8C020 		ldr	r2, [r3, #192]
 614 01ba 2A40     		ands	r2, r2, r5
 615 01bc B3E7     		b	.L38
 616              	.L25:
 665:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 617              		.loc 2 665 9 view .LVU189
 618 01be 1A69     		ldr	r2, [r3, #16]
 619 01c0 22F00102 		bic	r2, r2, #1
 620 01c4 C4E7     		b	.L39
 621              	.LVL41:
 622              	.L16:
 696:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 623              		.loc 2 696 5 view .LVU190
 624 01c6 43F01003 		orr	r3, r3, #16
 625 01ca E365     		str	r3, [r4, #92]
 698:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 626              		.loc 2 698 5 view .LVU191
 627              	.LVL42:
 628              	.L28:
 416:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 629              		.loc 2 416 12 is_stmt 0 view .LVU192
 630 01cc 0121     		movs	r1, #1
 631 01ce D5E7     		b	.L7
 632              	.L42:
 633              		.align	2
 634              	.L41:
 635 01d0 00010050 		.word	1342177536
 636 01d4 00030050 		.word	1342178048
 637 01d8 0740F0FF 		.word	-1032185
 638 01dc 00C0FFFF 		.word	-16384
 639 01e0 400D0300 		.word	200000
 640 01e4 00000000 		.word	SystemCoreClock
 641              		.cfi_endproc
 642              	.LFE325:
 644              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 645              		.align	1
 646              		.weak	HAL_ADC_MspDeInit
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu fpv4-sp-d16
 652              	HAL_ADC_MspDeInit:
 653              	.LFB358:
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
 657              		@ link register save eliminated.
 658 0000 7047     		bx	lr
 659              		.cfi_endproc
 660              	.LFE358:
 662              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 663              		.align	1
 664              		.global	HAL_ADC_PollForConversion
 665              		.syntax unified
 666              		.thumb
 667              		.thumb_func
 668              		.fpu fpv4-sp-d16
 670              	HAL_ADC_PollForConversion:
 671              	.LVL43:
 672              	.LFB331:
 934:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 935:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 936:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 937:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 938:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
 939:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 940:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
 941:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 942:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
 943:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 944:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 945:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
 946:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 947:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 948:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 949:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****    */
 950:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 951:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 952:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 953:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
 954:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 955:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 956:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 957:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 958:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 959:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         This parameter can be one of the following values:
 960:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 961:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 962:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 963:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 964:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 965:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 966:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
 967:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
 968:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
 969:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 970:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 971:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 972:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 973:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 974:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 975:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
 976:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 977:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 978:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 979:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 980:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (pCallback == NULL)
 981:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 982:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update the error code */
 983:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 984:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 985:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 986:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 987:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 988:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 989:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 990:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
 991:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 992:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 993:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 994:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
 995:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 996:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 997:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 998:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
 999:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1000:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1001:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
1002:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1003:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1004:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
1006:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1007:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1008:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1009:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
1010:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1011:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1012:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1013:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = pCallback;
1014:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1015:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1016:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1017:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
1018:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1019:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1020:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1021:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
1022:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1023:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1024:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1025:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
1026:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1027:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1028:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1029:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1030:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1031:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1034:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1035:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1036:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       default :
1037:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1038:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1039:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1040:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Return error status */
1041:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         status = HAL_ERROR;
1042:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1043:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1044:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1045:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1048:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1049:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1050:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1051:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1052:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1053:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1054:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1055:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1056:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       default :
1058:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1059:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1060:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1061:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Return error status */
1062:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         status = HAL_ERROR;
1063:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1064:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1065:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1066:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1067:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1068:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update the error code */
1069:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1070:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1071:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Return error status */
1072:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     status =  HAL_ERROR;
1073:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1074:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1075:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return status;
1076:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1077:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1078:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1079:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1080:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1081:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1082:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1083:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1084:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         This parameter can be one of the following values:
1085:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1086:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1087:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1088:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1089:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1090:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1091:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1092:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1093:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1094:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1095:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1096:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
1097:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
1098:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1099:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1100:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1101:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
1102:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1103:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1104:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1106:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1107:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1108:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1109:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1111:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1113:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1115:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1116:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1119:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1120:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1121:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1122:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1123:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1124:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1126:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1127:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1128:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;
1130:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1131:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1132:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1134:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1135:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1136:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1137:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1138:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1139:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1140:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1141:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1142:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1143:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1144:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1145:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1147:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1148:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1149:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1150:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1151:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1152:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       default :
1153:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1154:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1155:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1156:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Return error status */
1157:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         status =  HAL_ERROR;
1158:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1159:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1160:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1161:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1162:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1163:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1164:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1165:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1168:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1169:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1170:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1172:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1173:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       default :
1174:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1175:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1176:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1177:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Return error status */
1178:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         status =  HAL_ERROR;
1179:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
1180:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1182:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1183:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update the error code */
1185:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1186:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Return error status */
1188:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     status =  HAL_ERROR;
1189:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1190:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1191:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return status;
1192:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1193:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1194:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1195:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1196:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1197:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
1198:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1199:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1200:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1201:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief    ADC IO operation functions
1202:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
1203:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @verbatim
1204:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
1205:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                       ##### IO operation functions #####
1206:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
1207:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1208:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group.
1209:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group.
1210:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1211:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Poll for conversion event.
1212:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1213:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1214:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1215:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Handle ADC interrupt request
1216:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1217:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1218:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @endverbatim
1219:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
1220:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1221:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1222:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1223:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1224:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1225:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1226:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           if ADC is Slave, ADC is enabled but conversion is not started,
1227:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           if ADC is master, ADC is enabled and multimode conversion is started.
1228:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1229:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1230:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1231:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1232:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
1233:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1234:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1235:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1236:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1237:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1238:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1239:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1240:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1241:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1242:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1244:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1245:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Process locked */
1246:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
1247:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1248:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
1249:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1250:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1251:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1252:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1253:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1254:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state                                                        */
1255:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1256:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1258:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1259:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1260:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1261:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1262:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1263:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1264:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1266:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1267:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
1268:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1269:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1270:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1271:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1272:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1273:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code */
1274:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1276:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1277:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1278:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1279:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1280:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1281:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1282:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset all ADC error code fields */
1283:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1284:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1285:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1286:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1288:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1289:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1290:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1294:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1295:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1297:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1298:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* trigger event.                                                       */
1299:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1300:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1302:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1303:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1305:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1306:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1307:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
1309:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1310:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1312:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
1313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1314:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
1315:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1316:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
1317:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
1318:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1319:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1320:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1321:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1323:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
1324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
1325:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
1326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
1327:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
1328:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
1330:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1331:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1332:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
1333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1334:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1335:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1336:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1337:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1338:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Start ADC group regular conversion */
1339:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1340:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1341:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
1343:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1344:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1346:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1347:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1348:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1349:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1351:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1352:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1353:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1354:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
1355:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1356:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1357:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1358:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1360:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1362:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1363:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1364:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
1365:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1366:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1367:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
1368:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1369:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1370:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1372:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1373:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process locked */
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1375:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1376:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1377:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
1378:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1379:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1381:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1382:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1383:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1384:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1385:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1388:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1390:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1391:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1392:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1393:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1394:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1395:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
1396:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1397:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1398:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1399:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
1400:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1401:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1402:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1403:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1404:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1405:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1406:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1407:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1408:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1409:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1410:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1411:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1412:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1413:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1415:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1416:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1418:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1419:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1420:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1421:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 673              		.loc 2 1421 1 is_stmt 1 view -0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 0
 676              		@ frame_needed = 0, uses_anonymous_args = 0
1422:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 677              		.loc 2 1422 3 view .LVU194
1423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_Flag_End;
 678              		.loc 2 1423 3 view .LVU195
1424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_cfgr;
 679              		.loc 2 1424 3 view .LVU196
1425:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1426:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
 680              		.loc 2 1426 3 view .LVU197
1427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 681              		.loc 2 1427 3 view .LVU198
 682              	.LBB178:
 683              	.LBI178:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 684              		.loc 1 6284 26 view .LVU199
 685              	.LBB179:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 686              		.loc 1 6286 3 view .LVU200
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 687              		.loc 1 6286 21 is_stmt 0 view .LVU201
 688 0000 374B     		ldr	r3, .L74
 689              	.LBE179:
 690              	.LBE178:
1421:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 691              		.loc 2 1421 1 view .LVU202
 692 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 693              		.cfi_def_cfa_offset 24
 694              		.cfi_offset 4, -24
 695              		.cfi_offset 5, -20
 696              		.cfi_offset 6, -16
 697              		.cfi_offset 7, -12
 698              		.cfi_offset 8, -8
 699              		.cfi_offset 14, -4
1428:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1429:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1431:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1432:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1433:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1434:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 700              		.loc 2 1434 6 view .LVU203
 701 0006 8569     		ldr	r5, [r0, #24]
 702              	.LBB182:
 703              	.LBB180:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 704              		.loc 1 6286 21 view .LVU204
 705 0008 9E68     		ldr	r6, [r3, #8]
 706              	.LBE180:
 707              	.LBE182:
 708              		.loc 2 1434 6 view .LVU205
 709 000a 082D     		cmp	r5, #8
1421:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 710              		.loc 2 1421 1 view .LVU206
 711 000c 0446     		mov	r4, r0
 712 000e 0F46     		mov	r7, r1
 713              	.LBB183:
 714              	.LBB181:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 715              		.loc 1 6286 10 view .LVU207
 716 0010 06F01F06 		and	r6, r6, #31
 717              	.LVL44:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 718              		.loc 1 6286 10 view .LVU208
 719              	.LBE181:
 720              	.LBE183:
1431:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 721              		.loc 2 1431 3 is_stmt 1 view .LVU209
 722              		.loc 2 1434 3 view .LVU210
 723              		.loc 2 1434 6 is_stmt 0 view .LVU211
 724 0014 17D0     		beq	.L45
1435:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1436:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
1437:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1438:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1439:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1441:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1442:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* each conversion:                                                       */
1443:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1445:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1446:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1447:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1448:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 725              		.loc 2 1448 5 is_stmt 1 view .LVU212
 726              		.loc 2 1448 8 is_stmt 0 view .LVU213
 727 0016 092E     		cmp	r6, #9
 728 0018 10D8     		bhi	.L46
 729 001a 40F22122 		movw	r2, #545
 730 001e F240     		lsrs	r2, r2, r6
 731 0020 D107     		lsls	r1, r2, #31
 732              	.LVL45:
 733              		.loc 2 1448 8 view .LVU214
 734 0022 0BD5     		bpl	.L46
1449:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1450:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
1452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1453:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check ADC DMA mode in independent mode on ADC group regular */
1454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 735              		.loc 2 1454 7 is_stmt 1 view .LVU215
 736              		.loc 2 1454 11 is_stmt 0 view .LVU216
 737 0024 0368     		ldr	r3, [r0]
 738 0026 DB68     		ldr	r3, [r3, #12]
 739              		.loc 2 1454 10 view .LVU217
 740 0028 13F0010F 		tst	r3, #1
 741              	.L73:
1455:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1456:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1457:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
1458:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1460:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1461:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
1462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1463:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
1465:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1466:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check ADC DMA mode in multimode on ADC group regular */
1467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_
 742              		.loc 2 1467 10 view .LVU218
 743 002c 0AD0     		beq	.L62
1468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1469:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 744              		.loc 2 1469 9 is_stmt 1 view .LVU219
 745 002e E36D     		ldr	r3, [r4, #92]
 746 0030 43F02003 		orr	r3, r3, #32
 747 0034 E365     		str	r3, [r4, #92]
1470:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 748              		.loc 2 1470 9 view .LVU220
 749              		.loc 2 1470 16 is_stmt 0 view .LVU221
 750 0036 0120     		movs	r0, #1
 751              	.LVL46:
 752              	.L70:
1471:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1472:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1473:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1474:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
1475:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1476:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1477:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
1478:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check ADC DMA mode */
1479:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
1480:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1481:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
1483:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1484:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
1485:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_Flag_End = (ADC_FLAG_EOC);
1487:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1488:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1489:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1490:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Get tick count */
1492:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tickstart = HAL_GetTick();
1493:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1494:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
1496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1497:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
1499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
1501:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1502:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1503:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1504:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
1506:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1507:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_TIMEOUT;
1509:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1510:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1511:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1512:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1513:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Update ADC state machine */
1514:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1515:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1516:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1518:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
1519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
1520:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
1521:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1524:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1525:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1526:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1527:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
1529:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1530:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1532:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1533:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1534:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1535:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave        */
1536:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* in function of multimode state (for devices with multimode               */
1537:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* available).                                                              */
1538:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1541:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1542:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1543:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
1544:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1545:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Retrieve handle ADC CFGR register */
1546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1548:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1549:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1550:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Retrieve Master ADC CFGR register */
1551:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
1552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
1553:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1554:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
1555:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve handle ADC CFGR register */
1556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1557:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1558:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1559:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Clear polled flag */
1560:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (tmp_Flag_End == ADC_FLAG_EOS)
1561:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
1563:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1564:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1565:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1566:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear end of conversion EOC flag of regular group if low power feature */
1567:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
1568:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* until data register is read using function HAL_ADC_GetValue().         */
1569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
1570:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1571:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1572:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1574:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1575:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1576:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
1577:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 753              		.loc 2 1577 1 view .LVU222
 754 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 755              	.LVL47:
 756              	.L46:
1467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 757              		.loc 2 1467 7 is_stmt 1 view .LVU223
 758              	.LBB184:
 759              	.LBI184:
6381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 760              		.loc 1 6381 26 view .LVU224
 761              	.LBB185:
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 762              		.loc 1 6383 3 view .LVU225
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 763              		.loc 1 6383 21 is_stmt 0 view .LVU226
 764 003c 9B68     		ldr	r3, [r3, #8]
 765              	.LVL48:
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 766              		.loc 1 6383 21 view .LVU227
 767              	.LBE185:
 768              	.LBE184:
1467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 769              		.loc 2 1467 10 view .LVU228
 770 003e 13F4604F 		tst	r3, #57344
 771 0042 F3E7     		b	.L73
 772              	.L62:
1461:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 773              		.loc 2 1461 22 view .LVU229
 774 0044 0425     		movs	r5, #4
 775              	.L45:
 776              	.LVL49:
1492:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 777              		.loc 2 1492 3 is_stmt 1 view .LVU230
1492:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 778              		.loc 2 1492 15 is_stmt 0 view .LVU231
 779 0046 FFF7FEFF 		bl	HAL_GetTick
 780              	.LVL50:
1492:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 781              		.loc 2 1492 15 view .LVU232
 782 004a 8046     		mov	r8, r0
 783              	.LVL51:
1495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 784              		.loc 2 1495 3 is_stmt 1 view .LVU233
 785              	.L48:
1495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 786              		.loc 2 1495 15 is_stmt 0 view .LVU234
 787 004c 2368     		ldr	r3, [r4]
 788              	.L49:
1495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 789              		.loc 2 1495 25 view .LVU235
 790 004e 1A68     		ldr	r2, [r3]
1495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 791              		.loc 2 1495 9 view .LVU236
 792 0050 2A42     		tst	r2, r5
 793 0052 20D0     		beq	.L51
1514:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 794              		.loc 2 1514 3 is_stmt 1 view .LVU237
 795 0054 E26D     		ldr	r2, [r4, #92]
 796 0056 42F40072 		orr	r2, r2, #512
 797 005a E265     		str	r2, [r4, #92]
1518:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 798              		.loc 2 1518 3 view .LVU238
 799              	.LVL52:
 800              	.LBB186:
 801              	.LBI186:
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 802              		.loc 1 3649 26 view .LVU239
 803              	.LBB187:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 804              		.loc 1 3651 3 view .LVU240
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 805              		.loc 1 3651 12 is_stmt 0 view .LVU241
 806 005c DA68     		ldr	r2, [r3, #12]
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 807              		.loc 1 3651 103 view .LVU242
 808 005e 12F4406F 		tst	r2, #3072
 809 0062 0FD1     		bne	.L53
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 810              		.loc 1 3651 103 view .LVU243
 811              	.LBE187:
 812              	.LBE186:
1519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
 813              		.loc 2 1519 7 view .LVU244
 814 0064 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 815 0066 6AB9     		cbnz	r2, .L53
1523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 816              		.loc 2 1523 5 is_stmt 1 view .LVU245
1523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 817              		.loc 2 1523 9 is_stmt 0 view .LVU246
 818 0068 1A68     		ldr	r2, [r3]
1523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 819              		.loc 2 1523 8 view .LVU247
 820 006a 1007     		lsls	r0, r2, #28
 821 006c 0AD5     		bpl	.L53
1526:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 822              		.loc 2 1526 7 is_stmt 1 view .LVU248
 823 006e E26D     		ldr	r2, [r4, #92]
 824 0070 22F48072 		bic	r2, r2, #256
 825 0074 E265     		str	r2, [r4, #92]
1528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 826              		.loc 2 1528 7 view .LVU249
1528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 827              		.loc 2 1528 16 is_stmt 0 view .LVU250
 828 0076 E26D     		ldr	r2, [r4, #92]
1528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 829              		.loc 2 1528 10 view .LVU251
 830 0078 D104     		lsls	r1, r2, #19
1530:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 831              		.loc 2 1530 9 is_stmt 1 view .LVU252
 832 007a 5EBF     		ittt	pl
 833 007c E26D     		ldrpl	r2, [r4, #92]
 834 007e 42F00102 		orrpl	r2, r2, #1
 835 0082 E265     		strpl	r2, [r4, #92]
 836              	.L53:
1539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 837              		.loc 2 1539 3 view .LVU253
1539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 838              		.loc 2 1539 8 is_stmt 0 view .LVU254
 839 0084 174A     		ldr	r2, .L74+4
 840 0086 9342     		cmp	r3, r2
 841 0088 1ED0     		beq	.L55
 842              	.LVL53:
 843              	.L59:
1546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 844              		.loc 2 1546 5 is_stmt 1 view .LVU255
1546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 845              		.loc 2 1546 14 is_stmt 0 view .LVU256
 846 008a D868     		ldr	r0, [r3, #12]
 847              	.LVL54:
 848              	.L56:
1560:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 849              		.loc 2 1560 3 is_stmt 1 view .LVU257
1560:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 850              		.loc 2 1560 6 is_stmt 0 view .LVU258
 851 008c 082D     		cmp	r5, #8
 852 008e 15D1     		bne	.L57
1562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 853              		.loc 2 1562 5 is_stmt 1 view .LVU259
 854 0090 1D60     		str	r5, [r3]
 855              	.LVL55:
 856              	.L63:
1576:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 857              		.loc 2 1576 10 is_stmt 0 view .LVU260
 858 0092 0020     		movs	r0, #0
 859 0094 D0E7     		b	.L70
 860              	.LVL56:
 861              	.L51:
1498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 862              		.loc 2 1498 5 is_stmt 1 view .LVU261
1498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 863              		.loc 2 1498 8 is_stmt 0 view .LVU262
 864 0096 7A1C     		adds	r2, r7, #1
 865 0098 D9D0     		beq	.L49
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 866              		.loc 2 1500 7 is_stmt 1 view .LVU263
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 867              		.loc 2 1500 13 is_stmt 0 view .LVU264
 868 009a FFF7FEFF 		bl	HAL_GetTick
 869              	.LVL57:
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 870              		.loc 2 1500 27 view .LVU265
 871 009e A0EB0800 		sub	r0, r0, r8
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 872              		.loc 2 1500 10 view .LVU266
 873 00a2 B842     		cmp	r0, r7
 874 00a4 01D8     		bhi	.L50
1500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 875              		.loc 2 1500 51 discriminator 1 view .LVU267
 876 00a6 002F     		cmp	r7, #0
 877 00a8 D0D1     		bne	.L48
 878              	.L50:
1503:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 879              		.loc 2 1503 9 is_stmt 1 view .LVU268
 880 00aa E36D     		ldr	r3, [r4, #92]
 881 00ac 43F00403 		orr	r3, r3, #4
 882 00b0 E365     		str	r3, [r4, #92]
1506:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 883              		.loc 2 1506 9 view .LVU269
1506:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 884              		.loc 2 1506 9 view .LVU270
 885 00b2 0023     		movs	r3, #0
 886 00b4 84F85830 		strb	r3, [r4, #88]
1508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 887              		.loc 2 1508 9 view .LVU271
1508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 888              		.loc 2 1508 16 is_stmt 0 view .LVU272
 889 00b8 0320     		movs	r0, #3
 890 00ba BDE7     		b	.L70
 891              	.LVL58:
 892              	.L57:
1569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 893              		.loc 2 1569 5 is_stmt 1 view .LVU273
1569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 894              		.loc 2 1569 8 is_stmt 0 view .LVU274
 895 00bc 10F48040 		ands	r0, r0, #16384
 896              	.LVL59:
1569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 897              		.loc 2 1569 8 view .LVU275
 898 00c0 E7D1     		bne	.L63
1571:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 899              		.loc 2 1571 7 is_stmt 1 view .LVU276
 900 00c2 0C22     		movs	r2, #12
 901 00c4 1A60     		str	r2, [r3]
 902 00c6 B7E7     		b	.L70
 903              	.LVL60:
 904              	.L55:
1540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 905              		.loc 2 1540 7 is_stmt 0 view .LVU277
 906 00c8 092E     		cmp	r6, #9
 907 00ca 05D8     		bhi	.L58
 908 00cc 40F22122 		movw	r2, #545
 909 00d0 22FA06F6 		lsr	r6, r2, r6
 910              	.LVL61:
1540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 911              		.loc 2 1540 7 view .LVU278
 912 00d4 F207     		lsls	r2, r6, #31
 913 00d6 D8D4     		bmi	.L59
 914              	.L58:
1551:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 915              		.loc 2 1551 5 is_stmt 1 discriminator 4 view .LVU279
 916              	.LVL62:
1552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 917              		.loc 2 1552 5 discriminator 4 view .LVU280
1552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 918              		.loc 2 1552 14 is_stmt 0 discriminator 4 view .LVU281
 919 00d8 4FF0A042 		mov	r2, #1342177280
 920 00dc D068     		ldr	r0, [r2, #12]
 921              	.LVL63:
1552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 922              		.loc 2 1552 14 discriminator 4 view .LVU282
 923 00de D5E7     		b	.L56
 924              	.L75:
 925              		.align	2
 926              	.L74:
 927 00e0 00030050 		.word	1342178048
 928 00e4 00010050 		.word	1342177536
 929              		.cfi_endproc
 930              	.LFE331:
 932              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 933              		.align	1
 934              		.global	HAL_ADC_PollForEvent
 935              		.syntax unified
 936              		.thumb
 937              		.thumb_func
 938              		.fpu fpv4-sp-d16
 940              	HAL_ADC_PollForEvent:
 941              	.LVL64:
 942              	.LFB332:
1578:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1579:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1580:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Poll for ADC event.
1581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1582:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param EventType the ADC event type.
1583:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          This parameter can be one of the following values:
1584:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1586:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1588:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1589:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_JQOVF_EVENT  ADC Injected context queue overflow event
1590:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1591:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1592:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1593:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1594:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1596:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1599:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1600:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 943              		.loc 2 1600 1 is_stmt 1 view -0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
1601:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 947              		.loc 2 1601 3 view .LVU284
1602:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1603:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1604:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 948              		.loc 2 1604 3 view .LVU285
1605:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 949              		.loc 2 1605 3 view .LVU286
1606:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1607:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Get tick count */
1608:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 950              		.loc 2 1608 3 view .LVU287
1600:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 951              		.loc 2 1600 1 is_stmt 0 view .LVU288
 952 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 953              		.cfi_def_cfa_offset 24
 954              		.cfi_offset 3, -24
 955              		.cfi_offset 4, -20
 956              		.cfi_offset 5, -16
 957              		.cfi_offset 6, -12
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
1600:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 960              		.loc 2 1600 1 view .LVU289
 961 0002 0446     		mov	r4, r0
 962 0004 0D46     		mov	r5, r1
 963 0006 1646     		mov	r6, r2
 964              		.loc 2 1608 15 view .LVU290
 965 0008 FFF7FEFF 		bl	HAL_GetTick
 966              	.LVL65:
 967              		.loc 2 1608 15 view .LVU291
 968 000c 0746     		mov	r7, r0
 969              	.LVL66:
1609:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1610:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check selected event flag */
1611:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 970              		.loc 2 1611 3 is_stmt 1 view .LVU292
 971              	.L77:
 972              		.loc 2 1611 10 is_stmt 0 view .LVU293
 973 000e 2368     		ldr	r3, [r4]
 974              	.L78:
 975 0010 1A68     		ldr	r2, [r3]
 976              		.loc 2 1611 9 view .LVU294
 977 0012 35EA0202 		bics	r2, r5, r2
 978 0016 13D1     		bne	.L81
1612:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1613:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1614:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
1615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
1617:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1618:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1619:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
1620:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
1622:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
1623:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1624:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_TIMEOUT;
1625:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1626:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1628:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   switch (EventType)
 979              		.loc 2 1629 3 is_stmt 1 view .LVU295
 980 0018 B5F5807F 		cmp	r5, #256
 981 001c 3CD0     		beq	.L82
 982 001e 21D8     		bhi	.L83
 983 0020 022D     		cmp	r5, #2
 984 0022 2ED0     		beq	.L84
 985 0024 802D     		cmp	r5, #128
 986 0026 33D0     		beq	.L85
 987              	.L86:
1630:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1631:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* End Of Sampling event */
1632:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1633:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1635:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1636:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1637:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1638:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1639:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1640:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1641:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1642:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1643:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1644:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1645:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* For example:                                                             */
1646:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1647:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1648:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1649:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1650:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1651:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     case ADC_AWD_EVENT:
1652:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1653:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1654:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1655:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1656:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
1657:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1658:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1659:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1660:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1661:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1662:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1663:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
1664:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1665:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1666:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1667:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1668:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1669:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1670:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1671:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1672:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1673:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
1674:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1675:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1676:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
1677:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1678:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1679:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1680:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Injected context queue overflow event */
1681:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     case ADC_JQOVF_EVENT:
1682:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1683:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
1684:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1685:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to Injected context queue overflow */
1686:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
1687:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1688:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC Injected context queue overflow flag */
1689:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
1690:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1691:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1692:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1693:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Overrun event */
1694:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1695:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1696:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* considered as an error.                                                */
1697:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1698:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* overrun ")                                                             */
1699:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 988              		.loc 2 1699 7 view .LVU296
 989              		.loc 2 1699 10 is_stmt 0 view .LVU297
 990 0028 E06B     		ldr	r0, [r4, #60]
 991 002a 0028     		cmp	r0, #0
 992 002c 3CD1     		bne	.L89
1700:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1701:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC state */
1702:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 993              		.loc 2 1702 9 is_stmt 1 view .LVU298
 994 002e E36D     		ldr	r3, [r4, #92]
 995 0030 43F48063 		orr	r3, r3, #1024
 996 0034 E365     		str	r3, [r4, #92]
1703:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1704:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to overrun */
1705:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 997              		.loc 2 1705 9 view .LVU299
 998 0036 236E     		ldr	r3, [r4, #96]
 999 0038 43F00203 		orr	r3, r3, #2
 1000 003c 2366     		str	r3, [r4, #96]
 1001 003e 10E0     		b	.L80
 1002              	.L81:
1614:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1003              		.loc 2 1614 5 view .LVU300
1614:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1004              		.loc 2 1614 8 is_stmt 0 view .LVU301
 1005 0040 721C     		adds	r2, r6, #1
 1006 0042 E5D0     		beq	.L78
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1007              		.loc 2 1616 7 is_stmt 1 view .LVU302
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1008              		.loc 2 1616 13 is_stmt 0 view .LVU303
 1009 0044 FFF7FEFF 		bl	HAL_GetTick
 1010              	.LVL67:
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1011              		.loc 2 1616 27 view .LVU304
 1012 0048 C01B     		subs	r0, r0, r7
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1013              		.loc 2 1616 10 view .LVU305
 1014 004a B042     		cmp	r0, r6
 1015 004c 01D8     		bhi	.L79
1616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1016              		.loc 2 1616 51 discriminator 1 view .LVU306
 1017 004e 002E     		cmp	r6, #0
 1018 0050 DDD1     		bne	.L77
 1019              	.L79:
1619:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1020              		.loc 2 1619 9 is_stmt 1 view .LVU307
 1021 0052 E36D     		ldr	r3, [r4, #92]
 1022 0054 43F00403 		orr	r3, r3, #4
 1023 0058 E365     		str	r3, [r4, #92]
1622:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1024              		.loc 2 1622 9 view .LVU308
1622:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1025              		.loc 2 1622 9 view .LVU309
 1026 005a 0023     		movs	r3, #0
 1027 005c 84F85830 		strb	r3, [r4, #88]
1624:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1028              		.loc 2 1624 9 view .LVU310
1624:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1029              		.loc 2 1624 16 is_stmt 0 view .LVU311
 1030 0060 0320     		movs	r0, #3
 1031              	.L80:
1706:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1707:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1708:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1709:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1710:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1711:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            as OVR is cleared. */
1712:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1713:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1714:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       break;
1715:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1716:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1717:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1718:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
1719:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1032              		.loc 2 1719 1 view .LVU312
 1033 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1034              	.LVL68:
 1035              	.L83:
1629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1036              		.loc 2 1629 3 view .LVU313
 1037 0064 B5F5007F 		cmp	r5, #512
 1038 0068 1AD0     		beq	.L87
 1039 006a B5F5806F 		cmp	r5, #1024
 1040 006e DBD1     		bne	.L86
1683:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1041              		.loc 2 1683 7 is_stmt 1 view .LVU314
 1042 0070 E26D     		ldr	r2, [r4, #92]
 1043 0072 42F48042 		orr	r2, r2, #16384
 1044 0076 E265     		str	r2, [r4, #92]
1686:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1045              		.loc 2 1686 7 view .LVU315
 1046 0078 226E     		ldr	r2, [r4, #96]
 1047 007a 42F00802 		orr	r2, r2, #8
 1048 007e 2266     		str	r2, [r4, #96]
1689:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1049              		.loc 2 1689 7 view .LVU316
 1050 0080 03E0     		b	.L95
 1051              	.L84:
1634:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1052              		.loc 2 1634 7 view .LVU317
 1053 0082 E26D     		ldr	r2, [r4, #92]
 1054 0084 42F40062 		orr	r2, r2, #2048
 1055              	.L94:
1663:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1056              		.loc 2 1663 7 is_stmt 0 view .LVU318
 1057 0088 E265     		str	r2, [r4, #92]
 1058              	.L95:
1666:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1059              		.loc 2 1666 7 is_stmt 1 view .LVU319
 1060 008a 1D60     		str	r5, [r3]
1668:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1061              		.loc 2 1668 7 view .LVU320
 1062              	.L93:
1718:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1063              		.loc 2 1718 10 is_stmt 0 view .LVU321
 1064 008c 0020     		movs	r0, #0
 1065 008e E8E7     		b	.L80
 1066              	.L85:
1653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1067              		.loc 2 1653 7 is_stmt 1 view .LVU322
 1068 0090 E26D     		ldr	r2, [r4, #92]
 1069 0092 42F48032 		orr	r2, r2, #65536
 1070 0096 F7E7     		b	.L94
 1071              	.L82:
1663:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1072              		.loc 2 1663 7 view .LVU323
 1073 0098 E26D     		ldr	r2, [r4, #92]
 1074 009a 42F40032 		orr	r2, r2, #131072
 1075 009e F3E7     		b	.L94
 1076              	.L87:
1673:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1077              		.loc 2 1673 7 view .LVU324
 1078 00a0 E26D     		ldr	r2, [r4, #92]
 1079 00a2 42F48022 		orr	r2, r2, #262144
 1080 00a6 EFE7     		b	.L94
 1081              	.L89:
1712:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1082              		.loc 2 1712 9 view .LVU325
 1083 00a8 1022     		movs	r2, #16
 1084 00aa 1A60     		str	r2, [r3]
 1085 00ac EEE7     		b	.L93
 1086              		.cfi_endproc
 1087              	.LFE332:
 1089              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1090              		.align	1
 1091              		.global	HAL_ADC_GetValue
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu fpv4-sp-d16
 1097              	HAL_ADC_GetValue:
 1098              	.LVL69:
 1099              	.LFB337:
1720:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1721:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1722:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1723:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1724:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1725:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         OVR overrun.
1726:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1727:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1728:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_Start_IT() must be called for ADC Slave first, then for
1729:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         ADC Master.
1730:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For ADC Slave, ADC is enabled only (conversion is not started).
1731:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For ADC Master, ADC is enabled and multimode conversion is started.
1732:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1733:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1734:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1735:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1736:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1737:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         mode), the user must:
1738:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1739:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1740:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1741:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1742:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1743:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1744:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1745:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
1746:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1747:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1748:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1749:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1750:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1751:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1752:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1753:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1754:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1755:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1757:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1758:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Process locked */
1759:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
1760:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1761:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
1762:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1763:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1764:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1765:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1766:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1767:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state                                                        */
1768:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1769:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1771:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1773:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1774:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1775:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1776:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1777:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1780:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
1781:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1782:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1783:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1784:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1785:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1786:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code */
1787:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1788:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
1789:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1790:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1791:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1792:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1793:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1794:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1795:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset all ADC error code fields */
1796:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1798:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1799:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1800:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1801:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1802:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1803:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1804:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1805:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1806:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1807:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1808:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1809:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1810:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1811:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
1813:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1814:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1815:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
1816:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
1817:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1818:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         default:
1819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1820:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
1821:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1822:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1823:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1824:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1825:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1826:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1828:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1829:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1830:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1831:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1832:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1833:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1834:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1835:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* trigger event.                                                       */
1836:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1837:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1838:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1839:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1840:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1841:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1843:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1844:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1845:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
1846:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1847:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1849:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
1850:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1851:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Enable as well injected interruptions in case
1853:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1854:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            allows to start regular and injected conversions when JAUTO is
1855:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            set with a single call to HAL_ADC_Start_IT() */
1856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
1857:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
1858:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1859:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
1861:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
1862:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
1863:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             default:
1864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
1865:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
1866:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
1867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
1868:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
1869:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1870:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
1871:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
1872:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1873:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
1874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1875:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1876:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1877:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
1878:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            are enabled nevertheless (for same reason as above) */
1879:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
1880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
1881:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
1882:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
1883:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              and in resetting HAL_ADC_STATE_INJ_EOC bit */
1884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
1886:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
1887:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
1888:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1890:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
1891:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
1892:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
1893:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             default:
1894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
1895:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
1896:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
1897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
1898:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
1899:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1900:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
1901:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* ADC instance is not a multimode slave instance with multimode regular conversions enabled 
1902:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
1904:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1905:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1906:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Enable as well injected interruptions in case
1907:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1908:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          allows to start regular and injected conversions when JAUTO is
1909:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          set with a single call to HAL_ADC_Start_IT() */
1910:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         switch (hadc->Init.EOCSelection)
1911:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
1912:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           case ADC_EOC_SEQ_CONV:
1913:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1914:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
1915:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             break;
1916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* case ADC_EOC_SINGLE_CONV */
1917:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           default:
1918:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
1919:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
1920:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             break;
1921:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
1922:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
1923:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1924:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Start ADC group regular conversion */
1925:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1926:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
1927:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1928:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
1929:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1930:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1932:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1933:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1934:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1935:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
1936:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1937:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1938:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1939:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1940:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1941:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
1942:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1943:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1944:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1945:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1946:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
1947:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1948:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1949:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
1950:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
1951:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
1952:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
1953:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1954:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1955:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1956:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1957:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1958:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process locked */
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
1960:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1961:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1962:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
1963:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1964:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1965:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1966:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
1967:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1968:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1969:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1970:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1971:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1972:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1973:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1974:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1975:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1976:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
1977:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1978:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1979:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1980:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1981:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
1982:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
1983:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1984:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
1985:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1986:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1987:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
1988:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
1989:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
1990:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
1991:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
1992:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1993:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1994:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
1995:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1996:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available): HAL_ADC_Start_DMA()
1997:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         is designed for single-ADC mode only. For multimode, the dedicated
1998:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         HAL_ADCEx_MultiModeStart_DMA() function must be used.
1999:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2000:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param pData Destination Buffer address.
2001:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
2002:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2003:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2004:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
2005:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2006:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2007:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2008:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2009:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2010:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2011:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2012:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2013:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2014:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2016:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2017:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Process locked */
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
2019:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2020:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2021:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Ensure that multimode regular conversions are not enabled.   */
2022:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
2023:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2024:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2025:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2026:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
2027:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2028:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2029:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Enable the ADC peripheral */
2030:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
2031:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Start conversion if ADC is effectively enabled */
2033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
2034:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2035:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC state                                                        */
2036:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* - Clear state bitfield related to regular group conversion results   */
2037:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* - Set state bitfield related to regular operation                    */
2038:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
2039:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2040:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY);
2041:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2042:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2043:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
2044:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           - if ADC instance is master or if multimode feature is not available
2045:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           - if multimode setting is disabled (ADC instance slave in independent mode) */
2046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2048:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            )
2049:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2050:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2051:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2052:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2053:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2054:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Check if a conversion is on going on ADC group injected */
2055:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
2056:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Reset ADC error code fields related to regular conversions only */
2058:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
2059:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2060:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         else
2061:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2062:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Reset all ADC error code fields */
2063:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           ADC_CLEAR_ERRORCODE(hadc);
2064:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2065:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2066:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set the DMA transfer complete callback */
2067:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
2068:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2069:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set the DMA half transfer complete callback */
2070:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
2071:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2072:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set the DMA error callback */
2073:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
2074:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2075:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2076:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start,     */
2077:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* ADC start (in case of SW start):                                   */
2078:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2079:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Clear regular group conversion flag and overrun flag               */
2080:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2081:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* operations)                                                        */
2082:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2083:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2084:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
2085:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2086:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2087:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2088:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2089:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* With DMA, overrun event is always considered as an error even if
2090:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
2091:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            ADC_IT_OVR is enabled. */
2092:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
2093:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2094:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Enable ADC DMA mode */
2095:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
2096:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2097:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Start the DMA channel */
2098:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_
2099:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2100:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Enable conversion of regular group.                                  */
2101:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* If software start has been selected, conversion starts immediately.  */
2102:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* If external trigger has been selected, conversion will start at next */
2103:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* trigger event.                                                       */
2104:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
2105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
2106:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2107:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2108:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2109:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
2110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2111:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2112:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2113:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2114:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2115:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
2116:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
2118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
2119:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
2120:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2121:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2122:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2123:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
2124:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
2126:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2127:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2128:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
2129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
2130:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2131:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2132:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2134:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
2135:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         ADC peripheral.
2136:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
2137:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         conversion on ADC group injected. If ADC group injected is under use, it
2138:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2139:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
2140:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_Stop_DMA() function is dedicated to single-ADC mode only.
2141:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
2142:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2143:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2144:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2145:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
2146:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2147:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2148:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2149:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2150:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2151:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2152:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process locked */
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
2154:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2155:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
2156:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
2157:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2158:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2159:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
2160:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2161:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
2162:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
2163:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2164:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
2165:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
2166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
2167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2168:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
2169:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2170:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
2171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
2172:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2173:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
2174:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2175:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2176:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2177:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2178:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2179:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
2180:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2182:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2183:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
2184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
2185:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
2187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2188:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
2189:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2190:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (void)ADC_Disable(hadc);
2191:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2192:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2193:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
2195:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2196:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2197:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
2198:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2199:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2200:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2201:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2202:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2203:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2204:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
2205:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2206:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2207:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
2208:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
2209:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2210:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2211:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2212:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
2213:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2214:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
2215:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
2216:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
2217:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
2218:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2219:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            to flag EOC.
2220:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
2221:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2222:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
2223:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         To clear this flag, either use function:
2224:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2225:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
2226:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2227:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2228:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval ADC group regular conversion data
2229:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2230:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
2231:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 1100              		.loc 2 2231 1 view -0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
2232:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2233:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1105              		.loc 2 2233 3 view .LVU327
2234:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2235:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2236:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
2237:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2238:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return ADC converted value */
2239:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return hadc->Instance->DR;
 1106              		.loc 2 2239 3 view .LVU328
 1107              		.loc 2 2239 14 is_stmt 0 view .LVU329
 1108 0000 0368     		ldr	r3, [r0]
 1109              		.loc 2 2239 24 view .LVU330
 1110 0002 186C     		ldr	r0, [r3, #64]
 1111              	.LVL70:
2240:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1112              		.loc 2 2240 1 view .LVU331
 1113 0004 7047     		bx	lr
 1114              		.cfi_endproc
 1115              	.LFE337:
 1117              		.section	.text.HAL_ADC_StartSampling,"ax",%progbits
 1118              		.align	1
 1119              		.global	HAL_ADC_StartSampling
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1123              		.fpu fpv4-sp-d16
 1125              	HAL_ADC_StartSampling:
 1126              	.LVL71:
 1127              	.LFB338:
2241:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2242:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Start ADC conversion sampling phase of regular group
2244:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note:  This function should only be called to start sampling when
2245:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SAMPLING_MODE_TRIGGER_CONTROLED sampling
2246:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         mode has been selected
2247:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SOFTWARE_START has been selected as trigger source
2248:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2249:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2250:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2251:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_StartSampling(ADC_HandleTypeDef *hadc)
2252:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 1128              		.loc 2 2252 1 is_stmt 1 view -0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
2253:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2254:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1133              		.loc 2 2254 3 view .LVU333
2255:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2256:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Start sampling */
2257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_SWTRIG);
 1134              		.loc 2 2257 3 view .LVU334
 1135 0000 0268     		ldr	r2, [r0]
 1136 0002 1369     		ldr	r3, [r2, #16]
 1137 0004 43F00073 		orr	r3, r3, #33554432
 1138 0008 1361     		str	r3, [r2, #16]
2258:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2259:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
2260:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 1139              		.loc 2 2260 3 view .LVU335
2261:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1140              		.loc 2 2261 1 is_stmt 0 view .LVU336
 1141 000a 0020     		movs	r0, #0
 1142              	.LVL72:
 1143              		.loc 2 2261 1 view .LVU337
 1144 000c 7047     		bx	lr
 1145              		.cfi_endproc
 1146              	.LFE338:
 1148              		.section	.text.HAL_ADC_StopSampling,"ax",%progbits
 1149              		.align	1
 1150              		.global	HAL_ADC_StopSampling
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv4-sp-d16
 1156              	HAL_ADC_StopSampling:
 1157              	.LVL73:
 1158              	.LFB339:
2262:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2263:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2264:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion sampling phase of regular group and start conversion
2265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note:  This function should only be called to stop sampling when
2266:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SAMPLING_MODE_TRIGGER_CONTROLED sampling
2267:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         mode has been selected
2268:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SOFTWARE_START has been selected as trigger source
2269:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - after sampling has been started using @ref HAL_ADC_StartSampling.
2270:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2271:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2272:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2273:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_StopSampling(ADC_HandleTypeDef *hadc)
2274:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 1159              		.loc 2 2274 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
2275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2276:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1164              		.loc 2 2276 3 view .LVU339
2277:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2278:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Start sampling */
2279:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_SWTRIG);
 1165              		.loc 2 2279 3 view .LVU340
 1166 0000 0268     		ldr	r2, [r0]
 1167 0002 1369     		ldr	r3, [r2, #16]
 1168 0004 23F00073 		bic	r3, r3, #33554432
 1169 0008 1361     		str	r3, [r2, #16]
2280:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2281:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
2282:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 1170              		.loc 2 2282 3 view .LVU341
2283:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1171              		.loc 2 2283 1 is_stmt 0 view .LVU342
 1172 000a 0020     		movs	r0, #0
 1173              	.LVL74:
 1174              		.loc 2 2283 1 view .LVU343
 1175 000c 7047     		bx	lr
 1176              		.cfi_endproc
 1177              	.LFE339:
 1179              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1180              		.align	1
 1181              		.weak	HAL_ADC_ConvCpltCallback
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1185              		.fpu fpv4-sp-d16
 1187              	HAL_ADC_ConvCpltCallback:
 1188              	.LFB360:
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 1192              		@ link register save eliminated.
 1193 0000 7047     		bx	lr
 1194              		.cfi_endproc
 1195              	.LFE360:
 1197              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1198              		.align	1
 1199              		.weak	HAL_ADC_ConvHalfCpltCallback
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv4-sp-d16
 1205              	HAL_ADC_ConvHalfCpltCallback:
 1206              	.LFB362:
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211 0000 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE362:
 1215              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1216              		.align	1
 1217              		.global	ADC_DMAHalfConvCplt
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1221              		.fpu fpv4-sp-d16
 1223              	ADC_DMAHalfConvCplt:
 1224              	.LVL75:
 1225              	.LFB353:
2284:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2285:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2286:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
2287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2288:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
2289:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2290:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
2291:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
2293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
2294:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
2295:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
2296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
2297:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_cfgr;
2298:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2299:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
2300:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2301:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2302:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2303:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2305:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2306:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2307:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
2308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
2309:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2310:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
2311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2312:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2314:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
2315:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2316:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2317:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* End Of Sampling callback */
2318:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2319:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
2320:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2321:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
2322:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2323:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear regular group conversion flag */
2325:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
2326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2327:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2328:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
2329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
2330:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
2331:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2332:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2334:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2335:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2336:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2337:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2338:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2339:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2340:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2341:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* to disable interruption.                                               */
2342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
2343:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2344:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* in function of multimode state (for devices with multimode           */
2346:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* available).                                                          */
2347:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2348:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2349:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2351:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2352:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
2353:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2354:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* check CONT bit directly in handle ADC CFGR register */
2355:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2356:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2357:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2358:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* else need to check Master ADC CONT bit */
2360:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2362:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2363:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2364:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2365:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2366:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Carry on if continuous mode is disabled */
2368:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
2369:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2370:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2372:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2373:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
2374:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* ADSTART==0 (no conversion on going)                              */
2375:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2376:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
2377:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt */
2378:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Note: Overrun interrupt was enabled with EOC interrupt in      */
2379:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* HAL_Start_IT(), but is not disabled here because can be used   */
2380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* by overrun IRQ process below.                                  */
2381:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2382:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2383:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Set ADC state */
2384:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2385:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
2387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
2388:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             }
2390:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
2391:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           else
2392:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
2393:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Change ADC state to error state */
2394:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2395:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2396:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2398:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
2399:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2400:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2401:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2402:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2403:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Conversion complete callback */
2404:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
2405:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
2406:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       possibility to use:                                              */
2407:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2408:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2409:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2410:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2411:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2412:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2413:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear regular group conversion flag */
2415:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2416:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
2417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2418:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2419:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
2420:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2421:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2422:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
2423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
2424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
2425:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2426:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2428:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2429:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
2431:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2432:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2433:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Retrieve ADC configuration */
2434:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
2435:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
2436:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2437:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* in function of multimode state (for devices with multimode         */
2438:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* available).                                                        */
2439:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2441:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2442:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
2443:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
2444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
2445:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2446:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2447:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2448:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
2449:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2450:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2453:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2455:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2456:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2457:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2458:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* external trigger or by automatic injected conversion with regular      */
2459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* group having no further conversion upcoming (same conditions as        */
2460:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* regular group interruption disabling above),                           */
2461:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* and if injected scan sequence is completed.                            */
2462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
2463:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
2464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
2465:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
2466:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
2469:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2470:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Particular case if injected contexts queue is enabled:             */
2471:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* when the last context has been fully processed, JSQR is reset      */
2472:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* by the hardware. Even if no injected conversion is planned to come */
2473:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* (queue empty, triggers are ignored), it can start again            */
2474:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* immediately after setting a new context (JADSTART is still set).   */
2475:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Therefore, state of HAL ADC injected group is kept to busy.        */
2476:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
2477:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2478:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2479:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* JADSTART==0 (no conversion on going)                             */
2480:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
2481:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
2482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt  */
2483:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
2484:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2485:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Set ADC state */
2486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
2487:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
2489:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
2490:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             }
2492:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
2493:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           else
2494:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
2495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Update ADC state machine to error */
2496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2497:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
2501:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2502:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2503:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2504:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Injected Conversion complete callback */
2506:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
2507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
2508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
2509:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               interruption has been triggered by end of conversion or end of
2510:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               sequence.    */
2511:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2512:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->InjectedConvCpltCallback(hadc);
2513:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2514:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
2515:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2516:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear injected group conversion flag */
2518:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
2519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2520:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2521:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
2523:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2524:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
2525:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2526:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2527:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Level out of window 1 callback */
2528:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2529:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2530:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2531:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
2532:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2533:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2534:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2535:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
2536:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2537:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2538:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
2540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2541:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
2542:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2543:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2544:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Level out of window 2 callback */
2545:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2547:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2548:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
2549:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2550:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2551:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
2553:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2554:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2555:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
2557:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2558:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
2559:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2560:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2561:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Level out of window 3 callback */
2562:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2563:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2564:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2565:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
2566:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2567:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2568:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
2570:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2571:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2572:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
2574:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2575:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2576:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2578:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* overrun ")                                                             */
2579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2580:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* error.                                                                 */
2581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
2582:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2583:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       overrun_error = 1UL;
2584:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
2586:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2587:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Check DMA configuration */
2588:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2589:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
2590:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2591:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Multimode (when feature is available) is enabled,
2592:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            Common Control Register MDMA bits must be checked. */
2593:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_RE
2594:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           overrun_error = 1UL;
2596:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2599:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
2600:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2601:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Multimode not set or feature not available or ADC independent */
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
2603:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2604:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           overrun_error = 1UL;
2605:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2606:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2607:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2608:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (overrun_error == 1UL)
2610:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2611:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Change ADC state to error state */
2612:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
2613:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2614:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to overrun */
2615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
2616:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2617:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Error callback */
2618:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2619:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2620:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2622:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2623:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2624:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2625:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2626:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2627:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2628:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2629:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear ADC overrun flag */
2630:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
2631:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2632:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2633:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ========== Check Injected context queue overflow flag ========== */
2634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
2635:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2636:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Change ADC state to overrun state */
2637:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
2638:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2639:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to Injected context queue overflow */
2640:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
2641:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2642:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Clear the Injected context queue overflow flag */
2643:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
2644:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2645:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Injected context queue overflow callback */
2646:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2647:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback(hadc);
2648:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
2649:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
2650:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2651:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2652:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2654:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2655:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2656:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2657:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2658:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
2659:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2660:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2661:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2662:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2663:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2664:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2665:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2666:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2667:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****    */
2668:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2669:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2670:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2671:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2672:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2673:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
2674:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2675:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2676:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2677:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2678:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2679:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2680:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2681:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2682:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2683:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2684:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2685:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2686:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2687:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2688:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
2689:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2690:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2691:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2692:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2693:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2694:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2695:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2696:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2697:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2698:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2699:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2700:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2701:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2702:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2703:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2704:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2705:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2706:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2707:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2708:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2709:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2710:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
2711:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2712:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2713:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2714:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2715:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2716:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2717:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2718:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2719:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2720:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2721:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2722:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2723:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
2724:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2725:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2726:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2727:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief    Peripheral Control functions
2728:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
2729:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @verbatim
2730:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
2731:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****              ##### Peripheral Control functions #####
2732:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
2733:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2734:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Configure channels on regular group
2735:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Configure the analog watchdog
2736:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2737:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @endverbatim
2738:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
2739:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2740:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2741:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2742:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2743:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2744:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2745:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         These internal paths can be disabled using function
2746:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2747:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2748:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2749:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2750:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2751:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         without resetting the ADC.
2752:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2753:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2754:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2755:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
2757:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2758:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2759:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2761:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
2762:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2763:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
2764:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2765:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2766:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2767:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2768:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2769:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2771:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
2772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
2773:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2774:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2775:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
2776:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      ignored (considered as reset) */
2777:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENAB
2778:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Verification of channel number */
2780:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
2781:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2782:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
2783:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2784:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
2785:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2786:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
2787:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2788:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2789:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process locked */
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
2791:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2792:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2793:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2794:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2795:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*  - Channel number                                                        */
2796:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*  - Channel rank                                                          */
2797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2798:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2799:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC group regular sequence: channel on the selected scan sequence rank */
2800:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
2801:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2802:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2803:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without   */
2804:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* conversion on going on regular group:                                    */
2805:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - Channel sampling time                                                 */
2806:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - Channel offset                                                        */
2807:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2808:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2809:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
2810:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
2811:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
2812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2813:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
2814:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
2815:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2816:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2817:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES
2818:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC sampling time common configuration */
2820:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5)
2821:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2822:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2823:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2824:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2825:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
2826:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC sampling time common configuration */
2828:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
2829:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2830:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2831:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Configure the offset: offset enable/disable, channel, offset value */
2832:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2833:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Shift the offset with respect to the selected ADC resolution. */
2834:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2836:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2837:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
2838:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2839:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC selected offset number */
2840:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted)
2841:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
2843:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
2844:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC selected offset sign & saturation */
2845:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
2846:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturatio
2847:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2849:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2850:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2851:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
2853:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2854:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2855:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
2857:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2858:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2859:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
2861:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2862:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2863:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
2865:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2866:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2868:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2869:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2870:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2871:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2872:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:                */
2873:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /*  - Single or differential mode                                           */
2874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2875:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2876:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set mode single-ended or differential input of the selected ADC channel */
2877:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
2878:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2879:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Configuration of differential mode */
2880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
2881:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2882:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2883:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits r
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance,
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
2886:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
2887:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2888:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2890:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2891:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
2892:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* If internal channel selected, enable dedicated internal buffers and    */
2893:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* paths.                                                                 */
2894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Note: these internal measurement paths can be disabled using           */
2895:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* HAL_ADC_DeInit().                                                      */
2896:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
2898:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
2899:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->I
2900:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2901:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* If the requested internal measurement path has already been enabled, */
2902:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* bypass the configuration processing.                                 */
2903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TE
2904:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2905:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2906:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
2907:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2908:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2909:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
2910:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2911:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2912:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Wait loop initialization and execution */
2913:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Note: Variable divided by 2 to compensate partially              */
2914:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /*       CPU processing cycles, scaling in us split to not          */
2915:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /*       exceed 32 bits register capacity and handle low frequency. */
2916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000U
2917:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
2918:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
2919:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             wait_loop_index--;
2920:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
2921:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2922:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2923:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PAT
2924:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2925:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
2926:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2927:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2928:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
2929:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2930:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
2932:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
2933:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2934:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (ADC_VREFINT_INSTANCE(hadc))
2935:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
2936:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2937:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
2938:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
2939:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2940:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
2941:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
2942:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* nothing to do */
2943:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
2944:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
2945:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2946:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2947:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
2948:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
2949:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* parameters.                                                              */
2950:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
2951:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
2952:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
2953:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2954:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2955:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
2956:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
2957:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2958:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
2959:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2960:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2961:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
2962:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
2963:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
2964:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2965:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
2966:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
2967:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2968:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
2969:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
2970:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
2971:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         the ADC.
2972:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2973:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
2974:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
2975:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   On this STM32 serie, analog watchdog thresholds can be modified
2976:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         while ADC conversion is on going.
2977:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2978:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2979:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2980:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2981:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2982:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2983:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2984:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
2985:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status
2986:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
2987:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
2988:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
2989:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2990:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
2991:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
2992:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2993:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2994:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
2995:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2996:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2997:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
2998:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2999:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
3000:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
3001:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3002:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
3003:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
3004:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC))
3005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3006:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(hadc, AnalogWDGConfig->Channel));
3007:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3008:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3009:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Verify thresholds range */
3010:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
3011:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3012:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Case of oversampling enabled: depending on ratio and shift configuration,
3013:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        analog watchdog thresholds can be higher than ADC resolution.
3014:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        Verify if thresholds are within maximum thresholds range. */
3015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
3016:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
3017:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3018:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
3019:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3020:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Verify if thresholds are within the selected ADC resolution */
3021:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3022:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3023:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3024:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3025:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process locked */
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
3027:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3028:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
3029:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
3030:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* conversion on going on ADC groups regular and injected:                  */
3031:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
3032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
3033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
3034:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
3035:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
3036:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
3037:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3038:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Analog watchdog configuration */
3039:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
3040:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3041:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
3042:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
3043:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*    channels, on groups regular and-or injected.                      */
3044:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
3045:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3048:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
3049:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3050:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3051:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3052:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3053:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
3054:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3055:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3056:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3058:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
3059:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3060:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3061:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3062:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
3063:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3064:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3065:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3066:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ)
3067:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3068:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3069:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3070:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_
3071:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3072:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3073:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3074:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
3075:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3076:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3077:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3078:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set the filtering configuration */
3079:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->TR1,
3080:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_TR1_AWDFILT,
3081:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  AnalogWDGConfig->FilteringConfig);
3082:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3083:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
3084:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
3085:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3086:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
3087:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3088:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3089:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
3090:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
3091:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3092:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
3093:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
3094:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3095:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
3096:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3097:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
3098:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3099:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
3100:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3101:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3102:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
3103:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
3104:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
3106:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3107:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3108:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3109:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
3111:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
3112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3113:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
3114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3115:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
3116:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           else
3117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
3118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3119:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
3120:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3121:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3122:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3123:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3124:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
3126:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3127:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3128:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
3130:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
3131:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3132:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3134:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3135:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
3136:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
3137:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3138:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3139:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3140:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3141:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3142:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
3143:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3144:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3145:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
3146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3147:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
3148:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3149:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         else
3150:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3151:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
3152:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3153:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3154:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
3155:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       else
3156:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3157:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
3158:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
3159:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3160:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3161:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3162:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3163:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3164:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
3165:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
3168:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3169:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
3170:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         else
3172:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3173:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
3174:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3175:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3176:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3177:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3178:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3179:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3180:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Analog watchdog thresholds configuration */
3181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
3182:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3183:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
3184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
3185:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* are set to 0.                                                        */
3186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
3187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
3188:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3189:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
3190:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else
3191:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3192:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
3193:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
3194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* are set to 0.                                                        */
3195:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThr
3196:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThre
3197:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3198:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3199:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3200:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresh
3201:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                   tmpAWDLowThresholdShifted);
3202:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3203:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
3204:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
3205:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3206:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return function status */
3207:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
3208:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3209:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3210:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3211:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3212:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
3213:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3214:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3215:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
3216:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
3217:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *
3218:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @verbatim
3219:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
3220:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
3221:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****  ===============================================================================
3222:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     [..]
3223:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
3224:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     peripheral.
3225:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Check the ADC state
3226:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (+) Check the ADC error code
3227:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3228:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** @endverbatim
3229:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
3230:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3231:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3232:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3233:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Return the ADC handle state.
3234:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
3235:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         compared with states bits.
3236:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         For example:
3237:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
3238:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
3239:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3240:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
3241:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3242:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
3243:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3244:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3245:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3246:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3247:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return ADC handle state */
3248:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return hadc->State;
3249:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3250:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3251:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3252:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Return the ADC error code.
3253:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3254:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
3255:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3256:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
3257:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3258:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3259:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3260:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3261:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return hadc->ErrorCode;
3262:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3263:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3264:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
3266:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3267:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3268:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3269:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @}
3270:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3271:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3272:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
3273:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @{
3274:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3275:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3276:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3277:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion.
3278:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3279:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param ConversionGroup ADC group regular and/or injected.
3280:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *          This parameter can be one of the following values:
3281:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_GROUP           ADC regular conversion type.
3282:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
3283:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
3284:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3285:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3286:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
3287:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3288:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3289:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
3290:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
3291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
3292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3294:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3295:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3297:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
3298:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3299:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
3300:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* groups) to bypass this function if not needed.                           */
3301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
3302:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
3303:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
3304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
3305:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
3306:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3307:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Particular case of continuous auto-injection mode combined with        */
3308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* auto-delay mode.                                                       */
3309:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
3310:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
3311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
3312:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* (see reference manual).                                                */
3313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
3314:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
3315:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.LowPowerAutoWait == ENABLE)
3316:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
3317:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3318:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Use stop of regular group */
3319:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       conversion_group_reassigned = ADC_REGULAR_GROUP;
3320:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3321:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
3322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
3323:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
3325:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Update ADC state machine to error */
3327:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3328:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3330:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3331:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3332:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           return HAL_ERROR;
3333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3334:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         Conversion_Timeout_CPU_cycles ++;
3335:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3336:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3337:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Clear JEOS */
3338:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
3339:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3340:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3341:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group regular */
3342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_INJECTED_GROUP)
3343:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3344:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
3345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
3346:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3347:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
3348:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3349:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Stop ADC group regular conversion */
3350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_REG_StopConversion(hadc->Instance);
3351:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3352:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3353:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3354:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3355:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group injected */
3356:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_REGULAR_GROUP)
3357:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3358:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
3359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
3360:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
3362:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3363:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Stop ADC group injected conversion */
3364:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           LL_ADC_INJ_StopConversion(hadc->Instance);
3365:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3366:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3368:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3369:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Selection of start and stop bits with respect to the regular or injected group */
3370:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     switch (conversion_group_reassigned)
3371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3372:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case ADC_REGULAR_INJECTED_GROUP:
3373:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
3374:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
3375:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       case ADC_INJECTED_GROUP:
3376:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
3377:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
3378:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Case ADC_REGULAR_GROUP only*/
3379:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       default:
3380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
3381:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
3382:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3383:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3384:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
3385:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
3386:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
3388:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
3390:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3391:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3392:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3393:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3394:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3395:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3396:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
3398:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3399:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3400:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3401:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3402:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3403:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3404:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
3405:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3406:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3407:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3408:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3409:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3410:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Enable the selected ADC.
3411:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
3412:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
3413:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3414:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3415:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3416:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
3417:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3418:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3419:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3420:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
3421:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
3422:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
3423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
3424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
3425:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3426:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_
3428:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3429:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Update ADC state machine to error */
3430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3431:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3432:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3433:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3434:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3435:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
3436:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3437:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3438:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
3439:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
3440:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3441:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
3442:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
3443:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
3445:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3446:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
3447:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           has been cleared (after a calibration), ADEN bit is reset by the
3448:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           calibration logic.
3449:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           The workaround is to continue setting ADEN until ADRDY is becomes 1.
3450:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
3451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           4 ADC clock cycle duration */
3452:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Note: Test of ADC enabled required due to hardware constraint to     */
3453:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /*       not enable ADC if already enabled.                             */
3454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
3455:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3456:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_Enable(hadc->Instance);
3457:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3458:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
3460:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3461:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3463:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3465:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3466:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
3468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3469:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3470:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3471:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3472:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3473:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
3474:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3475:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3476:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3477:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  Disable the selected ADC.
3478:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3479:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   *         stopped.
3480:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3481:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3482:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3483:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
3484:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3485:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3486:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
3487:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
3489:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
3490:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /*       disabled.                                                          */
3491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
3492:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
3493:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
3494:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3495:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
3497:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3498:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Disable the ADC peripheral */
3499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
3500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
3501:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3502:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
3503:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3504:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Update ADC state machine to error */
3505:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3506:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3507:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3508:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3509:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3510:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
3511:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3512:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3513:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
3514:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Get tick count */
3515:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
3516:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
3518:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
3520:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3521:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3523:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3524:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3525:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3526:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3527:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
3528:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3529:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3530:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3531:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3532:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3533:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   return HAL_OK;
3534:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3535:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3536:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3537:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
3538:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
3540:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3541:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
3542:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
3543:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3544:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3545:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3546:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
3547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
3548:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3549:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
3550:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
3551:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
3553:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
3554:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* to disable interruption.                                               */
3555:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Is it the end of the regular sequence ? */
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
3557:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3558:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Are conversions software-triggered ? */
3559:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
3560:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3561:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Is CONT bit set ? */
3562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
3563:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3564:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* CONT bit is not set, no more conversions expected */
3565:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
3566:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
3567:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
3568:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
3570:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3571:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3572:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
3574:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3575:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* DMA End of Transfer interrupt was triggered but conversions sequence
3576:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          is not over. If DMACFG is set to 0, conversions are stopped. */
3577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
3578:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
3579:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* DMACFG bit is not set, conversions are stopped. */
3580:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
3581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
3582:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
3583:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3584:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
3585:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
3586:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3587:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3588:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Conversion complete callback */
3589:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3590:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
3591:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
3592:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
3593:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3594:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3595:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
3596:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
3597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
3598:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3599:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
3600:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3601:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
3602:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
3603:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
3604:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3605:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3606:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     else
3607:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
3608:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Call ADC DMA error callback */
3609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
3610:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
3611:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
3612:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
3613:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3614:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3615:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
3616:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3617:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
3618:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3619:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
3620:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 1226              		.loc 2 3620 1 is_stmt 1 view -0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
3621:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3622:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1230              		.loc 2 3622 3 view .LVU345
3623:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3624:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Half conversion callback */
3625:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3626:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
3627:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
3628:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 1231              		.loc 2 3628 3 view .LVU346
3620:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1232              		.loc 2 3620 1 is_stmt 0 view .LVU347
 1233 0000 08B5     		push	{r3, lr}
 1234              		.cfi_def_cfa_offset 8
 1235              		.cfi_offset 3, -8
 1236              		.cfi_offset 14, -4
 1237              		.loc 2 3628 3 view .LVU348
 1238 0002 806A     		ldr	r0, [r0, #40]
 1239              	.LVL76:
 1240              		.loc 2 3628 3 view .LVU349
 1241 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1242              	.LVL77:
3629:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3630:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 1243              		.loc 2 3630 1 view .LVU350
 1244 0008 08BD     		pop	{r3, pc}
 1245              		.cfi_endproc
 1246              	.LFE353:
 1248              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1249              		.align	1
 1250              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1254              		.fpu fpv4-sp-d16
 1256              	HAL_ADC_LevelOutOfWindowCallback:
 1257              	.LFB364:
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 0
 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 1261              		@ link register save eliminated.
 1262 0000 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE364:
 1266              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1267              		.align	1
 1268              		.weak	HAL_ADC_ErrorCallback
 1269              		.syntax unified
 1270              		.thumb
 1271              		.thumb_func
 1272              		.fpu fpv4-sp-d16
 1274              	HAL_ADC_ErrorCallback:
 1275              	.LFB366:
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279              		@ link register save eliminated.
 1280 0000 7047     		bx	lr
 1281              		.cfi_endproc
 1282              	.LFE366:
 1284              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1285              		.align	1
 1286              		.global	HAL_ADC_IRQHandler
 1287              		.syntax unified
 1288              		.thumb
 1289              		.thumb_func
 1290              		.fpu fpv4-sp-d16
 1292              	HAL_ADC_IRQHandler:
 1293              	.LVL78:
 1294              	.LFB340:
2291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1295              		.loc 2 2291 1 is_stmt 1 view -0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
2292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 1299              		.loc 2 2292 3 view .LVU352
2293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1300              		.loc 2 2293 3 view .LVU353
2291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1301              		.loc 2 2291 1 is_stmt 0 view .LVU354
 1302 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1303              		.cfi_def_cfa_offset 24
 1304              		.cfi_offset 3, -24
 1305              		.cfi_offset 4, -20
 1306              		.cfi_offset 5, -16
 1307              		.cfi_offset 6, -12
 1308              		.cfi_offset 7, -8
 1309              		.cfi_offset 14, -4
2293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1310              		.loc 2 2293 26 view .LVU355
 1311 0002 0368     		ldr	r3, [r0]
2293:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1312              		.loc 2 2293 12 view .LVU356
 1313 0004 1D68     		ldr	r5, [r3]
 1314              	.LVL79:
2294:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 1315              		.loc 2 2294 3 is_stmt 1 view .LVU357
2294:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 1316              		.loc 2 2294 12 is_stmt 0 view .LVU358
 1317 0006 5E68     		ldr	r6, [r3, #4]
 1318              	.LVL80:
2295:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
 1319              		.loc 2 2295 3 is_stmt 1 view .LVU359
2296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_cfgr;
 1320              		.loc 2 2296 3 view .LVU360
2297:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 1321              		.loc 2 2297 3 view .LVU361
2299:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 1322              		.loc 2 2299 3 view .LVU362
2300:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
 1323              		.loc 2 2300 3 view .LVU363
 1324              	.LBB200:
 1325              	.LBI200:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1326              		.loc 1 6284 26 view .LVU364
 1327              	.LBB201:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1328              		.loc 1 6286 3 view .LVU365
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1329              		.loc 1 6286 21 is_stmt 0 view .LVU366
 1330 0008 8A4B     		ldr	r3, .L219
 1331 000a 9F68     		ldr	r7, [r3, #8]
 1332              	.LBE201:
 1333              	.LBE200:
2308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1334              		.loc 2 2308 6 view .LVU367
 1335 000c AA07     		lsls	r2, r5, #30
2291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1336              		.loc 2 2291 1 view .LVU368
 1337 000e 0446     		mov	r4, r0
 1338              	.LBB203:
 1339              	.LBB202:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1340              		.loc 1 6286 10 view .LVU369
 1341 0010 07F01F07 		and	r7, r7, #31
 1342              	.LVL81:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1343              		.loc 1 6286 10 view .LVU370
 1344              	.LBE202:
 1345              	.LBE203:
2304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 1346              		.loc 2 2304 3 is_stmt 1 view .LVU371
2305:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1347              		.loc 2 2305 3 view .LVU372
2308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1348              		.loc 2 2308 3 view .LVU373
2308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1349              		.loc 2 2308 6 is_stmt 0 view .LVU374
 1350 0014 0ED5     		bpl	.L105
2308:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1351              		.loc 2 2308 54 discriminator 1 view .LVU375
 1352 0016 B307     		lsls	r3, r6, #30
 1353 0018 0CD5     		bpl	.L105
2311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1354              		.loc 2 2311 5 is_stmt 1 view .LVU376
2311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1355              		.loc 2 2311 14 is_stmt 0 view .LVU377
 1356 001a C36D     		ldr	r3, [r0, #92]
2311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1357              		.loc 2 2311 8 view .LVU378
 1358 001c D806     		lsls	r0, r3, #27
 1359              	.LVL82:
2314:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1360              		.loc 2 2314 7 is_stmt 1 view .LVU379
 1361 001e 5EBF     		ittt	pl
 1362 0020 E36D     		ldrpl	r3, [r4, #92]
 1363 0022 43F40063 		orrpl	r3, r3, #2048
 1364 0026 E365     		strpl	r3, [r4, #92]
2321:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1365              		.loc 2 2321 5 view .LVU380
 1366 0028 2046     		mov	r0, r4
 1367 002a FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
 1368              	.LVL83:
2325:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1369              		.loc 2 2325 5 view .LVU381
 1370 002e 2368     		ldr	r3, [r4]
 1371 0030 0222     		movs	r2, #2
 1372 0032 1A60     		str	r2, [r3]
 1373              	.L105:
2329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1374              		.loc 2 2329 3 view .LVU382
2329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1375              		.loc 2 2329 6 is_stmt 0 view .LVU383
 1376 0034 6907     		lsls	r1, r5, #29
 1377 0036 01D5     		bpl	.L107
2329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1378              		.loc 2 2329 51 discriminator 1 view .LVU384
 1379 0038 7207     		lsls	r2, r6, #29
 1380 003a 03D4     		bmi	.L108
 1381              	.L107:
2329:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1382              		.loc 2 2329 94 discriminator 3 view .LVU385
 1383 003c 2B07     		lsls	r3, r5, #28
 1384 003e 32D5     		bpl	.L109
2330:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1385              		.loc 2 2330 51 view .LVU386
 1386 0040 3007     		lsls	r0, r6, #28
 1387 0042 30D5     		bpl	.L109
 1388              	.L108:
2333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1389              		.loc 2 2333 5 is_stmt 1 view .LVU387
2333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1390              		.loc 2 2333 14 is_stmt 0 view .LVU388
 1391 0044 E36D     		ldr	r3, [r4, #92]
2342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1392              		.loc 2 2342 9 view .LVU389
 1393 0046 2068     		ldr	r0, [r4]
2333:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1394              		.loc 2 2333 8 view .LVU390
 1395 0048 D906     		lsls	r1, r3, #27
2336:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1396              		.loc 2 2336 7 is_stmt 1 view .LVU391
 1397 004a 5EBF     		ittt	pl
 1398 004c E36D     		ldrpl	r3, [r4, #92]
 1399 004e 43F40073 		orrpl	r3, r3, #512
 1400 0052 E365     		strpl	r3, [r4, #92]
2342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1401              		.loc 2 2342 5 view .LVU392
 1402              	.LVL84:
 1403              	.LBB204:
 1404              	.LBI204:
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1405              		.loc 1 3649 26 view .LVU393
 1406              	.LBB205:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1407              		.loc 1 3651 3 view .LVU394
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1408              		.loc 1 3651 12 is_stmt 0 view .LVU395
 1409 0054 C368     		ldr	r3, [r0, #12]
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1410              		.loc 1 3651 103 view .LVU396
 1411 0056 13F4406F 		tst	r3, #3072
 1412 005a 1ED1     		bne	.L112
 1413              	.LVL85:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1414              		.loc 1 3651 103 view .LVU397
 1415              	.LBE205:
 1416              	.LBE204:
2348:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1417              		.loc 2 2348 7 is_stmt 1 view .LVU398
2348:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1418              		.loc 2 2348 12 is_stmt 0 view .LVU399
 1419 005c 764B     		ldr	r3, .L219+4
 1420 005e 9842     		cmp	r0, r3
 1421 0060 00F0DA80 		beq	.L113
 1422              	.L140:
2355:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1423              		.loc 2 2355 9 is_stmt 1 view .LVU400
2355:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1424              		.loc 2 2355 18 is_stmt 0 view .LVU401
 1425 0064 C368     		ldr	r3, [r0, #12]
 1426              	.LVL86:
 1427              	.L114:
2368:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1428              		.loc 2 2368 7 is_stmt 1 view .LVU402
2368:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1429              		.loc 2 2368 10 is_stmt 0 view .LVU403
 1430 0066 9A04     		lsls	r2, r3, #18
 1431 0068 17D4     		bmi	.L112
2371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1432              		.loc 2 2371 9 is_stmt 1 view .LVU404
2371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1433              		.loc 2 2371 13 is_stmt 0 view .LVU405
 1434 006a 0368     		ldr	r3, [r0]
 1435              	.LVL87:
2371:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1436              		.loc 2 2371 12 view .LVU406
 1437 006c 1B07     		lsls	r3, r3, #28
 1438 006e 14D5     		bpl	.L112
2375:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 1439              		.loc 2 2375 11 is_stmt 1 view .LVU407
2375:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 1440              		.loc 2 2375 15 is_stmt 0 view .LVU408
 1441 0070 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 1442              	.LVL88:
2375:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 1443              		.loc 2 2375 14 view .LVU409
 1444 0074 0028     		cmp	r0, #0
 1445 0076 40F0AF80 		bne	.L116
2381:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1446              		.loc 2 2381 13 is_stmt 1 view .LVU410
 1447 007a 2268     		ldr	r2, [r4]
 1448 007c 5368     		ldr	r3, [r2, #4]
 1449 007e 23F00C03 		bic	r3, r3, #12
 1450 0082 5360     		str	r3, [r2, #4]
2384:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1451              		.loc 2 2384 13 view .LVU411
 1452 0084 E36D     		ldr	r3, [r4, #92]
 1453 0086 23F48073 		bic	r3, r3, #256
 1454 008a E365     		str	r3, [r4, #92]
2386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1455              		.loc 2 2386 13 view .LVU412
2386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1456              		.loc 2 2386 22 is_stmt 0 view .LVU413
 1457 008c E36D     		ldr	r3, [r4, #92]
2386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1458              		.loc 2 2386 16 view .LVU414
 1459 008e D804     		lsls	r0, r3, #19
 1460 0090 03D4     		bmi	.L112
2388:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             }
 1461              		.loc 2 2388 15 is_stmt 1 view .LVU415
 1462 0092 E36D     		ldr	r3, [r4, #92]
 1463 0094 43F00103 		orr	r3, r3, #1
 1464 0098 E365     		str	r3, [r4, #92]
 1465              	.L112:
2411:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1466              		.loc 2 2411 5 view .LVU416
 1467 009a 2046     		mov	r0, r4
 1468 009c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1469              	.LVL89:
2419:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1470              		.loc 2 2419 5 view .LVU417
 1471 00a0 2368     		ldr	r3, [r4]
 1472 00a2 0C22     		movs	r2, #12
 1473 00a4 1A60     		str	r2, [r3]
 1474              	.L109:
2423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 1475              		.loc 2 2423 3 view .LVU418
2423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 1476              		.loc 2 2423 6 is_stmt 0 view .LVU419
 1477 00a6 A906     		lsls	r1, r5, #26
 1478 00a8 01D5     		bpl	.L117
2423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 1479              		.loc 2 2423 53 discriminator 1 view .LVU420
 1480 00aa B206     		lsls	r2, r6, #26
 1481 00ac 03D4     		bmi	.L118
 1482              	.L117:
2423:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 1483              		.loc 2 2423 98 discriminator 3 view .LVU421
 1484 00ae 6B06     		lsls	r3, r5, #25
 1485 00b0 36D5     		bpl	.L119
2424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1486              		.loc 2 2424 53 view .LVU422
 1487 00b2 7006     		lsls	r0, r6, #25
 1488 00b4 34D5     		bpl	.L119
 1489              	.L118:
2427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1490              		.loc 2 2427 5 is_stmt 1 view .LVU423
2427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1491              		.loc 2 2427 14 is_stmt 0 view .LVU424
 1492 00b6 E36D     		ldr	r3, [r4, #92]
2440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1493              		.loc 2 2440 10 view .LVU425
 1494 00b8 5F48     		ldr	r0, .L219+4
2427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1495              		.loc 2 2427 8 view .LVU426
 1496 00ba D906     		lsls	r1, r3, #27
2430:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1497              		.loc 2 2430 7 is_stmt 1 view .LVU427
 1498 00bc 5EBF     		ittt	pl
 1499 00be E36D     		ldrpl	r3, [r4, #92]
 1500 00c0 43F40053 		orrpl	r3, r3, #8192
 1501 00c4 E365     		strpl	r3, [r4, #92]
2434:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 1502              		.loc 2 2434 5 view .LVU428
2434:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 1503              		.loc 2 2434 46 is_stmt 0 view .LVU429
 1504 00c6 2368     		ldr	r3, [r4]
 1505              	.LVL90:
 1506              	.LBB206:
 1507              	.LBI206:
4436:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1508              		.loc 1 4436 26 is_stmt 1 view .LVU430
 1509              	.LBB207:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1510              		.loc 1 4438 3 view .LVU431
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1511              		.loc 1 4438 12 is_stmt 0 view .LVU432
 1512 00c8 D96C     		ldr	r1, [r3, #76]
 1513              	.LBE207:
 1514              	.LBE206:
 1515              	.LBB209:
 1516              	.LBB210:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1517              		.loc 1 3651 12 view .LVU433
 1518 00ca DA68     		ldr	r2, [r3, #12]
 1519              	.LBE210:
 1520              	.LBE209:
2440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1521              		.loc 2 2440 10 view .LVU434
 1522 00cc 8342     		cmp	r3, r0
 1523              	.LBB213:
 1524              	.LBB208:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1525              		.loc 1 4438 12 view .LVU435
 1526 00ce 01F4C071 		and	r1, r1, #384
 1527              	.LVL91:
4438:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1528              		.loc 1 4438 12 view .LVU436
 1529              	.LBE208:
 1530              	.LBE213:
2435:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
 1531              		.loc 2 2435 5 is_stmt 1 view .LVU437
 1532              	.LBB214:
 1533              	.LBI209:
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1534              		.loc 1 3649 26 view .LVU438
 1535              	.LBB211:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1536              		.loc 1 3651 3 view .LVU439
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1537              		.loc 1 3651 3 is_stmt 0 view .LVU440
 1538              	.LBE211:
 1539              	.LBE214:
2440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1540              		.loc 2 2440 5 is_stmt 1 view .LVU441
2440:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1541              		.loc 2 2440 10 is_stmt 0 view .LVU442
 1542 00d2 04D1     		bne	.L121
2441:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 1543              		.loc 2 2441 9 view .LVU443
 1544 00d4 1FB1     		cbz	r7, .L121
2442:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 1545              		.loc 2 2442 9 view .LVU444
 1546 00d6 B81F     		subs	r0, r7, #6
 1547 00d8 0128     		cmp	r0, #1
 1548 00da 00F28680 		bhi	.L123
 1549              	.L121:
2446:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1550              		.loc 2 2446 7 is_stmt 1 view .LVU445
2446:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1551              		.loc 2 2446 16 is_stmt 0 view .LVU446
 1552 00de D868     		ldr	r0, [r3, #12]
 1553              	.LVL92:
 1554              	.L124:
2462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 1555              		.loc 2 2462 5 is_stmt 1 view .LVU447
2462:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 1556              		.loc 2 2462 8 is_stmt 0 view .LVU448
 1557 00e0 29B1     		cbz	r1, .L125
2464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 1558              		.loc 2 2464 60 discriminator 1 view .LVU449
 1559 00e2 5649     		ldr	r1, .L219+8
 1560              	.LVL93:
 1561              	.LBB215:
 1562              	.LBB212:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1563              		.loc 1 3651 12 discriminator 1 view .LVU450
 1564 00e4 02F44062 		and	r2, r2, #3072
 1565              	.LVL94:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1566              		.loc 1 3651 12 discriminator 1 view .LVU451
 1567              	.LBE212:
 1568              	.LBE215:
2464:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 1569              		.loc 2 2464 60 discriminator 1 view .LVU452
 1570 00e8 0140     		ands	r1, r1, r0
 1571 00ea 0A43     		orrs	r2, r1, r2
 1572 00ec 12D1     		bne	.L126
 1573              	.L125:
2468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1574              		.loc 2 2468 7 is_stmt 1 view .LVU453
2468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1575              		.loc 2 2468 11 is_stmt 0 view .LVU454
 1576 00ee 1A68     		ldr	r2, [r3]
2468:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1577              		.loc 2 2468 10 view .LVU455
 1578 00f0 5206     		lsls	r2, r2, #25
 1579 00f2 0FD5     		bpl	.L126
2476:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1580              		.loc 2 2476 9 is_stmt 1 view .LVU456
2476:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1581              		.loc 2 2476 12 is_stmt 0 view .LVU457
 1582 00f4 8102     		lsls	r1, r0, #10
 1583 00f6 0DD4     		bmi	.L126
2480:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 1584              		.loc 2 2480 11 is_stmt 1 view .LVU458
 1585              	.LVL95:
 1586              	.LBB216:
 1587              	.LBI216:
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1588              		.loc 1 6968 26 view .LVU459
 1589              	.LBB217:
 1590              		.loc 1 6970 3 view .LVU460
 1591              		.loc 1 6970 12 is_stmt 0 view .LVU461
 1592 00f8 9A68     		ldr	r2, [r3, #8]
 1593              		.loc 1 6970 76 view .LVU462
 1594 00fa 1207     		lsls	r2, r2, #28
 1595 00fc 79D4     		bmi	.L128
 1596              	.LVL96:
 1597              		.loc 1 6970 76 view .LVU463
 1598              	.LBE217:
 1599              	.LBE216:
2483:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1600              		.loc 2 2483 13 is_stmt 1 view .LVU464
 1601 00fe 5A68     		ldr	r2, [r3, #4]
 1602 0100 22F06002 		bic	r2, r2, #96
 1603 0104 5A60     		str	r2, [r3, #4]
2486:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1604              		.loc 2 2486 13 view .LVU465
 1605 0106 E36D     		ldr	r3, [r4, #92]
 1606 0108 23F48053 		bic	r3, r3, #4096
 1607 010c E365     		str	r3, [r4, #92]
2488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1608              		.loc 2 2488 13 view .LVU466
2488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1609              		.loc 2 2488 22 is_stmt 0 view .LVU467
 1610 010e E36D     		ldr	r3, [r4, #92]
2488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1611              		.loc 2 2488 16 view .LVU468
 1612 0110 D805     		lsls	r0, r3, #23
 1613              	.LVL97:
2488:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             {
 1614              		.loc 2 2488 16 view .LVU469
 1615 0112 77D5     		bpl	.L129
 1616              	.L126:
2514:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1617              		.loc 2 2514 5 is_stmt 1 view .LVU470
 1618 0114 2046     		mov	r0, r4
 1619 0116 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1620              	.LVL98:
2518:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1621              		.loc 2 2518 5 view .LVU471
 1622 011a 2368     		ldr	r3, [r4]
 1623 011c 6022     		movs	r2, #96
 1624 011e 1A60     		str	r2, [r3]
 1625              	.L119:
2522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1626              		.loc 2 2522 3 view .LVU472
2522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1627              		.loc 2 2522 6 is_stmt 0 view .LVU473
 1628 0120 2906     		lsls	r1, r5, #24
 1629 0122 0BD5     		bpl	.L130
2522:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1630              		.loc 2 2522 52 discriminator 1 view .LVU474
 1631 0124 3206     		lsls	r2, r6, #24
 1632 0126 09D5     		bpl	.L130
2525:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1633              		.loc 2 2525 5 is_stmt 1 view .LVU475
 1634 0128 E36D     		ldr	r3, [r4, #92]
 1635 012a 43F48033 		orr	r3, r3, #65536
 1636 012e E365     		str	r3, [r4, #92]
2531:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1637              		.loc 2 2531 5 view .LVU476
 1638 0130 2046     		mov	r0, r4
 1639 0132 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1640              	.LVL99:
2535:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1641              		.loc 2 2535 5 view .LVU477
 1642 0136 2368     		ldr	r3, [r4]
 1643 0138 8022     		movs	r2, #128
 1644 013a 1A60     		str	r2, [r3]
 1645              	.L130:
2539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1646              		.loc 2 2539 3 view .LVU478
2539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1647              		.loc 2 2539 6 is_stmt 0 view .LVU479
 1648 013c EB05     		lsls	r3, r5, #23
 1649 013e 0CD5     		bpl	.L131
2539:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1650              		.loc 2 2539 52 discriminator 1 view .LVU480
 1651 0140 F005     		lsls	r0, r6, #23
 1652 0142 0AD5     		bpl	.L131
2542:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1653              		.loc 2 2542 5 is_stmt 1 view .LVU481
 1654 0144 E36D     		ldr	r3, [r4, #92]
 1655 0146 43F40033 		orr	r3, r3, #131072
 1656 014a E365     		str	r3, [r4, #92]
2548:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1657              		.loc 2 2548 5 view .LVU482
 1658 014c 2046     		mov	r0, r4
 1659 014e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
 1660              	.LVL100:
2552:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1661              		.loc 2 2552 5 view .LVU483
 1662 0152 2368     		ldr	r3, [r4]
 1663 0154 4FF48072 		mov	r2, #256
 1664 0158 1A60     		str	r2, [r3]
 1665              	.L131:
2556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1666              		.loc 2 2556 3 view .LVU484
2556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1667              		.loc 2 2556 6 is_stmt 0 view .LVU485
 1668 015a A905     		lsls	r1, r5, #22
 1669 015c 0CD5     		bpl	.L132
2556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1670              		.loc 2 2556 52 discriminator 1 view .LVU486
 1671 015e B205     		lsls	r2, r6, #22
 1672 0160 0AD5     		bpl	.L132
2559:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1673              		.loc 2 2559 5 is_stmt 1 view .LVU487
 1674 0162 E36D     		ldr	r3, [r4, #92]
 1675 0164 43F48023 		orr	r3, r3, #262144
 1676 0168 E365     		str	r3, [r4, #92]
2565:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1677              		.loc 2 2565 5 view .LVU488
 1678 016a 2046     		mov	r0, r4
 1679 016c FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
 1680              	.LVL101:
2569:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1681              		.loc 2 2569 5 view .LVU489
 1682 0170 2368     		ldr	r3, [r4]
 1683 0172 4FF40072 		mov	r2, #512
 1684 0176 1A60     		str	r2, [r3]
 1685              	.L132:
2573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1686              		.loc 2 2573 3 view .LVU490
2573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1687              		.loc 2 2573 6 is_stmt 0 view .LVU491
 1688 0178 EB06     		lsls	r3, r5, #27
 1689 017a 18D5     		bpl	.L133
2573:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1690              		.loc 2 2573 50 discriminator 1 view .LVU492
 1691 017c F006     		lsls	r0, r6, #27
 1692 017e 16D5     		bpl	.L133
2581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1693              		.loc 2 2581 5 is_stmt 1 view .LVU493
2581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1694              		.loc 2 2581 8 is_stmt 0 view .LVU494
 1695 0180 E36B     		ldr	r3, [r4, #60]
 1696 0182 33B1     		cbz	r3, .L134
2589:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1697              		.loc 2 2589 7 is_stmt 1 view .LVU495
2589:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1698              		.loc 2 2589 10 is_stmt 0 view .LVU496
 1699 0184 002F     		cmp	r7, #0
 1700 0186 42D0     		beq	.L135
2593:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1701              		.loc 2 2593 9 is_stmt 1 view .LVU497
 1702              	.LVL102:
 1703              	.LBB218:
 1704              	.LBI218:
6381:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1705              		.loc 1 6381 26 view .LVU498
 1706              	.LBB219:
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1707              		.loc 1 6383 3 view .LVU499
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1708              		.loc 1 6383 21 is_stmt 0 view .LVU500
 1709 0188 2A4B     		ldr	r3, .L219
 1710 018a 9B68     		ldr	r3, [r3, #8]
 1711              	.LVL103:
6383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1712              		.loc 1 6383 21 view .LVU501
 1713              	.LBE219:
 1714              	.LBE218:
2593:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1715              		.loc 2 2593 12 view .LVU502
 1716 018c 13F4604F 		tst	r3, #57344
 1717              	.L218:
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1718              		.loc 2 2602 12 view .LVU503
 1719 0190 0AD0     		beq	.L136
 1720              	.L134:
2612:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1721              		.loc 2 2612 7 is_stmt 1 view .LVU504
 1722 0192 E36D     		ldr	r3, [r4, #92]
 1723 0194 43F48063 		orr	r3, r3, #1024
 1724 0198 E365     		str	r3, [r4, #92]
2615:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1725              		.loc 2 2615 7 view .LVU505
 1726 019a 236E     		ldr	r3, [r4, #96]
 1727 019c 43F00203 		orr	r3, r3, #2
 1728 01a0 2366     		str	r3, [r4, #96]
2625:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1729              		.loc 2 2625 7 view .LVU506
 1730 01a2 2046     		mov	r0, r4
 1731 01a4 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1732              	.LVL104:
 1733              	.L136:
2630:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 1734              		.loc 2 2630 5 view .LVU507
 1735 01a8 2368     		ldr	r3, [r4]
 1736 01aa 1022     		movs	r2, #16
 1737 01ac 1A60     		str	r2, [r3]
 1738              	.L133:
2634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1739              		.loc 2 2634 3 view .LVU508
2634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1740              		.loc 2 2634 6 is_stmt 0 view .LVU509
 1741 01ae 6905     		lsls	r1, r5, #21
 1742 01b0 3ED5     		bpl	.L104
2634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1743              		.loc 2 2634 54 discriminator 1 view .LVU510
 1744 01b2 7205     		lsls	r2, r6, #21
 1745 01b4 3CD5     		bpl	.L104
2637:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1746              		.loc 2 2637 5 is_stmt 1 view .LVU511
 1747 01b6 E36D     		ldr	r3, [r4, #92]
 1748 01b8 43F48043 		orr	r3, r3, #16384
 1749 01bc E365     		str	r3, [r4, #92]
2640:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1750              		.loc 2 2640 5 view .LVU512
 1751 01be 236E     		ldr	r3, [r4, #96]
 1752 01c0 43F00803 		orr	r3, r3, #8
 1753 01c4 2366     		str	r3, [r4, #96]
2643:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1754              		.loc 2 2643 5 view .LVU513
 1755 01c6 2368     		ldr	r3, [r4]
 1756 01c8 4FF48062 		mov	r2, #1024
 1757 01cc 1A60     		str	r2, [r3]
2649:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1758              		.loc 2 2649 5 view .LVU514
 1759 01ce 2046     		mov	r0, r4
2653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1760              		.loc 2 2653 1 is_stmt 0 view .LVU515
 1761 01d0 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 1762              		.cfi_remember_state
 1763              		.cfi_restore 14
 1764              		.cfi_restore 7
 1765              		.cfi_restore 6
 1766              		.cfi_restore 5
 1767              		.cfi_restore 4
 1768              		.cfi_restore 3
 1769              		.cfi_def_cfa_offset 0
 1770              	.LVL105:
2649:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1771              		.loc 2 2649 5 view .LVU516
 1772 01d4 FFF7FEBF 		b	HAL_ADCEx_InjectedQueueOverflowCallback
 1773              	.LVL106:
 1774              	.L116:
 1775              		.cfi_restore_state
2394:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1776              		.loc 2 2394 13 is_stmt 1 view .LVU517
 1777 01d8 E36D     		ldr	r3, [r4, #92]
 1778 01da 43F01003 		orr	r3, r3, #16
 1779 01de E365     		str	r3, [r4, #92]
2397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 1780              		.loc 2 2397 13 view .LVU518
 1781 01e0 236E     		ldr	r3, [r4, #96]
 1782 01e2 43F00103 		orr	r3, r3, #1
 1783 01e6 2366     		str	r3, [r4, #96]
 1784 01e8 57E7     		b	.L112
 1785              	.LVL107:
 1786              	.L123:
2450:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 1787              		.loc 2 2450 7 discriminator 4 view .LVU519
2451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1788              		.loc 2 2451 7 discriminator 4 view .LVU520
2451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1789              		.loc 2 2451 16 is_stmt 0 discriminator 4 view .LVU521
 1790 01ea 4FF0A040 		mov	r0, #1342177280
 1791 01ee C068     		ldr	r0, [r0, #12]
 1792              	.LVL108:
2451:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1793              		.loc 2 2451 16 discriminator 4 view .LVU522
 1794 01f0 76E7     		b	.L124
 1795              	.LVL109:
 1796              	.L128:
2496:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1797              		.loc 2 2496 13 is_stmt 1 view .LVU523
 1798 01f2 E36D     		ldr	r3, [r4, #92]
 1799 01f4 43F01003 		orr	r3, r3, #16
 1800 01f8 E365     		str	r3, [r4, #92]
2499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 1801              		.loc 2 2499 13 view .LVU524
 1802 01fa 236E     		ldr	r3, [r4, #96]
 1803 01fc 43F00103 		orr	r3, r3, #1
 1804 0200 2366     		str	r3, [r4, #96]
 1805 0202 87E7     		b	.L126
 1806              	.LVL110:
 1807              	.L129:
2490:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             }
 1808              		.loc 2 2490 15 view .LVU525
 1809 0204 E36D     		ldr	r3, [r4, #92]
 1810 0206 43F00103 		orr	r3, r3, #1
 1811 020a E365     		str	r3, [r4, #92]
 1812 020c 82E7     		b	.L126
 1813              	.L135:
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1814              		.loc 2 2602 9 view .LVU526
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1815              		.loc 2 2602 18 is_stmt 0 view .LVU527
 1816 020e 2368     		ldr	r3, [r4]
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1817              		.loc 2 2602 28 view .LVU528
 1818 0210 DB68     		ldr	r3, [r3, #12]
2602:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1819              		.loc 2 2602 12 view .LVU529
 1820 0212 13F0010F 		tst	r3, #1
 1821 0216 BBE7     		b	.L218
 1822              	.L113:
2349:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 1823              		.loc 2 2349 11 view .LVU530
 1824 0218 092F     		cmp	r7, #9
 1825 021a 05D8     		bhi	.L139
 1826 021c 40F22123 		movw	r3, #545
 1827 0220 FB40     		lsrs	r3, r3, r7
 1828 0222 DB07     		lsls	r3, r3, #31
 1829 0224 3FF51EAF 		bmi	.L140
 1830              	.L139:
2360:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 1831              		.loc 2 2360 9 is_stmt 1 discriminator 4 view .LVU531
 1832              	.LVL111:
2361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1833              		.loc 2 2361 9 discriminator 4 view .LVU532
2361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1834              		.loc 2 2361 18 is_stmt 0 discriminator 4 view .LVU533
 1835 0228 4FF0A043 		mov	r3, #1342177280
 1836 022c DB68     		ldr	r3, [r3, #12]
 1837              	.LVL112:
2361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 1838              		.loc 2 2361 18 discriminator 4 view .LVU534
 1839 022e 1AE7     		b	.L114
 1840              	.LVL113:
 1841              	.L104:
2653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1842              		.loc 2 2653 1 view .LVU535
 1843 0230 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1844              	.LVL114:
 1845              	.L220:
2653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1846              		.loc 2 2653 1 view .LVU536
 1847 0232 00BF     		.align	2
 1848              	.L219:
 1849 0234 00030050 		.word	1342178048
 1850 0238 00010050 		.word	1342177536
 1851 023c 00200002 		.word	33562624
 1852              		.cfi_endproc
 1853              	.LFE340:
 1855              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1856              		.align	1
 1857              		.global	ADC_DMAConvCplt
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	ADC_DMAConvCplt:
 1864              	.LVL115:
 1865              	.LFB352:
3542:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1866              		.loc 2 3542 1 is_stmt 1 view -0
 1867              		.cfi_startproc
 1868              		@ args = 0, pretend = 0, frame = 0
 1869              		@ frame_needed = 0, uses_anonymous_args = 0
3544:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1870              		.loc 2 3544 3 view .LVU538
3544:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1871              		.loc 2 3544 22 is_stmt 0 view .LVU539
 1872 0000 836A     		ldr	r3, [r0, #40]
 1873              	.LVL116:
3547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1874              		.loc 2 3547 3 is_stmt 1 view .LVU540
3547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1875              		.loc 2 3547 12 is_stmt 0 view .LVU541
 1876 0002 DA6D     		ldr	r2, [r3, #92]
3547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1877              		.loc 2 3547 6 view .LVU542
 1878 0004 12F0500F 		tst	r2, #80
3542:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1879              		.loc 2 3542 1 view .LVU543
 1880 0008 10B5     		push	{r4, lr}
 1881              		.cfi_def_cfa_offset 8
 1882              		.cfi_offset 4, -8
 1883              		.cfi_offset 14, -4
3550:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1884              		.loc 2 3550 5 view .LVU544
 1885 000a DA6D     		ldr	r2, [r3, #92]
3547:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 1886              		.loc 2 3547 6 view .LVU545
 1887 000c 21D1     		bne	.L222
3550:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1888              		.loc 2 3550 5 is_stmt 1 view .LVU546
 1889 000e 42F40072 		orr	r2, r2, #512
 1890 0012 DA65     		str	r2, [r3, #92]
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1891              		.loc 2 3556 5 view .LVU547
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1892              		.loc 2 3556 14 is_stmt 0 view .LVU548
 1893 0014 1A68     		ldr	r2, [r3]
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1894              		.loc 2 3556 24 view .LVU549
 1895 0016 1168     		ldr	r1, [r2]
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1896              		.loc 2 3556 8 view .LVU550
 1897 0018 0807     		lsls	r0, r1, #28
 1898              	.LVL117:
3556:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1899              		.loc 2 3556 8 view .LVU551
 1900 001a 16D5     		bpl	.L223
3559:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1901              		.loc 2 3559 7 is_stmt 1 view .LVU552
 1902              	.LVL118:
 1903              	.LBB222:
 1904              	.LBI222:
3649:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 1905              		.loc 1 3649 26 view .LVU553
 1906              	.LBB223:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1907              		.loc 1 3651 3 view .LVU554
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1908              		.loc 1 3651 12 is_stmt 0 view .LVU555
 1909 001c D168     		ldr	r1, [r2, #12]
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1910              		.loc 1 3651 103 view .LVU556
 1911 001e 11F4406F 		tst	r1, #3072
 1912 0022 0ED1     		bne	.L225
 1913              	.LVL119:
3651:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 1914              		.loc 1 3651 103 view .LVU557
 1915              	.LBE223:
 1916              	.LBE222:
3562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1917              		.loc 2 3562 9 is_stmt 1 view .LVU558
3562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1918              		.loc 2 3562 13 is_stmt 0 view .LVU559
 1919 0024 D268     		ldr	r2, [r2, #12]
3562:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1920              		.loc 2 3562 12 view .LVU560
 1921 0026 12F4005F 		tst	r2, #8192
 1922              	.L233:
3577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1923              		.loc 2 3577 10 view .LVU561
 1924 002a 0AD1     		bne	.L225
3580:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 1925              		.loc 2 3580 9 is_stmt 1 view .LVU562
 1926 002c DA6D     		ldr	r2, [r3, #92]
 1927 002e 22F48072 		bic	r2, r2, #256
 1928 0032 DA65     		str	r2, [r3, #92]
3581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1929              		.loc 2 3581 9 view .LVU563
3581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1930              		.loc 2 3581 18 is_stmt 0 view .LVU564
 1931 0034 DA6D     		ldr	r2, [r3, #92]
3581:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 1932              		.loc 2 3581 12 view .LVU565
 1933 0036 D104     		lsls	r1, r2, #19
3583:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 1934              		.loc 2 3583 11 is_stmt 1 view .LVU566
 1935 0038 5EBF     		ittt	pl
 1936 003a DA6D     		ldrpl	r2, [r3, #92]
 1937 003c 42F00102 		orrpl	r2, r2, #1
 1938 0040 DA65     		strpl	r2, [r3, #92]
 1939              	.L225:
3592:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1940              		.loc 2 3592 5 view .LVU567
 1941 0042 1846     		mov	r0, r3
 1942 0044 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1943              	.LVL120:
 1944              	.L221:
3612:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1945              		.loc 2 3612 1 is_stmt 0 view .LVU568
 1946 0048 10BD     		pop	{r4, pc}
 1947              	.LVL121:
 1948              	.L223:
3577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1949              		.loc 2 3577 7 is_stmt 1 view .LVU569
3577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1950              		.loc 2 3577 11 is_stmt 0 view .LVU570
 1951 004a D268     		ldr	r2, [r2, #12]
3577:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 1952              		.loc 2 3577 10 view .LVU571
 1953 004c 12F0020F 		tst	r2, #2
 1954 0050 EBE7     		b	.L233
 1955              	.LVL122:
 1956              	.L222:
3597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1957              		.loc 2 3597 5 is_stmt 1 view .LVU572
3597:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 1958              		.loc 2 3597 8 is_stmt 0 view .LVU573
 1959 0052 D206     		lsls	r2, r2, #27
 1960 0054 03D5     		bpl	.L228
3603:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1961              		.loc 2 3603 7 is_stmt 1 view .LVU574
 1962 0056 1846     		mov	r0, r3
 1963              	.LVL123:
3603:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1964              		.loc 2 3603 7 is_stmt 0 view .LVU575
 1965 0058 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1966              	.LVL124:
3603:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1967              		.loc 2 3603 7 view .LVU576
 1968 005c F4E7     		b	.L221
 1969              	.LVL125:
 1970              	.L228:
3609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1971              		.loc 2 3609 7 is_stmt 1 view .LVU577
3609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1972              		.loc 2 3609 23 is_stmt 0 view .LVU578
 1973 005e 5B6D     		ldr	r3, [r3, #84]
 1974              	.LVL126:
3612:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 1975              		.loc 2 3612 1 view .LVU579
 1976 0060 BDE81040 		pop	{r4, lr}
 1977              		.cfi_restore 14
 1978              		.cfi_restore 4
 1979              		.cfi_def_cfa_offset 0
3609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1980              		.loc 2 3609 7 view .LVU580
 1981 0064 5B6B     		ldr	r3, [r3, #52]
 1982 0066 1847     		bx	r3	@ indirect register sibling call
 1983              	.LVL127:
3609:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 1984              		.loc 2 3609 7 view .LVU581
 1985              		.cfi_endproc
 1986              	.LFE352:
 1988              		.section	.text.ADC_DMAError,"ax",%progbits
 1989              		.align	1
 1990              		.global	ADC_DMAError
 1991              		.syntax unified
 1992              		.thumb
 1993              		.thumb_func
 1994              		.fpu fpv4-sp-d16
 1996              	ADC_DMAError:
 1997              	.LVL128:
 1998              	.LFB354:
3631:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3632:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** /**
3633:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @brief  DMA error callback.
3634:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3635:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   * @retval None
3636:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   */
3637:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)
3638:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 1999              		.loc 2 3638 1 is_stmt 1 view -0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 0
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
3639:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3640:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2003              		.loc 2 3640 3 view .LVU583
 2004              		.loc 2 3640 22 is_stmt 0 view .LVU584
 2005 0000 806A     		ldr	r0, [r0, #40]
 2006              	.LVL129:
3641:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3642:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
3643:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2007              		.loc 2 3643 3 is_stmt 1 view .LVU585
3638:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 2008              		.loc 2 3638 1 is_stmt 0 view .LVU586
 2009 0002 08B5     		push	{r3, lr}
 2010              		.cfi_def_cfa_offset 8
 2011              		.cfi_offset 3, -8
 2012              		.cfi_offset 14, -4
 2013              		.loc 2 3643 3 view .LVU587
 2014 0004 C36D     		ldr	r3, [r0, #92]
 2015 0006 43F04003 		orr	r3, r3, #64
 2016 000a C365     		str	r3, [r0, #92]
3644:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3645:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Set ADC error code to DMA error */
3646:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 2017              		.loc 2 3646 3 is_stmt 1 view .LVU588
 2018 000c 036E     		ldr	r3, [r0, #96]
 2019 000e 43F00403 		orr	r3, r3, #4
 2020 0012 0366     		str	r3, [r0, #96]
3647:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
3648:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Error callback */
3649:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3650:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
3651:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #else
3652:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 2021              		.loc 2 3652 3 view .LVU589
 2022 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 2023              	.LVL130:
3653:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3654:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 2024              		.loc 2 3654 1 is_stmt 0 view .LVU590
 2025 0018 08BD     		pop	{r3, pc}
 2026              		.cfi_endproc
 2027              	.LFE354:
 2029              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2030              		.align	1
 2031              		.global	HAL_ADC_ConfigChannel
 2032              		.syntax unified
 2033              		.thumb
 2034              		.thumb_func
 2035              		.fpu fpv4-sp-d16
 2037              	HAL_ADC_ConfigChannel:
 2038              	.LVL131:
 2039              	.LFB345:
2759:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2040              		.loc 2 2759 1 is_stmt 1 view -0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 8
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
2760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2044              		.loc 2 2760 3 view .LVU592
2761:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2045              		.loc 2 2761 3 view .LVU593
2762:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 2046              		.loc 2 2762 3 view .LVU594
2763:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 2047              		.loc 2 2763 3 view .LVU595
2759:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2048              		.loc 2 2759 1 is_stmt 0 view .LVU596
 2049 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 2050              		.cfi_def_cfa_offset 32
 2051              		.cfi_offset 4, -20
 2052              		.cfi_offset 5, -16
 2053              		.cfi_offset 6, -12
 2054              		.cfi_offset 7, -8
 2055              		.cfi_offset 14, -4
2763:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 2056              		.loc 2 2763 17 view .LVU597
 2057 0002 0023     		movs	r3, #0
 2058 0004 0193     		str	r3, [sp, #4]
2764:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 2059              		.loc 2 2764 3 is_stmt 1 view .LVU598
2765:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2060              		.loc 2 2765 3 view .LVU599
2768:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 2061              		.loc 2 2768 3 view .LVU600
2769:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 2062              		.loc 2 2769 3 view .LVU601
2770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 2063              		.loc 2 2770 3 view .LVU602
2771:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 2064              		.loc 2 2771 3 view .LVU603
2772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 2065              		.loc 2 2772 3 view .LVU604
2773:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2066              		.loc 2 2773 3 view .LVU605
2777:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2067              		.loc 2 2777 3 view .LVU606
2780:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 2068              		.loc 2 2780 3 view .LVU607
2786:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 2069              		.loc 2 2786 5 view .LVU608
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2070              		.loc 2 2790 3 view .LVU609
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2071              		.loc 2 2790 3 view .LVU610
 2072 0006 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 2073 000a 012B     		cmp	r3, #1
2759:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2074              		.loc 2 2759 1 is_stmt 0 view .LVU611
 2075 000c 0546     		mov	r5, r0
 2076 000e 0C46     		mov	r4, r1
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2077              		.loc 2 2790 3 view .LVU612
 2078 0010 00F0A981 		beq	.L276
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2079              		.loc 2 2790 3 is_stmt 1 discriminator 2 view .LVU613
 2080 0014 0123     		movs	r3, #1
 2081 0016 80F85830 		strb	r3, [r0, #88]
2797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 2082              		.loc 2 2797 3 discriminator 2 view .LVU614
2797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 2083              		.loc 2 2797 7 is_stmt 0 discriminator 2 view .LVU615
 2084 001a 0068     		ldr	r0, [r0]
 2085              	.LVL132:
2797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 2086              		.loc 2 2797 7 discriminator 2 view .LVU616
 2087 001c FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2088              	.LVL133:
2797:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 2089              		.loc 2 2797 6 discriminator 2 view .LVU617
 2090 0020 0028     		cmp	r0, #0
 2091 0022 40F09A81 		bne	.L237
2800:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2092              		.loc 2 2800 5 is_stmt 1 view .LVU618
 2093 0026 4A68     		ldr	r2, [r1, #4]
 2094 0028 2868     		ldr	r0, [r5]
 2095              	.LVL134:
 2096              	.LBB294:
 2097              	.LBI294:
3993:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2098              		.loc 1 3993 22 view .LVU619
 2099              	.LBB295:
3999:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2100              		.loc 1 3999 3 view .LVU620
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 2101              		.loc 1 4001 3 is_stmt 0 view .LVU621
 2102 002a 2368     		ldr	r3, [r4]
3999:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2103              		.loc 1 3999 34 view .LVU622
 2104 002c 9109     		lsrs	r1, r2, #6
 2105              	.LVL135:
3999:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2106              		.loc 1 3999 34 view .LVU623
 2107 002e 01F00C01 		and	r1, r1, #12
 2108 0032 00F13007 		add	r7, r0, #48
 2109              	.LVL136:
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 2110              		.loc 1 4001 3 is_stmt 1 view .LVU624
 2111 0036 02F01F02 		and	r2, r2, #31
 2112              	.LVL137:
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 2113              		.loc 1 4001 3 is_stmt 0 view .LVU625
 2114 003a CE59     		ldr	r6, [r1, r7]
 2115 003c 4FF01F0C 		mov	ip, #31
 2116 0040 C3F38463 		ubfx	r3, r3, #26, #5
 2117              	.LVL138:
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 2118              		.loc 1 4001 3 view .LVU626
 2119 0044 9340     		lsls	r3, r3, r2
 2120 0046 0CFA02F2 		lsl	r2, ip, r2
 2121 004a 26EA0202 		bic	r2, r6, r2
 2122 004e 1343     		orrs	r3, r3, r2
 2123 0050 CB51     		str	r3, [r1, r7]
 2124              	.LVL139:
4001:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 2125              		.loc 1 4001 3 view .LVU627
 2126              	.LBE295:
 2127              	.LBE294:
2807:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2128              		.loc 2 2807 5 is_stmt 1 view .LVU628
2807:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2129              		.loc 2 2807 46 is_stmt 0 view .LVU629
 2130 0052 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2131              	.LVL140:
2808:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2132              		.loc 2 2808 5 is_stmt 1 view .LVU630
2808:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2133              		.loc 2 2808 47 is_stmt 0 view .LVU631
 2134 0056 2B68     		ldr	r3, [r5]
 2135              	.LVL141:
 2136              	.LBB296:
 2137              	.LBI296:
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2138              		.loc 1 6968 26 is_stmt 1 view .LVU632
 2139              	.LBB297:
 2140              		.loc 1 6970 3 view .LVU633
 2141              		.loc 1 6970 12 is_stmt 0 view .LVU634
 2142 0058 9E68     		ldr	r6, [r3, #8]
 2143 005a 06F00806 		and	r6, r6, #8
 2144              		.loc 1 6970 76 view .LVU635
 2145 005e 0643     		orrs	r6, r6, r0
 2146 0060 3DD1     		bne	.L239
 2147              	.LVL142:
 2148              		.loc 1 6970 76 view .LVU636
 2149              	.LBE297:
 2150              	.LBE296:
2809:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 2151              		.loc 2 2809 5 is_stmt 1 view .LVU637
2814:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2152              		.loc 2 2814 7 view .LVU638
2814:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2153              		.loc 2 2814 18 is_stmt 0 view .LVU639
 2154 0062 A268     		ldr	r2, [r4, #8]
 2155 0064 2168     		ldr	r1, [r4]
2814:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2156              		.loc 2 2814 10 view .LVU640
 2157 0066 B2F1004F 		cmp	r2, #-2147483648
 2158 006a 7CD1     		bne	.L240
2817:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2159              		.loc 2 2817 9 is_stmt 1 view .LVU641
 2160 006c 3246     		mov	r2, r6
 2161 006e 1846     		mov	r0, r3
 2162              	.LVL143:
2817:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2163              		.loc 2 2817 9 is_stmt 0 view .LVU642
 2164 0070 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 2165              	.LVL144:
2820:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 2166              		.loc 2 2820 9 is_stmt 1 view .LVU643
 2167 0074 2A68     		ldr	r2, [r5]
 2168              	.LVL145:
 2169              	.LBB298:
 2170              	.LBI298:
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2171              		.loc 1 3462 22 view .LVU644
 2172              	.LBB299:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2173              		.loc 1 3464 3 view .LVU645
 2174 0076 5369     		ldr	r3, [r2, #20]
 2175 0078 43F00043 		orr	r3, r3, #-2147483648
 2176              	.LVL146:
 2177              	.L278:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2178              		.loc 1 3464 3 is_stmt 0 view .LVU646
 2179              	.LBE299:
 2180              	.LBE298:
 2181              	.LBB300:
 2182              	.LBB301:
 2183 007c 5361     		str	r3, [r2, #20]
 2184              	.LBE301:
 2185              	.LBE300:
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2186              		.loc 2 2835 7 is_stmt 1 view .LVU647
2837:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2187              		.loc 2 2837 18 is_stmt 0 view .LVU648
 2188 007e 2769     		ldr	r7, [r4, #16]
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2189              		.loc 2 2835 26 view .LVU649
 2190 0080 2868     		ldr	r0, [r5]
 2191 0082 2268     		ldr	r2, [r4]
 2192 0084 C168     		ldr	r1, [r0, #12]
 2193              	.LVL147:
2837:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2194              		.loc 2 2837 7 is_stmt 1 view .LVU650
2837:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2195              		.loc 2 2837 10 is_stmt 0 view .LVU651
 2196 0086 042F     		cmp	r7, #4
 2197 0088 00F16003 		add	r3, r0, #96
 2198 008c 73D0     		beq	.L242
2840:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2199              		.loc 2 2840 9 is_stmt 1 view .LVU652
 2200              	.LVL148:
 2201              	.LBB303:
 2202              	.LBI303:
3122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2203              		.loc 1 3122 22 view .LVU653
 2204              	.LBB304:
3124:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2205              		.loc 1 3124 3 view .LVU654
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2206              		.loc 1 3126 3 view .LVU655
 2207              	.LBE304:
 2208              	.LBE303:
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2209              		.loc 2 2835 26 is_stmt 0 view .LVU656
 2210 008e C1F3C101 		ubfx	r1, r1, #3, #2
 2211              	.LVL149:
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2212              		.loc 2 2835 26 view .LVU657
 2213 0092 4800     		lsls	r0, r1, #1
 2214              	.LVL150:
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2215              		.loc 2 2835 24 view .LVU658
 2216 0094 6169     		ldr	r1, [r4, #20]
 2217              	.LBB307:
 2218              	.LBB305:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2219              		.loc 1 3126 3 view .LVU659
 2220 0096 53F827C0 		ldr	ip, [r3, r7, lsl #2]
 2221              	.LBE305:
 2222              	.LBE307:
2835:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2223              		.loc 2 2835 24 view .LVU660
 2224 009a 8140     		lsls	r1, r1, r0
 2225              	.LBB308:
 2226              	.LBB306:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2227              		.loc 1 3126 3 view .LVU661
 2228 009c B348     		ldr	r0, .L283
 2229 009e 02F0F842 		and	r2, r2, #2080374784
 2230              	.LVL151:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2231              		.loc 1 3126 3 view .LVU662
 2232 00a2 0CEA0000 		and	r0, ip, r0
 2233 00a6 1043     		orrs	r0, r0, r2
 2234 00a8 0143     		orrs	r1, r1, r0
 2235 00aa 41F00041 		orr	r1, r1, #-2147483648
 2236 00ae 43F82710 		str	r1, [r3, r7, lsl #2]
 2237              	.LVL152:
3126:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 2238              		.loc 1 3126 3 view .LVU663
 2239              	.LBE306:
 2240              	.LBE308:
2842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 2241              		.loc 2 2842 9 is_stmt 1 view .LVU664
2843:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* Set ADC selected offset sign & saturation */
 2242              		.loc 2 2843 9 view .LVU665
2845:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturatio
 2243              		.loc 2 2845 9 view .LVU666
 2244              	.LBB309:
 2245              	.LBI309:
3319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2246              		.loc 1 3319 22 view .LVU667
 2247              	.LBB310:
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2248              		.loc 1 3321 3 view .LVU668
3321:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2249              		.loc 1 3321 34 is_stmt 0 view .LVU669
 2250 00b2 2169     		ldr	r1, [r4, #16]
 2251              	.LVL153:
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
 2252              		.loc 1 3323 3 is_stmt 1 view .LVU670
 2253 00b4 A069     		ldr	r0, [r4, #24]
 2254 00b6 53F82120 		ldr	r2, [r3, r1, lsl #2]
 2255 00ba 22F08072 		bic	r2, r2, #16777216
 2256 00be 0243     		orrs	r2, r2, r0
 2257 00c0 43F82120 		str	r2, [r3, r1, lsl #2]
 2258              	.LVL154:
3323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
 2259              		.loc 1 3323 3 is_stmt 0 view .LVU671
 2260              	.LBE310:
 2261              	.LBE309:
2846:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 2262              		.loc 2 2846 9 is_stmt 1 view .LVU672
 2263 00c4 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 2264 00c6 2169     		ldr	r1, [r4, #16]
 2265 00c8 012A     		cmp	r2, #1
 2266              	.LBB311:
 2267              	.LBB312:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2268              		.loc 1 3378 3 is_stmt 0 view .LVU673
 2269 00ca 53F82120 		ldr	r2, [r3, r1, lsl #2]
 2270              	.LBE312:
 2271              	.LBE311:
2846:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 2272              		.loc 2 2846 9 view .LVU674
 2273 00ce 08BF     		it	eq
 2274 00d0 4FF00076 		moveq	r6, #33554432
 2275              	.LVL155:
 2276              	.LBB314:
 2277              	.LBI311:
3374:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2278              		.loc 1 3374 22 is_stmt 1 view .LVU675
 2279              	.LBB313:
3376:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2280              		.loc 1 3376 3 view .LVU676
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2281              		.loc 1 3378 3 view .LVU677
 2282 00d4 22F00072 		bic	r2, r2, #33554432
 2283 00d8 1643     		orrs	r6, r6, r2
 2284              	.LVL156:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2285              		.loc 1 3378 3 is_stmt 0 view .LVU678
 2286 00da 43F82160 		str	r6, [r3, r1, lsl #2]
 2287              	.LVL157:
 2288              	.L239:
3378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
 2289              		.loc 1 3378 3 view .LVU679
 2290              	.LBE313:
 2291              	.LBE314:
2874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2292              		.loc 2 2874 5 is_stmt 1 view .LVU680
2874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2293              		.loc 2 2874 9 is_stmt 0 view .LVU681
 2294 00de 2868     		ldr	r0, [r5]
 2295 00e0 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2296              	.LVL158:
2874:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2297              		.loc 2 2874 8 view .LVU682
 2298 00e4 A0BB     		cbnz	r0, .L257
2877:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2299              		.loc 2 2877 7 is_stmt 1 view .LVU683
 2300 00e6 E668     		ldr	r6, [r4, #12]
 2301 00e8 2868     		ldr	r0, [r5]
 2302              	.LVL159:
2877:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2303              		.loc 2 2877 7 is_stmt 0 view .LVU684
 2304 00ea 2368     		ldr	r3, [r4]
 2305              	.LVL160:
 2306              	.LBB315:
 2307              	.LBI315:
5397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2308              		.loc 1 5397 22 is_stmt 1 view .LVU685
 2309              	.LBB316:
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 2310              		.loc 1 5402 3 view .LVU686
 2311 00ec A04A     		ldr	r2, .L283+4
 2312 00ee D0F8B010 		ldr	r1, [r0, #176]
 2313 00f2 06F0180C 		and	ip, r6, #24
 2314 00f6 C3F31207 		ubfx	r7, r3, #0, #19
 2315 00fa 22FA0CF2 		lsr	r2, r2, ip
 2316 00fe 1A40     		ands	r2, r2, r3
 2317 0100 21EA0701 		bic	r1, r1, r7
 2318 0104 0A43     		orrs	r2, r2, r1
 2319 0106 C0F8B020 		str	r2, [r0, #176]
 2320              	.LVL161:
5402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 2321              		.loc 1 5402 3 is_stmt 0 view .LVU687
 2322              	.LBE316:
 2323              	.LBE315:
2880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2324              		.loc 2 2880 7 is_stmt 1 view .LVU688
2880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2325              		.loc 2 2880 10 is_stmt 0 view .LVU689
 2326 010a 9A4A     		ldr	r2, .L283+8
 2327 010c 9642     		cmp	r6, r2
 2328 010e 1FD1     		bne	.L257
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2329              		.loc 2 2884 9 is_stmt 1 view .LVU690
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2330              		.loc 2 2885 50 is_stmt 0 view .LVU691
 2331 0110 002F     		cmp	r7, #0
 2332 0112 40F08580 		bne	.L259
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2333              		.loc 2 2885 50 discriminator 1 view .LVU692
 2334 0116 9A0E     		lsrs	r2, r3, #26
 2335 0118 0132     		adds	r2, r2, #1
 2336 011a 02F01F06 		and	r6, r2, #31
 2337 011e 9206     		lsls	r2, r2, #26
 2338 0120 02F0F841 		and	r1, r2, #2080374784
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2339              		.loc 2 2884 9 discriminator 1 view .LVU693
 2340 0124 092E     		cmp	r6, #9
 2341 0126 4FF00102 		mov	r2, #1
 2342 012a 02FA06F2 		lsl	r2, r2, r6
 2343 012e 00F2A880 		bhi	.L261
 2344              	.L260:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2345              		.loc 2 2885 50 discriminator 10 view .LVU694
 2346 0132 1143     		orrs	r1, r1, r2
 2347 0134 002F     		cmp	r7, #0
 2348 0136 40F08E80 		bne	.L263
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2349              		.loc 2 2885 50 discriminator 11 view .LVU695
 2350 013a 9B0E     		lsrs	r3, r3, #26
 2351              	.L279:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2352              		.loc 2 2885 50 discriminator 12 view .LVU696
 2353 013c 0133     		adds	r3, r3, #1
 2354 013e 03F01F03 		and	r3, r3, #31
 2355 0142 03EB4303 		add	r3, r3, r3, lsl #1
 2356 0146 1B05     		lsls	r3, r3, #20
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2357              		.loc 2 2884 9 discriminator 12 view .LVU697
 2358 0148 1943     		orrs	r1, r1, r3
 2359              	.L265:
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2360              		.loc 2 2884 9 discriminator 1 view .LVU698
 2361 014a A268     		ldr	r2, [r4, #8]
 2362 014c FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 2363              	.LVL162:
 2364              	.L257:
2897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2365              		.loc 2 2897 5 is_stmt 1 view .LVU699
2897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2366              		.loc 2 2897 9 is_stmt 0 view .LVU700
 2367 0150 2268     		ldr	r2, [r4]
2897:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 2368              		.loc 2 2897 8 view .LVU701
 2369 0152 894B     		ldr	r3, .L283+12
 2370 0154 1A42     		tst	r2, r3
 2371 0156 40F0AE80 		bne	.L268
 2372              	.L272:
2760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2373              		.loc 2 2760 21 view .LVU702
 2374 015a 0020     		movs	r0, #0
 2375              	.LVL163:
 2376              	.L269:
2959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2377              		.loc 2 2959 3 is_stmt 1 view .LVU703
2959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2378              		.loc 2 2959 3 view .LVU704
 2379 015c 0023     		movs	r3, #0
 2380 015e 85F85830 		strb	r3, [r5, #88]
2962:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 2381              		.loc 2 2962 3 view .LVU705
 2382              	.LVL164:
 2383              	.L236:
2963:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2384              		.loc 2 2963 1 is_stmt 0 view .LVU706
 2385 0162 03B0     		add	sp, sp, #12
 2386              		.cfi_remember_state
 2387              		.cfi_def_cfa_offset 20
 2388              		@ sp needed
 2389 0164 F0BD     		pop	{r4, r5, r6, r7, pc}
 2390              	.LVL165:
 2391              	.L240:
 2392              		.cfi_restore_state
2825:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2393              		.loc 2 2825 9 is_stmt 1 view .LVU707
 2394 0166 1846     		mov	r0, r3
 2395              	.LVL166:
2825:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2396              		.loc 2 2825 9 is_stmt 0 view .LVU708
 2397 0168 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 2398              	.LVL167:
2828:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 2399              		.loc 2 2828 9 is_stmt 1 view .LVU709
 2400 016c 2A68     		ldr	r2, [r5]
 2401              	.LVL168:
 2402              	.LBB317:
 2403              	.LBI300:
3462:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2404              		.loc 1 3462 22 view .LVU710
 2405              	.LBB302:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2406              		.loc 1 3464 3 view .LVU711
 2407 016e 5369     		ldr	r3, [r2, #20]
 2408 0170 23F00043 		bic	r3, r3, #-2147483648
 2409 0174 82E7     		b	.L278
 2410              	.LVL169:
 2411              	.L242:
3464:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2412              		.loc 1 3464 3 is_stmt 0 view .LVU712
 2413              	.LBE302:
 2414              	.LBE317:
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2415              		.loc 2 2852 9 is_stmt 1 view .LVU713
 2416              	.LBB318:
 2417              	.LBI318:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2418              		.loc 1 3205 26 view .LVU714
 2419              	.LBB319:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2420              		.loc 1 3207 3 view .LVU715
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2421              		.loc 1 3209 3 view .LVU716
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2422              		.loc 1 3209 10 is_stmt 0 view .LVU717
 2423 0176 016E     		ldr	r1, [r0, #96]
 2424              	.LVL170:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2425              		.loc 1 3209 10 view .LVU718
 2426              	.LBE319:
 2427              	.LBE318:
 2428              	.LBB320:
 2429              	.LBI320:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2430              		.loc 1 3205 26 is_stmt 1 view .LVU719
 2431              	.LBB321:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2432              		.loc 1 3207 3 view .LVU720
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2433              		.loc 1 3209 3 view .LVU721
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2434              		.loc 1 3209 10 is_stmt 0 view .LVU722
 2435 0178 016E     		ldr	r1, [r0, #96]
 2436              	.LVL171:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2437              		.loc 1 3209 10 view .LVU723
 2438              	.LBE321:
 2439              	.LBE320:
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2440              		.loc 2 2852 104 view .LVU724
 2441 017a C2F31206 		ubfx	r6, r2, #0, #19
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2442              		.loc 2 2852 12 view .LVU725
 2443 017e C1F38461 		ubfx	r1, r1, #26, #5
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2444              		.loc 2 2852 104 view .LVU726
 2445 0182 002E     		cmp	r6, #0
 2446 0184 38D1     		bne	.L244
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2447              		.loc 2 2852 104 discriminator 5 view .LVU727
 2448 0186 C2F38462 		ubfx	r2, r2, #26, #5
 2449              	.L245:
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2450              		.loc 2 2852 11 discriminator 8 view .LVU728
 2451 018a 9142     		cmp	r1, r2
2854:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 2452              		.loc 2 2854 11 is_stmt 1 discriminator 8 view .LVU729
 2453              	.LVL172:
 2454              	.LBB322:
 2455              	.LBI322:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2456              		.loc 1 3264 22 discriminator 8 view .LVU730
 2457              	.LBB323:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2458              		.loc 1 3266 3 discriminator 8 view .LVU731
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 2459              		.loc 1 3268 3 discriminator 8 view .LVU732
 2460 018c 02BF     		ittt	eq
 2461 018e 026E     		ldreq	r2, [r0, #96]
 2462 0190 22F00042 		biceq	r2, r2, #-2147483648
 2463 0194 0266     		streq	r2, [r0, #96]
 2464              	.LBE323:
 2465              	.LBE322:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2466              		.loc 2 2856 9 discriminator 8 view .LVU733
 2467              	.LVL173:
 2468              	.LBB324:
 2469              	.LBI324:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2470              		.loc 1 3205 26 discriminator 8 view .LVU734
 2471              	.LBB325:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2472              		.loc 1 3207 3 discriminator 8 view .LVU735
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2473              		.loc 1 3209 3 discriminator 8 view .LVU736
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2474              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU737
 2475 0196 5A68     		ldr	r2, [r3, #4]
 2476              	.LVL174:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2477              		.loc 1 3209 10 discriminator 8 view .LVU738
 2478              	.LBE325:
 2479              	.LBE324:
 2480              	.LBB326:
 2481              	.LBI326:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2482              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU739
 2483              	.LBB327:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2484              		.loc 1 3207 3 discriminator 8 view .LVU740
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2485              		.loc 1 3209 3 discriminator 8 view .LVU741
 2486              	.LBE327:
 2487              	.LBE326:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2488              		.loc 2 2856 104 is_stmt 0 discriminator 8 view .LVU742
 2489 0198 2268     		ldr	r2, [r4]
 2490              	.LBB329:
 2491              	.LBB328:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2492              		.loc 1 3209 10 discriminator 8 view .LVU743
 2493 019a 5968     		ldr	r1, [r3, #4]
 2494              	.LVL175:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2495              		.loc 1 3209 10 discriminator 8 view .LVU744
 2496              	.LBE328:
 2497              	.LBE329:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2498              		.loc 2 2856 104 discriminator 8 view .LVU745
 2499 019c C2F31200 		ubfx	r0, r2, #0, #19
 2500              	.LVL176:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2501              		.loc 2 2856 12 discriminator 8 view .LVU746
 2502 01a0 C1F38461 		ubfx	r1, r1, #26, #5
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2503              		.loc 2 2856 104 discriminator 8 view .LVU747
 2504 01a4 68BB     		cbnz	r0, .L247
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2505              		.loc 2 2856 104 discriminator 5 view .LVU748
 2506 01a6 C2F38462 		ubfx	r2, r2, #26, #5
 2507              	.L248:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2508              		.loc 2 2856 11 discriminator 8 view .LVU749
 2509 01aa 9142     		cmp	r1, r2
2858:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 2510              		.loc 2 2858 11 is_stmt 1 discriminator 8 view .LVU750
 2511              	.LVL177:
 2512              	.LBB330:
 2513              	.LBI330:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2514              		.loc 1 3264 22 discriminator 8 view .LVU751
 2515              	.LBB331:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2516              		.loc 1 3266 3 discriminator 8 view .LVU752
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 2517              		.loc 1 3268 3 discriminator 8 view .LVU753
 2518 01ac 02BF     		ittt	eq
 2519 01ae 5A68     		ldreq	r2, [r3, #4]
 2520 01b0 22F00042 		biceq	r2, r2, #-2147483648
 2521 01b4 5A60     		streq	r2, [r3, #4]
 2522              	.LBE331:
 2523              	.LBE330:
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2524              		.loc 2 2860 9 discriminator 8 view .LVU754
 2525              	.LVL178:
 2526              	.LBB332:
 2527              	.LBI332:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2528              		.loc 1 3205 26 discriminator 8 view .LVU755
 2529              	.LBB333:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2530              		.loc 1 3207 3 discriminator 8 view .LVU756
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2531              		.loc 1 3209 3 discriminator 8 view .LVU757
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2532              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU758
 2533 01b6 9A68     		ldr	r2, [r3, #8]
 2534              	.LVL179:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2535              		.loc 1 3209 10 discriminator 8 view .LVU759
 2536              	.LBE333:
 2537              	.LBE332:
 2538              	.LBB334:
 2539              	.LBI334:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2540              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU760
 2541              	.LBB335:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2542              		.loc 1 3207 3 discriminator 8 view .LVU761
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2543              		.loc 1 3209 3 discriminator 8 view .LVU762
 2544              	.LBE335:
 2545              	.LBE334:
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2546              		.loc 2 2860 104 is_stmt 0 discriminator 8 view .LVU763
 2547 01b8 2268     		ldr	r2, [r4]
 2548              	.LBB337:
 2549              	.LBB336:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2550              		.loc 1 3209 10 discriminator 8 view .LVU764
 2551 01ba 9968     		ldr	r1, [r3, #8]
 2552              	.LVL180:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2553              		.loc 1 3209 10 discriminator 8 view .LVU765
 2554              	.LBE336:
 2555              	.LBE337:
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2556              		.loc 2 2860 104 discriminator 8 view .LVU766
 2557 01bc C2F31200 		ubfx	r0, r2, #0, #19
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2558              		.loc 2 2860 12 discriminator 8 view .LVU767
 2559 01c0 C1F38461 		ubfx	r1, r1, #26, #5
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2560              		.loc 2 2860 104 discriminator 8 view .LVU768
 2561 01c4 10BB     		cbnz	r0, .L250
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2562              		.loc 2 2860 104 discriminator 5 view .LVU769
 2563 01c6 C2F38462 		ubfx	r2, r2, #26, #5
 2564              	.L251:
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2565              		.loc 2 2860 11 discriminator 8 view .LVU770
 2566 01ca 9142     		cmp	r1, r2
2862:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 2567              		.loc 2 2862 11 is_stmt 1 discriminator 8 view .LVU771
 2568              	.LVL181:
 2569              	.LBB338:
 2570              	.LBI338:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2571              		.loc 1 3264 22 discriminator 8 view .LVU772
 2572              	.LBB339:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2573              		.loc 1 3266 3 discriminator 8 view .LVU773
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 2574              		.loc 1 3268 3 discriminator 8 view .LVU774
 2575 01cc 02BF     		ittt	eq
 2576 01ce 9A68     		ldreq	r2, [r3, #8]
 2577 01d0 22F00042 		biceq	r2, r2, #-2147483648
 2578 01d4 9A60     		streq	r2, [r3, #8]
 2579              	.LBE339:
 2580              	.LBE338:
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2581              		.loc 2 2864 9 discriminator 8 view .LVU775
 2582              	.LVL182:
 2583              	.LBB340:
 2584              	.LBI340:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2585              		.loc 1 3205 26 discriminator 8 view .LVU776
 2586              	.LBB341:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2587              		.loc 1 3207 3 discriminator 8 view .LVU777
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2588              		.loc 1 3209 3 discriminator 8 view .LVU778
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2589              		.loc 1 3209 10 is_stmt 0 discriminator 8 view .LVU779
 2590 01d6 DA68     		ldr	r2, [r3, #12]
 2591              	.LVL183:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2592              		.loc 1 3209 10 discriminator 8 view .LVU780
 2593              	.LBE341:
 2594              	.LBE340:
 2595              	.LBB342:
 2596              	.LBI342:
3205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2597              		.loc 1 3205 26 is_stmt 1 discriminator 8 view .LVU781
 2598              	.LBB343:
3207:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2599              		.loc 1 3207 3 discriminator 8 view .LVU782
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2600              		.loc 1 3209 3 discriminator 8 view .LVU783
 2601              	.LBE343:
 2602              	.LBE342:
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2603              		.loc 2 2864 104 is_stmt 0 discriminator 8 view .LVU784
 2604 01d8 2268     		ldr	r2, [r4]
 2605              	.LBB345:
 2606              	.LBB344:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2607              		.loc 1 3209 10 discriminator 8 view .LVU785
 2608 01da D968     		ldr	r1, [r3, #12]
 2609              	.LVL184:
3209:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2610              		.loc 1 3209 10 discriminator 8 view .LVU786
 2611              	.LBE344:
 2612              	.LBE345:
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2613              		.loc 2 2864 104 discriminator 8 view .LVU787
 2614 01dc C2F31200 		ubfx	r0, r2, #0, #19
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2615              		.loc 2 2864 12 discriminator 8 view .LVU788
 2616 01e0 C1F38461 		ubfx	r1, r1, #26, #5
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2617              		.loc 2 2864 104 discriminator 8 view .LVU789
 2618 01e4 B8B9     		cbnz	r0, .L253
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2619              		.loc 2 2864 104 discriminator 5 view .LVU790
 2620 01e6 C2F38462 		ubfx	r2, r2, #26, #5
 2621              	.L254:
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2622              		.loc 2 2864 11 discriminator 8 view .LVU791
 2623 01ea 9142     		cmp	r1, r2
2866:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 2624              		.loc 2 2866 11 is_stmt 1 discriminator 8 view .LVU792
 2625              	.LVL185:
 2626              	.LBB346:
 2627              	.LBI346:
3264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2628              		.loc 1 3264 22 discriminator 8 view .LVU793
 2629              	.LBB347:
3266:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 2630              		.loc 1 3266 3 discriminator 8 view .LVU794
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 2631              		.loc 1 3268 3 discriminator 8 view .LVU795
 2632 01ec 02BF     		ittt	eq
 2633 01ee DA68     		ldreq	r2, [r3, #12]
 2634 01f0 22F00042 		biceq	r2, r2, #-2147483648
 2635 01f4 DA60     		streq	r2, [r3, #12]
 2636 01f6 72E7     		b	.L239
 2637              	.LVL186:
 2638              	.L244:
3268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
 2639              		.loc 1 3268 3 is_stmt 0 discriminator 8 view .LVU796
 2640              	.LBE347:
 2641              	.LBE346:
 2642              	.LBB348:
 2643              	.LBI348:
 2644              		.file 3 "../../..\\CubeG4\\include/cmsis_gcc.h"
   1:../../..\CubeG4\include/cmsis_gcc.h **** /**************************************************************************//**
   2:../../..\CubeG4\include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:../../..\CubeG4\include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:../../..\CubeG4\include/cmsis_gcc.h ****  * @version  V5.0.4
   5:../../..\CubeG4\include/cmsis_gcc.h ****  * @date     09. April 2018
   6:../../..\CubeG4\include/cmsis_gcc.h ****  ******************************************************************************/
   7:../../..\CubeG4\include/cmsis_gcc.h **** /*
   8:../../..\CubeG4\include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:../../..\CubeG4\include/cmsis_gcc.h ****  *
  10:../../..\CubeG4\include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:../../..\CubeG4\include/cmsis_gcc.h ****  *
  12:../../..\CubeG4\include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:../../..\CubeG4\include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:../../..\CubeG4\include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:../../..\CubeG4\include/cmsis_gcc.h ****  *
  16:../../..\CubeG4\include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:../../..\CubeG4\include/cmsis_gcc.h ****  *
  18:../../..\CubeG4\include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:../../..\CubeG4\include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:../../..\CubeG4\include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:../../..\CubeG4\include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:../../..\CubeG4\include/cmsis_gcc.h ****  * limitations under the License.
  23:../../..\CubeG4\include/cmsis_gcc.h ****  */
  24:../../..\CubeG4\include/cmsis_gcc.h **** 
  25:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:../../..\CubeG4\include/cmsis_gcc.h **** 
  28:../../..\CubeG4\include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:../../..\CubeG4\include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:../../..\CubeG4\include/cmsis_gcc.h **** 
  34:../../..\CubeG4\include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef __has_builtin
  36:../../..\CubeG4\include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  38:../../..\CubeG4\include/cmsis_gcc.h **** 
  39:../../..\CubeG4\include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __ASM
  41:../../..\CubeG4\include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  43:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __INLINE
  44:../../..\CubeG4\include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  46:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:../../..\CubeG4\include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  49:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:../../..\CubeG4\include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:../../..\CubeG4\include/cmsis_gcc.h **** #endif                                           
  52:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:../../..\CubeG4\include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  55:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __USED
  56:../../..\CubeG4\include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  58:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __WEAK
  59:../../..\CubeG4\include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  61:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED
  62:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  64:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  67:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:../../..\CubeG4\include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  70:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:../../..\CubeG4\include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  78:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  86:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:../../..\CubeG4\include/cmsis_gcc.h **** #endif
  94:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 102:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:../../..\CubeG4\include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:../../..\CubeG4\include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:../../..\CubeG4\include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 110:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:../../..\CubeG4\include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 113:../../..\CubeG4\include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:../../..\CubeG4\include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 116:../../..\CubeG4\include/cmsis_gcc.h **** 
 117:../../..\CubeG4\include/cmsis_gcc.h **** 
 118:../../..\CubeG4\include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:../../..\CubeG4\include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:../../..\CubeG4\include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:../../..\CubeG4\include/cmsis_gcc.h ****   @{
 122:../../..\CubeG4\include/cmsis_gcc.h ****  */
 123:../../..\CubeG4\include/cmsis_gcc.h **** 
 124:../../..\CubeG4\include/cmsis_gcc.h **** /**
 125:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:../../..\CubeG4\include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:../../..\CubeG4\include/cmsis_gcc.h ****  */
 129:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:../../..\CubeG4\include/cmsis_gcc.h **** {
 131:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:../../..\CubeG4\include/cmsis_gcc.h **** }
 133:../../..\CubeG4\include/cmsis_gcc.h **** 
 134:../../..\CubeG4\include/cmsis_gcc.h **** 
 135:../../..\CubeG4\include/cmsis_gcc.h **** /**
 136:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:../../..\CubeG4\include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:../../..\CubeG4\include/cmsis_gcc.h ****  */
 140:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:../../..\CubeG4\include/cmsis_gcc.h **** {
 142:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:../../..\CubeG4\include/cmsis_gcc.h **** }
 144:../../..\CubeG4\include/cmsis_gcc.h **** 
 145:../../..\CubeG4\include/cmsis_gcc.h **** 
 146:../../..\CubeG4\include/cmsis_gcc.h **** /**
 147:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Control Register
 148:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Control Register value
 150:../../..\CubeG4\include/cmsis_gcc.h ****  */
 151:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:../../..\CubeG4\include/cmsis_gcc.h **** {
 153:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 154:../../..\CubeG4\include/cmsis_gcc.h **** 
 155:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 157:../../..\CubeG4\include/cmsis_gcc.h **** }
 158:../../..\CubeG4\include/cmsis_gcc.h **** 
 159:../../..\CubeG4\include/cmsis_gcc.h **** 
 160:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:../../..\CubeG4\include/cmsis_gcc.h **** /**
 162:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:../../..\CubeG4\include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:../../..\CubeG4\include/cmsis_gcc.h ****  */
 166:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:../../..\CubeG4\include/cmsis_gcc.h **** {
 168:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 169:../../..\CubeG4\include/cmsis_gcc.h **** 
 170:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 172:../../..\CubeG4\include/cmsis_gcc.h **** }
 173:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 174:../../..\CubeG4\include/cmsis_gcc.h **** 
 175:../../..\CubeG4\include/cmsis_gcc.h **** 
 176:../../..\CubeG4\include/cmsis_gcc.h **** /**
 177:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Control Register
 178:../../..\CubeG4\include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:../../..\CubeG4\include/cmsis_gcc.h ****  */
 181:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:../../..\CubeG4\include/cmsis_gcc.h **** {
 183:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:../../..\CubeG4\include/cmsis_gcc.h **** }
 185:../../..\CubeG4\include/cmsis_gcc.h **** 
 186:../../..\CubeG4\include/cmsis_gcc.h **** 
 187:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:../../..\CubeG4\include/cmsis_gcc.h **** /**
 189:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:../../..\CubeG4\include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:../../..\CubeG4\include/cmsis_gcc.h ****  */
 193:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:../../..\CubeG4\include/cmsis_gcc.h **** {
 195:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:../../..\CubeG4\include/cmsis_gcc.h **** }
 197:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 198:../../..\CubeG4\include/cmsis_gcc.h **** 
 199:../../..\CubeG4\include/cmsis_gcc.h **** 
 200:../../..\CubeG4\include/cmsis_gcc.h **** /**
 201:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:../../..\CubeG4\include/cmsis_gcc.h ****   \return               IPSR Register value
 204:../../..\CubeG4\include/cmsis_gcc.h ****  */
 205:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:../../..\CubeG4\include/cmsis_gcc.h **** {
 207:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 208:../../..\CubeG4\include/cmsis_gcc.h **** 
 209:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 211:../../..\CubeG4\include/cmsis_gcc.h **** }
 212:../../..\CubeG4\include/cmsis_gcc.h **** 
 213:../../..\CubeG4\include/cmsis_gcc.h **** 
 214:../../..\CubeG4\include/cmsis_gcc.h **** /**
 215:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:../../..\CubeG4\include/cmsis_gcc.h ****   \return               APSR Register value
 218:../../..\CubeG4\include/cmsis_gcc.h ****  */
 219:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:../../..\CubeG4\include/cmsis_gcc.h **** {
 221:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 222:../../..\CubeG4\include/cmsis_gcc.h **** 
 223:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 225:../../..\CubeG4\include/cmsis_gcc.h **** }
 226:../../..\CubeG4\include/cmsis_gcc.h **** 
 227:../../..\CubeG4\include/cmsis_gcc.h **** 
 228:../../..\CubeG4\include/cmsis_gcc.h **** /**
 229:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:../../..\CubeG4\include/cmsis_gcc.h ****   \return               xPSR Register value
 232:../../..\CubeG4\include/cmsis_gcc.h ****  */
 233:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:../../..\CubeG4\include/cmsis_gcc.h **** {
 235:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 236:../../..\CubeG4\include/cmsis_gcc.h **** 
 237:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 239:../../..\CubeG4\include/cmsis_gcc.h **** }
 240:../../..\CubeG4\include/cmsis_gcc.h **** 
 241:../../..\CubeG4\include/cmsis_gcc.h **** 
 242:../../..\CubeG4\include/cmsis_gcc.h **** /**
 243:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSP Register value
 246:../../..\CubeG4\include/cmsis_gcc.h ****  */
 247:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:../../..\CubeG4\include/cmsis_gcc.h **** {
 249:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 250:../../..\CubeG4\include/cmsis_gcc.h **** 
 251:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 253:../../..\CubeG4\include/cmsis_gcc.h **** }
 254:../../..\CubeG4\include/cmsis_gcc.h **** 
 255:../../..\CubeG4\include/cmsis_gcc.h **** 
 256:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:../../..\CubeG4\include/cmsis_gcc.h **** /**
 258:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSP Register value
 261:../../..\CubeG4\include/cmsis_gcc.h ****  */
 262:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:../../..\CubeG4\include/cmsis_gcc.h **** {
 264:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 265:../../..\CubeG4\include/cmsis_gcc.h **** 
 266:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 268:../../..\CubeG4\include/cmsis_gcc.h **** }
 269:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 270:../../..\CubeG4\include/cmsis_gcc.h **** 
 271:../../..\CubeG4\include/cmsis_gcc.h **** 
 272:../../..\CubeG4\include/cmsis_gcc.h **** /**
 273:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:../../..\CubeG4\include/cmsis_gcc.h ****  */
 277:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:../../..\CubeG4\include/cmsis_gcc.h **** {
 279:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:../../..\CubeG4\include/cmsis_gcc.h **** }
 281:../../..\CubeG4\include/cmsis_gcc.h **** 
 282:../../..\CubeG4\include/cmsis_gcc.h **** 
 283:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:../../..\CubeG4\include/cmsis_gcc.h **** /**
 285:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:../../..\CubeG4\include/cmsis_gcc.h ****  */
 289:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:../../..\CubeG4\include/cmsis_gcc.h **** {
 291:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:../../..\CubeG4\include/cmsis_gcc.h **** }
 293:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 294:../../..\CubeG4\include/cmsis_gcc.h **** 
 295:../../..\CubeG4\include/cmsis_gcc.h **** 
 296:../../..\CubeG4\include/cmsis_gcc.h **** /**
 297:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSP Register value
 300:../../..\CubeG4\include/cmsis_gcc.h ****  */
 301:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:../../..\CubeG4\include/cmsis_gcc.h **** {
 303:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 304:../../..\CubeG4\include/cmsis_gcc.h **** 
 305:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 307:../../..\CubeG4\include/cmsis_gcc.h **** }
 308:../../..\CubeG4\include/cmsis_gcc.h **** 
 309:../../..\CubeG4\include/cmsis_gcc.h **** 
 310:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:../../..\CubeG4\include/cmsis_gcc.h **** /**
 312:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSP Register value
 315:../../..\CubeG4\include/cmsis_gcc.h ****  */
 316:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:../../..\CubeG4\include/cmsis_gcc.h **** {
 318:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 319:../../..\CubeG4\include/cmsis_gcc.h **** 
 320:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 322:../../..\CubeG4\include/cmsis_gcc.h **** }
 323:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 324:../../..\CubeG4\include/cmsis_gcc.h **** 
 325:../../..\CubeG4\include/cmsis_gcc.h **** 
 326:../../..\CubeG4\include/cmsis_gcc.h **** /**
 327:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:../../..\CubeG4\include/cmsis_gcc.h ****  */
 331:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:../../..\CubeG4\include/cmsis_gcc.h **** {
 333:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:../../..\CubeG4\include/cmsis_gcc.h **** }
 335:../../..\CubeG4\include/cmsis_gcc.h **** 
 336:../../..\CubeG4\include/cmsis_gcc.h **** 
 337:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:../../..\CubeG4\include/cmsis_gcc.h **** /**
 339:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:../../..\CubeG4\include/cmsis_gcc.h ****  */
 343:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:../../..\CubeG4\include/cmsis_gcc.h **** {
 345:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:../../..\CubeG4\include/cmsis_gcc.h **** }
 347:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 348:../../..\CubeG4\include/cmsis_gcc.h **** 
 349:../../..\CubeG4\include/cmsis_gcc.h **** 
 350:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:../../..\CubeG4\include/cmsis_gcc.h **** /**
 352:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:../../..\CubeG4\include/cmsis_gcc.h ****   \return               SP Register value
 355:../../..\CubeG4\include/cmsis_gcc.h ****  */
 356:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:../../..\CubeG4\include/cmsis_gcc.h **** {
 358:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 359:../../..\CubeG4\include/cmsis_gcc.h **** 
 360:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 362:../../..\CubeG4\include/cmsis_gcc.h **** }
 363:../../..\CubeG4\include/cmsis_gcc.h **** 
 364:../../..\CubeG4\include/cmsis_gcc.h **** 
 365:../../..\CubeG4\include/cmsis_gcc.h **** /**
 366:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:../../..\CubeG4\include/cmsis_gcc.h ****  */
 370:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:../../..\CubeG4\include/cmsis_gcc.h **** {
 372:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:../../..\CubeG4\include/cmsis_gcc.h **** }
 374:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 375:../../..\CubeG4\include/cmsis_gcc.h **** 
 376:../../..\CubeG4\include/cmsis_gcc.h **** 
 377:../../..\CubeG4\include/cmsis_gcc.h **** /**
 378:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Priority Mask value
 381:../../..\CubeG4\include/cmsis_gcc.h ****  */
 382:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:../../..\CubeG4\include/cmsis_gcc.h **** {
 384:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 385:../../..\CubeG4\include/cmsis_gcc.h **** 
 386:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 388:../../..\CubeG4\include/cmsis_gcc.h **** }
 389:../../..\CubeG4\include/cmsis_gcc.h **** 
 390:../../..\CubeG4\include/cmsis_gcc.h **** 
 391:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:../../..\CubeG4\include/cmsis_gcc.h **** /**
 393:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Priority Mask value
 396:../../..\CubeG4\include/cmsis_gcc.h ****  */
 397:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:../../..\CubeG4\include/cmsis_gcc.h **** {
 399:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 400:../../..\CubeG4\include/cmsis_gcc.h **** 
 401:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 403:../../..\CubeG4\include/cmsis_gcc.h **** }
 404:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 405:../../..\CubeG4\include/cmsis_gcc.h **** 
 406:../../..\CubeG4\include/cmsis_gcc.h **** 
 407:../../..\CubeG4\include/cmsis_gcc.h **** /**
 408:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:../../..\CubeG4\include/cmsis_gcc.h ****  */
 412:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:../../..\CubeG4\include/cmsis_gcc.h **** {
 414:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:../../..\CubeG4\include/cmsis_gcc.h **** }
 416:../../..\CubeG4\include/cmsis_gcc.h **** 
 417:../../..\CubeG4\include/cmsis_gcc.h **** 
 418:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:../../..\CubeG4\include/cmsis_gcc.h **** /**
 420:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:../../..\CubeG4\include/cmsis_gcc.h ****  */
 424:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:../../..\CubeG4\include/cmsis_gcc.h **** {
 426:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:../../..\CubeG4\include/cmsis_gcc.h **** }
 428:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 429:../../..\CubeG4\include/cmsis_gcc.h **** 
 430:../../..\CubeG4\include/cmsis_gcc.h **** 
 431:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:../../..\CubeG4\include/cmsis_gcc.h **** /**
 435:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:../../..\CubeG4\include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:../../..\CubeG4\include/cmsis_gcc.h ****  */
 439:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:../../..\CubeG4\include/cmsis_gcc.h **** {
 441:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:../../..\CubeG4\include/cmsis_gcc.h **** }
 443:../../..\CubeG4\include/cmsis_gcc.h **** 
 444:../../..\CubeG4\include/cmsis_gcc.h **** 
 445:../../..\CubeG4\include/cmsis_gcc.h **** /**
 446:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:../../..\CubeG4\include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:../../..\CubeG4\include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:../../..\CubeG4\include/cmsis_gcc.h ****  */
 450:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:../../..\CubeG4\include/cmsis_gcc.h **** {
 452:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:../../..\CubeG4\include/cmsis_gcc.h **** }
 454:../../..\CubeG4\include/cmsis_gcc.h **** 
 455:../../..\CubeG4\include/cmsis_gcc.h **** 
 456:../../..\CubeG4\include/cmsis_gcc.h **** /**
 457:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Base Priority register value
 460:../../..\CubeG4\include/cmsis_gcc.h ****  */
 461:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:../../..\CubeG4\include/cmsis_gcc.h **** {
 463:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 464:../../..\CubeG4\include/cmsis_gcc.h **** 
 465:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 467:../../..\CubeG4\include/cmsis_gcc.h **** }
 468:../../..\CubeG4\include/cmsis_gcc.h **** 
 469:../../..\CubeG4\include/cmsis_gcc.h **** 
 470:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:../../..\CubeG4\include/cmsis_gcc.h **** /**
 472:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Base Priority register value
 475:../../..\CubeG4\include/cmsis_gcc.h ****  */
 476:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:../../..\CubeG4\include/cmsis_gcc.h **** {
 478:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 479:../../..\CubeG4\include/cmsis_gcc.h **** 
 480:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 482:../../..\CubeG4\include/cmsis_gcc.h **** }
 483:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 484:../../..\CubeG4\include/cmsis_gcc.h **** 
 485:../../..\CubeG4\include/cmsis_gcc.h **** 
 486:../../..\CubeG4\include/cmsis_gcc.h **** /**
 487:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:../../..\CubeG4\include/cmsis_gcc.h ****  */
 491:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:../../..\CubeG4\include/cmsis_gcc.h **** {
 493:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:../../..\CubeG4\include/cmsis_gcc.h **** }
 495:../../..\CubeG4\include/cmsis_gcc.h **** 
 496:../../..\CubeG4\include/cmsis_gcc.h **** 
 497:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:../../..\CubeG4\include/cmsis_gcc.h **** /**
 499:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:../../..\CubeG4\include/cmsis_gcc.h ****  */
 503:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:../../..\CubeG4\include/cmsis_gcc.h **** {
 505:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:../../..\CubeG4\include/cmsis_gcc.h **** }
 507:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 508:../../..\CubeG4\include/cmsis_gcc.h **** 
 509:../../..\CubeG4\include/cmsis_gcc.h **** 
 510:../../..\CubeG4\include/cmsis_gcc.h **** /**
 511:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:../../..\CubeG4\include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:../../..\CubeG4\include/cmsis_gcc.h ****  */
 516:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:../../..\CubeG4\include/cmsis_gcc.h **** {
 518:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:../../..\CubeG4\include/cmsis_gcc.h **** }
 520:../../..\CubeG4\include/cmsis_gcc.h **** 
 521:../../..\CubeG4\include/cmsis_gcc.h **** 
 522:../../..\CubeG4\include/cmsis_gcc.h **** /**
 523:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:../../..\CubeG4\include/cmsis_gcc.h ****  */
 527:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:../../..\CubeG4\include/cmsis_gcc.h **** {
 529:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 530:../../..\CubeG4\include/cmsis_gcc.h **** 
 531:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 533:../../..\CubeG4\include/cmsis_gcc.h **** }
 534:../../..\CubeG4\include/cmsis_gcc.h **** 
 535:../../..\CubeG4\include/cmsis_gcc.h **** 
 536:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:../../..\CubeG4\include/cmsis_gcc.h **** /**
 538:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:../../..\CubeG4\include/cmsis_gcc.h ****  */
 542:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:../../..\CubeG4\include/cmsis_gcc.h **** {
 544:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 545:../../..\CubeG4\include/cmsis_gcc.h **** 
 546:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 548:../../..\CubeG4\include/cmsis_gcc.h **** }
 549:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 550:../../..\CubeG4\include/cmsis_gcc.h **** 
 551:../../..\CubeG4\include/cmsis_gcc.h **** 
 552:../../..\CubeG4\include/cmsis_gcc.h **** /**
 553:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:../../..\CubeG4\include/cmsis_gcc.h ****  */
 557:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:../../..\CubeG4\include/cmsis_gcc.h **** {
 559:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:../../..\CubeG4\include/cmsis_gcc.h **** }
 561:../../..\CubeG4\include/cmsis_gcc.h **** 
 562:../../..\CubeG4\include/cmsis_gcc.h **** 
 563:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:../../..\CubeG4\include/cmsis_gcc.h **** /**
 565:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:../../..\CubeG4\include/cmsis_gcc.h ****  */
 569:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:../../..\CubeG4\include/cmsis_gcc.h **** {
 571:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:../../..\CubeG4\include/cmsis_gcc.h **** }
 573:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 574:../../..\CubeG4\include/cmsis_gcc.h **** 
 575:../../..\CubeG4\include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:../../..\CubeG4\include/cmsis_gcc.h **** 
 579:../../..\CubeG4\include/cmsis_gcc.h **** 
 580:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:../../..\CubeG4\include/cmsis_gcc.h **** 
 583:../../..\CubeG4\include/cmsis_gcc.h **** /**
 584:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 588:../../..\CubeG4\include/cmsis_gcc.h ****   
 589:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:../../..\CubeG4\include/cmsis_gcc.h ****  */
 592:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:../../..\CubeG4\include/cmsis_gcc.h **** {
 594:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:../../..\CubeG4\include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 598:../../..\CubeG4\include/cmsis_gcc.h **** #else
 599:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 600:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 602:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 603:../../..\CubeG4\include/cmsis_gcc.h **** }
 604:../../..\CubeG4\include/cmsis_gcc.h **** 
 605:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:../../..\CubeG4\include/cmsis_gcc.h **** /**
 607:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:../../..\CubeG4\include/cmsis_gcc.h **** 
 611:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:../../..\CubeG4\include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:../../..\CubeG4\include/cmsis_gcc.h ****  */
 614:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:../../..\CubeG4\include/cmsis_gcc.h **** {
 616:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 619:../../..\CubeG4\include/cmsis_gcc.h **** #else
 620:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 621:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 623:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 624:../../..\CubeG4\include/cmsis_gcc.h **** }
 625:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 626:../../..\CubeG4\include/cmsis_gcc.h **** 
 627:../../..\CubeG4\include/cmsis_gcc.h **** 
 628:../../..\CubeG4\include/cmsis_gcc.h **** /**
 629:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 633:../../..\CubeG4\include/cmsis_gcc.h ****   
 634:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:../../..\CubeG4\include/cmsis_gcc.h ****  */
 637:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:../../..\CubeG4\include/cmsis_gcc.h **** {
 639:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:../../..\CubeG4\include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:../../..\CubeG4\include/cmsis_gcc.h **** #else
 644:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 646:../../..\CubeG4\include/cmsis_gcc.h **** }
 647:../../..\CubeG4\include/cmsis_gcc.h **** 
 648:../../..\CubeG4\include/cmsis_gcc.h **** 
 649:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:../../..\CubeG4\include/cmsis_gcc.h **** /**
 651:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:../../..\CubeG4\include/cmsis_gcc.h **** 
 655:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:../../..\CubeG4\include/cmsis_gcc.h ****  */
 658:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:../../..\CubeG4\include/cmsis_gcc.h **** {
 660:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:../../..\CubeG4\include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:../../..\CubeG4\include/cmsis_gcc.h **** #else
 664:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 666:../../..\CubeG4\include/cmsis_gcc.h **** }
 667:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 668:../../..\CubeG4\include/cmsis_gcc.h **** 
 669:../../..\CubeG4\include/cmsis_gcc.h **** 
 670:../../..\CubeG4\include/cmsis_gcc.h **** /**
 671:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 675:../../..\CubeG4\include/cmsis_gcc.h **** 
 676:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:../../..\CubeG4\include/cmsis_gcc.h ****  */
 679:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:../../..\CubeG4\include/cmsis_gcc.h **** {
 681:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 685:../../..\CubeG4\include/cmsis_gcc.h **** #else
 686:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 687:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 689:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 690:../../..\CubeG4\include/cmsis_gcc.h **** }
 691:../../..\CubeG4\include/cmsis_gcc.h **** 
 692:../../..\CubeG4\include/cmsis_gcc.h **** 
 693:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:../../..\CubeG4\include/cmsis_gcc.h **** /**
 695:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:../../..\CubeG4\include/cmsis_gcc.h **** 
 699:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:../../..\CubeG4\include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:../../..\CubeG4\include/cmsis_gcc.h ****  */
 702:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:../../..\CubeG4\include/cmsis_gcc.h **** {
 704:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:../../..\CubeG4\include/cmsis_gcc.h ****   return 0U;
 707:../../..\CubeG4\include/cmsis_gcc.h **** #else
 708:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 709:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 711:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 712:../../..\CubeG4\include/cmsis_gcc.h **** }
 713:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 714:../../..\CubeG4\include/cmsis_gcc.h **** 
 715:../../..\CubeG4\include/cmsis_gcc.h **** 
 716:../../..\CubeG4\include/cmsis_gcc.h **** /**
 717:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:../../..\CubeG4\include/cmsis_gcc.h ****   mode.
 721:../../..\CubeG4\include/cmsis_gcc.h **** 
 722:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:../../..\CubeG4\include/cmsis_gcc.h ****  */
 725:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:../../..\CubeG4\include/cmsis_gcc.h **** {
 727:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:../../..\CubeG4\include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:../../..\CubeG4\include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:../../..\CubeG4\include/cmsis_gcc.h **** #else
 732:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 734:../../..\CubeG4\include/cmsis_gcc.h **** }
 735:../../..\CubeG4\include/cmsis_gcc.h **** 
 736:../../..\CubeG4\include/cmsis_gcc.h **** 
 737:../../..\CubeG4\include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:../../..\CubeG4\include/cmsis_gcc.h **** /**
 739:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:../../..\CubeG4\include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:../../..\CubeG4\include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:../../..\CubeG4\include/cmsis_gcc.h **** 
 743:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:../../..\CubeG4\include/cmsis_gcc.h ****  */
 746:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:../../..\CubeG4\include/cmsis_gcc.h **** {
 748:../../..\CubeG4\include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:../../..\CubeG4\include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:../../..\CubeG4\include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:../../..\CubeG4\include/cmsis_gcc.h **** #else
 752:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 754:../../..\CubeG4\include/cmsis_gcc.h **** }
 755:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 756:../../..\CubeG4\include/cmsis_gcc.h **** 
 757:../../..\CubeG4\include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:../../..\CubeG4\include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:../../..\CubeG4\include/cmsis_gcc.h **** 
 760:../../..\CubeG4\include/cmsis_gcc.h **** 
 761:../../..\CubeG4\include/cmsis_gcc.h **** /**
 762:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:../../..\CubeG4\include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:../../..\CubeG4\include/cmsis_gcc.h ****  */
 766:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:../../..\CubeG4\include/cmsis_gcc.h **** {
 768:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:../../..\CubeG4\include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:../../..\CubeG4\include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:../../..\CubeG4\include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:../../..\CubeG4\include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:../../..\CubeG4\include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:../../..\CubeG4\include/cmsis_gcc.h **** #else
 776:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 777:../../..\CubeG4\include/cmsis_gcc.h **** 
 778:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:../../..\CubeG4\include/cmsis_gcc.h ****   return(result);
 780:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 781:../../..\CubeG4\include/cmsis_gcc.h **** #else
 782:../../..\CubeG4\include/cmsis_gcc.h ****   return(0U);
 783:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 784:../../..\CubeG4\include/cmsis_gcc.h **** }
 785:../../..\CubeG4\include/cmsis_gcc.h **** 
 786:../../..\CubeG4\include/cmsis_gcc.h **** 
 787:../../..\CubeG4\include/cmsis_gcc.h **** /**
 788:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:../../..\CubeG4\include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:../../..\CubeG4\include/cmsis_gcc.h ****  */
 792:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:../../..\CubeG4\include/cmsis_gcc.h **** {
 794:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:../../..\CubeG4\include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:../../..\CubeG4\include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:../../..\CubeG4\include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:../../..\CubeG4\include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:../../..\CubeG4\include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:../../..\CubeG4\include/cmsis_gcc.h **** #else
 802:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 804:../../..\CubeG4\include/cmsis_gcc.h **** #else
 805:../../..\CubeG4\include/cmsis_gcc.h ****   (void)fpscr;
 806:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 807:../../..\CubeG4\include/cmsis_gcc.h **** }
 808:../../..\CubeG4\include/cmsis_gcc.h **** 
 809:../../..\CubeG4\include/cmsis_gcc.h **** 
 810:../../..\CubeG4\include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:../../..\CubeG4\include/cmsis_gcc.h **** 
 812:../../..\CubeG4\include/cmsis_gcc.h **** 
 813:../../..\CubeG4\include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:../../..\CubeG4\include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:../../..\CubeG4\include/cmsis_gcc.h ****   Access to dedicated instructions
 816:../../..\CubeG4\include/cmsis_gcc.h ****   @{
 817:../../..\CubeG4\include/cmsis_gcc.h **** */
 818:../../..\CubeG4\include/cmsis_gcc.h **** 
 819:../../..\CubeG4\include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:../../..\CubeG4\include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:../../..\CubeG4\include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:../../..\CubeG4\include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:../../..\CubeG4\include/cmsis_gcc.h **** #else
 827:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:../../..\CubeG4\include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 831:../../..\CubeG4\include/cmsis_gcc.h **** 
 832:../../..\CubeG4\include/cmsis_gcc.h **** /**
 833:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   No Operation
 834:../../..\CubeG4\include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:../../..\CubeG4\include/cmsis_gcc.h ****  */
 836:../../..\CubeG4\include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:../../..\CubeG4\include/cmsis_gcc.h **** 
 838:../../..\CubeG4\include/cmsis_gcc.h **** /**
 839:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:../../..\CubeG4\include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:../../..\CubeG4\include/cmsis_gcc.h ****  */
 842:../../..\CubeG4\include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:../../..\CubeG4\include/cmsis_gcc.h **** 
 844:../../..\CubeG4\include/cmsis_gcc.h **** 
 845:../../..\CubeG4\include/cmsis_gcc.h **** /**
 846:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Wait For Event
 847:../../..\CubeG4\include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:../../..\CubeG4\include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:../../..\CubeG4\include/cmsis_gcc.h ****  */
 850:../../..\CubeG4\include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:../../..\CubeG4\include/cmsis_gcc.h **** 
 852:../../..\CubeG4\include/cmsis_gcc.h **** 
 853:../../..\CubeG4\include/cmsis_gcc.h **** /**
 854:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Send Event
 855:../../..\CubeG4\include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:../../..\CubeG4\include/cmsis_gcc.h ****  */
 857:../../..\CubeG4\include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:../../..\CubeG4\include/cmsis_gcc.h **** 
 859:../../..\CubeG4\include/cmsis_gcc.h **** 
 860:../../..\CubeG4\include/cmsis_gcc.h **** /**
 861:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:../../..\CubeG4\include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:../../..\CubeG4\include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:../../..\CubeG4\include/cmsis_gcc.h ****            after the instruction has been completed.
 865:../../..\CubeG4\include/cmsis_gcc.h ****  */
 866:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:../../..\CubeG4\include/cmsis_gcc.h **** {
 868:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:../../..\CubeG4\include/cmsis_gcc.h **** }
 870:../../..\CubeG4\include/cmsis_gcc.h **** 
 871:../../..\CubeG4\include/cmsis_gcc.h **** 
 872:../../..\CubeG4\include/cmsis_gcc.h **** /**
 873:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:../../..\CubeG4\include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:../../..\CubeG4\include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:../../..\CubeG4\include/cmsis_gcc.h ****  */
 877:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:../../..\CubeG4\include/cmsis_gcc.h **** {
 879:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:../../..\CubeG4\include/cmsis_gcc.h **** }
 881:../../..\CubeG4\include/cmsis_gcc.h **** 
 882:../../..\CubeG4\include/cmsis_gcc.h **** 
 883:../../..\CubeG4\include/cmsis_gcc.h **** /**
 884:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:../../..\CubeG4\include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:../../..\CubeG4\include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:../../..\CubeG4\include/cmsis_gcc.h ****  */
 888:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:../../..\CubeG4\include/cmsis_gcc.h **** {
 890:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:../../..\CubeG4\include/cmsis_gcc.h **** }
 892:../../..\CubeG4\include/cmsis_gcc.h **** 
 893:../../..\CubeG4\include/cmsis_gcc.h **** 
 894:../../..\CubeG4\include/cmsis_gcc.h **** /**
 895:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 899:../../..\CubeG4\include/cmsis_gcc.h ****  */
 900:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:../../..\CubeG4\include/cmsis_gcc.h **** {
 902:../../..\CubeG4\include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:../../..\CubeG4\include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:../../..\CubeG4\include/cmsis_gcc.h **** #else
 905:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 906:../../..\CubeG4\include/cmsis_gcc.h **** 
 907:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 909:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 910:../../..\CubeG4\include/cmsis_gcc.h **** }
 911:../../..\CubeG4\include/cmsis_gcc.h **** 
 912:../../..\CubeG4\include/cmsis_gcc.h **** 
 913:../../..\CubeG4\include/cmsis_gcc.h **** /**
 914:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 918:../../..\CubeG4\include/cmsis_gcc.h ****  */
 919:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:../../..\CubeG4\include/cmsis_gcc.h **** {
 921:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 922:../../..\CubeG4\include/cmsis_gcc.h **** 
 923:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 925:../../..\CubeG4\include/cmsis_gcc.h **** }
 926:../../..\CubeG4\include/cmsis_gcc.h **** 
 927:../../..\CubeG4\include/cmsis_gcc.h **** 
 928:../../..\CubeG4\include/cmsis_gcc.h **** /**
 929:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 933:../../..\CubeG4\include/cmsis_gcc.h ****  */
 934:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:../../..\CubeG4\include/cmsis_gcc.h **** {
 936:../../..\CubeG4\include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:../../..\CubeG4\include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:../../..\CubeG4\include/cmsis_gcc.h **** #else
 939:../../..\CubeG4\include/cmsis_gcc.h ****   int16_t result;
 940:../../..\CubeG4\include/cmsis_gcc.h **** 
 941:../../..\CubeG4\include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 943:../../..\CubeG4\include/cmsis_gcc.h **** #endif
 944:../../..\CubeG4\include/cmsis_gcc.h **** }
 945:../../..\CubeG4\include/cmsis_gcc.h **** 
 946:../../..\CubeG4\include/cmsis_gcc.h **** 
 947:../../..\CubeG4\include/cmsis_gcc.h **** /**
 948:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:../../..\CubeG4\include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Rotated value
 953:../../..\CubeG4\include/cmsis_gcc.h ****  */
 954:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:../../..\CubeG4\include/cmsis_gcc.h **** {
 956:../../..\CubeG4\include/cmsis_gcc.h ****   op2 %= 32U;
 957:../../..\CubeG4\include/cmsis_gcc.h ****   if (op2 == 0U)
 958:../../..\CubeG4\include/cmsis_gcc.h ****   {
 959:../../..\CubeG4\include/cmsis_gcc.h ****     return op1;
 960:../../..\CubeG4\include/cmsis_gcc.h ****   }
 961:../../..\CubeG4\include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:../../..\CubeG4\include/cmsis_gcc.h **** }
 963:../../..\CubeG4\include/cmsis_gcc.h **** 
 964:../../..\CubeG4\include/cmsis_gcc.h **** 
 965:../../..\CubeG4\include/cmsis_gcc.h **** /**
 966:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Breakpoint
 967:../../..\CubeG4\include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:../../..\CubeG4\include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:../../..\CubeG4\include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:../../..\CubeG4\include/cmsis_gcc.h ****  */
 972:../../..\CubeG4\include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:../../..\CubeG4\include/cmsis_gcc.h **** 
 974:../../..\CubeG4\include/cmsis_gcc.h **** 
 975:../../..\CubeG4\include/cmsis_gcc.h **** /**
 976:../../..\CubeG4\include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:../../..\CubeG4\include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:../../..\CubeG4\include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:../../..\CubeG4\include/cmsis_gcc.h ****   \return               Reversed value
 980:../../..\CubeG4\include/cmsis_gcc.h ****  */
 981:../../..\CubeG4\include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 2645              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU797
 2646              	.LBB349:
 982:../../..\CubeG4\include/cmsis_gcc.h **** {
 983:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t result;
 2647              		.loc 3 983 3 discriminator 6 view .LVU798
 984:../../..\CubeG4\include/cmsis_gcc.h **** 
 985:../../..\CubeG4\include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:../../..\CubeG4\include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:../../..\CubeG4\include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 2648              		.loc 3 988 4 discriminator 6 view .LVU799
 2649              		.syntax unified
 2650              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2651 01f8 92FAA2F2 		rbit r2, r2
 2652              	@ 0 "" 2
 2653              	.LVL187:
 989:../../..\CubeG4\include/cmsis_gcc.h **** #else
 990:../../..\CubeG4\include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:../../..\CubeG4\include/cmsis_gcc.h **** 
 992:../../..\CubeG4\include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:../../..\CubeG4\include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:../../..\CubeG4\include/cmsis_gcc.h ****   {
 995:../../..\CubeG4\include/cmsis_gcc.h ****     result <<= 1U;
 996:../../..\CubeG4\include/cmsis_gcc.h ****     result |= value & 1U;
 997:../../..\CubeG4\include/cmsis_gcc.h ****     s--;
 998:../../..\CubeG4\include/cmsis_gcc.h ****   }
 999:../../..\CubeG4\include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:../../..\CubeG4\include/cmsis_gcc.h **** #endif
1001:../../..\CubeG4\include/cmsis_gcc.h ****   return result;
 2654              		.loc 3 1001 3 discriminator 6 view .LVU800
 2655              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU801
 2656              		.thumb
 2657              		.syntax unified
 2658              	.LBE349:
 2659              	.LBE348:
2852:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2660              		.loc 2 2852 104 discriminator 6 view .LVU802
 2661 01fc B2FA82F2 		clz	r2, r2
 2662 0200 C3E7     		b	.L245
 2663              	.LVL188:
 2664              	.L247:
 2665              	.LBB350:
 2666              	.LBI350:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2667              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU803
 2668              	.LBB351:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2669              		.loc 3 983 3 discriminator 6 view .LVU804
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2670              		.loc 3 988 4 discriminator 6 view .LVU805
 2671              		.syntax unified
 2672              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2673 0202 92FAA2F2 		rbit r2, r2
 2674              	@ 0 "" 2
 2675              	.LVL189:
 2676              		.loc 3 1001 3 discriminator 6 view .LVU806
 2677              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU807
 2678              		.thumb
 2679              		.syntax unified
 2680              	.LBE351:
 2681              	.LBE350:
2856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2682              		.loc 2 2856 104 discriminator 6 view .LVU808
 2683 0206 B2FA82F2 		clz	r2, r2
 2684 020a CEE7     		b	.L248
 2685              	.LVL190:
 2686              	.L250:
 2687              	.LBB352:
 2688              	.LBI352:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2689              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU809
 2690              	.LBB353:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2691              		.loc 3 983 3 discriminator 6 view .LVU810
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2692              		.loc 3 988 4 discriminator 6 view .LVU811
 2693              		.syntax unified
 2694              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2695 020c 92FAA2F2 		rbit r2, r2
 2696              	@ 0 "" 2
 2697              	.LVL191:
 2698              		.loc 3 1001 3 discriminator 6 view .LVU812
 2699              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU813
 2700              		.thumb
 2701              		.syntax unified
 2702              	.LBE353:
 2703              	.LBE352:
2860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2704              		.loc 2 2860 104 discriminator 6 view .LVU814
 2705 0210 B2FA82F2 		clz	r2, r2
 2706 0214 D9E7     		b	.L251
 2707              	.LVL192:
 2708              	.L253:
 2709              	.LBB354:
 2710              	.LBI354:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2711              		.loc 3 981 31 is_stmt 1 discriminator 6 view .LVU815
 2712              	.LBB355:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2713              		.loc 3 983 3 discriminator 6 view .LVU816
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2714              		.loc 3 988 4 discriminator 6 view .LVU817
 2715              		.syntax unified
 2716              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2717 0216 92FAA2F2 		rbit r2, r2
 2718              	@ 0 "" 2
 2719              	.LVL193:
 2720              		.loc 3 1001 3 discriminator 6 view .LVU818
 2721              		.loc 3 1001 3 is_stmt 0 discriminator 6 view .LVU819
 2722              		.thumb
 2723              		.syntax unified
 2724              	.LBE355:
 2725              	.LBE354:
2864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2726              		.loc 2 2864 104 discriminator 6 view .LVU820
 2727 021a B2FA82F2 		clz	r2, r2
 2728 021e E4E7     		b	.L254
 2729              	.LVL194:
 2730              	.L259:
 2731              	.LBB356:
 2732              	.LBI356:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2733              		.loc 3 981 31 is_stmt 1 discriminator 2 view .LVU821
 2734              	.LBB357:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2735              		.loc 3 983 3 discriminator 2 view .LVU822
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2736              		.loc 3 988 4 discriminator 2 view .LVU823
 2737              		.syntax unified
 2738              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2739 0220 93FAA3F2 		rbit r2, r3
 2740              	@ 0 "" 2
 2741              	.LVL195:
 2742              		.loc 3 1001 3 discriminator 2 view .LVU824
 2743              		.loc 3 1001 3 is_stmt 0 discriminator 2 view .LVU825
 2744              		.thumb
 2745              		.syntax unified
 2746              	.LBE357:
 2747              	.LBE356:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2748              		.loc 2 2885 50 discriminator 2 view .LVU826
 2749 0224 B2FA82F2 		clz	r2, r2
 2750 0228 0132     		adds	r2, r2, #1
 2751 022a 02F01F02 		and	r2, r2, #31
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2752              		.loc 2 2884 9 discriminator 2 view .LVU827
 2753 022e 092A     		cmp	r2, #9
 2754 0230 16D8     		bhi	.L262
 2755              	.LVL196:
 2756              	.LBB358:
 2757              	.LBI358:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2758              		.loc 3 981 31 is_stmt 1 discriminator 4 view .LVU828
 2759              	.LBB359:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2760              		.loc 3 983 3 discriminator 4 view .LVU829
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2761              		.loc 3 988 4 discriminator 4 view .LVU830
 2762              		.syntax unified
 2763              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2764 0232 93FAA3F1 		rbit r1, r3
 2765              	@ 0 "" 2
 2766              	.LVL197:
 2767              		.loc 3 1001 3 discriminator 4 view .LVU831
 2768              		.loc 3 1001 3 is_stmt 0 discriminator 4 view .LVU832
 2769              		.thumb
 2770              		.syntax unified
 2771              	.LBE359:
 2772              	.LBE358:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2773              		.loc 2 2885 50 discriminator 4 view .LVU833
 2774 0236 B1FA81F1 		clz	r1, r1
 2775 023a 0131     		adds	r1, r1, #1
 2776 023c 8906     		lsls	r1, r1, #26
 2777 023e 01F0F841 		and	r1, r1, #2080374784
 2778              	.LVL198:
 2779              	.LBB360:
 2780              	.LBI360:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2781              		.loc 3 981 31 is_stmt 1 discriminator 4 view .LVU834
 2782              	.LBB361:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2783              		.loc 3 983 3 discriminator 4 view .LVU835
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2784              		.loc 3 988 4 discriminator 4 view .LVU836
 2785              		.syntax unified
 2786              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2787 0242 93FAA3F2 		rbit r2, r3
 2788              	@ 0 "" 2
 2789              	.LVL199:
 2790              		.loc 3 1001 3 discriminator 4 view .LVU837
 2791              		.loc 3 1001 3 is_stmt 0 discriminator 4 view .LVU838
 2792              		.thumb
 2793              		.syntax unified
 2794              	.LBE361:
 2795              	.LBE360:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2796              		.loc 2 2885 50 discriminator 4 view .LVU839
 2797 0246 B2FA82F2 		clz	r2, r2
 2798 024a 0132     		adds	r2, r2, #1
 2799 024c 02F01F06 		and	r6, r2, #31
 2800 0250 0122     		movs	r2, #1
 2801 0252 B240     		lsls	r2, r2, r6
 2802 0254 6DE7     		b	.L260
 2803              	.L263:
 2804              	.LVL200:
 2805              	.LBB362:
 2806              	.LBI362:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2807              		.loc 3 981 31 is_stmt 1 discriminator 12 view .LVU840
 2808              	.LBB363:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2809              		.loc 3 983 3 discriminator 12 view .LVU841
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2810              		.loc 3 988 4 discriminator 12 view .LVU842
 2811              		.syntax unified
 2812              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2813 0256 93FAA3F3 		rbit r3, r3
 2814              	@ 0 "" 2
 2815              	.LVL201:
 2816              		.loc 3 1001 3 discriminator 12 view .LVU843
 2817              		.loc 3 1001 3 is_stmt 0 discriminator 12 view .LVU844
 2818              		.thumb
 2819              		.syntax unified
 2820              	.LBE363:
 2821              	.LBE362:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2822              		.loc 2 2885 50 discriminator 12 view .LVU845
 2823 025a B3FA83F3 		clz	r3, r3
 2824 025e 6DE7     		b	.L279
 2825              	.L262:
 2826              	.LVL202:
 2827              	.LBB364:
 2828              	.LBI364:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2829              		.loc 3 981 31 is_stmt 1 discriminator 14 view .LVU846
 2830              	.LBB365:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2831              		.loc 3 983 3 discriminator 14 view .LVU847
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2832              		.loc 3 988 4 discriminator 14 view .LVU848
 2833              		.syntax unified
 2834              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2835 0260 93FAA3F1 		rbit r1, r3
 2836              	@ 0 "" 2
 2837              	.LVL203:
 2838              		.loc 3 1001 3 discriminator 14 view .LVU849
 2839              		.loc 3 1001 3 is_stmt 0 discriminator 14 view .LVU850
 2840              		.thumb
 2841              		.syntax unified
 2842              	.LBE365:
 2843              	.LBE364:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2844              		.loc 2 2885 50 discriminator 14 view .LVU851
 2845 0264 B1FA81F1 		clz	r1, r1
 2846 0268 0131     		adds	r1, r1, #1
 2847 026a 8906     		lsls	r1, r1, #26
 2848 026c 01F0F841 		and	r1, r1, #2080374784
 2849              	.LVL204:
 2850              	.LBB366:
 2851              	.LBI366:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2852              		.loc 3 981 31 is_stmt 1 discriminator 14 view .LVU852
 2853              	.LBB367:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2854              		.loc 3 983 3 discriminator 14 view .LVU853
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2855              		.loc 3 988 4 discriminator 14 view .LVU854
 2856              		.syntax unified
 2857              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2858 0270 93FAA3F2 		rbit r2, r3
 2859              	@ 0 "" 2
 2860              	.LVL205:
 2861              		.loc 3 1001 3 discriminator 14 view .LVU855
 2862              		.loc 3 1001 3 is_stmt 0 discriminator 14 view .LVU856
 2863              		.thumb
 2864              		.syntax unified
 2865              	.LBE367:
 2866              	.LBE366:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2867              		.loc 2 2885 50 discriminator 14 view .LVU857
 2868 0274 B2FA82F2 		clz	r2, r2
 2869 0278 0132     		adds	r2, r2, #1
 2870 027a 02F01F06 		and	r6, r2, #31
 2871 027e 0122     		movs	r2, #1
 2872 0280 B240     		lsls	r2, r2, r6
 2873              	.L261:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2874              		.loc 2 2885 50 discriminator 20 view .LVU858
 2875 0282 0A43     		orrs	r2, r2, r1
 2876 0284 5FB9     		cbnz	r7, .L266
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2877              		.loc 2 2885 50 discriminator 21 view .LVU859
 2878 0286 9B0E     		lsrs	r3, r3, #26
 2879 0288 0133     		adds	r3, r3, #1
 2880 028a 03F01F03 		and	r3, r3, #31
 2881 028e 03EB4301 		add	r1, r3, r3, lsl #1
 2882 0292 1E39     		subs	r1, r1, #30
 2883              	.L280:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2884              		.loc 2 2885 50 discriminator 22 view .LVU860
 2885 0294 0905     		lsls	r1, r1, #20
 2886 0296 41F00071 		orr	r1, r1, #33554432
2884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2887              		.loc 2 2884 9 discriminator 22 view .LVU861
 2888 029a 1143     		orrs	r1, r1, r2
 2889 029c 55E7     		b	.L265
 2890              	.L266:
 2891              	.LVL206:
 2892              	.LBB368:
 2893              	.LBI368:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 2894              		.loc 3 981 31 is_stmt 1 discriminator 22 view .LVU862
 2895              	.LBB369:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 2896              		.loc 3 983 3 discriminator 22 view .LVU863
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 2897              		.loc 3 988 4 discriminator 22 view .LVU864
 2898              		.syntax unified
 2899              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 2900 029e 93FAA3F3 		rbit r3, r3
 2901              	@ 0 "" 2
 2902              	.LVL207:
 2903              		.loc 3 1001 3 discriminator 22 view .LVU865
 2904              		.loc 3 1001 3 is_stmt 0 discriminator 22 view .LVU866
 2905              		.thumb
 2906              		.syntax unified
 2907              	.LBE369:
 2908              	.LBE368:
2885:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2909              		.loc 2 2885 50 discriminator 22 view .LVU867
 2910 02a2 B3FA83F3 		clz	r3, r3
 2911 02a6 0133     		adds	r3, r3, #1
 2912 02a8 03F01F03 		and	r3, r3, #31
 2913 02ac 03EB4303 		add	r3, r3, r3, lsl #1
 2914 02b0 A3F11E01 		sub	r1, r3, #30
 2915 02b4 EEE7     		b	.L280
 2916              	.L268:
2899:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 2917              		.loc 2 2899 7 is_stmt 1 view .LVU868
 2918              	.LVL208:
 2919              	.LBB370:
 2920              	.LBI370:
2787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2921              		.loc 1 2787 26 view .LVU869
 2922              	.LBB371:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2923              		.loc 1 2789 3 view .LVU870
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2924              		.loc 1 2789 21 is_stmt 0 view .LVU871
 2925 02b6 314B     		ldr	r3, .L283+16
 2926 02b8 9868     		ldr	r0, [r3, #8]
 2927              	.LBE371:
 2928              	.LBE370:
2903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2929              		.loc 2 2903 10 view .LVU872
 2930 02ba 314B     		ldr	r3, .L283+20
 2931 02bc 9A42     		cmp	r2, r3
 2932              	.LBB373:
 2933              	.LBB372:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2934              		.loc 1 2789 10 view .LVU873
 2935 02be 00F0E071 		and	r1, r0, #29360128
 2936              	.LVL209:
2789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2937              		.loc 1 2789 10 view .LVU874
 2938              	.LBE372:
 2939              	.LBE373:
2903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2940              		.loc 2 2903 7 is_stmt 1 view .LVU875
2903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2941              		.loc 2 2903 10 is_stmt 0 view .LVU876
 2942 02c2 02D0     		beq	.L270
2903:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 2943              		.loc 2 2903 62 discriminator 1 view .LVU877
 2944 02c4 2F4B     		ldr	r3, .L283+24
 2945 02c6 9A42     		cmp	r2, r3
 2946 02c8 1DD1     		bne	.L271
 2947              	.L270:
2904:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2948              		.loc 2 2904 11 view .LVU878
 2949 02ca 0302     		lsls	r3, r0, #8
 2950 02cc 1BD4     		bmi	.L271
2906:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2951              		.loc 2 2906 9 is_stmt 1 view .LVU879
2906:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 2952              		.loc 2 2906 12 is_stmt 0 view .LVU880
 2953 02ce 2B68     		ldr	r3, [r5]
 2954 02d0 B3F1A04F 		cmp	r3, #1342177280
 2955 02d4 7FF441AF 		bne	.L272
2908:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
 2956              		.loc 2 2908 11 is_stmt 1 view .LVU881
 2957              	.LVL210:
 2958              	.LBB374:
 2959              	.LBI374:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 2960              		.loc 1 2765 22 view .LVU882
 2961              	.LBB375:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2962              		.loc 1 2767 3 view .LVU883
 2963 02d8 284A     		ldr	r2, .L283+16
 2964 02da 9368     		ldr	r3, [r2, #8]
 2965 02dc 23F0E073 		bic	r3, r3, #29360128
 2966 02e0 0B43     		orrs	r3, r3, r1
 2967 02e2 43F40003 		orr	r3, r3, #8388608
 2968 02e6 9360     		str	r3, [r2, #8]
 2969              	.LVL211:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 2970              		.loc 1 2767 3 is_stmt 0 view .LVU884
 2971              	.LBE375:
 2972              	.LBE374:
2916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2973              		.loc 2 2916 11 is_stmt 1 view .LVU885
2916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2974              		.loc 2 2916 90 is_stmt 0 view .LVU886
 2975 02e8 274B     		ldr	r3, .L283+28
 2976 02ea 284A     		ldr	r2, .L283+32
 2977 02ec 1B68     		ldr	r3, [r3]
 2978 02ee B3FBF2F2 		udiv	r2, r3, r2
2916:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2979              		.loc 2 2916 71 view .LVU887
 2980 02f2 0C23     		movs	r3, #12
 2981 02f4 5343     		muls	r3, r2, r3
 2982              	.L281:
2919:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 2983              		.loc 2 2919 28 view .LVU888
 2984 02f6 0193     		str	r3, [sp, #4]
2917:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 2985              		.loc 2 2917 34 view .LVU889
 2986 02f8 019B     		ldr	r3, [sp, #4]
2917:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 2987              		.loc 2 2917 17 view .LVU890
 2988 02fa 002B     		cmp	r3, #0
 2989 02fc 3FF42DAF 		beq	.L272
2919:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 2990              		.loc 2 2919 13 is_stmt 1 view .LVU891
2919:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 2991              		.loc 2 2919 28 is_stmt 0 view .LVU892
 2992 0300 019B     		ldr	r3, [sp, #4]
 2993 0302 013B     		subs	r3, r3, #1
 2994 0304 F7E7     		b	.L281
 2995              	.L271:
2923:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2996              		.loc 2 2923 12 is_stmt 1 view .LVU893
2923:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 2997              		.loc 2 2923 15 is_stmt 0 view .LVU894
 2998 0306 224B     		ldr	r3, .L283+36
 2999 0308 9A42     		cmp	r2, r3
 3000 030a 11D1     		bne	.L275
2923:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3001              		.loc 2 2923 55 discriminator 1 view .LVU895
 3002 030c 10F08070 		ands	r0, r0, #16777216
 3003 0310 7FF423AF 		bne	.L272
2925:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3004              		.loc 2 2925 9 is_stmt 1 view .LVU896
2925:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3005              		.loc 2 2925 12 is_stmt 0 view .LVU897
 3006 0314 2A68     		ldr	r2, [r5]
 3007 0316 1F4B     		ldr	r3, .L283+40
 3008 0318 9A42     		cmp	r2, r3
 3009 031a 3FF41EAF 		beq	.L272
2927:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 3010              		.loc 2 2927 11 is_stmt 1 view .LVU898
 3011              	.LVL212:
 3012              	.LBB376:
 3013              	.LBI376:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3014              		.loc 1 2765 22 view .LVU899
 3015              	.LBB377:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3016              		.loc 1 2767 3 view .LVU900
 3017 031e 174A     		ldr	r2, .L283+16
 3018 0320 9368     		ldr	r3, [r2, #8]
 3019 0322 23F0E073 		bic	r3, r3, #29360128
 3020 0326 0B43     		orrs	r3, r3, r1
 3021 0328 43F08073 		orr	r3, r3, #16777216
 3022              	.LVL213:
 3023              	.L282:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3024              		.loc 1 2767 3 is_stmt 0 view .LVU901
 3025              	.LBE377:
 3026              	.LBE376:
 3027              	.LBB378:
 3028              	.LBB379:
 3029 032c 9360     		str	r3, [r2, #8]
 3030 032e 15E7     		b	.L269
 3031              	.L275:
 3032              	.LBE379:
 3033              	.LBE378:
2931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 3034              		.loc 2 2931 12 is_stmt 1 view .LVU902
2931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 3035              		.loc 2 2931 15 is_stmt 0 view .LVU903
 3036 0330 194B     		ldr	r3, .L283+44
 3037 0332 9A42     		cmp	r2, r3
 3038 0334 7FF411AF 		bne	.L272
2932:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3039              		.loc 2 2932 16 view .LVU904
 3040 0338 10F48000 		ands	r0, r0, #4194304
 3041 033c 7FF40DAF 		bne	.L272
2934:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3042              		.loc 2 2934 9 is_stmt 1 view .LVU905
2934:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3043              		.loc 2 2934 12 is_stmt 0 view .LVU906
 3044 0340 2A68     		ldr	r2, [r5]
 3045 0342 144B     		ldr	r3, .L283+40
 3046 0344 9A42     		cmp	r2, r3
 3047 0346 3FF408AF 		beq	.L272
2936:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
 3048              		.loc 2 2936 11 is_stmt 1 view .LVU907
 3049              	.LVL214:
 3050              	.LBB381:
 3051              	.LBI378:
2765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3052              		.loc 1 2765 22 view .LVU908
 3053              	.LBB380:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3054              		.loc 1 2767 3 view .LVU909
 3055 034a 0C4A     		ldr	r2, .L283+16
 3056 034c 9368     		ldr	r3, [r2, #8]
 3057 034e 23F0E073 		bic	r3, r3, #29360128
 3058 0352 0B43     		orrs	r3, r3, r1
 3059 0354 43F48003 		orr	r3, r3, #4194304
 3060 0358 E8E7     		b	.L282
 3061              	.LVL215:
 3062              	.L237:
2767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3063              		.loc 1 2767 3 is_stmt 0 view .LVU910
 3064              	.LBE380:
 3065              	.LBE381:
2953:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3066              		.loc 2 2953 5 is_stmt 1 view .LVU911
 3067 035a EA6D     		ldr	r2, [r5, #92]
 3068 035c 42F02002 		orr	r2, r2, #32
 3069 0360 EA65     		str	r2, [r5, #92]
2955:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3070              		.loc 2 2955 5 view .LVU912
 3071              	.LVL216:
2955:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3072              		.loc 2 2955 20 is_stmt 0 view .LVU913
 3073 0362 1846     		mov	r0, r3
 3074 0364 FAE6     		b	.L269
 3075              	.LVL217:
 3076              	.L276:
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3077              		.loc 2 2790 3 view .LVU914
 3078 0366 0220     		movs	r0, #2
 3079              	.LVL218:
2790:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3080              		.loc 2 2790 3 view .LVU915
 3081 0368 FBE6     		b	.L236
 3082              	.L284:
 3083 036a 00BF     		.align	2
 3084              	.L283:
 3085 036c 00F0FF03 		.word	67104768
 3086 0370 FFFF0700 		.word	524287
 3087 0374 00007F40 		.word	1082064896
 3088 0378 00000880 		.word	-2146959360
 3089 037c 00030050 		.word	1342178048
 3090 0380 000021C3 		.word	-1021247488
 3091 0384 1000C090 		.word	-1866465264
 3092 0388 00000000 		.word	SystemCoreClock
 3093 038c 400D0300 		.word	200000
 3094 0390 000052C7 		.word	-950927360
 3095 0394 00010050 		.word	1342177536
 3096 0398 000084CB 		.word	-880541696
 3097              		.cfi_endproc
 3098              	.LFE345:
 3100              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 3101              		.align	1
 3102              		.global	HAL_ADC_AnalogWDGConfig
 3103              		.syntax unified
 3104              		.thumb
 3105              		.thumb_func
 3106              		.fpu fpv4-sp-d16
 3108              	HAL_ADC_AnalogWDGConfig:
 3109              	.LVL219:
 3110              	.LFB346:
2988:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3111              		.loc 2 2988 1 is_stmt 1 view -0
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 0
 3114              		@ frame_needed = 0, uses_anonymous_args = 0
2989:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3115              		.loc 2 2989 3 view .LVU917
2990:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
 3116              		.loc 2 2990 3 view .LVU918
2991:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 3117              		.loc 2 2991 3 view .LVU919
2992:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 3118              		.loc 2 2992 3 view .LVU920
2993:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3119              		.loc 2 2993 3 view .LVU921
2996:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
 3120              		.loc 2 2996 3 view .LVU922
2997:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 3121              		.loc 2 2997 3 view .LVU923
2998:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
 3122              		.loc 2 2998 3 view .LVU924
2999:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 3123              		.loc 2 2999 3 view .LVU925
3000:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3124              		.loc 2 3000 3 view .LVU926
3002:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 3125              		.loc 2 3002 3 view .LVU927
3006:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3126              		.loc 2 3006 5 view .LVU928
3010:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 3127              		.loc 2 3010 3 view .LVU929
3021:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
 3128              		.loc 2 3021 5 view .LVU930
3022:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3129              		.loc 2 3022 5 view .LVU931
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3130              		.loc 2 3026 3 view .LVU932
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3131              		.loc 2 3026 3 view .LVU933
 3132 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 3133 0004 012B     		cmp	r3, #1
2988:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3134              		.loc 2 2988 1 is_stmt 0 view .LVU934
 3135 0006 70B5     		push	{r4, r5, r6, lr}
 3136              		.cfi_def_cfa_offset 16
 3137              		.cfi_offset 4, -16
 3138              		.cfi_offset 5, -12
 3139              		.cfi_offset 6, -8
 3140              		.cfi_offset 14, -4
2988:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3141              		.loc 2 2988 1 view .LVU935
 3142 0008 0446     		mov	r4, r0
 3143 000a 0D46     		mov	r5, r1
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3144              		.loc 2 3026 3 view .LVU936
 3145 000c 00F00781 		beq	.L318
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3146              		.loc 2 3026 3 is_stmt 1 discriminator 2 view .LVU937
 3147 0010 0123     		movs	r3, #1
 3148 0012 80F85830 		strb	r3, [r0, #88]
3032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3149              		.loc 2 3032 3 discriminator 2 view .LVU938
3032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3150              		.loc 2 3032 44 is_stmt 0 discriminator 2 view .LVU939
 3151 0016 0068     		ldr	r0, [r0]
 3152              	.LVL220:
3032:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3153              		.loc 2 3032 44 discriminator 2 view .LVU940
 3154 0018 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3155              	.LVL221:
3033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 3156              		.loc 2 3033 3 is_stmt 1 discriminator 2 view .LVU941
3033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 3157              		.loc 2 3033 45 is_stmt 0 discriminator 2 view .LVU942
 3158 001c 2668     		ldr	r6, [r4]
 3159              	.LVL222:
 3160              	.LBB408:
 3161              	.LBI408:
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3162              		.loc 1 6968 26 is_stmt 1 discriminator 2 view .LVU943
 3163              	.LBB409:
 3164              		.loc 1 6970 3 discriminator 2 view .LVU944
 3165              		.loc 1 6970 12 is_stmt 0 discriminator 2 view .LVU945
 3166 001e B368     		ldr	r3, [r6, #8]
 3167 0020 03F00803 		and	r3, r3, #8
 3168              		.loc 1 6970 76 discriminator 2 view .LVU946
 3169 0024 0343     		orrs	r3, r3, r0
 3170 0026 3ED1     		bne	.L287
 3171              	.LVL223:
 3172              		.loc 1 6970 76 discriminator 2 view .LVU947
 3173              	.LBE409:
 3174              	.LBE408:
3034:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 3175              		.loc 2 3034 3 is_stmt 1 view .LVU948
3039:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3176              		.loc 2 3039 5 view .LVU949
 3177 0028 D1E90013 		ldrd	r1, r3, [r1]
 3178              	.LVL224:
3039:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3179              		.loc 2 3039 8 is_stmt 0 view .LVU950
 3180 002c 7D4A     		ldr	r2, .L341
 3181 002e 9142     		cmp	r1, r2
 3182 0030 67D1     		bne	.L288
3044:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3183              		.loc 2 3044 7 is_stmt 1 view .LVU951
 3184 0032 B3F1807F 		cmp	r3, #16777216
 3185 0036 60D0     		beq	.L289
 3186 0038 08D8     		bhi	.L290
 3187 003a B3F5000F 		cmp	r3, #8388608
 3188 003e 5AD0     		beq	.L291
 3189 0040 B3F5400F 		cmp	r3, #12582912
 3190 0044 11D0     		beq	.L292
 3191              	.L293:
3074:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3192              		.loc 2 3074 11 view .LVU952
 3193 0046 0022     		movs	r2, #0
 3194 0048 7649     		ldr	r1, .L341
 3195 004a 13E0     		b	.L334
 3196              	.L290:
3044:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3197              		.loc 2 3044 7 is_stmt 0 view .LVU953
 3198 004c B3F1C07F 		cmp	r3, #25165824
 3199 0050 55D0     		beq	.L294
 3200 0052 B3F1E07F 		cmp	r3, #29360128
 3201 0056 48D0     		beq	.L295
 3202 0058 B3F1A07F 		cmp	r3, #20971520
 3203 005c F3D1     		bne	.L293
3052:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
 3204              		.loc 2 3052 11 is_stmt 1 view .LVU954
3052:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
 3205              		.loc 2 3052 72 is_stmt 0 view .LVU955
 3206 005e AA68     		ldr	r2, [r5, #8]
 3207 0060 22F07C72 		bic	r2, r2, #66060288
3052:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
 3208              		.loc 2 3052 11 view .LVU956
 3209 0064 42F0A072 		orr	r2, r2, #20971520
 3210 0068 04E0     		b	.L334
 3211              	.L292:
3047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
 3212              		.loc 2 3047 11 is_stmt 1 view .LVU957
3047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
 3213              		.loc 2 3047 72 is_stmt 0 view .LVU958
 3214 006a AA68     		ldr	r2, [r5, #8]
 3215 006c 22F07C72 		bic	r2, r2, #66060288
3047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
 3216              		.loc 2 3047 11 view .LVU959
 3217 0070 42F44002 		orr	r2, r2, #12582912
 3218              	.L334:
3074:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3219              		.loc 2 3074 11 view .LVU960
 3220 0074 3046     		mov	r0, r6
 3221              	.LVL225:
3074:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3222              		.loc 2 3074 11 view .LVU961
 3223 0076 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
 3224              	.LVL226:
3075:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3225              		.loc 2 3075 11 is_stmt 1 view .LVU962
3079:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                  ADC_TR1_AWDFILT,
 3226              		.loc 2 3079 7 view .LVU963
 3227 007a 2368     		ldr	r3, [r4]
 3228 007c A969     		ldr	r1, [r5, #24]
 3229 007e 1A6A     		ldr	r2, [r3, #32]
 3230 0080 22F4E042 		bic	r2, r2, #28672
 3231 0084 0A43     		orrs	r2, r2, r1
 3232 0086 1A62     		str	r2, [r3, #32]
3084:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3233              		.loc 2 3084 7 view .LVU964
 3234 0088 E26D     		ldr	r2, [r4, #92]
 3235 008a 22F48032 		bic	r2, r2, #65536
 3236 008e E265     		str	r2, [r4, #92]
3090:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3237              		.loc 2 3090 7 view .LVU965
 3238              	.LVL227:
 3239              	.LBB410:
 3240              	.LBI410:
6971:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6972:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6973:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6974:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected command of conversion stop state
6975:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
6976:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6977:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group injected.
6978:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
6979:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6980:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
6981:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
6982:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
6983:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
6984:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
6985:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
6986:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6987:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6988:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         with feature oversampling).
6989:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
6990:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
6991:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
6992:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
6993:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6994:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
6995:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
6996:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
6997:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
6998:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
6999:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7000:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7001:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
7002:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7003:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7004:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7005:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
7006:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7007:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
7008:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7009:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7010:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7011:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7012:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 12 bits.
7013:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7014:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7015:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7016:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
7017:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
7018:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
7019:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
7020:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7021:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7022:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7023:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7024:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7025:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7026:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7027:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7028:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
7029:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7030:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7031:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7032:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7033:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7034:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
7035:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7036:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7037:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7038:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7039:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 10 bits.
7040:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7041:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7042:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7043:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData10\n
7044:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData10\n
7045:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData10\n
7046:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData10
7047:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7048:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7049:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7050:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7051:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7052:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7053:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7054:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7055:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
7056:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7057:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7058:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7059:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7060:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7061:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                    );
7062:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7063:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7064:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7065:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7066:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 8 bits.
7067:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7068:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7069:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7070:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData8\n
7071:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData8\n
7072:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData8\n
7073:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData8
7074:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7075:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7076:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7077:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7078:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7079:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7080:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7081:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7082:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
7083:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7084:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7085:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7086:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7087:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7088:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   );
7089:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7090:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7091:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7092:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7093:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         ADC resolution 6 bits.
7094:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7095:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7096:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7097:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData6\n
7098:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData6\n
7099:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData6\n
7100:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData6
7101:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7102:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7103:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7104:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7105:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7106:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7107:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
7108:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7109:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData6(ADC_TypeDef *ADCx, uint32_t Rank)
7110:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7111:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7112:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7113:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7114:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7115:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                   );
7116:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7117:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7118:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7119:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
7120:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7121:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7122:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
7123:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
7124:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7125:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7126:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7127:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC ready.
7128:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7129:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7130:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7131:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
7132:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7133:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7134:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7135:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
7136:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7137:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
7138:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7139:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7140:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7141:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
7142:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
7143:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7144:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7145:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7146:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
7147:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7148:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
7149:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7150:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7151:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7152:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
7153:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
7154:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7155:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7156:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7157:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
7158:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7159:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
7160:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7161:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7162:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7163:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
7164:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
7165:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7166:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7167:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7168:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
7169:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7170:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
7171:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7172:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7173:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7174:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
7175:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
7176:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7177:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7178:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7179:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
7180:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7181:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
7182:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7183:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7184:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7185:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of unitary conversion.
7186:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_IsActiveFlag_JEOC
7187:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7188:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7189:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7190:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
7191:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7192:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
7193:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7194:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7195:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7196:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
7197:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
7198:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7199:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7200:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7201:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
7202:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7203:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
7204:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7205:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7206:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7207:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected contexts queue overflow.
7208:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_IsActiveFlag_JQOVF
7209:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7210:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7211:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7212:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
7213:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7214:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JQOVF) == (LL_ADC_FLAG_JQOVF)) ? 1UL : 0UL);
7215:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7216:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7217:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7218:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
7219:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
7220:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7221:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7222:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7223:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
7224:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7225:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
7226:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7227:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7228:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7229:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
7230:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
7231:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7232:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7233:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7234:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
7235:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7236:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
7237:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7238:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7239:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7240:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
7241:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
7242:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7243:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7244:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7245:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
7246:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7247:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
7248:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7249:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7250:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7251:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
7252:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7253:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7254:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7255:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
7256:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7257:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7258:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7259:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
7260:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7261:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
7262:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7263:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7264:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7265:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
7266:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
7267:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7268:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7269:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7270:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
7271:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7272:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
7273:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7274:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7275:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7276:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
7277:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
7278:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7279:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7280:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7281:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
7282:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7283:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
7284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7285:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7287:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
7288:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
7289:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7290:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7291:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7292:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
7293:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7294:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
7295:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7296:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7297:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7298:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
7299:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
7300:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7301:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7302:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7303:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
7304:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7305:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
7306:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7307:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7308:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7309:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of unitary conversion.
7310:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
7311:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7312:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7313:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7314:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
7315:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7316:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
7317:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7318:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7319:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7320:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of sequence conversions.
7321:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_ClearFlag_JEOS
7322:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7323:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7324:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7325:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
7326:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7327:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
7328:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7329:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7330:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7331:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected contexts queue overflow.
7332:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_ClearFlag_JQOVF
7333:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7334:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7335:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7336:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
7337:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7338:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JQOVF);
7339:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7340:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7341:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7342:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
7343:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
7344:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7345:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7346:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7347:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
 3241              		.loc 1 7347 22 view .LVU966
 3242              	.LBB411:
7348:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7349:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 3243              		.loc 1 7349 3 view .LVU967
 3244 0090 8022     		movs	r2, #128
 3245 0092 1A60     		str	r2, [r3]
 3246              	.LVL228:
 3247              		.loc 1 7349 3 is_stmt 0 view .LVU968
 3248              	.LBE411:
 3249              	.LBE410:
3093:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3250              		.loc 2 3093 7 is_stmt 1 view .LVU969
3093:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3251              		.loc 2 3093 10 is_stmt 0 view .LVU970
 3252 0094 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 3253 0096 012A     		cmp	r2, #1
 3254              	.LBB412:
 3255              	.LBB413:
7350:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7351:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7352:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7353:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
7354:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
7355:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7356:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7357:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7358:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
7359:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7360:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
7361:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7362:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7363:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7364:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
7365:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
7366:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7367:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7368:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
7370:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7371:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
7372:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7373:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7374:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
7375:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7376:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC master.
7377:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_MST      LL_ADC_IsActiveFlag_MST_ADRDY
7378:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7379:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7380:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7381:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7382:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7383:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7384:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_MST) == (LL_ADC_FLAG_ADRDY_MST)) ? 1UL : 0
7385:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7386:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7387:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7388:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC slave.
7389:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_SLV      LL_ADC_IsActiveFlag_SLV_ADRDY
7390:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7391:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7392:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7393:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7394:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7395:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7396:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_SLV) == (LL_ADC_FLAG_ADRDY_SLV)) ? 1UL : 0
7397:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7398:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7399:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7400:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC master.
7401:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOC_MST        LL_ADC_IsActiveFlag_MST_EOC
7402:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7403:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7404:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7405:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7406:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7407:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7408:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7409:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7410:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7411:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7412:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC slave.
7413:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOC_SLV        LL_ADC_IsActiveFlag_SLV_EOC
7414:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7415:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7416:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7417:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7418:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7419:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7420:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7421:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7422:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7423:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7424:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC master.
7425:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOS_MST        LL_ADC_IsActiveFlag_MST_EOS
7426:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7427:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7428:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7429:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7430:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7431:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7432:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_MST) == (LL_ADC_FLAG_EOS_MST)) ? 1UL : 0UL);
7433:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7434:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7435:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7436:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC slave.
7437:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOS_SLV        LL_ADC_IsActiveFlag_SLV_EOS
7438:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7439:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7440:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7441:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7442:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7443:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7444:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_SLV) == (LL_ADC_FLAG_EOS_SLV)) ? 1UL : 0UL);
7445:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7446:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7447:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7448:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC master.
7449:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      OVR_MST        LL_ADC_IsActiveFlag_MST_OVR
7450:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7451:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7452:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7453:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7454:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7455:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7456:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_MST) == (LL_ADC_FLAG_OVR_MST)) ? 1UL : 0UL);
7457:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7458:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7459:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7460:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC slave.
7461:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      OVR_SLV        LL_ADC_IsActiveFlag_SLV_OVR
7462:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7463:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7464:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7465:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7466:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7467:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7468:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_SLV) == (LL_ADC_FLAG_OVR_SLV)) ? 1UL : 0UL);
7469:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7470:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7471:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7472:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC master.
7473:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_MST      LL_ADC_IsActiveFlag_MST_EOSMP
7474:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7475:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7476:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7477:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7478:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7479:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7480:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_MST) == (LL_ADC_FLAG_EOSMP_MST)) ? 1UL : 0
7481:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7482:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7483:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7484:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC slave.
7485:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_SLV      LL_ADC_IsActiveFlag_SLV_EOSMP
7486:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7487:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7488:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7489:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7490:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7491:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7492:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_SLV) == (LL_ADC_FLAG_EOSMP_SLV)) ? 1UL : 0
7493:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7494:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7495:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7496:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC master.
7497:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOC_MST       LL_ADC_IsActiveFlag_MST_JEOC
7498:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7499:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7500:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7501:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7502:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7503:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7504:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_MST) == (LL_ADC_FLAG_JEOC_MST)) ? 1UL : 0UL
7505:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7506:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7507:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7508:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC slave.
7509:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOC_SLV       LL_ADC_IsActiveFlag_SLV_JEOC
7510:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7511:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7512:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7513:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7514:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7515:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7516:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_SLV) == (LL_ADC_FLAG_JEOC_SLV)) ? 1UL : 0UL
7517:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7518:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7519:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7520:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC master.
7521:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOS_MST       LL_ADC_IsActiveFlag_MST_JEOS
7522:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7523:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7524:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7525:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7526:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7527:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7528:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_MST) == (LL_ADC_FLAG_JEOS_MST)) ? 1UL : 0UL
7529:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7530:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7531:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7532:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC slave.
7533:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOS_SLV       LL_ADC_IsActiveFlag_SLV_JEOS
7534:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7535:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7536:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7537:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7538:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7539:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7540:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_SLV) == (LL_ADC_FLAG_JEOS_SLV)) ? 1UL : 0UL
7541:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7542:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7543:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7544:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC master.
7545:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_MST      LL_ADC_IsActiveFlag_MST_JQOVF
7546:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7547:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7548:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7549:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7550:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7551:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7552:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_MST) == (LL_ADC_FLAG_JQOVF_MST)) ? 1UL : 0
7553:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7554:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7555:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7556:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC slave.
7557:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_SLV      LL_ADC_IsActiveFlag_SLV_JQOVF
7558:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7559:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7560:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7561:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7562:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7563:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7564:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_SLV) == (LL_ADC_FLAG_JQOVF_SLV)) ? 1UL : 0
7565:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7566:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7567:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7568:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 1 of the ADC master.
7569:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD1_MST       LL_ADC_IsActiveFlag_MST_AWD1
7570:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7571:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7572:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7573:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7574:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7575:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7576:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_MST) == (LL_ADC_FLAG_AWD1_MST)) ? 1UL : 0UL
7577:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7578:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7579:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7580:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode analog watchdog 1 of the ADC slave.
7581:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD1_SLV       LL_ADC_IsActiveFlag_SLV_AWD1
7582:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7583:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7584:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7585:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7586:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7587:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7588:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_SLV) == (LL_ADC_FLAG_AWD1_SLV)) ? 1UL : 0UL
7589:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7590:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7591:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7592:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC master.
7593:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD2_MST       LL_ADC_IsActiveFlag_MST_AWD2
7594:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7595:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7596:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7597:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7598:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7599:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7600:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_MST) == (LL_ADC_FLAG_AWD2_MST)) ? 1UL : 0UL
7601:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7603:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7604:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC slave.
7605:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD2_SLV       LL_ADC_IsActiveFlag_SLV_AWD2
7606:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7608:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7609:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7610:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7611:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7612:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_SLV) == (LL_ADC_FLAG_AWD2_SLV)) ? 1UL : 0UL
7613:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7614:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7615:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7616:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC master.
7617:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD3_MST       LL_ADC_IsActiveFlag_MST_AWD3
7618:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7619:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7620:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7621:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7622:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7623:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7624:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_MST) == (LL_ADC_FLAG_AWD3_MST)) ? 1UL : 0UL
7625:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7626:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7627:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7628:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC slave.
7629:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD3_SLV       LL_ADC_IsActiveFlag_SLV_AWD3
7630:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7631:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7632:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7633:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7635:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7636:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_SLV) == (LL_ADC_FLAG_AWD3_SLV)) ? 1UL : 0UL
7637:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7638:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
7639:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7640:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7641:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @}
7642:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7643:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7644:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
7645:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @{
7646:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7647:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7648:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7649:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC ready.
7650:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
7651:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7652:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7653:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7654:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
7655:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7656:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7657:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7658:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7659:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7660:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
7661:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
7662:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7663:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7664:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7665:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
7666:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7667:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
7668:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7669:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7670:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7671:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
7672:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
7673:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7674:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7675:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7676:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
7677:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7678:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
7679:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7680:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7681:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7682:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
7683:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
7684:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7685:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7686:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7687:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
7688:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7689:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
7690:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7691:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7692:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7693:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
7694:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
7695:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7696:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7697:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7698:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
7699:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7700:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7701:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7702:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7703:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7704:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of unitary conversion.
7705:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
7706:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7707:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7708:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7709:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
7710:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7711:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7712:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7713:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7714:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7715:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of sequence conversions.
7716:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
7717:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7718:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7719:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7720:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
7721:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7722:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7723:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7724:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7725:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7726:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected context queue overflow.
7727:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_EnableIT_JQOVF
7728:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7729:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7730:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7731:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
7732:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7733:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7734:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7735:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7736:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7737:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
7738:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
7739:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7740:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7741:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7742:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
7743:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7744:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 3256              		.loc 1 7744 3 view .LVU971
 3257 0098 5A68     		ldr	r2, [r3, #4]
 3258              	.LBE413:
 3259              	.LBE412:
3095:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3260              		.loc 2 3095 9 is_stmt 1 view .LVU972
 3261              	.LVL229:
 3262              	.LBB415:
 3263              	.LBI412:
7742:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3264              		.loc 1 7742 22 view .LVU973
 3265              	.LBB414:
 3266              		.loc 1 7744 3 view .LVU974
 3267 009a 0CBF     		ite	eq
 3268 009c 42F08002 		orreq	r2, r2, #128
 3269              	.LBE414:
 3270              	.LBE415:
3099:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3271              		.loc 2 3099 9 view .LVU975
 3272              	.LVL230:
 3273              	.LBB416:
 3274              	.LBI416:
7745:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7746:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7747:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7748:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
7749:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
7750:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7751:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7752:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7753:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
7754:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7755:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
7756:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7757:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7758:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7759:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
7760:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
7761:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7762:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7763:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
7765:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7766:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
7767:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7768:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7769:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7770:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
7771:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
7772:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7773:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7774:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7775:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
7776:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7777:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7778:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7779:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7780:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7781:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7782:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
7783:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7784:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7785:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7786:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
7787:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7788:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
7789:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7790:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7791:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7792:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
7793:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
7794:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7795:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7796:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7797:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
7798:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7799:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
7800:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7801:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7802:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7803:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
7804:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
7805:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7806:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7807:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7808:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
7809:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7810:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
7811:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7812:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7813:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7814:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
7815:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
7816:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7817:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7818:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7819:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
7820:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7821:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7822:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7823:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7824:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7825:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7826:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
7827:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7828:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7829:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7830:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
7831:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7832:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7833:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7834:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7835:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7836:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected end of sequence conversions.
7837:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
7838:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7839:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7840:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7841:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
7842:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7843:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7844:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7845:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7846:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7847:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected context queue overflow.
7848:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
7849:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7850:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7851:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7852:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
7853:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7854:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7855:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7856:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7857:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7858:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
7859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
7860:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7861:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7862:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7863:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
 3275              		.loc 1 7863 22 view .LVU976
 3276              	.LBB417:
7864:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7865:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 3277              		.loc 1 7865 3 view .LVU977
 3278 00a0 22F08002 		bicne	r2, r2, #128
 3279              	.LVL231:
 3280              	.L340:
 3281              		.loc 1 7865 3 is_stmt 0 view .LVU978
 3282              	.LBE417:
 3283              	.LBE416:
 3284              	.LBB418:
 3285              	.LBB419:
7866:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7868:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
7870:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
7871:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7872:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7873:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
7875:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7876:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
7877:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
7878:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
7879:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** /**
7880:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
7881:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
7882:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7883:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   * @retval None
7884:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   */
7885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
7886:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
7887:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 3286              		.loc 1 7887 3 view .LVU979
 3287 00a4 5A60     		str	r2, [r3, #4]
 3288              	.LVL232:
 3289              	.L287:
 3290              		.loc 1 7887 3 view .LVU980
 3291              	.LBE419:
 3292              	.LBE418:
3181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 3293              		.loc 2 3181 3 is_stmt 1 view .LVU981
3181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 3294              		.loc 2 3181 22 is_stmt 0 view .LVU982
 3295 00a6 2A68     		ldr	r2, [r5]
3181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 3296              		.loc 2 3181 6 view .LVU983
 3297 00a8 5E48     		ldr	r0, .L341
 3298 00aa 2368     		ldr	r3, [r4]
 3299 00ac 8242     		cmp	r2, r0
 3300 00ae D5E90415 		ldrd	r1, r5, [r5, #16]
 3301              	.LVL233:
3181:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 3302              		.loc 2 3181 6 view .LVU984
 3303 00b2 40F09080 		bne	.L313
3186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 3304              		.loc 2 3186 5 is_stmt 1 view .LVU985
3186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 3305              		.loc 2 3186 34 is_stmt 0 view .LVU986
 3306 00b6 DE68     		ldr	r6, [r3, #12]
 3307 00b8 C6F3C106 		ubfx	r6, r6, #3, #2
 3308 00bc 7600     		lsls	r6, r6, #1
3186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 3309              		.loc 2 3186 32 view .LVU987
 3310 00be 01FA06F0 		lsl	r0, r1, r6
 3311              	.LVL234:
3187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3312              		.loc 2 3187 5 is_stmt 1 view .LVU988
3187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3313              		.loc 2 3187 34 is_stmt 0 view .LVU989
 3314 00c2 D968     		ldr	r1, [r3, #12]
 3315 00c4 C1F3C101 		ubfx	r1, r1, #3, #2
 3316 00c8 4900     		lsls	r1, r1, #1
3187:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3317              		.loc 2 3187 32 view .LVU990
 3318 00ca 8D40     		lsls	r5, r5, r1
 3319              	.LVL235:
 3320              	.L314:
3200:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                   tmpAWDLowThresholdShifted);
 3321              		.loc 2 3200 3 is_stmt 1 view .LVU991
 3322              	.LBB421:
 3323              	.LBI421:
5859:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
 3324              		.loc 1 5859 22 view .LVU992
 3325              	.LBB422:
5867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3326              		.loc 1 5867 3 view .LVU993
5867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3327              		.loc 1 5867 34 is_stmt 0 view .LVU994
 3328 00cc 920C     		lsrs	r2, r2, #18
 3329              	.LVL236:
5867:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** 
 3330              		.loc 1 5867 34 view .LVU995
 3331 00ce 02F00C02 		and	r2, r2, #12
 3332 00d2 2033     		adds	r3, r3, #32
 3333              	.LVL237:
5869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3334              		.loc 1 5869 3 is_stmt 1 view .LVU996
 3335 00d4 D158     		ldr	r1, [r2, r3]
 3336 00d6 01F0F021 		and	r1, r1, #-268374016
 3337 00da 2943     		orrs	r1, r1, r5
 3338 00dc 41EA0041 		orr	r1, r1, r0, lsl #16
 3339              	.LBE422:
 3340              	.LBE421:
3204:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3341              		.loc 2 3204 3 is_stmt 0 view .LVU997
 3342 00e0 0020     		movs	r0, #0
 3343              	.LVL238:
 3344              	.LBB424:
 3345              	.LBB423:
5869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3346              		.loc 1 5869 3 view .LVU998
 3347 00e2 D150     		str	r1, [r2, r3]
 3348              	.LVL239:
5869:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 3349              		.loc 1 5869 3 view .LVU999
 3350              	.LBE423:
 3351              	.LBE424:
3204:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3352              		.loc 2 3204 3 is_stmt 1 view .LVU1000
3204:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3353              		.loc 2 3204 3 view .LVU1001
 3354 00e4 84F85800 		strb	r0, [r4, #88]
3207:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3355              		.loc 2 3207 3 view .LVU1002
 3356              	.LVL240:
 3357              	.L286:
3208:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3358              		.loc 2 3208 1 is_stmt 0 view .LVU1003
 3359 00e8 70BD     		pop	{r4, r5, r6, pc}
 3360              	.LVL241:
 3361              	.L295:
3057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
 3362              		.loc 2 3057 11 is_stmt 1 view .LVU1004
3057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
 3363              		.loc 2 3057 72 is_stmt 0 view .LVU1005
 3364 00ea AA68     		ldr	r2, [r5, #8]
 3365 00ec 22F07C72 		bic	r2, r2, #66060288
3057:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
 3366              		.loc 2 3057 11 view .LVU1006
 3367 00f0 42F0E072 		orr	r2, r2, #29360128
 3368 00f4 BEE7     		b	.L334
 3369              	.L291:
3062:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3370              		.loc 2 3062 11 is_stmt 1 view .LVU1007
 3371 00f6 4C4A     		ldr	r2, .L341+4
 3372 00f8 BCE7     		b	.L334
 3373              	.L289:
3066:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3374              		.loc 2 3066 11 view .LVU1008
 3375 00fa 4C4A     		ldr	r2, .L341+8
 3376 00fc BAE7     		b	.L334
 3377              	.L294:
3070:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3378              		.loc 2 3070 11 view .LVU1009
 3379 00fe 4C4A     		ldr	r2, .L341+12
 3380 0100 B8E7     		b	.L334
 3381              	.L288:
3105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3382              		.loc 2 3105 7 view .LVU1010
 3383 0102 B3F1807F 		cmp	r3, #16777216
 3384 0106 5BD0     		beq	.L299
 3385 0108 28D8     		bhi	.L300
 3386 010a B3F5000F 		cmp	r3, #8388608
 3387 010e 57D0     		beq	.L299
 3388 0110 B3F5400F 		cmp	r3, #12582912
 3389              	.L336:
 3390 0114 5DD1     		bne	.L302
 3391              	.L301:
3112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 3392              		.loc 2 3112 11 view .LVU1011
3112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 3393              		.loc 2 3112 14 is_stmt 0 view .LVU1012
 3394 0116 474A     		ldr	r2, .L341+16
 3395 0118 AB68     		ldr	r3, [r5, #8]
 3396 011a 9142     		cmp	r1, r2
 3397 011c C3F31200 		ubfx	r0, r3, #0, #19
 3398              	.LVL242:
3112:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 3399              		.loc 2 3112 14 view .LVU1013
 3400 0120 4FF00102 		mov	r2, #1
 3401 0124 2AD1     		bne	.L303
3114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3402              		.loc 2 3114 13 is_stmt 1 view .LVU1014
 3403 0126 10BB     		cbnz	r0, .L304
3114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3404              		.loc 2 3114 13 is_stmt 0 discriminator 1 view .LVU1015
 3405 0128 C3F38463 		ubfx	r3, r3, #26, #5
 3406              	.L337:
3114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3407              		.loc 2 3114 13 discriminator 2 view .LVU1016
 3408 012c 02FA03F3 		lsl	r3, r2, r3
 3409 0130 D6F8A020 		ldr	r2, [r6, #160]
 3410 0134 1343     		orrs	r3, r3, r2
 3411 0136 C6F8A030 		str	r3, [r6, #160]
3133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3412              		.loc 2 3133 7 is_stmt 1 discriminator 2 view .LVU1017
 3413              	.L306:
3136:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3414              		.loc 2 3136 9 view .LVU1018
 3415 013a E36D     		ldr	r3, [r4, #92]
 3416 013c 23F40033 		bic	r3, r3, #131072
 3417 0140 E365     		str	r3, [r4, #92]
3142:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3418              		.loc 2 3142 9 view .LVU1019
 3419 0142 2368     		ldr	r3, [r4]
 3420              	.LVL243:
 3421              	.LBB425:
 3422              	.LBI425:
7358:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3423              		.loc 1 7358 22 view .LVU1020
 3424              	.LBB426:
7360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3425              		.loc 1 7360 3 view .LVU1021
 3426 0144 4FF48072 		mov	r2, #256
 3427 0148 1A60     		str	r2, [r3]
 3428              	.LVL244:
7360:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3429              		.loc 1 7360 3 is_stmt 0 view .LVU1022
 3430              	.LBE426:
 3431              	.LBE425:
3145:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3432              		.loc 2 3145 9 is_stmt 1 view .LVU1023
3145:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3433              		.loc 2 3145 12 is_stmt 0 view .LVU1024
 3434 014a 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 3435 014c 012A     		cmp	r2, #1
 3436              	.LBB427:
 3437              	.LBB428:
7755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3438              		.loc 1 7755 3 view .LVU1025
 3439 014e 5A68     		ldr	r2, [r3, #4]
 3440              	.LBE428:
 3441              	.LBE427:
3147:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3442              		.loc 2 3147 11 is_stmt 1 view .LVU1026
 3443              	.LVL245:
 3444              	.LBB430:
 3445              	.LBI427:
7753:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3446              		.loc 1 7753 22 view .LVU1027
 3447              	.LBB429:
7755:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3448              		.loc 1 7755 3 view .LVU1028
 3449 0150 0CBF     		ite	eq
 3450 0152 42F48072 		orreq	r2, r2, #256
 3451              	.LBE429:
 3452              	.LBE430:
3151:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3453              		.loc 2 3151 11 view .LVU1029
 3454              	.LVL246:
 3455              	.LBB431:
 3456              	.LBI431:
7874:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3457              		.loc 1 7874 22 view .LVU1030
 3458              	.LBB432:
7876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3459              		.loc 1 7876 3 view .LVU1031
 3460 0156 22F48072 		bicne	r2, r2, #256
 3461 015a A3E7     		b	.L340
 3462              	.LVL247:
 3463              	.L300:
7876:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3464              		.loc 1 7876 3 is_stmt 0 view .LVU1032
 3465              	.LBE432:
 3466              	.LBE431:
3105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3467              		.loc 2 3105 7 view .LVU1033
 3468 015c B3F1C07F 		cmp	r3, #25165824
 3469 0160 2ED0     		beq	.L299
 3470 0162 B3F1E07F 		cmp	r3, #29360128
 3471 0166 D6D0     		beq	.L301
 3472 0168 B3F1A07F 		cmp	r3, #20971520
 3473 016c D2E7     		b	.L336
 3474              	.LVL248:
 3475              	.L304:
 3476              	.LBB433:
 3477              	.LBI433:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3478              		.loc 3 981 31 is_stmt 1 discriminator 2 view .LVU1034
 3479              	.LBB434:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3480              		.loc 3 983 3 discriminator 2 view .LVU1035
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3481              		.loc 3 988 4 discriminator 2 view .LVU1036
 3482              		.syntax unified
 3483              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3484 016e 93FAA3F3 		rbit r3, r3
 3485              	@ 0 "" 2
 3486              	.LVL249:
 3487              		.loc 3 1001 3 discriminator 2 view .LVU1037
 3488              		.loc 3 1001 3 is_stmt 0 discriminator 2 view .LVU1038
 3489              		.thumb
 3490              		.syntax unified
 3491              	.LBE434:
 3492              	.LBE433:
3114:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3493              		.loc 2 3114 13 discriminator 2 view .LVU1039
 3494 0172 B3FA83F3 		clz	r3, r3
 3495 0176 03F01F03 		and	r3, r3, #31
 3496 017a D7E7     		b	.L337
 3497              	.L303:
3118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3498              		.loc 2 3118 13 is_stmt 1 view .LVU1040
 3499 017c C8B9     		cbnz	r0, .L307
3118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3500              		.loc 2 3118 13 is_stmt 0 discriminator 1 view .LVU1041
 3501 017e C3F38463 		ubfx	r3, r3, #26, #5
 3502              	.L338:
3118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3503              		.loc 2 3118 13 discriminator 2 view .LVU1042
 3504 0182 02FA03F3 		lsl	r3, r2, r3
 3505 0186 D6F8A420 		ldr	r2, [r6, #164]
 3506 018a 1343     		orrs	r3, r3, r2
 3507 018c C6F8A430 		str	r3, [r6, #164]
3133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3508              		.loc 2 3133 7 is_stmt 1 discriminator 2 view .LVU1043
 3509              	.L309:
3158:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3510              		.loc 2 3158 9 view .LVU1044
 3511 0190 E36D     		ldr	r3, [r4, #92]
 3512 0192 23F48023 		bic	r3, r3, #262144
 3513 0196 E365     		str	r3, [r4, #92]
3164:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3514              		.loc 2 3164 9 view .LVU1045
 3515 0198 2368     		ldr	r3, [r4]
 3516              	.LVL250:
 3517              	.LBB435:
 3518              	.LBI435:
7369:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3519              		.loc 1 7369 22 view .LVU1046
 3520              	.LBB436:
7371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3521              		.loc 1 7371 3 view .LVU1047
 3522 019a 4FF40072 		mov	r2, #512
 3523 019e 1A60     		str	r2, [r3]
 3524              	.LVL251:
7371:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3525              		.loc 1 7371 3 is_stmt 0 view .LVU1048
 3526              	.LBE436:
 3527              	.LBE435:
3167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3528              		.loc 2 3167 9 is_stmt 1 view .LVU1049
3167:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3529              		.loc 2 3167 12 is_stmt 0 view .LVU1050
 3530 01a0 2A7B     		ldrb	r2, [r5, #12]	@ zero_extendqisi2
 3531 01a2 012A     		cmp	r2, #1
 3532              	.LBB437:
 3533              	.LBB438:
7766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3534              		.loc 1 7766 3 view .LVU1051
 3535 01a4 5A68     		ldr	r2, [r3, #4]
 3536              	.LBE438:
 3537              	.LBE437:
3169:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3538              		.loc 2 3169 11 is_stmt 1 view .LVU1052
 3539              	.LVL252:
 3540              	.LBB440:
 3541              	.LBI437:
7764:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3542              		.loc 1 7764 22 view .LVU1053
 3543              	.LBB439:
7766:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3544              		.loc 1 7766 3 view .LVU1054
 3545 01a6 0CBF     		ite	eq
 3546 01a8 42F40072 		orreq	r2, r2, #512
 3547              	.LBE439:
 3548              	.LBE440:
3173:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3549              		.loc 2 3173 11 view .LVU1055
 3550              	.LVL253:
 3551              	.LBB441:
 3552              	.LBI418:
7885:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3553              		.loc 1 7885 22 view .LVU1056
 3554              	.LBB420:
 3555              		.loc 1 7887 3 view .LVU1057
 3556 01ac 22F40072 		bicne	r2, r2, #512
 3557 01b0 78E7     		b	.L340
 3558              	.LVL254:
 3559              	.L307:
 3560              		.loc 1 7887 3 is_stmt 0 view .LVU1058
 3561              	.LBE420:
 3562              	.LBE441:
 3563              	.LBB442:
 3564              	.LBI442:
 981:../../..\CubeG4\include/cmsis_gcc.h **** {
 3565              		.loc 3 981 31 is_stmt 1 discriminator 2 view .LVU1059
 3566              	.LBB443:
 983:../../..\CubeG4\include/cmsis_gcc.h **** 
 3567              		.loc 3 983 3 discriminator 2 view .LVU1060
 988:../../..\CubeG4\include/cmsis_gcc.h **** #else
 3568              		.loc 3 988 4 discriminator 2 view .LVU1061
 3569              		.syntax unified
 3570              	@ 988 "../../..\CubeG4\include/cmsis_gcc.h" 1
 3571 01b2 93FAA3F3 		rbit r3, r3
 3572              	@ 0 "" 2
 3573              	.LVL255:
 3574              		.loc 3 1001 3 discriminator 2 view .LVU1062
 3575              		.loc 3 1001 3 is_stmt 0 discriminator 2 view .LVU1063
 3576              		.thumb
 3577              		.syntax unified
 3578              	.LBE443:
 3579              	.LBE442:
3118:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 3580              		.loc 2 3118 13 discriminator 2 view .LVU1064
 3581 01b6 B3FA83F3 		clz	r3, r3
 3582 01ba 03F01F03 		and	r3, r3, #31
 3583 01be E0E7     		b	.L338
 3584              	.LVL256:
 3585              	.L299:
3125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3586              		.loc 2 3125 11 is_stmt 1 view .LVU1065
 3587 01c0 1B4A     		ldr	r2, .L341+12
 3588              	.L339:
3129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3589              		.loc 2 3129 11 is_stmt 0 view .LVU1066
 3590 01c2 3046     		mov	r0, r6
 3591              	.LVL257:
3129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3592              		.loc 2 3129 11 view .LVU1067
 3593 01c4 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
 3594              	.LVL258:
3130:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3595              		.loc 2 3130 11 is_stmt 1 view .LVU1068
3133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3596              		.loc 2 3133 7 view .LVU1069
3133:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3597              		.loc 2 3133 10 is_stmt 0 view .LVU1070
 3598 01c8 2A68     		ldr	r2, [r5]
 3599 01ca 1A4B     		ldr	r3, .L341+16
 3600 01cc 9A42     		cmp	r2, r3
 3601 01ce DFD1     		bne	.L309
 3602 01d0 B3E7     		b	.L306
 3603              	.LVL259:
 3604              	.L302:
3129:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 3605              		.loc 2 3129 11 is_stmt 1 view .LVU1071
 3606 01d2 0022     		movs	r2, #0
 3607 01d4 F5E7     		b	.L339
 3608              	.LVL260:
 3609              	.L313:
3195:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThre
 3610              		.loc 2 3195 5 view .LVU1072
3195:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThre
 3611              		.loc 2 3195 34 is_stmt 0 view .LVU1073
 3612 01d6 D868     		ldr	r0, [r3, #12]
 3613 01d8 00F01800 		and	r0, r0, #24
 3614 01dc 1828     		cmp	r0, #24
 3615 01de 1FBF     		itttt	ne
 3616 01e0 D868     		ldrne	r0, [r3, #12]
 3617 01e2 6FF00106 		mvnne	r6, #1
 3618 01e6 C0F3C100 		ubfxne	r0, r0, #3, #2
 3619 01ea 4643     		mulne	r6, r6, r0
 3620 01ec 1DBF     		ittte	ne
 3621 01ee 0436     		addne	r6, r6, #4
 3622 01f0 06F01F06 		andne	r6, r6, #31
 3623 01f4 21FA06F0 		lsrne	r0, r1, r6
 3624 01f8 8800     		lsleq	r0, r1, #2
 3625              	.LVL261:
3196:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3626              		.loc 2 3196 5 is_stmt 1 view .LVU1074
3196:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 3627              		.loc 2 3196 34 is_stmt 0 view .LVU1075
 3628 01fa D968     		ldr	r1, [r3, #12]
 3629 01fc 01F01801 		and	r1, r1, #24
 3630 0200 1829     		cmp	r1, #24
 3631 0202 1FBF     		itttt	ne
 3632 0204 DE68     		ldrne	r6, [r3, #12]
 3633 0206 6FF00101 		mvnne	r1, #1
 3634 020a C6F3C106 		ubfxne	r6, r6, #3, #2
 3635 020e 7143     		mulne	r1, r1, r6
 3636 0210 1DBF     		ittte	ne
 3637 0212 0431     		addne	r1, r1, #4
 3638 0214 01F01F01 		andne	r1, r1, #31
 3639 0218 CD40     		lsrne	r5, r5, r1
 3640 021a AD00     		lsleq	r5, r5, #2
 3641 021c 56E7     		b	.L314
 3642              	.LVL262:
 3643              	.L318:
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3644              		.loc 2 3026 3 view .LVU1076
 3645 021e 0220     		movs	r0, #2
 3646              	.LVL263:
3026:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3647              		.loc 2 3026 3 view .LVU1077
 3648 0220 62E7     		b	.L286
 3649              	.L342:
 3650 0222 00BF     		.align	2
 3651              	.L341:
 3652 0224 0000C07D 		.word	2109734912
 3653 0228 FFFF8700 		.word	8912895
 3654 022c FFFF0701 		.word	17301503
 3655 0230 FFFF8701 		.word	25690111
 3656 0234 FFFF1700 		.word	1572863
 3657              		.cfi_endproc
 3658              	.LFE346:
 3660              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3661              		.align	1
 3662              		.global	HAL_ADC_GetState
 3663              		.syntax unified
 3664              		.thumb
 3665              		.thumb_func
 3666              		.fpu fpv4-sp-d16
 3668              	HAL_ADC_GetState:
 3669              	.LVL264:
 3670              	.LFB347:
3243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 3671              		.loc 2 3243 1 is_stmt 1 view -0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 0
 3674              		@ frame_needed = 0, uses_anonymous_args = 0
 3675              		@ link register save eliminated.
3245:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3676              		.loc 2 3245 3 view .LVU1079
3248:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3677              		.loc 2 3248 3 view .LVU1080
3248:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3678              		.loc 2 3248 14 is_stmt 0 view .LVU1081
 3679 0000 C06D     		ldr	r0, [r0, #92]
 3680              	.LVL265:
3249:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3681              		.loc 2 3249 1 view .LVU1082
 3682 0002 7047     		bx	lr
 3683              		.cfi_endproc
 3684              	.LFE347:
 3686              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3687              		.align	1
 3688              		.global	HAL_ADC_GetError
 3689              		.syntax unified
 3690              		.thumb
 3691              		.thumb_func
 3692              		.fpu fpv4-sp-d16
 3694              	HAL_ADC_GetError:
 3695              	.LVL266:
 3696              	.LFB348:
3257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 3697              		.loc 2 3257 1 is_stmt 1 view -0
 3698              		.cfi_startproc
 3699              		@ args = 0, pretend = 0, frame = 0
 3700              		@ frame_needed = 0, uses_anonymous_args = 0
 3701              		@ link register save eliminated.
3259:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3702              		.loc 2 3259 3 view .LVU1084
3261:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3703              		.loc 2 3261 3 view .LVU1085
3261:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3704              		.loc 2 3261 14 is_stmt 0 view .LVU1086
 3705 0000 006E     		ldr	r0, [r0, #96]
 3706              	.LVL267:
3262:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3707              		.loc 2 3262 1 view .LVU1087
 3708 0002 7047     		bx	lr
 3709              		.cfi_endproc
 3710              	.LFE348:
 3712              		.section	.text.ADC_ConversionStop,"ax",%progbits
 3713              		.align	1
 3714              		.global	ADC_ConversionStop
 3715              		.syntax unified
 3716              		.thumb
 3717              		.thumb_func
 3718              		.fpu fpv4-sp-d16
 3720              	ADC_ConversionStop:
 3721              	.LVL268:
 3722              	.LFB349:
3287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 3723              		.loc 2 3287 1 is_stmt 1 view -0
 3724              		.cfi_startproc
 3725              		@ args = 0, pretend = 0, frame = 0
 3726              		@ frame_needed = 0, uses_anonymous_args = 0
3288:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 3727              		.loc 2 3288 3 view .LVU1089
3289:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
 3728              		.loc 2 3289 3 view .LVU1090
3290:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
 3729              		.loc 2 3290 3 view .LVU1091
3291:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 3730              		.loc 2 3291 3 view .LVU1092
3292:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 3731              		.loc 2 3292 3 view .LVU1093
3293:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3732              		.loc 2 3293 3 view .LVU1094
3296:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 3733              		.loc 2 3296 3 view .LVU1095
3297:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3734              		.loc 2 3297 3 view .LVU1096
3301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3735              		.loc 2 3301 3 view .LVU1097
3287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 3736              		.loc 2 3287 1 is_stmt 0 view .LVU1098
 3737 0000 70B5     		push	{r4, r5, r6, lr}
 3738              		.cfi_def_cfa_offset 16
 3739              		.cfi_offset 4, -16
 3740              		.cfi_offset 5, -12
 3741              		.cfi_offset 6, -8
 3742              		.cfi_offset 14, -4
3287:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 3743              		.loc 2 3287 1 view .LVU1099
 3744 0002 0446     		mov	r4, r0
3301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3745              		.loc 2 3301 44 view .LVU1100
 3746 0004 0068     		ldr	r0, [r0]
 3747              	.LVL269:
3301:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3748              		.loc 2 3301 44 view .LVU1101
 3749 0006 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3750              	.LVL270:
3302:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 3751              		.loc 2 3302 3 is_stmt 1 view .LVU1102
3302:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 3752              		.loc 2 3302 45 is_stmt 0 view .LVU1103
 3753 000a 2368     		ldr	r3, [r4]
 3754              	.LVL271:
 3755              	.LBB456:
 3756              	.LBI456:
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3757              		.loc 1 6968 26 is_stmt 1 view .LVU1104
 3758              	.LBB457:
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3759              		.loc 1 6970 3 view .LVU1105
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3760              		.loc 1 6970 12 is_stmt 0 view .LVU1106
 3761 000c 9A68     		ldr	r2, [r3, #8]
 3762 000e 02F00802 		and	r2, r2, #8
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3763              		.loc 1 6970 76 view .LVU1107
 3764 0012 0243     		orrs	r2, r2, r0
 3765 0014 01D1     		bne	.L346
 3766              	.LVL272:
 3767              	.L358:
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3768              		.loc 1 6970 76 view .LVU1108
 3769              	.LBE457:
 3770              	.LBE456:
3404:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 3771              		.loc 2 3404 10 view .LVU1109
 3772 0016 0020     		movs	r0, #0
 3773              	.L347:
3405:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3774              		.loc 2 3405 1 view .LVU1110
 3775 0018 70BD     		pop	{r4, r5, r6, pc}
 3776              	.LVL273:
 3777              	.L346:
3313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 3778              		.loc 2 3313 5 is_stmt 1 view .LVU1111
3313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 3779              		.loc 2 3313 25 is_stmt 0 view .LVU1112
 3780 001a DA68     		ldr	r2, [r3, #12]
3313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 3781              		.loc 2 3313 8 view .LVU1113
 3782 001c 9001     		lsls	r0, r2, #6
 3783              	.LVL274:
3313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 3784              		.loc 2 3313 8 view .LVU1114
 3785 001e 2BD5     		bpl	.L348
3315:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****        )
 3786              		.loc 2 3315 9 view .LVU1115
 3787 0020 A08B     		ldrh	r0, [r4, #28]
 3788 0022 40F20112 		movw	r2, #257
 3789 0026 9042     		cmp	r0, r2
 3790 0028 26D1     		bne	.L348
 3791 002a 264A     		ldr	r2, .L378
 3792              	.LVL275:
 3793              	.L349:
3322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3794              		.loc 2 3322 14 view .LVU1116
 3795 002c 1968     		ldr	r1, [r3]
3322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3796              		.loc 2 3322 13 view .LVU1117
 3797 002e 4906     		lsls	r1, r1, #25
 3798 0030 16D5     		bpl	.L350
3338:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 3799              		.loc 2 3338 7 is_stmt 1 view .LVU1118
 3800 0032 4022     		movs	r2, #64
 3801              	.LVL276:
3338:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 3802              		.loc 2 3338 7 is_stmt 0 view .LVU1119
 3803 0034 1A60     		str	r2, [r3]
 3804              	.LVL277:
3342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3805              		.loc 2 3342 5 is_stmt 1 view .LVU1120
3319:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3806              		.loc 2 3319 35 is_stmt 0 view .LVU1121
 3807 0036 0121     		movs	r1, #1
 3808              	.LVL278:
 3809              	.L351:
3345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3810              		.loc 2 3345 7 is_stmt 1 view .LVU1122
3345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3811              		.loc 2 3345 11 is_stmt 0 view .LVU1123
 3812 0038 1846     		mov	r0, r3
 3813 003a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3814              	.LVL279:
3345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3815              		.loc 2 3345 10 view .LVU1124
 3816 003e 58B1     		cbz	r0, .L353
3347:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3817              		.loc 2 3347 9 is_stmt 1 view .LVU1125
3347:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3818              		.loc 2 3347 13 is_stmt 0 view .LVU1126
 3819 0040 2268     		ldr	r2, [r4]
 3820              	.LVL280:
 3821              	.LBB458:
 3822              	.LBI458:
6632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3823              		.loc 1 6632 26 is_stmt 1 view .LVU1127
 3824              	.LBB459:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3825              		.loc 1 6634 3 view .LVU1128
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3826              		.loc 1 6634 12 is_stmt 0 view .LVU1129
 3827 0042 9368     		ldr	r3, [r2, #8]
 3828              	.LVL281:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3829              		.loc 1 6634 70 view .LVU1130
 3830 0044 9E07     		lsls	r6, r3, #30
 3831 0046 07D4     		bmi	.L353
 3832              	.LVL282:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3833              		.loc 1 6634 70 view .LVU1131
 3834              	.LBE459:
 3835              	.LBE458:
3350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3836              		.loc 2 3350 11 is_stmt 1 view .LVU1132
 3837              	.LBB460:
 3838              	.LBI460:
6727:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3839              		.loc 1 6727 22 view .LVU1133
 3840              	.LBB461:
6732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3841              		.loc 1 6732 3 view .LVU1134
 3842 0048 9368     		ldr	r3, [r2, #8]
 3843 004a 23F00043 		bic	r3, r3, #-2147483648
 3844 004e 23F03F03 		bic	r3, r3, #63
 3845 0052 43F01003 		orr	r3, r3, #16
 3846 0056 9360     		str	r3, [r2, #8]
 3847              	.LVL283:
 3848              	.L353:
6732:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3849              		.loc 1 6732 3 is_stmt 0 view .LVU1135
 3850              	.LBE461:
 3851              	.LBE460:
3356:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3852              		.loc 2 3356 5 is_stmt 1 view .LVU1136
3356:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3853              		.loc 2 3356 8 is_stmt 0 view .LVU1137
 3854 0058 0129     		cmp	r1, #1
 3855 005a 0FD1     		bne	.L352
3380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
 3856              		.loc 2 3380 37 view .LVU1138
 3857 005c 0425     		movs	r5, #4
 3858 005e 22E0     		b	.L354
 3859              	.LVL284:
 3860              	.L350:
3324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3861              		.loc 2 3324 9 is_stmt 1 view .LVU1139
3324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3862              		.loc 2 3324 12 is_stmt 0 view .LVU1140
 3863 0060 013A     		subs	r2, r2, #1
 3864              	.LVL285:
3324:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3865              		.loc 2 3324 12 view .LVU1141
 3866 0062 E3D1     		bne	.L349
 3867              	.LVL286:
 3868              	.L377:
3392:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3869              		.loc 2 3392 9 is_stmt 1 view .LVU1142
 3870 0064 E36D     		ldr	r3, [r4, #92]
 3871 0066 43F01003 		orr	r3, r3, #16
 3872 006a E365     		str	r3, [r4, #92]
3395:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3873              		.loc 2 3395 9 view .LVU1143
 3874 006c 236E     		ldr	r3, [r4, #96]
 3875 006e 43F00103 		orr	r3, r3, #1
 3876 0072 2366     		str	r3, [r4, #96]
3397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3877              		.loc 2 3397 9 view .LVU1144
3397:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 3878              		.loc 2 3397 16 is_stmt 0 view .LVU1145
 3879 0074 0120     		movs	r0, #1
 3880 0076 CFE7     		b	.L347
 3881              	.LVL287:
 3882              	.L348:
3342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3883              		.loc 2 3342 5 is_stmt 1 view .LVU1146
3342:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3884              		.loc 2 3342 8 is_stmt 0 view .LVU1147
 3885 0078 0229     		cmp	r1, #2
 3886 007a DDD1     		bne	.L351
 3887              	.LVL288:
 3888              	.L352:
3359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3889              		.loc 2 3359 7 is_stmt 1 view .LVU1148
3359:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3890              		.loc 2 3359 11 is_stmt 0 view .LVU1149
 3891 007c 2268     		ldr	r2, [r4]
 3892              	.LVL289:
 3893              	.LBB462:
 3894              	.LBI462:
6968:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3895              		.loc 1 6968 26 is_stmt 1 view .LVU1150
 3896              	.LBB463:
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3897              		.loc 1 6970 3 view .LVU1151
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3898              		.loc 1 6970 12 is_stmt 0 view .LVU1152
 3899 007e 9368     		ldr	r3, [r2, #8]
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3900              		.loc 1 6970 76 view .LVU1153
 3901 0080 1807     		lsls	r0, r3, #28
 3902 0082 0AD5     		bpl	.L355
 3903              	.LVL290:
6970:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3904              		.loc 1 6970 76 view .LVU1154
 3905              	.LBE463:
 3906              	.LBE462:
3361:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 3907              		.loc 2 3361 9 is_stmt 1 view .LVU1155
 3908              	.LBB464:
 3909              	.LBI464:
6632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3910              		.loc 1 6632 26 view .LVU1156
 3911              	.LBB465:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3912              		.loc 1 6634 3 view .LVU1157
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3913              		.loc 1 6634 12 is_stmt 0 view .LVU1158
 3914 0084 9368     		ldr	r3, [r2, #8]
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3915              		.loc 1 6634 70 view .LVU1159
 3916 0086 9B07     		lsls	r3, r3, #30
 3917 0088 07D4     		bmi	.L355
 3918              	.LVL291:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 3919              		.loc 1 6634 70 view .LVU1160
 3920              	.LBE465:
 3921              	.LBE464:
3364:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 3922              		.loc 2 3364 11 is_stmt 1 view .LVU1161
 3923              	.LBB466:
 3924              	.LBI466:
6952:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 3925              		.loc 1 6952 22 view .LVU1162
 3926              	.LBB467:
6957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3927              		.loc 1 6957 3 view .LVU1163
 3928 008a 9368     		ldr	r3, [r2, #8]
 3929 008c 23F00043 		bic	r3, r3, #-2147483648
 3930 0090 23F03F03 		bic	r3, r3, #63
 3931 0094 43F02003 		orr	r3, r3, #32
 3932 0098 9360     		str	r3, [r2, #8]
 3933              	.LVL292:
 3934              	.L355:
6957:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3935              		.loc 1 6957 3 is_stmt 0 view .LVU1164
 3936              	.LBE467:
 3937              	.LBE466:
3370:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3938              		.loc 2 3370 5 is_stmt 1 view .LVU1165
 3939 009a 0229     		cmp	r1, #2
 3940 009c 10D0     		beq	.L361
3380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
 3941              		.loc 2 3380 37 is_stmt 0 view .LVU1166
 3942 009e 0329     		cmp	r1, #3
 3943 00a0 0CBF     		ite	eq
 3944 00a2 0C25     		moveq	r5, #12
 3945 00a4 0425     		movne	r5, #4
 3946              	.L354:
 3947              	.LVL293:
3385:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3948              		.loc 2 3385 5 is_stmt 1 view .LVU1167
3385:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 3949              		.loc 2 3385 17 is_stmt 0 view .LVU1168
 3950 00a6 FFF7FEFF 		bl	HAL_GetTick
 3951              	.LVL294:
 3952 00aa 0646     		mov	r6, r0
 3953              	.LVL295:
3387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3954              		.loc 2 3387 5 is_stmt 1 view .LVU1169
 3955              	.L356:
3387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3956              		.loc 2 3387 17 is_stmt 0 view .LVU1170
 3957 00ac 2368     		ldr	r3, [r4]
3387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3958              		.loc 2 3387 27 view .LVU1171
 3959 00ae 9B68     		ldr	r3, [r3, #8]
3387:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 3960              		.loc 2 3387 11 view .LVU1172
 3961 00b0 2B42     		tst	r3, r5
 3962 00b2 B0D0     		beq	.L358
3389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3963              		.loc 2 3389 7 is_stmt 1 view .LVU1173
3389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3964              		.loc 2 3389 12 is_stmt 0 view .LVU1174
 3965 00b4 FFF7FEFF 		bl	HAL_GetTick
 3966              	.LVL296:
3389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3967              		.loc 2 3389 26 view .LVU1175
 3968 00b8 801B     		subs	r0, r0, r6
3389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 3969              		.loc 2 3389 10 view .LVU1176
 3970 00ba 0528     		cmp	r0, #5
 3971 00bc F6D9     		bls	.L356
 3972 00be D1E7     		b	.L377
 3973              	.LVL297:
 3974              	.L361:
3376:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         break;
 3975              		.loc 2 3376 37 view .LVU1177
 3976 00c0 0825     		movs	r5, #8
 3977 00c2 F0E7     		b	.L354
 3978              	.L379:
 3979              		.align	2
 3980              	.L378:
 3981 00c4 010040A3 		.word	-1556086783
 3982              		.cfi_endproc
 3983              	.LFE349:
 3985              		.section	.text.ADC_Enable,"ax",%progbits
 3986              		.align	1
 3987              		.global	ADC_Enable
 3988              		.syntax unified
 3989              		.thumb
 3990              		.thumb_func
 3991              		.fpu fpv4-sp-d16
 3993              	ADC_Enable:
 3994              	.LVL298:
 3995              	.LFB350:
3417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 3996              		.loc 2 3417 1 is_stmt 1 view -0
 3997              		.cfi_startproc
 3998              		@ args = 0, pretend = 0, frame = 0
 3999              		@ frame_needed = 0, uses_anonymous_args = 0
3418:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4000              		.loc 2 3418 3 view .LVU1179
3424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4001              		.loc 2 3424 3 view .LVU1180
3417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 4002              		.loc 2 3417 1 is_stmt 0 view .LVU1181
 4003 0000 70B5     		push	{r4, r5, r6, lr}
 4004              		.cfi_def_cfa_offset 16
 4005              		.cfi_offset 4, -16
 4006              		.cfi_offset 5, -12
 4007              		.cfi_offset 6, -8
 4008              		.cfi_offset 14, -4
3417:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 4009              		.loc 2 3417 1 view .LVU1182
 4010 0002 0446     		mov	r4, r0
3424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4011              		.loc 2 3424 7 view .LVU1183
 4012 0004 0068     		ldr	r0, [r0]
 4013              	.LVL299:
3424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4014              		.loc 2 3424 7 view .LVU1184
 4015 0006 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4016              	.LVL300:
3424:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4017              		.loc 2 3424 6 view .LVU1185
 4018 000a 08B1     		cbz	r0, .L381
 4019              	.L387:
3473:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 4020              		.loc 2 3473 10 view .LVU1186
 4021 000c 0020     		movs	r0, #0
 4022              	.L382:
3474:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4023              		.loc 2 3474 1 view .LVU1187
 4024 000e 70BD     		pop	{r4, r5, r6, pc}
 4025              	.LVL301:
 4026              	.L381:
 4027              	.LBB474:
 4028              	.LBI474:
3416:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 4029              		.loc 2 3416 19 is_stmt 1 view .LVU1188
 4030              	.LBB475:
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4031              		.loc 2 3427 5 view .LVU1189
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4032              		.loc 2 3427 14 is_stmt 0 view .LVU1190
 4033 0010 2268     		ldr	r2, [r4]
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4034              		.loc 2 3427 8 view .LVU1191
 4035 0012 154B     		ldr	r3, .L390
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4036              		.loc 2 3427 24 view .LVU1192
 4037 0014 9168     		ldr	r1, [r2, #8]
3427:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4038              		.loc 2 3427 8 view .LVU1193
 4039 0016 1942     		tst	r1, r3
 4040 0018 09D0     		beq	.L383
 4041              	.L389:
3462:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4042              		.loc 2 3462 9 is_stmt 1 view .LVU1194
 4043 001a E36D     		ldr	r3, [r4, #92]
 4044 001c 43F01003 		orr	r3, r3, #16
 4045 0020 E365     		str	r3, [r4, #92]
3465:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4046              		.loc 2 3465 9 view .LVU1195
 4047 0022 236E     		ldr	r3, [r4, #96]
 4048 0024 43F00103 		orr	r3, r3, #1
 4049 0028 2366     		str	r3, [r4, #96]
3467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4050              		.loc 2 3467 9 view .LVU1196
3467:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4051              		.loc 2 3467 16 is_stmt 0 view .LVU1197
 4052 002a 0120     		movs	r0, #1
 4053 002c EFE7     		b	.L382
 4054              	.L383:
3439:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4055              		.loc 2 3439 5 is_stmt 1 view .LVU1198
 4056              	.LVL302:
 4057              	.LBB476:
 4058              	.LBI476:
6582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4059              		.loc 1 6582 22 view .LVU1199
 4060              	.LBB477:
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4061              		.loc 1 6587 3 view .LVU1200
 4062 002e 9368     		ldr	r3, [r2, #8]
 4063 0030 0E4D     		ldr	r5, .L390+4
 4064 0032 2B40     		ands	r3, r3, r5
 4065 0034 43F00103 		orr	r3, r3, #1
 4066 0038 9360     		str	r3, [r2, #8]
 4067              	.LVL303:
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4068              		.loc 1 6587 3 is_stmt 0 view .LVU1201
 4069              	.LBE477:
 4070              	.LBE476:
3442:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4071              		.loc 2 3442 5 is_stmt 1 view .LVU1202
3442:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4072              		.loc 2 3442 17 is_stmt 0 view .LVU1203
 4073 003a FFF7FEFF 		bl	HAL_GetTick
 4074              	.LVL304:
 4075 003e 0646     		mov	r6, r0
 4076              	.LVL305:
3444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4077              		.loc 2 3444 5 is_stmt 1 view .LVU1204
 4078              	.L384:
3444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4079              		.loc 2 3444 12 is_stmt 0 view .LVU1205
 4080 0040 2068     		ldr	r0, [r4]
 4081 0042 0368     		ldr	r3, [r0]
3444:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4082              		.loc 2 3444 11 view .LVU1206
 4083 0044 DB07     		lsls	r3, r3, #31
 4084 0046 E1D4     		bmi	.L387
3454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4085              		.loc 2 3454 7 is_stmt 1 view .LVU1207
3454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4086              		.loc 2 3454 11 is_stmt 0 view .LVU1208
 4087 0048 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4088              	.LVL306:
3454:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4089              		.loc 2 3454 10 view .LVU1209
 4090 004c 28B9     		cbnz	r0, .L385
3456:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4091              		.loc 2 3456 9 is_stmt 1 view .LVU1210
 4092 004e 2268     		ldr	r2, [r4]
 4093              	.LVL307:
 4094              	.LBB478:
 4095              	.LBI478:
6582:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4096              		.loc 1 6582 22 view .LVU1211
 4097              	.LBB479:
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4098              		.loc 1 6587 3 view .LVU1212
 4099 0050 9368     		ldr	r3, [r2, #8]
 4100 0052 2B40     		ands	r3, r3, r5
 4101 0054 43F00103 		orr	r3, r3, #1
 4102 0058 9360     		str	r3, [r2, #8]
 4103              	.LVL308:
 4104              	.L385:
6587:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4105              		.loc 1 6587 3 is_stmt 0 view .LVU1213
 4106              	.LBE479:
 4107              	.LBE478:
3459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4108              		.loc 2 3459 7 is_stmt 1 view .LVU1214
3459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4109              		.loc 2 3459 12 is_stmt 0 view .LVU1215
 4110 005a FFF7FEFF 		bl	HAL_GetTick
 4111              	.LVL309:
3459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4112              		.loc 2 3459 26 view .LVU1216
 4113 005e 801B     		subs	r0, r0, r6
3459:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4114              		.loc 2 3459 10 view .LVU1217
 4115 0060 0228     		cmp	r0, #2
 4116 0062 EDD9     		bls	.L384
 4117 0064 D9E7     		b	.L389
 4118              	.L391:
 4119 0066 00BF     		.align	2
 4120              	.L390:
 4121 0068 3F000080 		.word	-2147483585
 4122 006c C0FFFF7F 		.word	2147483584
 4123              	.LBE475:
 4124              	.LBE474:
 4125              		.cfi_endproc
 4126              	.LFE350:
 4128              		.section	.text.HAL_ADC_Start,"ax",%progbits
 4129              		.align	1
 4130              		.global	HAL_ADC_Start
 4131              		.syntax unified
 4132              		.thumb
 4133              		.thumb_func
 4134              		.fpu fpv4-sp-d16
 4136              	HAL_ADC_Start:
 4137              	.LVL310:
 4138              	.LFB329:
1232:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4139              		.loc 2 1232 1 is_stmt 1 view -0
 4140              		.cfi_startproc
 4141              		@ args = 0, pretend = 0, frame = 0
 4142              		@ frame_needed = 0, uses_anonymous_args = 0
1233:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 4143              		.loc 2 1233 3 view .LVU1219
1235:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4144              		.loc 2 1235 3 view .LVU1220
1236:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
 4145              		.loc 2 1236 3 view .LVU1221
 4146              	.LBB484:
 4147              	.LBI484:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4148              		.loc 1 6284 26 view .LVU1222
 4149              	.LBB485:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4150              		.loc 1 6286 3 view .LVU1223
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4151              		.loc 1 6286 21 is_stmt 0 view .LVU1224
 4152 0000 344B     		ldr	r3, .L416
 4153              	.LBE485:
 4154              	.LBE484:
1232:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4155              		.loc 2 1232 1 view .LVU1225
 4156 0002 70B5     		push	{r4, r5, r6, lr}
 4157              		.cfi_def_cfa_offset 16
 4158              		.cfi_offset 4, -16
 4159              		.cfi_offset 5, -12
 4160              		.cfi_offset 6, -8
 4161              		.cfi_offset 14, -4
1232:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4162              		.loc 2 1232 1 view .LVU1226
 4163 0004 0446     		mov	r4, r0
1243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4164              		.loc 2 1243 7 view .LVU1227
 4165 0006 0068     		ldr	r0, [r0]
 4166              	.LVL311:
 4167              	.LBB488:
 4168              	.LBB486:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4169              		.loc 1 6286 21 view .LVU1228
 4170 0008 9E68     		ldr	r6, [r3, #8]
 4171              	.LVL312:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4172              		.loc 1 6286 21 view .LVU1229
 4173              	.LBE486:
 4174              	.LBE488:
1240:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4175              		.loc 2 1240 3 is_stmt 1 view .LVU1230
1243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4176              		.loc 2 1243 3 view .LVU1231
1243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4177              		.loc 2 1243 7 is_stmt 0 view .LVU1232
 4178 000a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4179              	.LVL313:
1243:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4180              		.loc 2 1243 6 view .LVU1233
 4181 000e 0546     		mov	r5, r0
 4182 0010 0028     		cmp	r0, #0
 4183 0012 42D1     		bne	.L405
1246:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4184              		.loc 2 1246 5 is_stmt 1 view .LVU1234
1246:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4185              		.loc 2 1246 5 view .LVU1235
 4186 0014 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 4187 0018 012B     		cmp	r3, #1
 4188 001a 3ED0     		beq	.L405
1246:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4189              		.loc 2 1246 5 discriminator 2 view .LVU1236
 4190 001c 0123     		movs	r3, #1
 4191 001e 84F85830 		strb	r3, [r4, #88]
1249:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4192              		.loc 2 1249 5 discriminator 2 view .LVU1237
1249:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4193              		.loc 2 1249 22 is_stmt 0 discriminator 2 view .LVU1238
 4194 0022 2046     		mov	r0, r4
 4195 0024 FFF7FEFF 		bl	ADC_Enable
 4196              	.LVL314:
1252:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4197              		.loc 2 1252 5 is_stmt 1 discriminator 2 view .LVU1239
1252:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4198              		.loc 2 1252 8 is_stmt 0 discriminator 2 view .LVU1240
 4199 0028 0028     		cmp	r0, #0
 4200 002a 33D1     		bne	.L394
1257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4201              		.loc 2 1257 7 view .LVU1241
 4202 002c E36D     		ldr	r3, [r4, #92]
1265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4203              		.loc 2 1265 12 view .LVU1242
 4204 002e 2268     		ldr	r2, [r4]
1257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4205              		.loc 2 1257 7 view .LVU1243
 4206 0030 23F47063 		bic	r3, r3, #3840
 4207 0034 23F00103 		bic	r3, r3, #1
 4208 0038 43F48073 		orr	r3, r3, #256
 4209 003c E365     		str	r3, [r4, #92]
1265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4210              		.loc 2 1265 12 view .LVU1244
 4211 003e 264B     		ldr	r3, .L416+4
 4212 0040 9A42     		cmp	r2, r3
 4213              	.LBB489:
 4214              	.LBB487:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4215              		.loc 1 6286 10 view .LVU1245
 4216 0042 06F01F01 		and	r1, r6, #31
 4217              	.LVL315:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4218              		.loc 1 6286 10 view .LVU1246
 4219              	.LBE487:
 4220              	.LBE489:
1257:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4221              		.loc 2 1257 7 is_stmt 1 view .LVU1247
1265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4222              		.loc 2 1265 7 view .LVU1248
1265:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4223              		.loc 2 1265 12 is_stmt 0 view .LVU1249
 4224 0046 42D0     		beq	.L395
 4225              	.L402:
1269:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4226              		.loc 2 1269 9 is_stmt 1 view .LVU1250
 4227 0048 E36D     		ldr	r3, [r4, #92]
 4228 004a 23F48013 		bic	r3, r3, #1048576
 4229 004e E365     		str	r3, [r4, #92]
 4230              	.L403:
1275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4231              		.loc 2 1275 7 view .LVU1251
1275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4232              		.loc 2 1275 11 is_stmt 0 view .LVU1252
 4233 0050 E36D     		ldr	r3, [r4, #92]
1275:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4234              		.loc 2 1275 10 view .LVU1253
 4235 0052 13F48053 		ands	r3, r3, #4096
1278:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4236              		.loc 2 1278 9 is_stmt 1 view .LVU1254
 4237 0056 1CBF     		itt	ne
 4238 0058 236E     		ldrne	r3, [r4, #96]
 4239 005a 23F00603 		bicne	r3, r3, #6
1283:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4240              		.loc 2 1283 9 view .LVU1255
 4241 005e 2366     		str	r3, [r4, #96]
1288:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4242              		.loc 2 1288 7 view .LVU1256
 4243 0060 1C23     		movs	r3, #28
 4244 0062 1360     		str	r3, [r2]
1293:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4245              		.loc 2 1293 7 view .LVU1257
1293:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4246              		.loc 2 1293 7 view .LVU1258
 4247 0064 0023     		movs	r3, #0
 4248 0066 84F85830 		strb	r3, [r4, #88]
1304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4249              		.loc 2 1304 7 view .LVU1259
1304:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4250              		.loc 2 1304 12 is_stmt 0 view .LVU1260
 4251 006a 1B4B     		ldr	r3, .L416+4
 4252 006c 9A42     		cmp	r2, r3
 4253 006e 16D0     		beq	.L398
 4254              	.LVL316:
 4255              	.L401:
1311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4256              		.loc 2 1311 9 is_stmt 1 view .LVU1261
1311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4257              		.loc 2 1311 13 is_stmt 0 view .LVU1262
 4258 0070 D368     		ldr	r3, [r2, #12]
1311:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4259              		.loc 2 1311 12 view .LVU1263
 4260 0072 9901     		lsls	r1, r3, #6
1313:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 4261              		.loc 2 1313 11 is_stmt 1 view .LVU1264
 4262 0074 41BF     		itttt	mi
 4263 0076 E36D     		ldrmi	r3, [r4, #92]
 4264 0078 23F44053 		bicmi	r3, r3, #12288
 4265 007c 43F48053 		orrmi	r3, r3, #4096
 4266 0080 E365     		strmi	r3, [r4, #92]
1317:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4267              		.loc 2 1317 9 view .LVU1265
 4268              	.LVL317:
 4269              	.LBB490:
 4270              	.LBI490:
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4271              		.loc 1 6707 22 view .LVU1266
 4272              	.LBB491:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4273              		.loc 1 6712 3 view .LVU1267
 4274 0082 9368     		ldr	r3, [r2, #8]
 4275 0084 23F00043 		bic	r3, r3, #-2147483648
 4276 0088 23F03F03 		bic	r3, r3, #63
 4277 008c 43F00403 		orr	r3, r3, #4
 4278 0090 9360     		str	r3, [r2, #8]
 4279              	.LVL318:
 4280              	.L406:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4281              		.loc 1 6712 3 is_stmt 0 view .LVU1268
 4282              	.LBE491:
 4283              	.LBE490:
1355:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4284              		.loc 2 1355 1 view .LVU1269
 4285 0092 70BD     		pop	{r4, r5, r6, pc}
 4286              	.LVL319:
 4287              	.L394:
1345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4288              		.loc 2 1345 7 is_stmt 1 view .LVU1270
1345:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4289              		.loc 2 1345 7 view .LVU1271
 4290 0094 84F85850 		strb	r5, [r4, #88]
 4291 0098 FBE7     		b	.L406
 4292              	.LVL320:
 4293              	.L405:
1350:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 4294              		.loc 2 1350 20 is_stmt 0 view .LVU1272
 4295 009a 0220     		movs	r0, #2
 4296 009c F9E7     		b	.L406
 4297              	.LVL321:
 4298              	.L398:
1305:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4299              		.loc 2 1305 11 view .LVU1273
 4300 009e 0929     		cmp	r1, #9
 4301 00a0 05D8     		bhi	.L400
 4302 00a2 40F22123 		movw	r3, #545
 4303 00a6 23FA01F1 		lsr	r1, r3, r1
 4304              	.LVL322:
1305:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4305              		.loc 2 1305 11 view .LVU1274
 4306 00aa CB07     		lsls	r3, r1, #31
 4307 00ac E0D4     		bmi	.L401
 4308              	.L400:
1322:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
 4309              		.loc 2 1322 9 is_stmt 1 view .LVU1275
 4310 00ae E36D     		ldr	r3, [r4, #92]
 4311 00b0 43F48013 		orr	r3, r3, #1048576
 4312 00b4 E365     		str	r3, [r4, #92]
1325:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4313              		.loc 2 1325 9 view .LVU1276
 4314              	.LVL323:
1326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4315              		.loc 2 1326 9 view .LVU1277
1326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4316              		.loc 2 1326 13 is_stmt 0 view .LVU1278
 4317 00b6 4FF0A043 		mov	r3, #1342177280
 4318 00ba DB68     		ldr	r3, [r3, #12]
1326:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4319              		.loc 2 1326 12 view .LVU1279
 4320 00bc 9A01     		lsls	r2, r3, #6
 4321 00be E8D5     		bpl	.L406
1328:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 4322              		.loc 2 1328 11 is_stmt 1 view .LVU1280
 4323 00c0 E36D     		ldr	r3, [r4, #92]
 4324 00c2 23F44053 		bic	r3, r3, #12288
 4325 00c6 43F48053 		orr	r3, r3, #4096
 4326 00ca E365     		str	r3, [r4, #92]
 4327 00cc E1E7     		b	.L406
 4328              	.LVL324:
 4329              	.L395:
1266:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
 4330              		.loc 2 1266 11 is_stmt 0 view .LVU1281
 4331 00ce 0029     		cmp	r1, #0
 4332 00d0 BAD0     		beq	.L402
 4333 00d2 BDE7     		b	.L403
 4334              	.L417:
 4335              		.align	2
 4336              	.L416:
 4337 00d4 00030050 		.word	1342178048
 4338 00d8 00010050 		.word	1342177536
 4339              		.cfi_endproc
 4340              	.LFE329:
 4342              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 4343              		.align	1
 4344              		.global	HAL_ADC_Start_IT
 4345              		.syntax unified
 4346              		.thumb
 4347              		.thumb_func
 4348              		.fpu fpv4-sp-d16
 4350              	HAL_ADC_Start_IT:
 4351              	.LVL325:
 4352              	.LFB333:
1745:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4353              		.loc 2 1745 1 is_stmt 1 view -0
 4354              		.cfi_startproc
 4355              		@ args = 0, pretend = 0, frame = 0
 4356              		@ frame_needed = 0, uses_anonymous_args = 0
1746:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 4357              		.loc 2 1746 3 view .LVU1283
1748:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4358              		.loc 2 1748 3 view .LVU1284
1749:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
 4359              		.loc 2 1749 3 view .LVU1285
 4360              	.LBB496:
 4361              	.LBI496:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4362              		.loc 1 6284 26 view .LVU1286
 4363              	.LBB497:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4364              		.loc 1 6286 3 view .LVU1287
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4365              		.loc 1 6286 21 is_stmt 0 view .LVU1288
 4366 0000 4F4B     		ldr	r3, .L450
 4367              	.LBE497:
 4368              	.LBE496:
1745:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4369              		.loc 2 1745 1 view .LVU1289
 4370 0002 70B5     		push	{r4, r5, r6, lr}
 4371              		.cfi_def_cfa_offset 16
 4372              		.cfi_offset 4, -16
 4373              		.cfi_offset 5, -12
 4374              		.cfi_offset 6, -8
 4375              		.cfi_offset 14, -4
1745:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4376              		.loc 2 1745 1 view .LVU1290
 4377 0004 0446     		mov	r4, r0
1756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4378              		.loc 2 1756 7 view .LVU1291
 4379 0006 0068     		ldr	r0, [r0]
 4380              	.LVL326:
 4381              	.LBB500:
 4382              	.LBB498:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4383              		.loc 1 6286 21 view .LVU1292
 4384 0008 9E68     		ldr	r6, [r3, #8]
 4385              	.LVL327:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4386              		.loc 1 6286 21 view .LVU1293
 4387              	.LBE498:
 4388              	.LBE500:
1753:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4389              		.loc 2 1753 3 is_stmt 1 view .LVU1294
1756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4390              		.loc 2 1756 3 view .LVU1295
1756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4391              		.loc 2 1756 7 is_stmt 0 view .LVU1296
 4392 000a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4393              	.LVL328:
1756:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4394              		.loc 2 1756 6 view .LVU1297
 4395 000e 0546     		mov	r5, r0
 4396 0010 0028     		cmp	r0, #0
 4397 0012 66D1     		bne	.L436
1759:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4398              		.loc 2 1759 5 is_stmt 1 view .LVU1298
1759:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4399              		.loc 2 1759 5 view .LVU1299
 4400 0014 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 4401 0018 012B     		cmp	r3, #1
 4402 001a 62D0     		beq	.L436
1759:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4403              		.loc 2 1759 5 discriminator 2 view .LVU1300
 4404 001c 0123     		movs	r3, #1
 4405 001e 84F85830 		strb	r3, [r4, #88]
1762:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4406              		.loc 2 1762 5 discriminator 2 view .LVU1301
1762:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4407              		.loc 2 1762 22 is_stmt 0 discriminator 2 view .LVU1302
 4408 0022 2046     		mov	r0, r4
 4409 0024 FFF7FEFF 		bl	ADC_Enable
 4410              	.LVL329:
1765:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4411              		.loc 2 1765 5 is_stmt 1 discriminator 2 view .LVU1303
1765:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4412              		.loc 2 1765 8 is_stmt 0 discriminator 2 view .LVU1304
 4413 0028 0028     		cmp	r0, #0
 4414 002a 57D1     		bne	.L420
1770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4415              		.loc 2 1770 7 view .LVU1305
 4416 002c E36D     		ldr	r3, [r4, #92]
1778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4417              		.loc 2 1778 12 view .LVU1306
 4418 002e 4549     		ldr	r1, .L450+4
1770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4419              		.loc 2 1770 7 view .LVU1307
 4420 0030 23F47063 		bic	r3, r3, #3840
 4421 0034 23F00103 		bic	r3, r3, #1
 4422 0038 43F48073 		orr	r3, r3, #256
 4423 003c E365     		str	r3, [r4, #92]
1778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4424              		.loc 2 1778 12 view .LVU1308
 4425 003e 2368     		ldr	r3, [r4]
 4426 0040 8B42     		cmp	r3, r1
 4427              	.LBB501:
 4428              	.LBB499:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4429              		.loc 1 6286 10 view .LVU1309
 4430 0042 06F01F02 		and	r2, r6, #31
 4431              	.LVL330:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4432              		.loc 1 6286 10 view .LVU1310
 4433              	.LBE499:
 4434              	.LBE501:
1770:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4435              		.loc 2 1770 7 is_stmt 1 view .LVU1311
1778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4436              		.loc 2 1778 7 view .LVU1312
1778:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4437              		.loc 2 1778 12 is_stmt 0 view .LVU1313
 4438 0046 78D0     		beq	.L421
 4439              	.L433:
1782:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4440              		.loc 2 1782 9 is_stmt 1 view .LVU1314
 4441 0048 E16D     		ldr	r1, [r4, #92]
 4442 004a 21F48011 		bic	r1, r1, #1048576
 4443 004e E165     		str	r1, [r4, #92]
 4444              	.L434:
1788:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4445              		.loc 2 1788 7 view .LVU1315
1788:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4446              		.loc 2 1788 16 is_stmt 0 view .LVU1316
 4447 0050 E16D     		ldr	r1, [r4, #92]
1788:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4448              		.loc 2 1788 10 view .LVU1317
 4449 0052 11F48051 		ands	r1, r1, #4096
1791:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4450              		.loc 2 1791 9 is_stmt 1 view .LVU1318
 4451 0056 1CBF     		itt	ne
 4452 0058 216E     		ldrne	r1, [r4, #96]
 4453 005a 21F00601 		bicne	r1, r1, #6
1796:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4454              		.loc 2 1796 9 view .LVU1319
 4455 005e 2166     		str	r1, [r4, #96]
1801:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4456              		.loc 2 1801 7 view .LVU1320
 4457 0060 1C21     		movs	r1, #28
 4458 0062 1960     		str	r1, [r3]
1806:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4459              		.loc 2 1806 7 view .LVU1321
1806:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4460              		.loc 2 1806 7 view .LVU1322
 4461 0064 0021     		movs	r1, #0
 4462 0066 84F85810 		strb	r1, [r4, #88]
1809:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4463              		.loc 2 1809 7 view .LVU1323
 4464 006a 5968     		ldr	r1, [r3, #4]
 4465 006c 21F01C01 		bic	r1, r1, #28
 4466 0070 5960     		str	r1, [r3, #4]
1812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4467              		.loc 2 1812 7 view .LVU1324
1812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4468              		.loc 2 1812 25 is_stmt 0 view .LVU1325
 4469 0072 A169     		ldr	r1, [r4, #24]
1819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 4470              		.loc 2 1819 11 view .LVU1326
 4471 0074 5D68     		ldr	r5, [r3, #4]
1812:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4472              		.loc 2 1812 7 view .LVU1327
 4473 0076 0829     		cmp	r1, #8
1815:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 4474              		.loc 2 1815 11 is_stmt 1 view .LVU1328
 4475 0078 0CBF     		ite	eq
 4476 007a 45F00805 		orreq	r5, r5, #8
1819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           break;
 4477              		.loc 2 1819 11 view .LVU1329
 4478 007e 45F00405 		orrne	r5, r5, #4
 4479 0082 5D60     		str	r5, [r3, #4]
1820:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4480              		.loc 2 1820 11 view .LVU1330
1827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4481              		.loc 2 1827 7 view .LVU1331
1827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4482              		.loc 2 1827 10 is_stmt 0 view .LVU1332
 4483 0084 E56B     		ldr	r5, [r4, #60]
 4484 0086 1DB9     		cbnz	r5, .L426
1829:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4485              		.loc 2 1829 9 is_stmt 1 view .LVU1333
 4486 0088 5D68     		ldr	r5, [r3, #4]
 4487 008a 45F01005 		orr	r5, r5, #16
 4488 008e 5D60     		str	r5, [r3, #4]
 4489              	.L426:
1841:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4490              		.loc 2 1841 7 view .LVU1334
1841:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4491              		.loc 2 1841 12 is_stmt 0 view .LVU1335
 4492 0090 2C4D     		ldr	r5, .L450+4
 4493 0092 AB42     		cmp	r3, r5
 4494 0094 27D0     		beq	.L427
 4495              	.LVL331:
 4496              	.L432:
1848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4497              		.loc 2 1848 9 is_stmt 1 view .LVU1336
1848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4498              		.loc 2 1848 13 is_stmt 0 view .LVU1337
 4499 0096 DA68     		ldr	r2, [r3, #12]
1848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4500              		.loc 2 1848 12 view .LVU1338
 4501 0098 9601     		lsls	r6, r2, #6
 4502              	.LVL332:
1848:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4503              		.loc 2 1848 12 view .LVU1339
 4504 009a 16D5     		bpl	.L428
1850:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4505              		.loc 2 1850 11 is_stmt 1 view .LVU1340
 4506 009c E26D     		ldr	r2, [r4, #92]
 4507 009e 22F44052 		bic	r2, r2, #12288
 4508 00a2 42F48052 		orr	r2, r2, #4096
 4509 00a6 E265     		str	r2, [r4, #92]
1856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 4510              		.loc 2 1856 11 view .LVU1341
1864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4511              		.loc 2 1864 15 is_stmt 0 view .LVU1342
 4512 00a8 5A68     		ldr	r2, [r3, #4]
1856:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 4513              		.loc 2 1856 11 view .LVU1343
 4514 00aa 0829     		cmp	r1, #8
1859:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4515              		.loc 2 1859 15 is_stmt 1 view .LVU1344
 4516 00ac 0BBF     		itete	eq
 4517 00ae 22F02002 		biceq	r2, r2, #32
1864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4518              		.loc 2 1864 15 is_stmt 0 view .LVU1345
 4519 00b2 22F04002 		bicne	r2, r2, #64
1859:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4520              		.loc 2 1859 15 view .LVU1346
 4521 00b6 5A60     		streq	r2, [r3, #4]
1860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4522              		.loc 2 1860 15 is_stmt 1 view .LVU1347
1864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4523              		.loc 2 1864 15 is_stmt 0 view .LVU1348
 4524 00b8 5A60     		strne	r2, [r3, #4]
1860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4525              		.loc 2 1860 15 view .LVU1349
 4526 00ba 0BBF     		itete	eq
 4527 00bc 5A68     		ldreq	r2, [r3, #4]
1865:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4528              		.loc 2 1865 15 view .LVU1350
 4529 00be 5A68     		ldrne	r2, [r3, #4]
1860:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4530              		.loc 2 1860 15 view .LVU1351
 4531 00c0 42F04002 		orreq	r2, r2, #64
1864:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4532              		.loc 2 1864 15 is_stmt 1 view .LVU1352
1865:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4533              		.loc 2 1865 15 view .LVU1353
 4534 00c4 42F02002 		orrne	r2, r2, #32
 4535 00c8 5A60     		str	r2, [r3, #4]
1866:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 4536              		.loc 2 1866 15 view .LVU1354
 4537              	.L428:
1871:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4538              		.loc 2 1871 9 view .LVU1355
 4539              	.LVL333:
 4540              	.LBB502:
 4541              	.LBI502:
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4542              		.loc 1 6707 22 view .LVU1356
 4543              	.LBB503:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4544              		.loc 1 6712 3 view .LVU1357
 4545 00ca 9A68     		ldr	r2, [r3, #8]
 4546 00cc 22F00042 		bic	r2, r2, #-2147483648
 4547 00d0 22F03F02 		bic	r2, r2, #63
 4548 00d4 42F00402 		orr	r2, r2, #4
 4549 00d8 9A60     		str	r2, [r3, #8]
 4550              	.LVL334:
 4551              	.L437:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4552              		.loc 1 6712 3 is_stmt 0 view .LVU1358
 4553              	.LBE503:
 4554              	.LBE502:
1942:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4555              		.loc 2 1942 1 view .LVU1359
 4556 00da 70BD     		pop	{r4, r5, r6, pc}
 4557              	.LVL335:
 4558              	.L420:
1931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4559              		.loc 2 1931 7 is_stmt 1 view .LVU1360
1931:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4560              		.loc 2 1931 7 view .LVU1361
 4561 00dc 84F85850 		strb	r5, [r4, #88]
 4562 00e0 FBE7     		b	.L437
 4563              	.LVL336:
 4564              	.L436:
1937:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 4565              		.loc 2 1937 20 is_stmt 0 view .LVU1362
 4566 00e2 0220     		movs	r0, #2
 4567 00e4 F9E7     		b	.L437
 4568              	.LVL337:
 4569              	.L427:
1842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4570              		.loc 2 1842 11 view .LVU1363
 4571 00e6 092A     		cmp	r2, #9
 4572 00e8 05D8     		bhi	.L431
 4573 00ea 40F22125 		movw	r5, #545
 4574 00ee 25FA02F2 		lsr	r2, r5, r2
 4575              	.LVL338:
1842:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4576              		.loc 2 1842 11 view .LVU1364
 4577 00f2 D207     		lsls	r2, r2, #31
 4578 00f4 CFD4     		bmi	.L432
 4579              	.L431:
1876:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
 4580              		.loc 2 1876 9 is_stmt 1 view .LVU1365
 4581 00f6 E36D     		ldr	r3, [r4, #92]
 4582 00f8 43F48013 		orr	r3, r3, #1048576
 4583 00fc E365     		str	r3, [r4, #92]
1879:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4584              		.loc 2 1879 9 view .LVU1366
 4585              	.LVL339:
1880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4586              		.loc 2 1880 9 view .LVU1367
1880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4587              		.loc 2 1880 13 is_stmt 0 view .LVU1368
 4588 00fe 4FF0A043 		mov	r3, #1342177280
 4589 0102 DB68     		ldr	r3, [r3, #12]
1880:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4590              		.loc 2 1880 12 view .LVU1369
 4591 0104 9D01     		lsls	r5, r3, #6
 4592 0106 E8D5     		bpl	.L437
1884:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
 4593              		.loc 2 1884 11 is_stmt 1 view .LVU1370
 4594 0108 E36D     		ldr	r3, [r4, #92]
 4595 010a 23F44053 		bic	r3, r3, #12288
 4596 010e 43F48053 		orr	r3, r3, #4096
 4597 0112 E365     		str	r3, [r4, #92]
1886:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 4598              		.loc 2 1886 11 view .LVU1371
 4599 0114 0B4B     		ldr	r3, .L450+4
1894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4600              		.loc 2 1894 15 is_stmt 0 view .LVU1372
 4601 0116 5A68     		ldr	r2, [r3, #4]
1889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4602              		.loc 2 1889 15 is_stmt 1 view .LVU1373
1886:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           {
 4603              		.loc 2 1886 11 is_stmt 0 view .LVU1374
 4604 0118 0829     		cmp	r1, #8
1889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4605              		.loc 2 1889 15 view .LVU1375
 4606 011a 0BBF     		itete	eq
 4607 011c 22F02002 		biceq	r2, r2, #32
1894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4608              		.loc 2 1894 15 view .LVU1376
 4609 0120 22F04002 		bicne	r2, r2, #64
1889:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4610              		.loc 2 1889 15 view .LVU1377
 4611 0124 5A60     		streq	r2, [r3, #4]
1890:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4612              		.loc 2 1890 15 is_stmt 1 view .LVU1378
1894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4613              		.loc 2 1894 15 is_stmt 0 view .LVU1379
 4614 0126 5A60     		strne	r2, [r3, #4]
1890:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4615              		.loc 2 1890 15 view .LVU1380
 4616 0128 0BBF     		itete	eq
 4617 012a 5A68     		ldreq	r2, [r3, #4]
1895:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4618              		.loc 2 1895 15 view .LVU1381
 4619 012c 5A68     		ldrne	r2, [r3, #4]
1890:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4620              		.loc 2 1890 15 view .LVU1382
 4621 012e 42F04002 		orreq	r2, r2, #64
1894:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4622              		.loc 2 1894 15 is_stmt 1 view .LVU1383
1895:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****               break;
 4623              		.loc 2 1895 15 view .LVU1384
 4624 0132 42F02002 		orrne	r2, r2, #32
 4625 0136 5A60     		str	r2, [r3, #4]
1896:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****           }
 4626              		.loc 2 1896 15 view .LVU1385
 4627 0138 CFE7     		b	.L437
 4628              	.LVL340:
 4629              	.L421:
1779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****          )
 4630              		.loc 2 1779 11 is_stmt 0 view .LVU1386
 4631 013a 002A     		cmp	r2, #0
 4632 013c 84D0     		beq	.L433
 4633 013e 87E7     		b	.L434
 4634              	.L451:
 4635              		.align	2
 4636              	.L450:
 4637 0140 00030050 		.word	1342178048
 4638 0144 00010050 		.word	1342177536
 4639              		.cfi_endproc
 4640              	.LFE333:
 4642              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4643              		.align	1
 4644              		.global	HAL_ADC_Start_DMA
 4645              		.syntax unified
 4646              		.thumb
 4647              		.thumb_func
 4648              		.fpu fpv4-sp-d16
 4650              	HAL_ADC_Start_DMA:
 4651              	.LVL341:
 4652              	.LFB335:
2005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4653              		.loc 2 2005 1 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
2006:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
 4657              		.loc 2 2006 3 view .LVU1388
2008:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif
 4658              		.loc 2 2008 3 view .LVU1389
 4659              	.LBB508:
 4660              	.LBI508:
6284:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4661              		.loc 1 6284 26 view .LVU1390
 4662              	.LBB509:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4663              		.loc 1 6286 3 view .LVU1391
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4664              		.loc 1 6286 21 is_stmt 0 view .LVU1392
 4665 0000 374B     		ldr	r3, .L467
 4666              	.LBE509:
 4667              	.LBE508:
2005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4668              		.loc 2 2005 1 view .LVU1393
 4669 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4670              		.cfi_def_cfa_offset 24
 4671              		.cfi_offset 4, -24
 4672              		.cfi_offset 5, -20
 4673              		.cfi_offset 6, -16
 4674              		.cfi_offset 7, -12
 4675              		.cfi_offset 8, -8
 4676              		.cfi_offset 14, -4
2005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4677              		.loc 2 2005 1 view .LVU1394
 4678 0006 0446     		mov	r4, r0
2015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4679              		.loc 2 2015 7 view .LVU1395
 4680 0008 0068     		ldr	r0, [r0]
 4681              	.LVL342:
 4682              	.LBB512:
 4683              	.LBB510:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4684              		.loc 1 6286 21 view .LVU1396
 4685 000a 9B68     		ldr	r3, [r3, #8]
 4686              	.LVL343:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4687              		.loc 1 6286 21 view .LVU1397
 4688              	.LBE510:
 4689              	.LBE512:
2012:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4690              		.loc 2 2012 3 is_stmt 1 view .LVU1398
2015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4691              		.loc 2 2015 3 view .LVU1399
2005:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4692              		.loc 2 2005 1 is_stmt 0 view .LVU1400
 4693 000c 0E46     		mov	r6, r1
 4694 000e 1746     		mov	r7, r2
2015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4695              		.loc 2 2015 7 view .LVU1401
 4696 0010 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4697              	.LVL344:
2015:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 4698              		.loc 2 2015 6 view .LVU1402
 4699 0014 0028     		cmp	r0, #0
 4700 0016 5DD1     		bne	.L462
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4701              		.loc 2 2018 5 is_stmt 1 view .LVU1403
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4702              		.loc 2 2018 5 view .LVU1404
 4703 0018 94F85820 		ldrb	r2, [r4, #88]	@ zero_extendqisi2
 4704              	.LVL345:
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4705              		.loc 2 2018 5 is_stmt 0 view .LVU1405
 4706 001c 012A     		cmp	r2, #1
 4707 001e 59D0     		beq	.L462
 4708              	.LBB513:
 4709              	.LBB511:
6286:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4710              		.loc 1 6286 10 discriminator 2 view .LVU1406
 4711 0020 03F01F08 		and	r8, r3, #31
 4712              	.LBE511:
 4713              	.LBE513:
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4714              		.loc 2 2018 5 is_stmt 1 discriminator 2 view .LVU1407
2023:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4715              		.loc 2 2023 8 is_stmt 0 discriminator 2 view .LVU1408
 4716 0024 B8F1090F 		cmp	r8, #9
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4717              		.loc 2 2018 5 discriminator 2 view .LVU1409
 4718 0028 4FF00103 		mov	r3, #1
 4719              	.LVL346:
2018:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4720              		.loc 2 2018 5 discriminator 2 view .LVU1410
 4721 002c 84F85830 		strb	r3, [r4, #88]
2023:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4722              		.loc 2 2023 5 is_stmt 1 discriminator 2 view .LVU1411
2023:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4723              		.loc 2 2023 8 is_stmt 0 discriminator 2 view .LVU1412
 4724 0030 4BD8     		bhi	.L454
 4725 0032 40F22123 		movw	r3, #545
 4726 0036 23FA08F3 		lsr	r3, r3, r8
 4727 003a DB43     		mvns	r3, r3
 4728 003c 13F00105 		ands	r5, r3, #1
 4729 0040 43D1     		bne	.L454
2030:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4730              		.loc 2 2030 7 is_stmt 1 view .LVU1413
2030:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4731              		.loc 2 2030 24 is_stmt 0 view .LVU1414
 4732 0042 2046     		mov	r0, r4
 4733 0044 FFF7FEFF 		bl	ADC_Enable
 4734              	.LVL347:
2033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4735              		.loc 2 2033 7 is_stmt 1 view .LVU1415
2033:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4736              		.loc 2 2033 10 is_stmt 0 view .LVU1416
 4737 0048 0028     		cmp	r0, #0
 4738 004a 3BD1     		bne	.L455
2038:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
 4739              		.loc 2 2038 9 is_stmt 1 view .LVU1417
 4740 004c E36D     		ldr	r3, [r4, #92]
2046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4741              		.loc 2 2046 14 is_stmt 0 view .LVU1418
 4742 004e 2168     		ldr	r1, [r4]
2038:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
 4743              		.loc 2 2038 9 view .LVU1419
 4744 0050 23F47063 		bic	r3, r3, #3840
 4745 0054 23F00103 		bic	r3, r3, #1
 4746 0058 43F48073 		orr	r3, r3, #256
 4747 005c E365     		str	r3, [r4, #92]
2046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4748              		.loc 2 2046 9 is_stmt 1 view .LVU1420
2046:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4749              		.loc 2 2046 14 is_stmt 0 view .LVU1421
 4750 005e 214B     		ldr	r3, .L467+4
 4751 0060 9942     		cmp	r1, r3
 4752 0062 39D0     		beq	.L456
 4753              	.L459:
2050:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 4754              		.loc 2 2050 11 is_stmt 1 view .LVU1422
 4755 0064 E36D     		ldr	r3, [r4, #92]
 4756 0066 23F48013 		bic	r3, r3, #1048576
 4757 006a E365     		str	r3, [r4, #92]
 4758              	.L460:
2055:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4759              		.loc 2 2055 9 view .LVU1423
2055:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4760              		.loc 2 2055 18 is_stmt 0 view .LVU1424
 4761 006c E36D     		ldr	r3, [r4, #92]
2067:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4762              		.loc 2 2067 13 view .LVU1425
 4763 006e 606D     		ldr	r0, [r4, #84]
 4764              	.LVL348:
2055:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         {
 4765              		.loc 2 2055 12 view .LVU1426
 4766 0070 13F48053 		ands	r3, r3, #4096
2058:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 4767              		.loc 2 2058 11 is_stmt 1 view .LVU1427
 4768 0074 1CBF     		itt	ne
 4769 0076 236E     		ldrne	r3, [r4, #96]
 4770 0078 23F00603 		bicne	r3, r3, #6
2063:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****         }
 4771              		.loc 2 2063 11 view .LVU1428
 4772 007c 2366     		str	r3, [r4, #96]
2067:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4773              		.loc 2 2067 9 view .LVU1429
2067:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4774              		.loc 2 2067 44 is_stmt 0 view .LVU1430
 4775 007e 1A4B     		ldr	r3, .L467+8
 4776 0080 C362     		str	r3, [r0, #44]
2070:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4777              		.loc 2 2070 9 is_stmt 1 view .LVU1431
2070:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4778              		.loc 2 2070 48 is_stmt 0 view .LVU1432
 4779 0082 1A4B     		ldr	r3, .L467+12
 4780 0084 0363     		str	r3, [r0, #48]
2073:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4781              		.loc 2 2073 9 is_stmt 1 view .LVU1433
2073:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4782              		.loc 2 2073 45 is_stmt 0 view .LVU1434
 4783 0086 1A4B     		ldr	r3, .L467+16
 4784 0088 4363     		str	r3, [r0, #52]
2082:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4785              		.loc 2 2082 9 is_stmt 1 view .LVU1435
 4786 008a 1C23     		movs	r3, #28
 4787 008c 0B60     		str	r3, [r1]
2087:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4788              		.loc 2 2087 9 view .LVU1436
2087:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4789              		.loc 2 2087 9 view .LVU1437
 4790 008e 0023     		movs	r3, #0
 4791 0090 84F85830 		strb	r3, [r4, #88]
2092:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4792              		.loc 2 2092 9 view .LVU1438
 4793 0094 4B68     		ldr	r3, [r1, #4]
 4794 0096 43F01003 		orr	r3, r3, #16
 4795 009a 4B60     		str	r3, [r1, #4]
2095:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4796              		.loc 2 2095 9 view .LVU1439
 4797 009c CB68     		ldr	r3, [r1, #12]
 4798 009e 43F00103 		orr	r3, r3, #1
 4799 00a2 CB60     		str	r3, [r1, #12]
2098:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4800              		.loc 2 2098 9 view .LVU1440
2098:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4801              		.loc 2 2098 26 is_stmt 0 view .LVU1441
 4802 00a4 3246     		mov	r2, r6
 4803 00a6 3B46     		mov	r3, r7
 4804 00a8 4031     		adds	r1, r1, #64
 4805 00aa FFF7FEFF 		bl	HAL_DMA_Start_IT
 4806              	.LVL349:
2105:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4807              		.loc 2 2105 9 is_stmt 1 view .LVU1442
 4808 00ae 2268     		ldr	r2, [r4]
 4809              	.LVL350:
 4810              	.LBB514:
 4811              	.LBI514:
6707:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4812              		.loc 1 6707 22 view .LVU1443
 4813              	.LBB515:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4814              		.loc 1 6712 3 view .LVU1444
 4815 00b0 9368     		ldr	r3, [r2, #8]
 4816 00b2 23F00043 		bic	r3, r3, #-2147483648
 4817 00b6 23F03F03 		bic	r3, r3, #63
 4818 00ba 43F00403 		orr	r3, r3, #4
 4819 00be 9360     		str	r3, [r2, #8]
 4820              	.LVL351:
 4821              	.L466:
6712:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4822              		.loc 1 6712 3 is_stmt 0 view .LVU1445
 4823              	.LBE515:
 4824              	.LBE514:
2130:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4825              		.loc 2 2130 1 view .LVU1446
 4826 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4827              	.LVL352:
 4828              	.L455:
2110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4829              		.loc 2 2110 9 is_stmt 1 view .LVU1447
2110:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4830              		.loc 2 2110 9 view .LVU1448
 4831 00c4 84F85850 		strb	r5, [r4, #88]
 4832 00c8 FAE7     		b	.L466
 4833              	.LVL353:
 4834              	.L454:
2117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
 4835              		.loc 2 2117 7 view .LVU1449
2119:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4836              		.loc 2 2119 7 view .LVU1450
2119:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4837              		.loc 2 2119 7 view .LVU1451
 4838 00ca 0023     		movs	r3, #0
 4839 00cc 84F85830 		strb	r3, [r4, #88]
2117:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
 4840              		.loc 2 2117 22 is_stmt 0 view .LVU1452
 4841 00d0 0120     		movs	r0, #1
 4842 00d2 F5E7     		b	.L466
 4843              	.LVL354:
 4844              	.L462:
2125:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 4845              		.loc 2 2125 20 view .LVU1453
 4846 00d4 0220     		movs	r0, #2
 4847 00d6 F3E7     		b	.L466
 4848              	.LVL355:
 4849              	.L456:
2047:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****            )
 4850              		.loc 2 2047 13 view .LVU1454
 4851 00d8 B8F1000F 		cmp	r8, #0
 4852 00dc C2D0     		beq	.L459
 4853 00de C5E7     		b	.L460
 4854              	.L468:
 4855              		.align	2
 4856              	.L467:
 4857 00e0 00030050 		.word	1342178048
 4858 00e4 00010050 		.word	1342177536
 4859 00e8 00000000 		.word	ADC_DMAConvCplt
 4860 00ec 00000000 		.word	ADC_DMAHalfConvCplt
 4861 00f0 00000000 		.word	ADC_DMAError
 4862              		.cfi_endproc
 4863              	.LFE335:
 4865              		.section	.text.ADC_Disable,"ax",%progbits
 4866              		.align	1
 4867              		.global	ADC_Disable
 4868              		.syntax unified
 4869              		.thumb
 4870              		.thumb_func
 4871              		.fpu fpv4-sp-d16
 4873              	ADC_Disable:
 4874              	.LVL356:
 4875              	.LFB351:
3484:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 4876              		.loc 2 3484 1 is_stmt 1 view -0
 4877              		.cfi_startproc
 4878              		@ args = 0, pretend = 0, frame = 0
 4879              		@ frame_needed = 0, uses_anonymous_args = 0
3485:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 4880              		.loc 2 3485 3 view .LVU1456
3486:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4881              		.loc 2 3486 3 view .LVU1457
3484:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 4882              		.loc 2 3484 1 is_stmt 0 view .LVU1458
 4883 0000 38B5     		push	{r3, r4, r5, lr}
 4884              		.cfi_def_cfa_offset 16
 4885              		.cfi_offset 3, -16
 4886              		.cfi_offset 4, -12
 4887              		.cfi_offset 5, -8
 4888              		.cfi_offset 14, -4
3484:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
 4889              		.loc 2 3484 1 view .LVU1459
 4890 0002 0446     		mov	r4, r0
3486:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4891              		.loc 2 3486 48 view .LVU1460
 4892 0004 0068     		ldr	r0, [r0]
 4893              	.LVL357:
 4894              	.LBB522:
 4895              	.LBI522:
6632:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4896              		.loc 1 6632 26 is_stmt 1 view .LVU1461
 4897              	.LBB523:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4898              		.loc 1 6634 3 view .LVU1462
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4899              		.loc 1 6634 12 is_stmt 0 view .LVU1463
 4900 0006 8368     		ldr	r3, [r0, #8]
 4901              	.LVL358:
6634:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** }
 4902              		.loc 1 6634 12 view .LVU1464
 4903              	.LBE523:
 4904              	.LBE522:
3491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 4905              		.loc 2 3491 3 is_stmt 1 view .LVU1465
3491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 4906              		.loc 2 3491 8 is_stmt 0 view .LVU1466
 4907 0008 FFF7FEFF 		bl	LL_ADC_IsEnabled
 4908              	.LVL359:
3491:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 4909              		.loc 2 3491 6 view .LVU1467
 4910 000c 08B9     		cbnz	r0, .L470
 4911              	.LVL360:
 4912              	.L472:
3533:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 4913              		.loc 2 3533 10 view .LVU1468
 4914 000e 0020     		movs	r0, #0
 4915              	.L471:
3534:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4916              		.loc 2 3534 1 view .LVU1469
 4917 0010 38BD     		pop	{r3, r4, r5, pc}
 4918              	.LVL361:
 4919              	.L470:
3492:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****      )
 4920              		.loc 2 3492 7 view .LVU1470
 4921 0012 9A07     		lsls	r2, r3, #30
 4922 0014 FBD4     		bmi	.L472
 4923              	.LVL362:
 4924              	.LBB524:
 4925              	.LBI524:
3483:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** {
 4926              		.loc 2 3483 19 is_stmt 1 view .LVU1471
 4927              	.LBB525:
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4928              		.loc 2 3496 5 view .LVU1472
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4929              		.loc 2 3496 14 is_stmt 0 view .LVU1473
 4930 0016 2268     		ldr	r2, [r4]
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4931              		.loc 2 3496 24 view .LVU1474
 4932 0018 9368     		ldr	r3, [r2, #8]
 4933              	.LVL363:
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4934              		.loc 2 3496 29 view .LVU1475
 4935 001a 03F00D03 		and	r3, r3, #13
3496:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4936              		.loc 2 3496 8 view .LVU1476
 4937 001e 012B     		cmp	r3, #1
 4938 0020 15D1     		bne	.L477
3499:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 4939              		.loc 2 3499 7 is_stmt 1 view .LVU1477
 4940              	.LVL364:
 4941              	.LBB526:
 4942              	.LBI526:
6602:../../..\CubeG4\include/stm32g4xx_ll_adc.h **** {
 4943              		.loc 1 6602 22 view .LVU1478
 4944              	.LBB527:
6607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4945              		.loc 1 6607 3 view .LVU1479
 4946 0022 9368     		ldr	r3, [r2, #8]
 4947 0024 23F00043 		bic	r3, r3, #-2147483648
 4948 0028 23F03F03 		bic	r3, r3, #63
 4949 002c 43F00203 		orr	r3, r3, #2
 4950 0030 9360     		str	r3, [r2, #8]
 4951              	.LVL365:
6607:../../..\CubeG4\include/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4952              		.loc 1 6607 3 is_stmt 0 view .LVU1480
 4953              	.LBE527:
 4954              	.LBE526:
3500:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 4955              		.loc 2 3500 7 is_stmt 1 view .LVU1481
 4956 0032 0323     		movs	r3, #3
 4957 0034 1360     		str	r3, [r2]
3515:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4958              		.loc 2 3515 5 view .LVU1482
3515:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4959              		.loc 2 3515 17 is_stmt 0 view .LVU1483
 4960 0036 FFF7FEFF 		bl	HAL_GetTick
 4961              	.LVL366:
 4962 003a 0546     		mov	r5, r0
 4963              	.LVL367:
3517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4964              		.loc 2 3517 5 is_stmt 1 view .LVU1484
 4965              	.L474:
3517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4966              		.loc 2 3517 17 is_stmt 0 view .LVU1485
 4967 003c 2368     		ldr	r3, [r4]
3517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4968              		.loc 2 3517 27 view .LVU1486
 4969 003e 9B68     		ldr	r3, [r3, #8]
3517:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 4970              		.loc 2 3517 11 view .LVU1487
 4971 0040 DB07     		lsls	r3, r3, #31
 4972 0042 E4D5     		bpl	.L472
3519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4973              		.loc 2 3519 7 is_stmt 1 view .LVU1488
3519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4974              		.loc 2 3519 12 is_stmt 0 view .LVU1489
 4975 0044 FFF7FEFF 		bl	HAL_GetTick
 4976              	.LVL368:
3519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4977              		.loc 2 3519 26 view .LVU1490
 4978 0048 401B     		subs	r0, r0, r5
3519:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 4979              		.loc 2 3519 10 view .LVU1491
 4980 004a 0228     		cmp	r0, #2
 4981 004c F6D9     		bls	.L474
 4982              	.LVL369:
 4983              	.L477:
3522:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4984              		.loc 2 3522 9 is_stmt 1 view .LVU1492
 4985 004e E36D     		ldr	r3, [r4, #92]
 4986 0050 43F01003 		orr	r3, r3, #16
 4987 0054 E365     		str	r3, [r4, #92]
3525:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 4988              		.loc 2 3525 9 view .LVU1493
 4989 0056 236E     		ldr	r3, [r4, #96]
 4990 0058 43F00103 		orr	r3, r3, #1
 4991 005c 2366     		str	r3, [r4, #96]
3527:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4992              		.loc 2 3527 9 view .LVU1494
3527:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 4993              		.loc 2 3527 16 is_stmt 0 view .LVU1495
 4994 005e 0120     		movs	r0, #1
 4995 0060 D6E7     		b	.L471
 4996              	.LBE525:
 4997              	.LBE524:
 4998              		.cfi_endproc
 4999              	.LFE351:
 5001              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 5002              		.align	1
 5003              		.global	HAL_ADC_DeInit
 5004              		.syntax unified
 5005              		.thumb
 5006              		.thumb_func
 5007              		.fpu fpv4-sp-d16
 5009              	HAL_ADC_DeInit:
 5010              	.LVL370:
 5011              	.LFB326:
 724:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5012              		.loc 2 724 1 is_stmt 1 view -0
 5013              		.cfi_startproc
 5014              		@ args = 0, pretend = 0, frame = 0
 5015              		@ frame_needed = 0, uses_anonymous_args = 0
 725:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5016              		.loc 2 725 3 view .LVU1497
 728:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5017              		.loc 2 728 3 view .LVU1498
 724:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5018              		.loc 2 724 1 is_stmt 0 view .LVU1499
 5019 0000 38B5     		push	{r3, r4, r5, lr}
 5020              		.cfi_def_cfa_offset 16
 5021              		.cfi_offset 3, -16
 5022              		.cfi_offset 4, -12
 5023              		.cfi_offset 5, -8
 5024              		.cfi_offset 14, -4
 728:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5025              		.loc 2 728 6 view .LVU1500
 5026 0002 0446     		mov	r4, r0
 5027 0004 0028     		cmp	r0, #0
 5028 0006 00F09F80 		beq	.L482
 734:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5029              		.loc 2 734 3 is_stmt 1 view .LVU1501
 737:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5030              		.loc 2 737 3 view .LVU1502
 5031 000a C36D     		ldr	r3, [r0, #92]
 5032 000c 43F00203 		orr	r3, r3, #2
 5033 0010 C365     		str	r3, [r0, #92]
 740:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5034              		.loc 2 740 3 view .LVU1503
 740:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5035              		.loc 2 740 20 is_stmt 0 view .LVU1504
 5036 0012 0321     		movs	r1, #3
 5037 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5038              	.LVL371:
 748:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5039              		.loc 2 748 3 is_stmt 1 view .LVU1505
 5040 0018 2268     		ldr	r2, [r4]
 5041 001a D368     		ldr	r3, [r2, #12]
 5042 001c 43F40013 		orr	r3, r3, #2097152
 5043 0020 D360     		str	r3, [r2, #12]
 751:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5044              		.loc 2 751 3 view .LVU1506
 751:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5045              		.loc 2 751 6 is_stmt 0 view .LVU1507
 5046 0022 0546     		mov	r5, r0
 5047 0024 30B9     		cbnz	r0, .L480
 754:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5048              		.loc 2 754 5 is_stmt 1 view .LVU1508
 754:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5049              		.loc 2 754 22 is_stmt 0 view .LVU1509
 5050 0026 2046     		mov	r0, r4
 5051              	.LVL372:
 754:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5052              		.loc 2 754 22 view .LVU1510
 5053 0028 FFF7FEFF 		bl	ADC_Disable
 5054              	.LVL373:
 757:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5055              		.loc 2 757 5 is_stmt 1 view .LVU1511
 757:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5056              		.loc 2 757 8 is_stmt 0 view .LVU1512
 5057 002c 0546     		mov	r5, r0
 5058 002e 08B9     		cbnz	r0, .L480
 760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5059              		.loc 2 760 7 is_stmt 1 view .LVU1513
 760:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5060              		.loc 2 760 19 is_stmt 0 view .LVU1514
 5061 0030 0123     		movs	r3, #1
 5062 0032 E365     		str	r3, [r4, #92]
 5063              	.L480:
 5064              	.LVL374:
 772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 5065              		.loc 2 772 3 is_stmt 1 view .LVU1515
 5066 0034 2368     		ldr	r3, [r4]
 5067 0036 4548     		ldr	r0, .L483
 5068 0038 5968     		ldr	r1, [r3, #4]
 779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 5069              		.loc 2 779 3 is_stmt 0 view .LVU1516
 5070 003a 40F2FF72 		movw	r2, #2047
 772:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 5071              		.loc 2 772 3 view .LVU1517
 5072 003e 0140     		ands	r1, r1, r0
 5073 0040 5960     		str	r1, [r3, #4]
 779:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 5074              		.loc 2 779 3 is_stmt 1 view .LVU1518
 5075 0042 1A60     		str	r2, [r3]
 790:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 5076              		.loc 2 790 3 view .LVU1519
 5077 0044 9968     		ldr	r1, [r3, #8]
 5078 0046 21F0A041 		bic	r1, r1, #1342177280
 5079 004a 9960     		str	r1, [r3, #8]
 791:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5080              		.loc 2 791 3 view .LVU1520
 5081 004c 9968     		ldr	r1, [r3, #8]
 5082 004e 41F00051 		orr	r1, r1, #536870912
 5083 0052 9960     		str	r1, [r3, #8]
 794:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 5084              		.loc 2 794 3 view .LVU1521
 5085 0054 D968     		ldr	r1, [r3, #12]
 5086 0056 21F0FF41 		bic	r1, r1, #2139095040
 5087 005a 21F4FF01 		bic	r1, r1, #8355840
 5088 005e 21F4FF41 		bic	r1, r1, #32640
 5089 0062 21F07B01 		bic	r1, r1, #123
 5090 0066 D960     		str	r1, [r3, #12]
 795:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5091              		.loc 2 795 3 view .LVU1522
 5092 0068 D968     		ldr	r1, [r3, #12]
 5093 006a 41F00041 		orr	r1, r1, #-2147483648
 5094 006e D960     		str	r1, [r3, #12]
 798:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 5095              		.loc 2 798 3 view .LVU1523
 5096 0070 1A69     		ldr	r2, [r3, #16]
 5097 0072 0240     		ands	r2, r2, r0
 5098 0074 1A61     		str	r2, [r3, #16]
 802:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5099              		.loc 2 802 3 view .LVU1524
 5100 0076 5A69     		ldr	r2, [r3, #20]
 823:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 5101              		.loc 2 823 3 is_stmt 0 view .LVU1525
 5102 0078 3548     		ldr	r0, .L483+4
 802:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5103              		.loc 2 802 3 view .LVU1526
 5104 007a 02F08042 		and	r2, r2, #1073741824
 5105 007e 5A61     		str	r2, [r3, #20]
 805:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 5106              		.loc 2 805 3 is_stmt 1 view .LVU1527
 5107 0080 9A69     		ldr	r2, [r3, #24]
 5108 0082 02F07842 		and	r2, r2, #-134217728
 5109 0086 9A61     		str	r2, [r3, #24]
 810:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5110              		.loc 2 810 3 view .LVU1528
 5111 0088 1A6A     		ldr	r2, [r3, #32]
 5112 008a 02F0F022 		and	r2, r2, #-268374016
 5113 008e 1A62     		str	r2, [r3, #32]
 813:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5114              		.loc 2 813 3 view .LVU1529
 5115 0090 5A6A     		ldr	r2, [r3, #36]
 5116 0092 02F0FF22 		and	r2, r2, #-16711936
 5117 0096 5A62     		str	r2, [r3, #36]
 816:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5118              		.loc 2 816 3 view .LVU1530
 5119 0098 9A6A     		ldr	r2, [r3, #40]
 5120 009a 02F0FF22 		and	r2, r2, #-16711936
 5121 009e 9A62     		str	r2, [r3, #40]
 819:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 5122              		.loc 2 819 3 view .LVU1531
 5123 00a0 196B     		ldr	r1, [r3, #48]
 5124 00a2 2C4A     		ldr	r2, .L483+8
 5125 00a4 0A40     		ands	r2, r2, r1
 5126 00a6 1A63     		str	r2, [r3, #48]
 823:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 5127              		.loc 2 823 3 view .LVU1532
 5128 00a8 596B     		ldr	r1, [r3, #52]
 5129 00aa 0140     		ands	r1, r1, r0
 5130 00ac 5963     		str	r1, [r3, #52]
 827:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 5131              		.loc 2 827 3 view .LVU1533
 5132 00ae 9A6B     		ldr	r2, [r3, #56]
 5133 00b0 0240     		ands	r2, r2, r0
 5134 00b2 9A63     		str	r2, [r3, #56]
 831:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5135              		.loc 2 831 3 view .LVU1534
 5136 00b4 DA6B     		ldr	r2, [r3, #60]
 5137 00b6 22F4FB62 		bic	r2, r2, #2008
 5138 00ba 22F00702 		bic	r2, r2, #7
 5139 00be DA63     		str	r2, [r3, #60]
 839:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR2 */
 5140              		.loc 2 839 3 view .LVU1535
 5141 00c0 196E     		ldr	r1, [r3, #96]
 5142 00c2 254A     		ldr	r2, .L483+12
 5143 00c4 1140     		ands	r1, r1, r2
 5144 00c6 1966     		str	r1, [r3, #96]
 841:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR3 */
 5145              		.loc 2 841 3 view .LVU1536
 5146 00c8 596E     		ldr	r1, [r3, #100]
 5147 00ca 1140     		ands	r1, r1, r2
 5148 00cc 5966     		str	r1, [r3, #100]
 843:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   /* Reset register OFR4 */
 5149              		.loc 2 843 3 view .LVU1537
 5150 00ce 996E     		ldr	r1, [r3, #104]
 5151 00d0 1140     		ands	r1, r1, r2
 5152 00d2 9966     		str	r1, [r3, #104]
 845:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5153              		.loc 2 845 3 view .LVU1538
 5154 00d4 D96E     		ldr	r1, [r3, #108]
 5155 00d6 0A40     		ands	r2, r2, r1
 5156 00d8 DA66     		str	r2, [r3, #108]
 851:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5157              		.loc 2 851 3 view .LVU1539
 5158 00da D3F8A020 		ldr	r2, [r3, #160]
 5159 00de 1F49     		ldr	r1, .L483+16
 5160 00e0 0A40     		ands	r2, r2, r1
 5161 00e2 C3F8A020 		str	r2, [r3, #160]
 854:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5162              		.loc 2 854 3 view .LVU1540
 5163 00e6 D3F8A420 		ldr	r2, [r3, #164]
 5164 00ea 0A40     		ands	r2, r2, r1
 5165 00ec C3F8A420 		str	r2, [r3, #164]
 857:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5166              		.loc 2 857 3 view .LVU1541
 5167 00f0 D3F8B020 		ldr	r2, [r3, #176]
 5168 00f4 0A40     		ands	r2, r2, r1
 5169 00f6 C3F8B020 		str	r2, [r3, #176]
 860:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5170              		.loc 2 860 3 view .LVU1542
 5171 00fa D3F8B420 		ldr	r2, [r3, #180]
 5172 00fe 22F07F12 		bic	r2, r2, #8323199
 5173 0102 C3F8B420 		str	r2, [r3, #180]
 867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5174              		.loc 2 867 3 view .LVU1543
 867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5175              		.loc 2 867 7 is_stmt 0 view .LVU1544
 5176 0106 4FF0A040 		mov	r0, #1342177280
 5177 010a FFF7FEFF 		bl	LL_ADC_IsEnabled
 5178              	.LVL375:
 5179 010e 0346     		mov	r3, r0
 5180 0110 1348     		ldr	r0, .L483+20
 5181 0112 FFF7FEFF 		bl	LL_ADC_IsEnabled
 5182              	.LVL376:
 867:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5183              		.loc 2 867 6 view .LVU1545
 5184 0116 0343     		orrs	r3, r3, r0
 5185 0118 0AD1     		bne	.L481
 876:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 5186              		.loc 2 876 5 is_stmt 1 view .LVU1546
 5187 011a 124A     		ldr	r2, .L483+24
 5188 011c 9368     		ldr	r3, [r2, #8]
 5189 011e 23F0FF73 		bic	r3, r3, #33423360
 5190 0122 23F4F733 		bic	r3, r3, #126464
 5191 0126 23F48F73 		bic	r3, r3, #286
 5192 012a 23F00103 		bic	r3, r3, #1
 5193 012e 9360     		str	r3, [r2, #8]
 5194              	.L481:
 900:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 5195              		.loc 2 900 3 view .LVU1547
 5196 0130 2046     		mov	r0, r4
 5197 0132 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 5198              	.LVL377:
 904:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5199              		.loc 2 904 3 view .LVU1548
 5200 0136 0023     		movs	r3, #0
 908:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5201              		.loc 2 908 38 is_stmt 0 view .LVU1549
 5202 0138 C4E91933 		strd	r3, r3, [r4, #100]
 904:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5203              		.loc 2 904 3 view .LVU1550
 5204 013c 2366     		str	r3, [r4, #96]
 907:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 5205              		.loc 2 907 3 is_stmt 1 view .LVU1551
 911:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5206              		.loc 2 911 3 view .LVU1552
 914:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5207              		.loc 2 914 3 is_stmt 0 view .LVU1553
 5208 013e 84F85830 		strb	r3, [r4, #88]
 911:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5209              		.loc 2 911 15 view .LVU1554
 5210 0142 E365     		str	r3, [r4, #92]
 914:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5211              		.loc 2 914 3 is_stmt 1 view .LVU1555
 914:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5212              		.loc 2 914 3 view .LVU1556
 917:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 5213              		.loc 2 917 3 view .LVU1557
 5214              	.LVL378:
 5215              	.L479:
 918:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5216              		.loc 2 918 1 is_stmt 0 view .LVU1558
 5217 0144 2846     		mov	r0, r5
 5218 0146 38BD     		pop	{r3, r4, r5, pc}
 5219              	.LVL379:
 5220              	.L482:
 730:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   }
 5221              		.loc 2 730 12 view .LVU1559
 5222 0148 0125     		movs	r5, #1
 5223 014a FBE7     		b	.L479
 5224              	.L484:
 5225              		.align	2
 5226              	.L483:
 5227 014c 00F8FFFF 		.word	-2048
 5228 0150 200882E0 		.word	-528349152
 5229 0154 300882E0 		.word	-528349136
 5230 0158 00F0FF03 		.word	67104768
 5231 015c 0000F8FF 		.word	-524288
 5232 0160 00010050 		.word	1342177536
 5233 0164 00030050 		.word	1342178048
 5234              		.cfi_endproc
 5235              	.LFE326:
 5237              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 5238              		.align	1
 5239              		.global	HAL_ADC_Stop
 5240              		.syntax unified
 5241              		.thumb
 5242              		.thumb_func
 5243              		.fpu fpv4-sp-d16
 5245              	HAL_ADC_Stop:
 5246              	.LVL380:
 5247              	.LFB330:
1367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5248              		.loc 2 1367 1 is_stmt 1 view -0
 5249              		.cfi_startproc
 5250              		@ args = 0, pretend = 0, frame = 0
 5251              		@ frame_needed = 0, uses_anonymous_args = 0
1368:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5252              		.loc 2 1368 3 view .LVU1561
1371:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5253              		.loc 2 1371 3 view .LVU1562
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5254              		.loc 2 1374 3 view .LVU1563
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5255              		.loc 2 1374 3 view .LVU1564
 5256 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 5257 0004 012B     		cmp	r3, #1
1367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5258              		.loc 2 1367 1 is_stmt 0 view .LVU1565
 5259 0006 10B5     		push	{r4, lr}
 5260              		.cfi_def_cfa_offset 8
 5261              		.cfi_offset 4, -8
 5262              		.cfi_offset 14, -4
1367:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5263              		.loc 2 1367 1 view .LVU1566
 5264 0008 0446     		mov	r4, r0
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5265              		.loc 2 1374 3 view .LVU1567
 5266 000a 16D0     		beq	.L488
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5267              		.loc 2 1374 3 is_stmt 1 discriminator 2 view .LVU1568
 5268 000c 0123     		movs	r3, #1
 5269 000e 80F85830 		strb	r3, [r0, #88]
1377:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5270              		.loc 2 1377 3 discriminator 2 view .LVU1569
1377:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5271              		.loc 2 1377 20 is_stmt 0 discriminator 2 view .LVU1570
 5272 0012 0321     		movs	r1, #3
 5273 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5274              	.LVL381:
1380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5275              		.loc 2 1380 3 is_stmt 1 discriminator 2 view .LVU1571
1380:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5276              		.loc 2 1380 6 is_stmt 0 discriminator 2 view .LVU1572
 5277 0018 58B9     		cbnz	r0, .L487
1383:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5278              		.loc 2 1383 5 is_stmt 1 view .LVU1573
1383:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5279              		.loc 2 1383 22 is_stmt 0 view .LVU1574
 5280 001a 2046     		mov	r0, r4
 5281              	.LVL382:
1383:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5282              		.loc 2 1383 22 view .LVU1575
 5283 001c FFF7FEFF 		bl	ADC_Disable
 5284              	.LVL383:
1386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5285              		.loc 2 1386 5 is_stmt 1 view .LVU1576
1386:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5286              		.loc 2 1386 8 is_stmt 0 view .LVU1577
 5287 0020 38B9     		cbnz	r0, .L487
1389:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5288              		.loc 2 1389 7 is_stmt 1 view .LVU1578
 5289 0022 E36D     		ldr	r3, [r4, #92]
 5290 0024 23F48853 		bic	r3, r3, #4352
 5291 0028 23F00103 		bic	r3, r3, #1
 5292 002c 43F00103 		orr	r3, r3, #1
 5293 0030 E365     		str	r3, [r4, #92]
 5294              	.L487:
1396:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5295              		.loc 2 1396 3 view .LVU1579
1396:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5296              		.loc 2 1396 3 view .LVU1580
 5297 0032 0023     		movs	r3, #0
 5298 0034 84F85830 		strb	r3, [r4, #88]
1399:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 5299              		.loc 2 1399 3 view .LVU1581
 5300              	.LVL384:
 5301              	.L486:
1400:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5302              		.loc 2 1400 1 is_stmt 0 view .LVU1582
 5303 0038 10BD     		pop	{r4, pc}
 5304              	.LVL385:
 5305              	.L488:
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5306              		.loc 2 1374 3 view .LVU1583
 5307 003a 0220     		movs	r0, #2
 5308              	.LVL386:
1374:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5309              		.loc 2 1374 3 view .LVU1584
 5310 003c FCE7     		b	.L486
 5311              		.cfi_endproc
 5312              	.LFE330:
 5314              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 5315              		.align	1
 5316              		.global	HAL_ADC_Stop_IT
 5317              		.syntax unified
 5318              		.thumb
 5319              		.thumb_func
 5320              		.fpu fpv4-sp-d16
 5322              	HAL_ADC_Stop_IT:
 5323              	.LVL387:
 5324              	.LFB334:
1952:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5325              		.loc 2 1952 1 is_stmt 1 view -0
 5326              		.cfi_startproc
 5327              		@ args = 0, pretend = 0, frame = 0
 5328              		@ frame_needed = 0, uses_anonymous_args = 0
1953:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5329              		.loc 2 1953 3 view .LVU1586
1956:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5330              		.loc 2 1956 3 view .LVU1587
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5331              		.loc 2 1959 3 view .LVU1588
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5332              		.loc 2 1959 3 view .LVU1589
 5333 0000 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 5334 0004 012B     		cmp	r3, #1
1952:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5335              		.loc 2 1952 1 is_stmt 0 view .LVU1590
 5336 0006 10B5     		push	{r4, lr}
 5337              		.cfi_def_cfa_offset 8
 5338              		.cfi_offset 4, -8
 5339              		.cfi_offset 14, -4
1952:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5340              		.loc 2 1952 1 view .LVU1591
 5341 0008 0446     		mov	r4, r0
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5342              		.loc 2 1959 3 view .LVU1592
 5343 000a 1BD0     		beq	.L492
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5344              		.loc 2 1959 3 is_stmt 1 discriminator 2 view .LVU1593
 5345 000c 0123     		movs	r3, #1
 5346 000e 80F85830 		strb	r3, [r0, #88]
1962:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5347              		.loc 2 1962 3 discriminator 2 view .LVU1594
1962:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5348              		.loc 2 1962 20 is_stmt 0 discriminator 2 view .LVU1595
 5349 0012 0321     		movs	r1, #3
 5350 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5351              	.LVL388:
1965:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5352              		.loc 2 1965 3 is_stmt 1 discriminator 2 view .LVU1596
1965:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5353              		.loc 2 1965 6 is_stmt 0 discriminator 2 view .LVU1597
 5354 0018 80B9     		cbnz	r0, .L491
1969:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5355              		.loc 2 1969 5 is_stmt 1 view .LVU1598
 5356 001a 2268     		ldr	r2, [r4]
 5357 001c 5368     		ldr	r3, [r2, #4]
 5358 001e 23F01C03 		bic	r3, r3, #28
 5359 0022 5360     		str	r3, [r2, #4]
1972:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5360              		.loc 2 1972 5 view .LVU1599
1972:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5361              		.loc 2 1972 22 is_stmt 0 view .LVU1600
 5362 0024 2046     		mov	r0, r4
 5363              	.LVL389:
1972:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5364              		.loc 2 1972 22 view .LVU1601
 5365 0026 FFF7FEFF 		bl	ADC_Disable
 5366              	.LVL390:
1975:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5367              		.loc 2 1975 5 is_stmt 1 view .LVU1602
1975:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5368              		.loc 2 1975 8 is_stmt 0 view .LVU1603
 5369 002a 38B9     		cbnz	r0, .L491
1978:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5370              		.loc 2 1978 7 is_stmt 1 view .LVU1604
 5371 002c E36D     		ldr	r3, [r4, #92]
 5372 002e 23F48853 		bic	r3, r3, #4352
 5373 0032 23F00103 		bic	r3, r3, #1
 5374 0036 43F00103 		orr	r3, r3, #1
 5375 003a E365     		str	r3, [r4, #92]
 5376              	.L491:
1985:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5377              		.loc 2 1985 3 view .LVU1605
1985:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5378              		.loc 2 1985 3 view .LVU1606
 5379 003c 0023     		movs	r3, #0
 5380 003e 84F85830 		strb	r3, [r4, #88]
1988:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 5381              		.loc 2 1988 3 view .LVU1607
 5382              	.LVL391:
 5383              	.L490:
1989:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5384              		.loc 2 1989 1 is_stmt 0 view .LVU1608
 5385 0042 10BD     		pop	{r4, pc}
 5386              	.LVL392:
 5387              	.L492:
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5388              		.loc 2 1959 3 view .LVU1609
 5389 0044 0220     		movs	r0, #2
 5390              	.LVL393:
1959:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5391              		.loc 2 1959 3 view .LVU1610
 5392 0046 FCE7     		b	.L490
 5393              		.cfi_endproc
 5394              	.LFE334:
 5396              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 5397              		.align	1
 5398              		.global	HAL_ADC_Stop_DMA
 5399              		.syntax unified
 5400              		.thumb
 5401              		.thumb_func
 5402              		.fpu fpv4-sp-d16
 5404              	HAL_ADC_Stop_DMA:
 5405              	.LVL394:
 5406              	.LFB336:
2146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5407              		.loc 2 2146 1 is_stmt 1 view -0
 5408              		.cfi_startproc
 5409              		@ args = 0, pretend = 0, frame = 0
 5410              		@ frame_needed = 0, uses_anonymous_args = 0
2147:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5411              		.loc 2 2147 3 view .LVU1612
2150:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5412              		.loc 2 2150 3 view .LVU1613
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5413              		.loc 2 2153 3 view .LVU1614
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5414              		.loc 2 2153 3 view .LVU1615
2146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5415              		.loc 2 2146 1 is_stmt 0 view .LVU1616
 5416 0000 38B5     		push	{r3, r4, r5, lr}
 5417              		.cfi_def_cfa_offset 16
 5418              		.cfi_offset 3, -16
 5419              		.cfi_offset 4, -12
 5420              		.cfi_offset 5, -8
 5421              		.cfi_offset 14, -4
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5422              		.loc 2 2153 3 view .LVU1617
 5423 0002 90F85830 		ldrb	r3, [r0, #88]	@ zero_extendqisi2
 5424 0006 012B     		cmp	r3, #1
2146:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5425              		.loc 2 2146 1 view .LVU1618
 5426 0008 0446     		mov	r4, r0
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5427              		.loc 2 2153 3 view .LVU1619
 5428 000a 35D0     		beq	.L499
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5429              		.loc 2 2153 3 is_stmt 1 discriminator 2 view .LVU1620
 5430 000c 0123     		movs	r3, #1
 5431 000e 80F85830 		strb	r3, [r0, #88]
2156:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5432              		.loc 2 2156 3 discriminator 2 view .LVU1621
2156:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5433              		.loc 2 2156 20 is_stmt 0 discriminator 2 view .LVU1622
 5434 0012 0321     		movs	r1, #3
 5435 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5436              	.LVL395:
2159:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5437              		.loc 2 2159 3 is_stmt 1 discriminator 2 view .LVU1623
2159:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****   {
 5438              		.loc 2 2159 6 is_stmt 0 discriminator 2 view .LVU1624
 5439 0018 0546     		mov	r5, r0
 5440 001a E0B9     		cbnz	r0, .L495
2162:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5441              		.loc 2 2162 5 is_stmt 1 view .LVU1625
 5442 001c 2268     		ldr	r2, [r4]
2166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5443              		.loc 2 2166 13 is_stmt 0 view .LVU1626
 5444 001e 606D     		ldr	r0, [r4, #84]
 5445              	.LVL396:
2162:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5446              		.loc 2 2162 5 view .LVU1627
 5447 0020 D368     		ldr	r3, [r2, #12]
 5448 0022 23F00103 		bic	r3, r3, #1
 5449 0026 D360     		str	r3, [r2, #12]
2166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5450              		.loc 2 2166 5 is_stmt 1 view .LVU1628
2166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5451              		.loc 2 2166 25 is_stmt 0 view .LVU1629
 5452 0028 90F82530 		ldrb	r3, [r0, #37]	@ zero_extendqisi2
2166:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5453              		.loc 2 2166 8 view .LVU1630
 5454 002c 022B     		cmp	r3, #2
 5455 002e 07D1     		bne	.L496
2168:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5456              		.loc 2 2168 7 is_stmt 1 view .LVU1631
2168:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5457              		.loc 2 2168 24 is_stmt 0 view .LVU1632
 5458 0030 FFF7FEFF 		bl	HAL_DMA_Abort
 5459              	.LVL397:
2171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 5460              		.loc 2 2171 7 is_stmt 1 view .LVU1633
2171:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       {
 5461              		.loc 2 2171 10 is_stmt 0 view .LVU1634
 5462 0034 0546     		mov	r5, r0
 5463 0036 18B1     		cbz	r0, .L496
2174:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****       }
 5464              		.loc 2 2174 9 is_stmt 1 view .LVU1635
 5465 0038 E36D     		ldr	r3, [r4, #92]
 5466 003a 43F04003 		orr	r3, r3, #64
 5467 003e E365     		str	r3, [r4, #92]
 5468              	.LVL398:
 5469              	.L496:
2179:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5470              		.loc 2 2179 5 view .LVU1636
 5471 0040 2268     		ldr	r2, [r4]
 5472 0042 5368     		ldr	r3, [r2, #4]
 5473 0044 23F01003 		bic	r3, r3, #16
 5474 0048 5360     		str	r3, [r2, #4]
2184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5475              		.loc 2 2184 5 view .LVU1637
2186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5476              		.loc 2 2186 24 is_stmt 0 view .LVU1638
 5477 004a 2046     		mov	r0, r4
2184:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5478              		.loc 2 2184 8 view .LVU1639
 5479 004c 45B9     		cbnz	r5, .L497
 5480              	.LVL399:
2186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5481              		.loc 2 2186 7 is_stmt 1 view .LVU1640
2186:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5482              		.loc 2 2186 24 is_stmt 0 view .LVU1641
 5483 004e FFF7FEFF 		bl	ADC_Disable
 5484              	.LVL400:
2194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5485              		.loc 2 2194 5 is_stmt 1 view .LVU1642
2194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5486              		.loc 2 2194 8 is_stmt 0 view .LVU1643
 5487 0052 0546     		mov	r5, r0
 5488 0054 38B1     		cbz	r0, .L498
 5489              	.LVL401:
 5490              	.L495:
2205:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5491              		.loc 2 2205 3 is_stmt 1 view .LVU1644
2205:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5492              		.loc 2 2205 3 view .LVU1645
 5493 0056 0023     		movs	r3, #0
 5494 0058 84F85830 		strb	r3, [r4, #88]
2208:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** }
 5495              		.loc 2 2208 3 view .LVU1646
 5496              	.LVL402:
 5497              	.L494:
2209:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5498              		.loc 2 2209 1 is_stmt 0 view .LVU1647
 5499 005c 2846     		mov	r0, r5
 5500 005e 38BD     		pop	{r3, r4, r5, pc}
 5501              	.LVL403:
 5502              	.L497:
2190:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5503              		.loc 2 2190 7 is_stmt 1 view .LVU1648
2190:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     }
 5504              		.loc 2 2190 13 is_stmt 0 view .LVU1649
 5505 0060 FFF7FEFF 		bl	ADC_Disable
 5506              	.LVL404:
2194:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****     {
 5507              		.loc 2 2194 5 is_stmt 1 view .LVU1650
 5508 0064 F7E7     		b	.L495
 5509              	.LVL405:
 5510              	.L498:
2197:../../..\CubeG4\src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5511              		.loc 2 2197 7 view .LVU1651
 5512 0066 E36D     		ldr	r3, [r4, #92]
 5513 0068 23F48853 		bic	r3, r3, #4352
 5514 006c 23F00103 		bic	r3, r3, #1
 5515 0070 43F00103 		orr	r3, r3, #1
 5516 0074 E365     		str	r3, [r4, #92]
 5517 0076 EEE7     		b	.L495
 5518              	.LVL406:
 5519              	.L499:
2153:../../..\CubeG4\src/stm32g4xx_hal_adc.c **** 
 5520              		.loc 2 2153 3 is_stmt 0 view .LVU1652
 5521 0078 0225     		movs	r5, #2
 5522 007a EFE7     		b	.L494
 5523              		.cfi_endproc
 5524              	.LFE336:
 5526              		.text
 5527              	.Letext0:
 5528              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\
 5529              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\8 2018-q4-major\\arm-none-eabi\\include\
 5530              		.file 6 "../../..\\CubeG4\\include/core_cm4.h"
 5531              		.file 7 "../../..\\CubeG4\\include/system_stm32g4xx.h"
 5532              		.file 8 "../../..\\CubeG4\\include/stm32g431xx.h"
 5533              		.file 9 "../../..\\CubeG4\\include/stm32g4xx.h"
 5534              		.file 10 "../../..\\CubeG4\\include/stm32g4xx_hal_def.h"
 5535              		.file 11 "../../..\\CubeG4\\include/stm32g4xx_hal_dma.h"
 5536              		.file 12 "../../..\\CubeG4\\include/stm32g4xx_hal_adc.h"
 5537              		.file 13 "../../..\\CubeG4\\include/stm32g4xx_hal_flash.h"
 5538              		.file 14 "../../..\\CubeG4\\include/stm32g4xx_hal.h"
 5539              		.file 15 "../../..\\CubeG4\\include/stm32g4xx_hal_adc_ex.h"
